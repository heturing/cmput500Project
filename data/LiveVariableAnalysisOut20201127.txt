********************
Class Name: BSTIterative, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new BSTIterative..................	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<BSTIterative: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z0 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<BSTIterative: boolean find(int)>(4)	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 == 0 goto $z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("4 is not yet present in BST")	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 $z1 ]	[exit: r1 ]
$z8 = virtualinvoke r1.<BSTIterative: boolean find(int)>(2)	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 $z8 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("2 should be present in BST")	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 ]	[exit: r1 ]
$z2 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z2 ]	[exit: r1 ]
$z7 = virtualinvoke r1.<BSTIterative: boolean find(int)>(2)	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 == 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z7 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("2 was just deleted from BST")	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 ]	[exit: r1 ]
$z3 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 $z3 ]	[exit: r1 ]
$z6 = virtualinvoke r1.<BSTIterative: boolean find(int)>(1)	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 == 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 $z6 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Since 1 was not present so find deleting would do no change")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(40)	[entry: r1 ]	[exit: r1 ]
$z4 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z4 ]	[exit: r1 ]
$z5 = virtualinvoke r1.<BSTIterative: boolean find(int)>(40)	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z5 ]	[exit: r1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("40 was inserted but not found")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: add, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
r8 = null...............................	[entry: i0 r0 ]	[exit: i0 r8 r0 ]
r9 = r0.<BSTIterative: BSTIterative$Node root>	[entry: i0 r8 r0 ]	[exit: i0 r0 r8 r9 ]
b3 = -1.................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
if r9 == null goto $r1 = new BSTIterative$Node	[entry: i0 r0 b3 r8 r9 ]	[exit: r0 i0 r9 b3 r8 ]
$i1 = r9.<BSTIterative$Node: int data>..	[entry: r0 i0 r9 ]	[exit: r0 r9 $i1 i0 ]
if $i1 <= i0 goto $i2 = r9.<BSTIterative$Node: int data>	[entry: r0 r9 $i1 i0 ]	[exit: r0 i0 r9 ]
r8 = r9.................................	[entry: i0 r0 r9 ]	[exit: i0 r0 r8 ]
r9 = r8.<BSTIterative$Node: BSTIterative$Node left>	[entry: i0 r0 r8 ]	[exit: i0 r0 r8 r9 ]
b3 = 0..................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
goto [?= (branch)]......................	[entry: i0 r0 b3 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
$i2 = r9.<BSTIterative$Node: int data>..	[entry: r0 i0 r9 ]	[exit: r0 r9 $i2 i0 ]
if $i2 >= i0 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r9 $i2 i0 ]	[exit: i0 r0 r9 ]
r8 = r9.................................	[entry: i0 r0 r9 ]	[exit: i0 r0 r8 ]
r9 = r8.<BSTIterative$Node: BSTIterative$Node right>	[entry: i0 r0 r8 ]	[exit: i0 r0 r8 r9 ]
b3 = 1..................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
goto [?= (branch)]......................	[entry: i0 r0 b3 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r4 i0 ]
$r3 = new java.lang.StringBuilder.......	[entry: $r4 i0 ]	[exit: $r4 i0 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: $r4 i0 $r3 ]	[exit: $r4 i0 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r4 i0 $r3 ]	[exit: $r4 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already present in BST.")	[entry: $r4 $r5 ]	[exit: $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r4 $r6 ]	[exit: $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: $r7 $r4 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
$r1 = new BSTIterative$Node.............	[entry: r0 b3 r8 i0 ]	[exit: r0 b3 r8 i0 $r1 ]
specialinvoke $r1.<BSTIterative$Node: void <init>(int)>(i0)	[entry: r0 b3 r8 i0 $r1 ]	[exit: r0 b3 r8 $r1 ]
r2 = $r1................................	[entry: r0 b3 r8 $r1 ]	[exit: r0 r2 b3 r8 ]
if r8 != null goto (branch).............	[entry: r0 r2 b3 r8 ]	[exit: r0 r2 r8 b3 ]
r0.<BSTIterative: BSTIterative$Node root> = r2	[entry: r0 r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
if b3 != 0 goto r8.<BSTIterative$Node: BSTIterative$Node right> = r2	[entry: r8 r2 b3 ]	[exit: r8 r2 ]
r8.<BSTIterative$Node: BSTIterative$Node left> = r2	[entry: r8 r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
r8.<BSTIterative$Node: BSTIterative$Node right> = r2	[entry: r8 r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: remove, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
r13 = null..............................	[entry: i2 r0 ]	[exit: r13 i2 r0 ]
r14 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r13 i2 r0 ]	[exit: r0 r13 i2 r14 ]
b5 = -1.................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
if r14 == null goto (branch)............	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 r14 i2 ]
$i3 = r14.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 r14 b5 r13 $i3 i2 ]
if $i3 != i2 goto $i4 = r14.<BSTIterative$Node: int data>	[entry: r0 r14 b5 r13 $i3 i2 ]	[exit: r0 i2 r14 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 ]
$i4 = r14.<BSTIterative$Node: int data>.	[entry: r0 i2 r14 ]	[exit: r0 r14 $i4 i2 ]
if $i4 <= i2 goto r13 = r14.............	[entry: r0 r14 $i4 i2 ]	[exit: r0 i2 r14 ]
r13 = r14...............................	[entry: r0 i2 r14 ]	[exit: r0 i2 r13 ]
r14 = r13.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 i2 r13 ]	[exit: r0 r13 i2 r14 ]
b5 = 0..................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
r13 = r14...............................	[entry: r0 i2 r14 ]	[exit: r0 i2 r13 ]
r14 = r13.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 i2 r13 ]	[exit: r0 r13 i2 r14 ]
b5 = 1..................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
if r14 == null goto return..............	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 ]
$r1 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r1 ]
if $r1 != null goto $r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r1 ]	[exit: r0 b5 r13 r14 ]
$r12 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r12 ]
if $r12 != null goto $r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r12 ]	[exit: r0 b5 r13 r14 ]
r15 = null..............................	[entry: r0 b5 r13 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r2 ]
if $r2 != null goto $r3 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 $r2 ]	[exit: r0 b5 r13 r14 ]
r15 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
r14.<BSTIterative$Node: BSTIterative$Node left> = null	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r3 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r3 ]
if $r3 != null goto $r4 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r3 ]	[exit: r0 b5 r13 r14 ]
r15 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
r14.<BSTIterative$Node: BSTIterative$Node right> = null	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r4 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r4 ]
$r5 = $r4.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 $r4 ]	[exit: r0 b5 r13 r14 $r5 ]
if $r5 != null goto r16 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r5 ]	[exit: r0 b5 r13 r14 ]
$r9 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r9 ]
$i1 = $r9.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 r14 $r9 ]	[exit: r0 b5 r13 r14 $i1 ]
r14.<BSTIterative$Node: int data> = $i1.	[entry: r0 b5 r13 r14 $i1 ]	[exit: r0 b5 r13 r14 ]
r15 = r14...............................	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
$r10 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 $r10 ]
$r11 = $r10.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 r15 b5 r13 r14 $r10 ]	[exit: r0 r15 b5 r13 r14 $r11 ]
r14.<BSTIterative$Node: BSTIterative$Node right> = $r11	[entry: r0 r15 b5 r13 r14 $r11 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
r16 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r16 r14 ]
$r6 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r16 r14 ]	[exit: r0 b5 r13 r16 r14 $r6 ]
r17 = $r6.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r16 r14 $r6 ]	[exit: r0 b5 r13 r16 r14 r17 ]
$r7 = r17.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r14 r17 $r7 ]
if $r7 == null goto $i0 = r17.<BSTIterative$Node: int data>	[entry: r0 b5 r13 r16 r14 r17 $r7 ]	[exit: r0 b5 r13 r16 r14 r17 ]
r16 = r17...............................	[entry: r0 b5 r13 r14 r17 ]	[exit: r0 b5 r13 r14 r16 ]
r17 = r16.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 r16 ]	[exit: r0 b5 r13 r16 r14 r17 ]
goto [?= $r7 = r17.<BSTIterative$Node: BSTIterative$Node left>]	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r14 r17 ]
$i0 = r17.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r17 r14 $i0 ]
r14.<BSTIterative$Node: int data> = $i0.	[entry: r0 b5 r13 r16 r17 r14 $i0 ]	[exit: r0 b5 r13 r14 r16 r17 ]
$r8 = r17.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 r16 r17 ]	[exit: r0 b5 r13 r14 r16 $r8 ]
r16.<BSTIterative$Node: BSTIterative$Node left> = $r8	[entry: r0 b5 r13 r14 r16 $r8 ]	[exit: r0 b5 r13 r14 ]
r15 = r14...............................	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
if r13 != null goto (branch)............	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 r13 b5 ]
r0.<BSTIterative: BSTIterative$Node root> = r15	[entry: r0 r15 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
if b5 != 0 goto r13.<BSTIterative$Node: BSTIterative$Node right> = r15	[entry: r13 r15 b5 ]	[exit: r13 r15 ]
r13.<BSTIterative$Node: BSTIterative$Node left> = r15	[entry: r13 r15 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
r13.<BSTIterative$Node: BSTIterative$Node right> = r15	[entry: r13 r15 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: inorder, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
$r1 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r0 ]	[exit: r0 $r1 ]
if $r1 != null goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 $r1 ]	[exit: r0 ]
$r13 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r13 ]
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("This BST is empty.")	[entry: $r13 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Inorder traversal of this tree is:")	[entry: r0 $r2 ]	[exit: r0 ]
$r3 = new java.util.Stack...............	[entry: r0 ]	[exit: r0 $r3 ]
specialinvoke $r3.<java.util.Stack: void <init>()>()	[entry: r0 $r3 ]	[exit: r0 $r3 ]
r4 = $r3................................	[entry: r0 $r3 ]	[exit: r4 r0 ]
r14 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r4 r0 ]	[exit: r4 r14 ]
if r14 != null goto (branch)............	[entry: r4 r14 ]	[exit: r14 r4 ]
$z0 = virtualinvoke r4.<java.util.Stack: boolean empty()>()	[entry: r14 r4 ]	[exit: r4 r14 $z0 ]
if $z0 != 0 goto $r12 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r14 $z0 ]	[exit: r4 r14 ]
if r14 == null goto $r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object pop()>()	[entry: r4 r14 ]	[exit: r4 r14 ]
virtualinvoke r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r14)	[entry: r14 r4 ]	[exit: r4 r14 ]
r14 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r4 r14 ]	[exit: r4 r14 ]
goto [?= (branch)]......................	[entry: r4 r14 ]	[exit: r4 r14 ]
$r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object pop()>()	[entry: r4 ]	[exit: r4 $r5 ]
r15 = (BSTIterative$Node) $r5...........	[entry: r4 $r5 ]	[exit: r4 r15 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r15 ]	[exit: r4 $r7 r15 ]
$r6 = new java.lang.StringBuilder.......	[entry: r4 $r7 r15 ]	[exit: r4 $r7 r15 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r4 $r7 r15 $r6 ]	[exit: r4 $r7 $r6 r15 ]
$i0 = r15.<BSTIterative$Node: int data>.	[entry: r4 $r7 $r6 r15 ]	[exit: r4 r15 $r7 $i0 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r4 r15 $r7 $i0 $r6 ]	[exit: r4 r15 $r7 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r4 r15 $r7 $r8 ]	[exit: r4 r15 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r4 r15 $r7 $r9 ]	[exit: r4 r15 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>($r10)	[entry: r4 r15 $r10 $r7 ]	[exit: r4 r15 ]
r14 = r15.<BSTIterative$Node: BSTIterative$Node right>	[entry: r4 r15 ]	[exit: r4 r14 ]
goto [?= (branch)]......................	[entry: r4 r14 ]	[exit: r4 r14 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println()>()	[entry: $r12 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: find, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
r11 = r0.<BSTIterative: BSTIterative$Node root>	[entry: i0 r0 ]	[exit: i0 r11 ]
if r11 == null goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r11 ]	[exit: i0 r11 ]
$i1 = r11.<BSTIterative$Node: int data>.	[entry: i0 r11 ]	[exit: r11 $i1 i0 ]
if $i1 <= i0 goto $i2 = r11.<BSTIterative$Node: int data>	[entry: r11 $i1 i0 ]	[exit: i0 r11 ]
r11 = r11.<BSTIterative$Node: BSTIterative$Node left>	[entry: i0 r11 ]	[exit: i0 r11 ]
goto [?= (branch)]......................	[entry: i0 r11 ]	[exit: i0 r11 ]
$i2 = r11.<BSTIterative$Node: int data>.	[entry: i0 r11 ]	[exit: r11 $i2 i0 ]
if $i2 >= i0 goto $r7 = <java.lang.System: java.io.PrintStream out>	[entry: r11 $i2 i0 ]	[exit: i0 r11 ]
r11 = r11.<BSTIterative$Node: BSTIterative$Node right>	[entry: i0 r11 ]	[exit: i0 r11 ]
goto [?= (branch)]......................	[entry: i0 r11 ]	[exit: i0 r11 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r7 i0 ]
$r6 = new java.lang.StringBuilder.......	[entry: $r7 i0 ]	[exit: $r7 i0 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: $r7 i0 $r6 ]	[exit: $r7 i0 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r7 i0 $r6 ]	[exit: $r7 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is present in the BST.")	[entry: $r7 $r8 ]	[exit: $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r7 $r9 ]	[exit: $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: $r10 $r7 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r2 i0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r2 i0 ]	[exit: $r2 i0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r2 i0 $r1 ]	[exit: $r2 i0 $r1 ]
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r2 i0 $r1 ]	[exit: $r2 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.")	[entry: $r2 $r3 ]	[exit: $r2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 $r4 ]	[exit: $r5 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5)	[entry: $r5 $r2 ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: MinimizingLateness.MinimizingLateness, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.io.BufferedReader........	[entry: ]	[exit: $r0 ]
$r1 = new java.io.FileReader............	[entry: $r0 ]	[exit: $r0 $r1 ]
specialinvoke $r1.<java.io.FileReader: void <init>(java.lang.String)>("MinimizingLateness/lateness_data.txt")	[entry: $r0 $r1 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
r16 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r2 ]	[exit: r2 r16 ]
if r16 == null goto virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 r16 ]	[exit: r2 r16 ]
$z0 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>()	[entry: r2 r16 ]	[exit: r2 r16 $z0 ]
if $z0 == 0 goto i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16)	[entry: r2 r16 $z0 ]	[exit: r2 r16 ]
virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16)	[entry: r2 r16 ]	[exit: r2 i0 ]
r3 = newarray (MinimizingLateness.MinimizingLateness$Schedule)[i0]	[entry: r2 i0 ]	[exit: r3 i0 r2 ]
i10 = 0.................................	[entry: r3 i0 r2 ]	[exit: r3 i0 i10 r2 ]
$r4 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r3 i0 i10 r2 ]	[exit: r2 r3 i0 i10 $r4 ]
r17 = $r4...............................	[entry: r2 r3 i0 i10 $r4 ]	[exit: r2 r3 i0 i10 r17 $r4 ]
if $r4 == null goto i11 = 0.............	[entry: r2 r3 i0 i10 r17 $r4 ]	[exit: r2 r3 i0 i10 r17 ]
$r10 = new java.util.StringTokenizer....	[entry: i0 r2 r3 i10 r17 ]	[exit: i0 r2 r3 i10 r17 $r10 ]
specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r17, " ")	[entry: i0 r2 r3 i10 r17 $r10 ]	[exit: i0 r2 r3 i10 $r10 ]
r11 = $r10..............................	[entry: i0 r2 r3 i10 $r10 ]	[exit: i0 r2 r3 i10 r11 ]
$r12 = new MinimizingLateness.MinimizingLateness$Schedule	[entry: i0 r2 r3 i10 r11 ]	[exit: i0 r2 r3 i10 $r12 r11 ]
$r13 = virtualinvoke r11.<java.util.StringTokenizer: java.lang.String nextToken()>()	[entry: i0 r2 r3 i10 $r12 r11 ]	[exit: i0 r2 r3 i10 $r12 r11 $r13 ]
$i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13)	[entry: i0 r2 r3 i10 $r12 r11 $r13 ]	[exit: i0 r2 r3 i10 $i8 $r12 r11 ]
$r14 = virtualinvoke r11.<java.util.StringTokenizer: java.lang.String nextToken()>()	[entry: i0 r2 r3 i10 $i8 $r12 r11 ]	[exit: i0 r2 r3 i10 $i8 $r12 $r14 ]
$i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14)	[entry: i0 r2 r3 i10 $i8 $r12 $r14 ]	[exit: i0 r2 r3 i10 $i8 $i9 $r12 ]
specialinvoke $r12.<MinimizingLateness.MinimizingLateness$Schedule: void <init>(int,int)>($i8, $i9)	[entry: i0 r2 r3 i10 $i8 $i9 $r12 ]	[exit: i0 r2 r3 i10 $r12 ]
r3[i10] = $r12..........................	[entry: i0 r2 r3 i10 $r12 ]	[exit: r3 i0 r2 i10 ]
i10 = i10 + 1...........................	[entry: r3 i0 r2 i10 ]	[exit: r3 i0 i10 r2 ]
goto [?= $r4 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()]	[entry: r3 i0 i10 r2 ]	[exit: r3 i0 i10 r2 ]
i11 = 0.................................	[entry: r2 r3 i0 ]	[exit: r2 i11 r3 i0 ]
i12 = 0.................................	[entry: r2 i11 r3 i0 ]	[exit: r2 i12 i11 r3 i0 ]
i13 = 0.................................	[entry: r2 i12 i11 r3 i0 ]	[exit: r2 i12 i11 r3 i13 i0 ]
$i1 = i0 - 1............................	[entry: r2 i12 i11 r3 i13 i0 ]	[exit: r2 i0 i12 i11 r3 i13 $i1 ]
if i13 >= $i1 goto virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 i0 i12 i11 r3 i13 $i1 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r5 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 $r5 i11 ]
$r5.<MinimizingLateness.MinimizingLateness$Schedule: int s> = i11	[entry: r2 i0 i12 r3 i13 $r5 i11 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r7 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 $r7 i11 r3 i13 ]
$r6 = r3[i13]...........................	[entry: r2 i0 i12 $r7 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 $r7 i11 $r6 ]
$i2 = $r6.<MinimizingLateness.MinimizingLateness$Schedule: int t>	[entry: r2 i0 i12 r3 i13 $r7 i11 $r6 ]	[exit: r2 i0 i12 r3 i13 $r7 i11 $i2 ]
$i3 = i11 + $i2.........................	[entry: r2 i0 i12 r3 i13 $r7 i11 $i2 ]	[exit: r2 i0 i12 i11 r3 i13 $r7 $i3 ]
$r7.<MinimizingLateness.MinimizingLateness$Schedule: int f> = $i3	[entry: r2 i0 i12 i11 r3 i13 $r7 $i3 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r8 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 i11 $r8 ]
$i4 = $r8.<MinimizingLateness.MinimizingLateness$Schedule: int t>	[entry: r2 i0 i12 r3 i13 i11 $r8 ]	[exit: r2 i0 i12 r3 i13 i11 $i4 ]
i11 = i11 + $i4.........................	[entry: r2 i0 i12 r3 i13 i11 $i4 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r9 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 r3 i0 i13 i12 i11 $r9 ]
$i5 = $r9.<MinimizingLateness.MinimizingLateness$Schedule: int d>	[entry: r2 r3 i0 i13 i12 i11 $r9 ]	[exit: r2 r3 i0 i13 i12 i11 $i5 ]
$i6 = i11 - $i5.........................	[entry: r2 r3 i0 i13 i12 i11 $i5 ]	[exit: r2 i11 r3 i0 i13 i12 $i6 ]
$i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6)	[entry: r2 i11 r3 i0 i13 i12 $i6 ]	[exit: r2 i11 r3 i0 i13 i12 $i7 ]
i12 = i12 + $i7.........................	[entry: r2 i11 r3 i0 i13 i12 $i7 ]	[exit: r2 i12 i11 r3 i0 i13 ]
i13 = i13 + 1...........................	[entry: r2 i12 i11 r3 i0 i13 ]	[exit: r2 i12 i11 r3 i13 i0 ]
goto [?= $i1 = i0 - 1]..................	[entry: r2 i12 i11 r3 i13 i0 ]	[exit: r2 i12 i11 r3 i13 i0 ]
virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: MinimizingLateness.MinimizingLateness, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.io.BufferedReader........	[entry: ]	[exit: $r0 ]
$r1 = new java.io.FileReader............	[entry: $r0 ]	[exit: $r0 $r1 ]
specialinvoke $r1.<java.io.FileReader: void <init>(java.lang.String)>("MinimizingLateness/lateness_data.txt")	[entry: $r0 $r1 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
r16 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r2 ]	[exit: r2 r16 ]
if r16 == null goto virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 r16 ]	[exit: r2 r16 ]
$z0 = virtualinvoke r16.<java.lang.String: boolean isEmpty()>()	[entry: r2 r16 ]	[exit: r2 r16 $z0 ]
if $z0 == 0 goto i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16)	[entry: r2 r16 $z0 ]	[exit: r2 r16 ]
virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r16)	[entry: r2 r16 ]	[exit: r2 i0 ]
r3 = newarray (MinimizingLateness.MinimizingLateness$Schedule)[i0]	[entry: r2 i0 ]	[exit: r3 i0 r2 ]
i10 = 0.................................	[entry: r3 i0 r2 ]	[exit: r3 i0 i10 r2 ]
$r4 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r3 i0 i10 r2 ]	[exit: r2 r3 i0 i10 $r4 ]
r17 = $r4...............................	[entry: r2 r3 i0 i10 $r4 ]	[exit: r2 r3 i0 i10 r17 $r4 ]
if $r4 == null goto i11 = 0.............	[entry: r2 r3 i0 i10 r17 $r4 ]	[exit: r2 r3 i0 i10 r17 ]
$r10 = new java.util.StringTokenizer....	[entry: i0 r2 r3 i10 r17 ]	[exit: i0 r2 r3 i10 r17 $r10 ]
specialinvoke $r10.<java.util.StringTokenizer: void <init>(java.lang.String,java.lang.String)>(r17, " ")	[entry: i0 r2 r3 i10 r17 $r10 ]	[exit: i0 r2 r3 i10 $r10 ]
r11 = $r10..............................	[entry: i0 r2 r3 i10 $r10 ]	[exit: i0 r2 r3 i10 r11 ]
$r12 = new MinimizingLateness.MinimizingLateness$Schedule	[entry: i0 r2 r3 i10 r11 ]	[exit: i0 r2 r3 i10 $r12 r11 ]
$r13 = virtualinvoke r11.<java.util.StringTokenizer: java.lang.String nextToken()>()	[entry: i0 r2 r3 i10 $r12 r11 ]	[exit: i0 r2 r3 i10 $r12 r11 $r13 ]
$i8 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r13)	[entry: i0 r2 r3 i10 $r12 r11 $r13 ]	[exit: i0 r2 r3 i10 $i8 $r12 r11 ]
$r14 = virtualinvoke r11.<java.util.StringTokenizer: java.lang.String nextToken()>()	[entry: i0 r2 r3 i10 $i8 $r12 r11 ]	[exit: i0 r2 r3 i10 $i8 $r12 $r14 ]
$i9 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r14)	[entry: i0 r2 r3 i10 $i8 $r12 $r14 ]	[exit: i0 r2 r3 i10 $i8 $i9 $r12 ]
specialinvoke $r12.<MinimizingLateness.MinimizingLateness$Schedule: void <init>(int,int)>($i8, $i9)	[entry: i0 r2 r3 i10 $i8 $i9 $r12 ]	[exit: i0 r2 r3 i10 $r12 ]
r3[i10] = $r12..........................	[entry: i0 r2 r3 i10 $r12 ]	[exit: r3 i0 r2 i10 ]
i10 = i10 + 1...........................	[entry: r3 i0 r2 i10 ]	[exit: r3 i0 i10 r2 ]
goto [?= $r4 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>()]	[entry: r3 i0 i10 r2 ]	[exit: r3 i0 i10 r2 ]
i11 = 0.................................	[entry: r2 r3 i0 ]	[exit: r2 i11 r3 i0 ]
i12 = 0.................................	[entry: r2 i11 r3 i0 ]	[exit: r2 i12 i11 r3 i0 ]
i13 = 0.................................	[entry: r2 i12 i11 r3 i0 ]	[exit: r2 i12 i11 r3 i13 i0 ]
$i1 = i0 - 1............................	[entry: r2 i12 i11 r3 i13 i0 ]	[exit: r2 i0 i12 i11 r3 i13 $i1 ]
if i13 >= $i1 goto virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 i0 i12 i11 r3 i13 $i1 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r5 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 $r5 i11 ]
$r5.<MinimizingLateness.MinimizingLateness$Schedule: int s> = i11	[entry: r2 i0 i12 r3 i13 $r5 i11 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r7 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 $r7 i11 r3 i13 ]
$r6 = r3[i13]...........................	[entry: r2 i0 i12 $r7 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 $r7 i11 $r6 ]
$i2 = $r6.<MinimizingLateness.MinimizingLateness$Schedule: int t>	[entry: r2 i0 i12 r3 i13 $r7 i11 $r6 ]	[exit: r2 i0 i12 r3 i13 $r7 i11 $i2 ]
$i3 = i11 + $i2.........................	[entry: r2 i0 i12 r3 i13 $r7 i11 $i2 ]	[exit: r2 i0 i12 i11 r3 i13 $r7 $i3 ]
$r7.<MinimizingLateness.MinimizingLateness$Schedule: int f> = $i3	[entry: r2 i0 i12 i11 r3 i13 $r7 $i3 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r8 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 i0 i12 r3 i13 i11 $r8 ]
$i4 = $r8.<MinimizingLateness.MinimizingLateness$Schedule: int t>	[entry: r2 i0 i12 r3 i13 i11 $r8 ]	[exit: r2 i0 i12 r3 i13 i11 $i4 ]
i11 = i11 + $i4.........................	[entry: r2 i0 i12 r3 i13 i11 $i4 ]	[exit: r2 i0 i12 i11 r3 i13 ]
$r9 = r3[i13]...........................	[entry: r2 i0 i12 i11 r3 i13 ]	[exit: r2 r3 i0 i13 i12 i11 $r9 ]
$i5 = $r9.<MinimizingLateness.MinimizingLateness$Schedule: int d>	[entry: r2 r3 i0 i13 i12 i11 $r9 ]	[exit: r2 r3 i0 i13 i12 i11 $i5 ]
$i6 = i11 - $i5.........................	[entry: r2 r3 i0 i13 i12 i11 $i5 ]	[exit: r2 i11 r3 i0 i13 i12 $i6 ]
$i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6)	[entry: r2 i11 r3 i0 i13 i12 $i6 ]	[exit: r2 i11 r3 i0 i13 i12 $i7 ]
i12 = i12 + $i7.........................	[entry: r2 i11 r3 i0 i13 i12 $i7 ]	[exit: r2 i12 i11 r3 i0 i13 ]
i13 = i13 + 1...........................	[entry: r2 i12 i11 r3 i0 i13 ]	[exit: r2 i12 i11 r3 i13 i0 ]
goto [?= $i1 = i0 - 1]..................	[entry: r2 i12 i11 r3 i13 i0 ]	[exit: r2 i12 i11 r3 i13 i0 ]
virtualinvoke r2.<java.io.BufferedReader: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.Caesar, Method Name: encode, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i5 := @parameter1: int..................	[entry: r0 ]	[exit: r0 i5 ]
r10 = ""................................	[entry: r0 i5 ]	[exit: r10 r0 i5 ]
i6 = i5 % 26............................	[entry: r10 r0 i5 ]	[exit: r10 i6 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r10 i6 r0 ]	[exit: r10 i6 r0 i0 ]
i7 = 0..................................	[entry: r10 i6 r0 i0 ]	[exit: r10 i6 r0 i7 i0 ]
if i7 >= i0 goto return r10.............	[entry: r10 i6 r0 i7 i0 ]	[exit: r10 i0 i6 i7 r0 ]
c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7)	[entry: i0 r10 i6 i7 r0 ]	[exit: r0 i0 i7 r10 i6 c8 ]
$z0 = staticinvoke <ciphers.Caesar: boolean IsCapitalLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 i6 c8 ]	[exit: r0 i0 i7 r10 c8 i6 $z0 ]
if $z0 == 0 goto $z1 = staticinvoke <ciphers.Caesar: boolean IsSmallLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 c8 i6 $z0 ]	[exit: r0 i0 i7 r10 c8 i6 ]
$i3 = c8 + i6...........................	[entry: r0 i0 i7 r10 c8 i6 ]	[exit: i6 r0 i0 i7 r10 $i3 ]
c9 = (char) $i3.........................	[entry: i6 r0 i0 i7 r10 $i3 ]	[exit: i6 r0 i0 i7 c9 r10 ]
$r7 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c9 r10 ]	[exit: i6 r0 i0 i7 c9 r10 $r7 ]
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c9 r10 $r7 ]	[exit: i6 r0 i0 i7 c9 r10 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c9 r10 $r7 ]	[exit: i6 r0 i0 i7 $r8 c9 ]
if c9 <= 90 goto $i10 = c9..............	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 c9 ]
$i10 = c9 - 26..........................	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
goto [?= $c4 = (char) $i10].............	[entry: i6 r0 i0 i7 $r8 $i10 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
$i10 = c9...............................	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
$c4 = (char) $i10.......................	[entry: i6 r0 i0 i7 $r8 $i10 ]	[exit: i6 r0 i0 i7 $c4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)	[entry: i6 r0 i0 i7 $c4 $r8 ]	[exit: i6 r0 i0 i7 $r9 ]
r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r9 ]	[exit: r10 i6 r0 i0 i7 ]
goto [?= i7 = i7 + 1]...................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i0 i7 ]
$z1 = staticinvoke <ciphers.Caesar: boolean IsSmallLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 i6 c8 ]	[exit: r0 i0 i7 r10 c8 i6 $z1 ]
if $z1 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 i0 i7 r10 c8 i6 $z1 ]	[exit: r0 i0 i7 r10 c8 i6 ]
$i1 = c8 + i6...........................	[entry: r0 i0 i7 r10 c8 i6 ]	[exit: i6 r0 i0 i7 r10 $i1 ]
c11 = (char) $i1........................	[entry: i6 r0 i0 i7 r10 $i1 ]	[exit: i6 r0 i0 i7 c11 r10 ]
$r4 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c11 r10 ]	[exit: i6 r0 i0 i7 c11 r10 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c11 r10 $r4 ]	[exit: i6 r0 i0 i7 c11 r10 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c11 r10 $r4 ]	[exit: i6 r0 i0 i7 $r5 c11 ]
if c11 <= 122 goto $i12 = c11...........	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 c11 ]
$i12 = c11 - 26.........................	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
goto [?= $c2 = (char) $i12].............	[entry: i6 r0 i0 i7 $r5 $i12 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
$i12 = c11..............................	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
$c2 = (char) $i12.......................	[entry: i6 r0 i0 i7 $r5 $i12 ]	[exit: i6 r0 i0 i7 $c2 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)	[entry: i6 r0 i0 i7 $c2 $r5 ]	[exit: i6 r0 i0 i7 $r6 ]
r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r6 ]	[exit: r10 i6 r0 i0 i7 ]
goto [?= i7 = i7 + 1]...................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i0 i7 ]
$r1 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c8 r10 ]	[exit: i6 r0 i0 i7 c8 r10 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c8 r10 $r1 ]	[exit: i6 r0 i0 i7 c8 r10 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c8 r10 $r1 ]	[exit: i6 r0 i0 i7 c8 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c8)	[entry: i6 r0 i0 i7 c8 $r2 ]	[exit: i6 r0 i0 i7 $r3 ]
r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r3 ]	[exit: r10 i6 r0 i0 i7 ]
i7 = i7 + 1.............................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i7 i0 ]
goto [?= (branch)]......................	[entry: r10 i6 r0 i7 i0 ]	[exit: r10 i6 r0 i7 i0 ]
return r10..............................	[entry: r10 ]	[exit: ]
********************
Class Name: ciphers.Caesar, Method Name: decode, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i5 := @parameter1: int..................	[entry: r0 ]	[exit: r0 i5 ]
r10 = ""................................	[entry: r0 i5 ]	[exit: r10 r0 i5 ]
i6 = i5 % 26............................	[entry: r10 r0 i5 ]	[exit: r10 i6 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r10 i6 r0 ]	[exit: r10 i6 r0 i0 ]
i7 = 0..................................	[entry: r10 i6 r0 i0 ]	[exit: r10 i6 r0 i7 i0 ]
if i7 >= i0 goto return r10.............	[entry: r10 i6 r0 i7 i0 ]	[exit: r10 i0 i6 i7 r0 ]
c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7)	[entry: i0 r10 i6 i7 r0 ]	[exit: r0 i0 i7 r10 i6 c8 ]
$z0 = staticinvoke <ciphers.Caesar: boolean IsCapitalLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 i6 c8 ]	[exit: r0 i0 i7 r10 c8 i6 $z0 ]
if $z0 == 0 goto $z1 = staticinvoke <ciphers.Caesar: boolean IsSmallLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 c8 i6 $z0 ]	[exit: r0 i0 i7 r10 c8 i6 ]
$i3 = c8 - i6...........................	[entry: r0 i0 i7 r10 c8 i6 ]	[exit: i6 r0 i0 i7 r10 $i3 ]
c9 = (char) $i3.........................	[entry: i6 r0 i0 i7 r10 $i3 ]	[exit: i6 r0 i0 i7 c9 r10 ]
$r7 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c9 r10 ]	[exit: i6 r0 i0 i7 c9 r10 $r7 ]
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c9 r10 $r7 ]	[exit: i6 r0 i0 i7 c9 r10 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c9 r10 $r7 ]	[exit: i6 r0 i0 i7 $r8 c9 ]
if c9 >= 65 goto $i10 = c9..............	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 c9 ]
$i10 = c9 + 26..........................	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
goto [?= $c4 = (char) $i10].............	[entry: i6 r0 i0 i7 $r8 $i10 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
$i10 = c9...............................	[entry: i6 r0 i0 i7 $r8 c9 ]	[exit: i6 r0 i0 i7 $r8 $i10 ]
$c4 = (char) $i10.......................	[entry: i6 r0 i0 i7 $r8 $i10 ]	[exit: i6 r0 i0 i7 $c4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)	[entry: i6 r0 i0 i7 $c4 $r8 ]	[exit: i6 r0 i0 i7 $r9 ]
r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r9 ]	[exit: r10 i6 r0 i0 i7 ]
goto [?= i7 = i7 + 1]...................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i0 i7 ]
$z1 = staticinvoke <ciphers.Caesar: boolean IsSmallLatinLetter(char)>(c8)	[entry: r0 i0 i7 r10 i6 c8 ]	[exit: r0 i0 i7 r10 c8 i6 $z1 ]
if $z1 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 i0 i7 r10 c8 i6 $z1 ]	[exit: r0 i0 i7 r10 c8 i6 ]
$i1 = c8 - i6...........................	[entry: r0 i0 i7 r10 c8 i6 ]	[exit: i6 r0 i0 i7 r10 $i1 ]
c11 = (char) $i1........................	[entry: i6 r0 i0 i7 r10 $i1 ]	[exit: i6 r0 i0 i7 c11 r10 ]
$r4 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c11 r10 ]	[exit: i6 r0 i0 i7 c11 r10 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c11 r10 $r4 ]	[exit: i6 r0 i0 i7 c11 r10 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c11 r10 $r4 ]	[exit: i6 r0 i0 i7 $r5 c11 ]
if c11 >= 97 goto $i12 = c11............	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 c11 ]
$i12 = c11 + 26.........................	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
goto [?= $c2 = (char) $i12].............	[entry: i6 r0 i0 i7 $r5 $i12 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
$i12 = c11..............................	[entry: i6 r0 i0 i7 $r5 c11 ]	[exit: i6 r0 i0 i7 $r5 $i12 ]
$c2 = (char) $i12.......................	[entry: i6 r0 i0 i7 $r5 $i12 ]	[exit: i6 r0 i0 i7 $c2 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2)	[entry: i6 r0 i0 i7 $c2 $r5 ]	[exit: i6 r0 i0 i7 $r6 ]
r10 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r6 ]	[exit: r10 i6 r0 i0 i7 ]
goto [?= i7 = i7 + 1]...................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i0 i7 ]
$r1 = new java.lang.StringBuilder.......	[entry: i6 r0 i0 i7 c8 r10 ]	[exit: i6 r0 i0 i7 c8 r10 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: i6 r0 i0 i7 c8 r10 $r1 ]	[exit: i6 r0 i0 i7 c8 r10 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r10)	[entry: i6 r0 i0 i7 c8 r10 $r1 ]	[exit: i6 r0 i0 i7 c8 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c8)	[entry: i6 r0 i0 i7 c8 $r2 ]	[exit: i6 r0 i0 i7 $r3 ]
r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i6 r0 i0 i7 $r3 ]	[exit: r10 i6 r0 i0 i7 ]
i7 = i7 + 1.............................	[entry: r10 i6 r0 i0 i7 ]	[exit: r10 i6 r0 i7 i0 ]
goto [?= (branch)]......................	[entry: r10 i6 r0 i7 i0 ]	[exit: r10 i6 r0 i7 i0 ]
return r10..............................	[entry: r10 ]	[exit: ]
********************
Class Name: ciphers.Caesar, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r22 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Please enter the message (Latin Alphabet)")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r4 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 ]	[exit: r2 r4 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>(r4)	[entry: r2 r4 $r5 ]	[exit: r4 r2 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r2 ]	[exit: r4 r2 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Please enter the shift number")	[entry: r4 r2 $r6 ]	[exit: r4 r2 ]
$i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r4 r2 ]	[exit: r4 r2 $i0 ]
i1 = $i0 % 26...........................	[entry: r4 r2 $i0 ]	[exit: r4 i1 r2 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r4 i1 r2 ]	[exit: r4 i1 r2 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("(E)ncode or (D)ecode ?")	[entry: r4 i1 r2 $r7 ]	[exit: r4 i1 r2 ]
$r8 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: r4 i1 r2 ]	[exit: r2 r4 i1 $r8 ]
c2 = virtualinvoke $r8.<java.lang.String: char charAt(int)>(0)	[entry: r2 r4 i1 $r8 ]	[exit: r2 r4 i1 c2 ]
lookupswitch(c2) {     case 68: goto $r16 = <java.lang.System: java.io.PrintStream out>;     case 69: goto $r10 = <java.lang.System: java.io.PrintStream out>;     case 100: goto $r16 = <java.lang.System: java.io.PrintStream out>;     case 101: goto $r10 = <java.lang.System: java.io.PrintStream out>;     default: goto $r21 = <java.lang.System: java.io.PrintStream out>; }	[entry: r2 r4 i1 c2 ]	[exit: r2 r4 i1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 i1 ]	[exit: r2 $r10 r4 i1 ]
$r9 = new java.lang.StringBuilder.......	[entry: r2 $r10 r4 i1 ]	[exit: r2 $r10 r4 i1 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r10 r4 i1 $r9 ]	[exit: r2 $r10 r4 i1 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ENCODED MESSAGE IS \n")	[entry: r2 $r10 r4 i1 $r9 ]	[exit: r2 $r10 $r11 r4 i1 ]
$r12 = staticinvoke <ciphers.Caesar: java.lang.String encode(java.lang.String,int)>(r4, i1)	[entry: r2 $r10 $r11 r4 i1 ]	[exit: r2 $r10 $r12 $r11 ]
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)	[entry: r2 $r10 $r12 $r11 ]	[exit: r2 $r10 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r10 $r13 ]	[exit: r2 $r14 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r14)	[entry: r2 $r14 $r10 ]	[exit: r2 ]
goto [?= virtualinvoke r2.<java.util.Scanner: void close()>()]	[entry: r2 ]	[exit: r2 ]
$r16 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 i1 ]	[exit: r2 $r16 r4 i1 ]
$r15 = new java.lang.StringBuilder......	[entry: r2 $r16 r4 i1 ]	[exit: r2 $r16 r4 i1 $r15 ]
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r16 r4 i1 $r15 ]	[exit: r2 $r16 r4 i1 $r15 ]
$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DECODED MESSAGE IS \n")	[entry: r2 $r16 r4 i1 $r15 ]	[exit: r2 $r16 $r17 r4 i1 ]
$r18 = staticinvoke <ciphers.Caesar: java.lang.String decode(java.lang.String,int)>(r4, i1)	[entry: r2 $r16 $r17 r4 i1 ]	[exit: r2 $r16 $r18 $r17 ]
$r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18)	[entry: r2 $r16 $r18 $r17 ]	[exit: r2 $r16 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r16 $r19 ]	[exit: r2 $r20 $r16 ]
virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r20)	[entry: r2 $r20 $r16 ]	[exit: r2 ]
$r21 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r21 ]
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("default case")	[entry: r2 $r21 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.RSA, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r13 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new ciphers.RSA...................	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<ciphers.RSA: void <init>(int)>(1024)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r2 = staticinvoke <javax.swing.JOptionPane: java.lang.String showInputDialog(java.lang.Object)>("Enter a message to encrypt :")	[entry: r1 ]	[exit: r2 r1 ]
r3 = virtualinvoke r1.<ciphers.RSA: java.lang.String encrypt(java.lang.String)>(r2)	[entry: r2 r1 ]	[exit: r1 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Your encrypted message : ")	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)	[entry: r1 r3 $r5 ]	[exit: r3 r1 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 r1 $r6 ]	[exit: r3 r1 $r7 ]
staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, $r7)	[entry: r3 r1 $r7 ]	[exit: r3 r1 ]
$r8 = new java.lang.StringBuilder.......	[entry: r3 r1 ]	[exit: r3 r1 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: r3 r1 $r8 ]	[exit: r3 r1 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Your message after decrypt : ")	[entry: r3 r1 $r8 ]	[exit: $r9 r3 r1 ]
$r10 = virtualinvoke r1.<ciphers.RSA: java.lang.String decrypt(java.lang.String)>(r3)	[entry: $r9 r3 r1 ]	[exit: $r10 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)	[entry: $r10 $r9 ]	[exit: $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r11 ]	[exit: $r12 ]
staticinvoke <javax.swing.JOptionPane: void showMessageDialog(java.awt.Component,java.lang.Object)>(null, $r12)	[entry: $r12 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.RSA, Method Name: generateKeys, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @this: ciphers.RSA................	[entry: ]	[exit: r6 ]
i0 := @parameter0: int..................	[entry: r6 ]	[exit: r6 i0 ]
$r0 = new java.security.SecureRandom....	[entry: r6 i0 ]	[exit: r6 i0 $r0 ]
specialinvoke $r0.<java.security.SecureRandom: void <init>()>()	[entry: r6 i0 $r0 ]	[exit: r6 i0 $r0 ]
r1 = $r0................................	[entry: r6 i0 $r0 ]	[exit: r6 r1 i0 ]
$r2 = new java.math.BigInteger..........	[entry: r6 r1 i0 ]	[exit: r6 r1 $r2 i0 ]
$i1 = i0 / 2............................	[entry: r6 r1 $r2 i0 ]	[exit: r6 i0 $i1 r1 $r2 ]
specialinvoke $r2.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i1, 100, r1)	[entry: r6 i0 $i1 r1 $r2 ]	[exit: r6 r1 i0 $r2 ]
r3 = $r2................................	[entry: r6 r1 i0 $r2 ]	[exit: r6 r3 r1 i0 ]
$r4 = new java.math.BigInteger..........	[entry: r6 r3 r1 i0 ]	[exit: r6 r3 r1 $r4 i0 ]
$i2 = i0 / 2............................	[entry: r6 r3 r1 $r4 i0 ]	[exit: r6 r3 $i2 r1 $r4 ]
specialinvoke $r4.<java.math.BigInteger: void <init>(int,int,java.util.Random)>($i2, 100, r1)	[entry: r6 r3 $i2 r1 $r4 ]	[exit: r6 r3 $r4 ]
r5 = $r4................................	[entry: r6 r3 $r4 ]	[exit: r6 r5 r3 ]
$r7 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>(r5)	[entry: r6 r5 r3 ]	[exit: r5 r3 r6 $r7 ]
r6.<ciphers.RSA: java.math.BigInteger modulus> = $r7	[entry: r5 r3 r6 $r7 ]	[exit: r6 r5 r3 ]
$r8 = <java.math.BigInteger: java.math.BigInteger ONE>	[entry: r6 r5 r3 ]	[exit: r6 r5 $r8 r3 ]
$r9 = virtualinvoke r3.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r8)	[entry: r6 r5 $r8 r3 ]	[exit: r6 $r9 r5 ]
$r10 = <java.math.BigInteger: java.math.BigInteger ONE>	[entry: r6 $r9 r5 ]	[exit: r6 $r9 $r10 r5 ]
$r11 = virtualinvoke r5.<java.math.BigInteger: java.math.BigInteger subtract(java.math.BigInteger)>($r10)	[entry: r6 $r9 $r10 r5 ]	[exit: r6 $r11 $r9 ]
r12 = virtualinvoke $r9.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r11)	[entry: r6 $r11 $r9 ]	[exit: r12 r6 ]
$r13 = new java.math.BigInteger.........	[entry: r12 r6 ]	[exit: r12 r6 $r13 ]
specialinvoke $r13.<java.math.BigInteger: void <init>(java.lang.String)>("3")	[entry: r12 r6 $r13 ]	[exit: r12 r6 $r13 ]
r6.<ciphers.RSA: java.math.BigInteger publicKey> = $r13	[entry: r12 r6 $r13 ]	[exit: r12 r6 ]
$r14 = r6.<ciphers.RSA: java.math.BigInteger publicKey>	[entry: r12 r6 ]	[exit: r6 $r14 r12 ]
$r15 = virtualinvoke r12.<java.math.BigInteger: java.math.BigInteger gcd(java.math.BigInteger)>($r14)	[entry: r6 $r14 r12 ]	[exit: r12 r6 $r15 ]
$i3 = virtualinvoke $r15.<java.math.BigInteger: int intValue()>()	[entry: r12 r6 $r15 ]	[exit: r12 r6 $i3 ]
if $i3 <= 1 goto $r16 = r6.<ciphers.RSA: java.math.BigInteger publicKey>	[entry: r12 r6 $i3 ]	[exit: r12 r6 ]
$r19 = r6.<ciphers.RSA: java.math.BigInteger publicKey>	[entry: r12 r6 ]	[exit: r12 r6 $r19 ]
$r18 = new java.math.BigInteger.........	[entry: r12 r6 $r19 ]	[exit: r12 r6 $r19 $r18 ]
specialinvoke $r18.<java.math.BigInteger: void <init>(java.lang.String)>("2")	[entry: r12 r6 $r19 $r18 ]	[exit: r12 r6 $r18 $r19 ]
$r20 = virtualinvoke $r19.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>($r18)	[entry: r12 r6 $r18 $r19 ]	[exit: r12 r6 $r20 ]
r6.<ciphers.RSA: java.math.BigInteger publicKey> = $r20	[entry: r12 r6 $r20 ]	[exit: r12 r6 ]
goto [?= $r14 = r6.<ciphers.RSA: java.math.BigInteger publicKey>]	[entry: r12 r6 ]	[exit: r12 r6 ]
$r16 = r6.<ciphers.RSA: java.math.BigInteger publicKey>	[entry: r12 r6 ]	[exit: r6 r12 $r16 ]
$r17 = virtualinvoke $r16.<java.math.BigInteger: java.math.BigInteger modInverse(java.math.BigInteger)>(r12)	[entry: r6 r12 $r16 ]	[exit: r6 $r17 ]
r6.<ciphers.RSA: java.math.BigInteger privateKey> = $r17	[entry: r6 $r17 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.SimpleSubstitutionCipher, Method Name: encode, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String.....	[entry: ]	[exit: r3 ]
r18 := @parameter1: java.lang.String....	[entry: r3 ]	[exit: r3 r18 ]
r19 = ""................................	[entry: r3 r18 ]	[exit: r19 r3 r18 ]
$r0 = new java.util.HashMap.............	[entry: r19 r3 r18 ]	[exit: r19 r3 r18 $r0 ]
specialinvoke $r0.<java.util.HashMap: void <init>()>()	[entry: r19 r3 r18 $r0 ]	[exit: r19 r3 r18 $r0 ]
r1 = $r0................................	[entry: r19 r3 r18 $r0 ]	[exit: r19 r1 r3 r18 ]
c11 = 97................................	[entry: r19 r1 r3 r18 ]	[exit: r19 r1 r3 c11 r18 ]
c12 = 65................................	[entry: r19 r1 r3 c11 r18 ]	[exit: r19 r1 r3 c12 c11 r18 ]
r20 = virtualinvoke r18.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r19 r1 r3 c12 c11 r18 ]	[exit: r19 r1 r3 c12 c11 r20 ]
r2 = virtualinvoke r20.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r19 r1 r3 c12 c11 r20 ]	[exit: r19 r1 r3 r2 c12 c11 r20 ]
i13 = 0.................................	[entry: r19 r1 r3 r2 c12 c11 r20 ]	[exit: r19 r1 r3 r2 c12 c11 i13 r20 ]
$i0 = virtualinvoke r20.<java.lang.String: int length()>()	[entry: r19 r1 r3 r2 c12 c11 i13 r20 ]	[exit: r19 r1 r3 r2 c12 r20 c11 i13 $i0 ]
if i13 >= $i0 goto i14 = 0..............	[entry: r19 r1 r3 r2 c12 r20 c11 i13 $i0 ]	[exit: r19 r1 r3 r2 c12 i13 r20 c11 ]
$c6 = c11...............................	[entry: r19 r3 r2 c12 r1 i13 r20 c11 ]	[exit: r19 r3 r2 c12 r1 i13 r20 $c6 c11 ]
$i5 = c11 + 1...........................	[entry: r19 r3 r2 c12 r1 i13 r20 $c6 c11 ]	[exit: r19 r3 r2 c12 r1 i13 r20 $c6 $i5 ]
c11 = (char) $i5........................	[entry: r19 r3 r2 c12 r1 i13 r20 $c6 $i5 ]	[exit: r19 r3 c11 r2 c12 r1 i13 r20 $c6 ]
$r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c6)	[entry: r19 r3 c11 r2 c12 r1 i13 r20 $c6 ]	[exit: r19 r3 c11 r2 c12 $r12 r1 i13 r20 ]
$c7 = virtualinvoke r20.<java.lang.String: char charAt(int)>(i13)	[entry: r19 r3 c11 r2 c12 $r12 r1 i13 r20 ]	[exit: r19 r3 c11 r20 i13 r2 c12 $r12 r1 $c7 ]
$r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c7)	[entry: r19 r3 c11 r20 i13 r2 c12 $r12 r1 $c7 ]	[exit: r19 r3 c11 r20 i13 r2 c12 $r12 $r13 r1 ]
interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13)	[entry: r19 r3 c11 r20 i13 r2 c12 $r12 $r13 r1 ]	[exit: r19 r3 c11 r20 r1 i13 r2 c12 ]
$c9 = c12...............................	[entry: r19 r3 c11 r20 r1 i13 r2 c12 ]	[exit: r19 r3 c11 r20 r1 i13 r2 $c9 c12 ]
$i8 = c12 + 1...........................	[entry: r19 r3 c11 r20 r1 i13 r2 $c9 c12 ]	[exit: r19 r3 c11 r20 r1 i13 r2 $c9 $i8 ]
c12 = (char) $i8........................	[entry: r19 r3 c11 r20 r1 i13 r2 $c9 $i8 ]	[exit: r19 r3 c12 c11 r20 r1 i13 r2 $c9 ]
$r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c9)	[entry: r19 r3 c12 c11 r20 r1 i13 r2 $c9 ]	[exit: r19 r3 c12 c11 r20 $r15 r1 i13 r2 ]
$c10 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i13)	[entry: r19 r3 c12 c11 r20 $r15 r1 i13 r2 ]	[exit: r19 r3 r2 c12 c11 r20 i13 $r15 r1 $c10 ]
$r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c10)	[entry: r19 r3 r2 c12 c11 r20 i13 $r15 r1 $c10 ]	[exit: r19 r3 r2 c12 c11 r20 i13 $r15 $r16 r1 ]
interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16)	[entry: r19 r3 r2 c12 c11 r20 i13 $r15 $r16 r1 ]	[exit: r19 r1 r3 r2 c12 c11 r20 i13 ]
i13 = i13 + 1...........................	[entry: r19 r1 r3 r2 c12 c11 r20 i13 ]	[exit: r19 r1 r3 r2 c12 c11 i13 r20 ]
goto [?= $i0 = virtualinvoke r20.<java.lang.String: int length()>()]	[entry: r19 r1 r3 r2 c12 c11 i13 r20 ]	[exit: r19 r1 r3 r2 c12 c11 i13 r20 ]
i14 = 0.................................	[entry: r19 r1 r3 ]	[exit: r19 r1 i14 r3 ]
$i1 = virtualinvoke r3.<java.lang.String: int length()>()	[entry: r19 r1 i14 r3 ]	[exit: r19 r1 r3 i14 $i1 ]
if i14 >= $i1 goto return r19...........	[entry: r19 r1 r3 i14 $i1 ]	[exit: r19 r1 i14 r3 ]
$c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: r1 r19 i14 r3 ]	[exit: r1 i14 r3 r19 $c2 ]
$z0 = staticinvoke <java.lang.Character: boolean isAlphabetic(int)>($c2)	[entry: r1 i14 r3 r19 $c2 ]	[exit: r1 i14 r3 r19 $z0 ]
if $z0 == 0 goto $r4 = new java.lang.StringBuilder	[entry: r1 i14 r3 r19 $z0 ]	[exit: r1 i14 r3 r19 ]
$r7 = new java.lang.StringBuilder.......	[entry: r1 i14 r3 r19 ]	[exit: r1 i14 r3 r19 $r7 ]
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i14 r3 r19 $r7 ]	[exit: r1 i14 r3 r19 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)	[entry: r1 i14 r3 r19 $r7 ]	[exit: $r8 r1 i14 r3 ]
$c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: $r8 r1 i14 r3 ]	[exit: r3 i14 $r8 r1 $c4 ]
$r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)	[entry: r3 i14 $r8 r1 $c4 ]	[exit: r3 i14 $r8 $r9 r1 ]
$r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)	[entry: r3 i14 $r8 $r9 r1 ]	[exit: r1 r3 i14 $r10 $r8 ]
$r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10)	[entry: r1 r3 i14 $r10 $r8 ]	[exit: r1 r3 i14 $r11 ]
r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r3 i14 $r11 ]	[exit: r19 r1 r3 i14 ]
goto [?= i14 = i14 + 1].................	[entry: r19 r1 r3 i14 ]	[exit: r19 r1 r3 i14 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 i14 r3 r19 ]	[exit: r1 i14 r3 r19 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i14 r3 r19 $r4 ]	[exit: r1 i14 r3 r19 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)	[entry: r1 i14 r3 r19 $r4 ]	[exit: r1 $r5 i14 r3 ]
$c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: r1 $r5 i14 r3 ]	[exit: r1 r3 i14 $c3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)	[entry: r1 r3 i14 $c3 $r5 ]	[exit: r1 r3 i14 $r6 ]
r19 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r3 i14 $r6 ]	[exit: r19 r1 r3 i14 ]
i14 = i14 + 1...........................	[entry: r19 r1 r3 i14 ]	[exit: r19 r1 i14 r3 ]
goto [?= $i1 = virtualinvoke r3.<java.lang.String: int length()>()]	[entry: r19 r1 i14 r3 ]	[exit: r19 r1 i14 r3 ]
return r19..............................	[entry: r19 ]	[exit: ]
********************
Class Name: ciphers.SimpleSubstitutionCipher, Method Name: decode, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String.....	[entry: ]	[exit: r3 ]
r18 := @parameter1: java.lang.String....	[entry: r3 ]	[exit: r3 r18 ]
r19 = ""................................	[entry: r3 r18 ]	[exit: r19 r3 r18 ]
$r0 = new java.util.HashMap.............	[entry: r19 r3 r18 ]	[exit: r19 r3 r18 $r0 ]
specialinvoke $r0.<java.util.HashMap: void <init>()>()	[entry: r19 r3 r18 $r0 ]	[exit: r19 r3 r18 $r0 ]
r1 = $r0................................	[entry: r19 r3 r18 $r0 ]	[exit: r19 r1 r3 r18 ]
c11 = 97................................	[entry: r19 r1 r3 r18 ]	[exit: r19 r1 r3 c11 r18 ]
c12 = 65................................	[entry: r19 r1 r3 c11 r18 ]	[exit: r19 r1 r3 c12 c11 r18 ]
r20 = virtualinvoke r18.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r19 r1 r3 c12 c11 r18 ]	[exit: r19 r1 r3 c12 c11 r20 ]
r2 = virtualinvoke r20.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r19 r1 r3 c12 c11 r20 ]	[exit: r19 r1 r3 c12 r2 c11 r20 ]
i13 = 0.................................	[entry: r19 r1 r3 c12 r2 c11 r20 ]	[exit: r19 r1 r3 c12 r2 c11 i13 r20 ]
$i0 = virtualinvoke r20.<java.lang.String: int length()>()	[entry: r19 r1 r3 c12 r2 c11 i13 r20 ]	[exit: r19 r1 r3 c12 r2 c11 r20 i13 $i0 ]
if i13 >= $i0 goto i14 = 0..............	[entry: r19 r1 r3 c12 r2 c11 r20 i13 $i0 ]	[exit: r19 r1 r3 c12 r2 c11 i13 r20 ]
$c5 = virtualinvoke r20.<java.lang.String: char charAt(int)>(i13)	[entry: r19 r3 c12 r2 r1 c11 i13 r20 ]	[exit: r19 r3 r20 c12 i13 r2 r1 c11 $c5 ]
$r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c5)	[entry: r19 r3 r20 c12 i13 r2 r1 c11 $c5 ]	[exit: r19 r3 r20 c12 i13 r2 $r12 r1 c11 ]
$c7 = c11...............................	[entry: r19 r3 r20 c12 i13 r2 $r12 r1 c11 ]	[exit: r19 r3 r20 c12 i13 r2 $r12 r1 $c7 c11 ]
$i6 = c11 + 1...........................	[entry: r19 r3 r20 c12 i13 r2 $r12 r1 $c7 c11 ]	[exit: r19 r3 r20 c12 i13 r2 $r12 r1 $c7 $i6 ]
c11 = (char) $i6........................	[entry: r19 r3 r20 c12 i13 r2 $r12 r1 $c7 $i6 ]	[exit: r19 r3 c11 r20 c12 i13 r2 $r12 r1 $c7 ]
$r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c7)	[entry: r19 r3 c11 r20 c12 i13 r2 $r12 r1 $c7 ]	[exit: r19 r3 c11 r20 c12 i13 r2 $r12 $r13 r1 ]
interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r13)	[entry: r19 r3 c11 r20 c12 i13 r2 $r12 $r13 r1 ]	[exit: r19 r3 c11 r20 r1 c12 i13 r2 ]
$c8 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i13)	[entry: r19 r3 c11 r20 r1 c12 i13 r2 ]	[exit: r19 r3 r2 c11 r20 i13 r1 c12 $c8 ]
$r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c8)	[entry: r19 r3 r2 c11 r20 i13 r1 c12 $c8 ]	[exit: r19 r3 r2 c11 r20 i13 $r15 r1 c12 ]
$c10 = c12..............................	[entry: r19 r3 r2 c11 r20 i13 $r15 r1 c12 ]	[exit: r19 r3 r2 c11 r20 i13 $r15 r1 $c10 c12 ]
$i9 = c12 + 1...........................	[entry: r19 r3 r2 c11 r20 i13 $r15 r1 $c10 c12 ]	[exit: r19 r3 r2 c11 r20 i13 $r15 r1 $c10 $i9 ]
c12 = (char) $i9........................	[entry: r19 r3 r2 c11 r20 i13 $r15 r1 $c10 $i9 ]	[exit: r19 r3 c12 r2 c11 r20 i13 $r15 r1 $c10 ]
$r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c10)	[entry: r19 r3 c12 r2 c11 r20 i13 $r15 r1 $c10 ]	[exit: r19 r3 c12 r2 c11 r20 i13 $r15 $r16 r1 ]
interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r16)	[entry: r19 r3 c12 r2 c11 r20 i13 $r15 $r16 r1 ]	[exit: r19 r1 r3 c12 r2 c11 r20 i13 ]
i13 = i13 + 1...........................	[entry: r19 r1 r3 c12 r2 c11 r20 i13 ]	[exit: r19 r1 r3 c12 r2 c11 i13 r20 ]
goto [?= $i0 = virtualinvoke r20.<java.lang.String: int length()>()]	[entry: r19 r1 r3 c12 r2 c11 i13 r20 ]	[exit: r19 r1 r3 c12 r2 c11 i13 r20 ]
i14 = 0.................................	[entry: r19 r1 r3 ]	[exit: r19 r1 i14 r3 ]
$i1 = virtualinvoke r3.<java.lang.String: int length()>()	[entry: r19 r1 i14 r3 ]	[exit: r19 r1 r3 i14 $i1 ]
if i14 >= $i1 goto return r19...........	[entry: r19 r1 r3 i14 $i1 ]	[exit: r19 r1 i14 r3 ]
$c2 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: r1 r19 i14 r3 ]	[exit: r1 i14 r3 r19 $c2 ]
$z0 = staticinvoke <java.lang.Character: boolean isAlphabetic(int)>($c2)	[entry: r1 i14 r3 r19 $c2 ]	[exit: r1 i14 r3 r19 $z0 ]
if $z0 == 0 goto $r4 = new java.lang.StringBuilder	[entry: r1 i14 r3 r19 $z0 ]	[exit: r1 i14 r3 r19 ]
$r7 = new java.lang.StringBuilder.......	[entry: r1 i14 r3 r19 ]	[exit: r1 i14 r3 r19 $r7 ]
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i14 r3 r19 $r7 ]	[exit: r1 i14 r3 r19 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)	[entry: r1 i14 r3 r19 $r7 ]	[exit: $r8 r1 i14 r3 ]
$c4 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: $r8 r1 i14 r3 ]	[exit: r3 i14 $r8 r1 $c4 ]
$r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)	[entry: r3 i14 $r8 r1 $c4 ]	[exit: r3 i14 $r8 $r9 r1 ]
$r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)	[entry: r3 i14 $r8 $r9 r1 ]	[exit: r1 r3 i14 $r10 $r8 ]
$r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10)	[entry: r1 r3 i14 $r10 $r8 ]	[exit: r1 r3 i14 $r11 ]
r19 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r3 i14 $r11 ]	[exit: r19 r1 r3 i14 ]
goto [?= i14 = i14 + 1].................	[entry: r19 r1 r3 i14 ]	[exit: r19 r1 r3 i14 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 i14 r3 r19 ]	[exit: r1 i14 r3 r19 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i14 r3 r19 $r4 ]	[exit: r1 i14 r3 r19 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)	[entry: r1 i14 r3 r19 $r4 ]	[exit: r1 $r5 i14 r3 ]
$c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>(i14)	[entry: r1 $r5 i14 r3 ]	[exit: r1 r3 i14 $c3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c3)	[entry: r1 r3 i14 $c3 $r5 ]	[exit: r1 r3 i14 $r6 ]
r19 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r3 i14 $r6 ]	[exit: r19 r1 r3 i14 ]
i14 = i14 + 1...........................	[entry: r19 r1 r3 i14 ]	[exit: r19 r1 i14 r3 ]
goto [?= $i1 = virtualinvoke r3.<java.lang.String: int length()>()]	[entry: r19 r1 i14 r3 ]	[exit: r19 r1 i14 r3 ]
return r19..............................	[entry: r19 ]	[exit: ]
********************
Class Name: ciphers.SimpleSubstitutionCipher, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
r0 = staticinvoke <ciphers.SimpleSubstitutionCipher: java.lang.String encode(java.lang.String,java.lang.String)>("defend the east wall of the castle", "phqgiumeaylnofdxjkrcvstzwb")	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.SimpleSubstitutionCipher: java.lang.String decode(java.lang.String,java.lang.String)>(r0, "phqgiumeaylnofdxjkrcvstzwb")	[entry: r0 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r1)	[entry: r1 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.AESEncryption, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r27 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = "Hello World"......................	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AESEncryption: javax.crypto.SecretKey getSecretEncryptionKey()>()	[entry: r0 ]	[exit: r0 r1 ]
r2 = staticinvoke <ciphers.AESEncryption: byte[] encryptText(java.lang.String,javax.crypto.SecretKey)>(r0, r1)	[entry: r0 r1 ]	[exit: r0 r2 r1 ]
r3 = staticinvoke <ciphers.AESEncryption: java.lang.String decryptText(byte[],javax.crypto.SecretKey)>(r2, r1)	[entry: r0 r2 r1 ]	[exit: r3 r2 r1 r0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r2 r1 r0 ]	[exit: r3 r2 r1 $r5 r0 ]
$r4 = new java.lang.StringBuilder.......	[entry: r3 r2 r1 $r5 r0 ]	[exit: r3 r2 r1 $r5 r0 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r3 r2 r1 $r5 r0 $r4 ]	[exit: r3 r2 r1 $r5 r0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Original Text:")	[entry: r3 r2 r1 $r5 r0 $r4 ]	[exit: r3 r2 r1 $r5 r0 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: r3 r2 r1 $r5 r0 $r6 ]	[exit: r3 r2 r1 $r5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 r2 r1 $r5 $r7 ]	[exit: r3 r2 r1 $r8 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r3 r2 r1 $r8 $r5 ]	[exit: r3 r2 r1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r2 r1 ]	[exit: r3 r2 $r10 r1 ]
$r9 = new java.lang.StringBuilder.......	[entry: r3 r2 $r10 r1 ]	[exit: r3 r2 $r10 r1 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r3 r2 $r10 r1 $r9 ]	[exit: r3 r2 $r10 r1 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AES Key (Hex Form):")	[entry: r3 r2 $r10 r1 $r9 ]	[exit: r3 r2 $r10 $r11 r1 ]
$r12 = interfaceinvoke r1.<javax.crypto.SecretKey: byte[] getEncoded()>()	[entry: r3 r2 $r10 $r11 r1 ]	[exit: r3 r2 $r10 $r11 $r12 ]
$r13 = staticinvoke <ciphers.AESEncryption: java.lang.String bytesToHex(byte[])>($r12)	[entry: r3 r2 $r10 $r11 $r12 ]	[exit: r3 r2 $r10 $r13 $r11 ]
$r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)	[entry: r3 r2 $r10 $r13 $r11 ]	[exit: r3 r2 $r10 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 r2 $r10 $r14 ]	[exit: r3 r2 $r15 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r3 r2 $r15 $r10 ]	[exit: r3 r2 ]
$r17 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r2 ]	[exit: r3 $r17 r2 ]
$r16 = new java.lang.StringBuilder......	[entry: r3 $r17 r2 ]	[exit: r3 $r17 r2 $r16 ]
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r17 r2 $r16 ]	[exit: r3 $r17 r2 $r16 ]
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Encrypted Text (Hex Form):")	[entry: r3 $r17 r2 $r16 ]	[exit: r3 $r17 $r18 r2 ]
$r19 = staticinvoke <ciphers.AESEncryption: java.lang.String bytesToHex(byte[])>(r2)	[entry: r3 $r17 $r18 r2 ]	[exit: r3 $r17 $r19 $r18 ]
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19)	[entry: r3 $r17 $r19 $r18 ]	[exit: r3 $r17 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 $r17 $r20 ]	[exit: r3 $r21 $r17 ]
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21)	[entry: r3 $r21 $r17 ]	[exit: r3 ]
$r23 = <java.lang.System: java.io.PrintStream out>	[entry: r3 ]	[exit: $r23 r3 ]
$r22 = new java.lang.StringBuilder......	[entry: $r23 r3 ]	[exit: $r23 r3 $r22 ]
specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()	[entry: $r23 r3 $r22 ]	[exit: $r23 r3 $r22 ]
$r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Descrypted Text:")	[entry: $r23 r3 $r22 ]	[exit: $r23 r3 $r24 ]
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)	[entry: $r23 r3 $r24 ]	[exit: $r23 $r25 ]
$r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r23 $r25 ]	[exit: $r26 $r23 ]
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r26)	[entry: $r26 $r23 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.AESEncryption, Method Name: getSecretEncryptionKey, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 = staticinvoke <javax.crypto.KeyGenerator: javax.crypto.KeyGenerator getInstance(java.lang.String)>("AES")	[entry: ]	[exit: r0 ]
virtualinvoke r0.<javax.crypto.KeyGenerator: void init(int)>(128)	[entry: r0 ]	[exit: r0 ]
r1 = virtualinvoke r0.<javax.crypto.KeyGenerator: javax.crypto.SecretKey generateKey()>()	[entry: r0 ]	[exit: r1 ]
return r1...............................	[entry: r1 ]	[exit: ]
********************
Class Name: ciphers.AESEncryption, Method Name: encryptText, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String.....	[entry: ]	[exit: r2 ]
r1 := @parameter1: javax.crypto.SecretKey	[entry: r2 ]	[exit: r2 r1 ]
r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES")	[entry: r2 r1 ]	[exit: r2 r1 r0 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(1, r1)	[entry: r2 r1 r0 ]	[exit: r0 r2 ]
$r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>()	[entry: r0 r2 ]	[exit: $r3 r0 ]
r4 = virtualinvoke r0.<javax.crypto.Cipher: byte[] doFinal(byte[])>($r3)	[entry: $r3 r0 ]	[exit: r4 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: ciphers.AESEncryption, Method Name: decryptText, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: byte[]...............	[entry: ]	[exit: r2 ]
r1 := @parameter1: javax.crypto.SecretKey	[entry: r2 ]	[exit: r2 r1 ]
r0 = staticinvoke <javax.crypto.Cipher: javax.crypto.Cipher getInstance(java.lang.String)>("AES")	[entry: r2 r1 ]	[exit: r2 r1 r0 ]
virtualinvoke r0.<javax.crypto.Cipher: void init(int,java.security.Key)>(2, r1)	[entry: r2 r1 r0 ]	[exit: r2 r0 ]
r3 = virtualinvoke r0.<javax.crypto.Cipher: byte[] doFinal(byte[])>(r2)	[entry: r2 r0 ]	[exit: r3 ]
$r4 = new java.lang.String..............	[entry: r3 ]	[exit: r3 $r4 ]
specialinvoke $r4.<java.lang.String: void <init>(byte[])>(r3)	[entry: r3 $r4 ]	[exit: $r4 ]
return $r4..............................	[entry: $r4 ]	[exit: ]
********************
Class Name: ciphers.AESEncryption, Method Name: bytesToHex, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: byte[]...............	[entry: ]	[exit: r0 ]
$i0 = lengthof r0.......................	[entry: r0 ]	[exit: r0 $i0 ]
$i1 = $i0 * 2...........................	[entry: r0 $i0 ]	[exit: r0 $i1 ]
r1 = newarray (char)[$i1]...............	[entry: r0 $i1 ]	[exit: r1 r0 ]
i12 = 0.................................	[entry: r1 r0 ]	[exit: r1 i12 r0 ]
$i2 = lengthof r0.......................	[entry: r1 i12 r0 ]	[exit: r1 r0 i12 $i2 ]
if i12 >= $i2 goto $r2 = new java.lang.String	[entry: r1 r0 i12 $i2 ]	[exit: r1 r0 i12 ]
$b3 = r0[i12]...........................	[entry: r1 r0 i12 ]	[exit: r0 r1 i12 $b3 ]
i4 = $b3 & 255..........................	[entry: r0 r1 i12 $b3 ]	[exit: r0 r1 i4 i12 ]
$i7 = i12 * 2...........................	[entry: r0 r1 i4 i12 ]	[exit: r0 i12 r1 $i7 i4 ]
$r3 = <ciphers.AESEncryption: char[] HEX_ARRAY>	[entry: r0 i12 r1 $i7 i4 ]	[exit: r0 i12 r1 $i7 $r3 i4 ]
$i5 = i4 >>> 4..........................	[entry: r0 i12 r1 $i7 $r3 i4 ]	[exit: r0 i4 i12 r1 $i7 $r3 $i5 ]
$c6 = $r3[$i5]..........................	[entry: r0 i4 i12 r1 $i7 $r3 $i5 ]	[exit: r0 i4 i12 r1 $i7 $c6 ]
r1[$i7] = $c6...........................	[entry: r0 i4 i12 r1 $i7 $c6 ]	[exit: r0 r1 i4 i12 ]
$i8 = i12 * 2...........................	[entry: r0 r1 i4 i12 ]	[exit: r0 i12 r1 i4 $i8 ]
$i11 = $i8 + 1..........................	[entry: r0 i12 r1 i4 $i8 ]	[exit: r0 i12 r1 $i11 i4 ]
$r4 = <ciphers.AESEncryption: char[] HEX_ARRAY>	[entry: r0 i12 r1 $i11 i4 ]	[exit: r0 i12 r1 $i11 $r4 i4 ]
$i9 = i4 & 15...........................	[entry: r0 i12 r1 $i11 $r4 i4 ]	[exit: r0 i12 r1 $i11 $r4 $i9 ]
$c10 = $r4[$i9].........................	[entry: r0 i12 r1 $i11 $r4 $i9 ]	[exit: r0 i12 r1 $i11 $c10 ]
r1[$i11] = $c10.........................	[entry: r0 i12 r1 $i11 $c10 ]	[exit: r1 r0 i12 ]
i12 = i12 + 1...........................	[entry: r1 r0 i12 ]	[exit: r1 i12 r0 ]
goto [?= $i2 = lengthof r0].............	[entry: r1 i12 r0 ]	[exit: r1 i12 r0 ]
$r2 = new java.lang.String..............	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1)	[entry: r1 $r2 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: ciphers.ColumnarTranspositionCipher, Method Name: decrypter, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 = "".................................	[entry: ]	[exit: r8 ]
i2 = 1..................................	[entry: r8 ]	[exit: r8 i2 ]
$r0 = <ciphers.ColumnarTranspositionCipher: java.lang.Object[][] table>	[entry: r8 i2 ]	[exit: r8 i2 $r0 ]
$i0 = lengthof $r0......................	[entry: r8 i2 $r0 ]	[exit: r8 i2 $i0 ]
if i2 >= $i0 goto $r1 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u2248", "")	[entry: r8 i2 $i0 ]	[exit: r8 i2 ]
$r2 = <ciphers.ColumnarTranspositionCipher: java.lang.Object[][] table>	[entry: r8 i2 ]	[exit: r8 $r2 i2 ]
r3 = $r2[i2]............................	[entry: r8 $r2 i2 ]	[exit: r8 i2 r3 ]
i1 = lengthof r3........................	[entry: r8 i2 r3 ]	[exit: r8 i2 r3 i1 ]
i3 = 0..................................	[entry: r8 i2 r3 i1 ]	[exit: r8 i2 r3 i3 i1 ]
if i3 >= i1 goto i2 = i2 + 1............	[entry: r8 i2 r3 i3 i1 ]	[exit: r8 i2 i1 r3 i3 ]
r4 = r3[i3].............................	[entry: i2 i1 r8 r3 i3 ]	[exit: i2 r3 i1 i3 r4 r8 ]
$r5 = new java.lang.StringBuilder.......	[entry: i2 r3 i1 i3 r4 r8 ]	[exit: i2 r3 i1 i3 r4 r8 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: i2 r3 i1 i3 r4 r8 $r5 ]	[exit: i2 r3 i1 i3 r4 r8 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)	[entry: i2 r3 i1 i3 r4 r8 $r5 ]	[exit: i2 r3 i1 i3 r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4)	[entry: i2 r3 i1 i3 r4 $r6 ]	[exit: i2 r3 i1 i3 $r7 ]
r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i2 r3 i1 i3 $r7 ]	[exit: r8 i2 r3 i1 i3 ]
i3 = i3 + 1.............................	[entry: r8 i2 r3 i1 i3 ]	[exit: r8 i2 r3 i3 i1 ]
goto [?= (branch)]......................	[entry: r8 i2 r3 i3 i1 ]	[exit: r8 i2 r3 i3 i1 ]
i2 = i2 + 1.............................	[entry: r8 i2 ]	[exit: r8 i2 ]
goto [?= $r0 = <ciphers.ColumnarTranspositionCipher: java.lang.Object[][] table>]	[entry: r8 i2 ]	[exit: r8 i2 ]
$r1 = virtualinvoke r8.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\u2248", "")	[entry: r8 ]	[exit: $r1 ]
return $r1..............................	[entry: $r1 ]	[exit: ]
********************
Class Name: ciphers.ColumnarTranspositionCipher, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r21 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = "asd215"...........................	[entry: ]	[exit: r0 ]
r1 = "This is a test of the Columnar Transposition Cipher"	[entry: r0 ]	[exit: r0 r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r1 ]	[exit: r0 r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("### Example of Columnar Transposition Cipher ###\n")	[entry: r0 r1 $r2 ]	[exit: r0 r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r1 ]	[exit: r0 $r4 r1 ]
$r3 = new java.lang.StringBuilder.......	[entry: r0 $r4 r1 ]	[exit: r0 $r4 r1 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r4 r1 $r3 ]	[exit: r0 $r4 r1 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Word being encryped ->>> ")	[entry: r0 $r4 r1 $r3 ]	[exit: r0 $r4 r1 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: r0 $r4 r1 $r5 ]	[exit: r1 r0 $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r0 $r4 $r6 ]	[exit: r1 r0 $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: r1 r0 $r7 $r4 ]	[exit: r1 r0 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r0 ]	[exit: $r9 r1 r0 ]
$r8 = new java.lang.StringBuilder.......	[entry: $r9 r1 r0 ]	[exit: $r9 r1 r0 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: $r9 r1 r0 $r8 ]	[exit: $r9 r1 r0 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Word encrypted ->>> ")	[entry: $r9 r1 r0 $r8 ]	[exit: $r9 $r10 r1 r0 ]
$r11 = staticinvoke <ciphers.ColumnarTranspositionCipher: java.lang.String encrpyter(java.lang.String,java.lang.String)>(r1, r0)	[entry: $r9 $r10 r1 r0 ]	[exit: $r9 $r11 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11)	[entry: $r9 $r11 $r10 ]	[exit: $r9 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r9 $r12 ]	[exit: $r13 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r13)	[entry: $r13 $r9 ]	[exit: ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r15 ]
$r14 = new java.lang.StringBuilder......	[entry: $r15 ]	[exit: $r15 $r14 ]
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()	[entry: $r15 $r14 ]	[exit: $r15 $r14 ]
$r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Word decryped ->>> ")	[entry: $r15 $r14 ]	[exit: $r15 $r16 ]
$r17 = staticinvoke <ciphers.ColumnarTranspositionCipher: java.lang.String decrypter()>()	[entry: $r15 $r16 ]	[exit: $r15 $r17 $r16 ]
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)	[entry: $r15 $r17 $r16 ]	[exit: $r15 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r15 $r18 ]	[exit: $r19 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>($r19)	[entry: $r19 $r15 ]	[exit: ]
$r20 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r20 ]
virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.String)>("\n### Encrypted Table ###")	[entry: $r20 ]	[exit: ]
staticinvoke <ciphers.ColumnarTranspositionCipher: void showTable()>()	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.Vigenere, Method Name: encrypt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r4 := @parameter1: java.lang.String.....	[entry: r0 ]	[exit: r4 r0 ]
r13 = ""................................	[entry: r4 r0 ]	[exit: r13 r4 r0 ]
i14 = 0.................................	[entry: r13 r4 r0 ]	[exit: r13 r4 i14 r0 ]
i15 = 0.................................	[entry: r13 r4 i14 r0 ]	[exit: r13 i15 r4 i14 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r13 i15 r4 i14 r0 ]	[exit: r13 i15 r4 r0 i14 $i0 ]
if i14 >= $i0 goto return r13...........	[entry: r13 i15 r4 r0 i14 $i0 ]	[exit: r13 i15 r4 i14 r0 ]
c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14)	[entry: i15 r4 r13 i14 r0 ]	[exit: r0 i14 i15 r4 r13 c1 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c1)	[entry: r0 i14 i15 r4 r13 c1 ]	[exit: r0 i14 i15 r4 r13 c1 $z0 ]
if $z0 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 i14 i15 r4 r13 c1 $z0 ]	[exit: r0 i14 i15 r4 r13 c1 ]
$z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c1)	[entry: r0 i14 i15 r4 r13 c1 ]	[exit: r0 i14 c1 i15 r4 r13 $z1 ]
if $z1 == 0 goto $r5 = new java.lang.StringBuilder	[entry: r0 i14 c1 i15 r4 r13 $z1 ]	[exit: r0 i14 c1 i15 r4 r13 ]
$r9 = new java.lang.StringBuilder.......	[entry: r0 i14 c1 i15 r4 r13 ]	[exit: r0 i14 c1 i15 r4 r13 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 c1 i15 r4 r13 $r9 ]	[exit: r0 i14 c1 i15 r4 r13 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 c1 i15 r4 r13 $r9 ]	[exit: r0 i14 $r10 c1 i15 r4 ]
$r11 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r0 i14 $r10 c1 i15 r4 ]	[exit: r0 i14 r4 $r10 c1 i15 $r11 ]
$c8 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i15)	[entry: r0 i14 r4 $r10 c1 i15 $r11 ]	[exit: r0 i14 r4 i15 $r10 c1 $c8 ]
$i9 = c1 + $c8..........................	[entry: r0 i14 r4 i15 $r10 c1 $c8 ]	[exit: r0 i14 r4 i15 $r10 $i9 ]
$i10 = $i9 - 130........................	[entry: r0 i14 r4 i15 $r10 $i9 ]	[exit: r0 i14 r4 i15 $r10 $i10 ]
$i11 = $i10 % 26........................	[entry: r0 i14 r4 i15 $r10 $i10 ]	[exit: r0 i14 r4 i15 $r10 $i11 ]
$i12 = $i11 + 65........................	[entry: r0 i14 r4 i15 $r10 $i11 ]	[exit: r0 i14 r4 i15 $r10 $i12 ]
$c13 = (char) $i12......................	[entry: r0 i14 r4 i15 $r10 $i12 ]	[exit: r0 i14 r4 i15 $c13 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13)	[entry: r0 i14 r4 i15 $c13 $r10 ]	[exit: r0 i14 r4 i15 $r12 ]
r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r12 ]	[exit: r13 r0 i14 r4 i15 ]
goto [?= i16 = i15 + 1].................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 r4 i15 ]
$r5 = new java.lang.StringBuilder.......	[entry: r0 i14 c1 i15 r4 r13 ]	[exit: r0 i14 c1 i15 r4 r13 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 c1 i15 r4 r13 $r5 ]	[exit: r0 i14 c1 i15 r4 r13 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 c1 i15 r4 r13 $r5 ]	[exit: r0 i14 $r6 c1 i15 r4 ]
$r7 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r0 i14 $r6 c1 i15 r4 ]	[exit: r0 i14 r4 $r6 c1 i15 $r7 ]
$c2 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i15)	[entry: r0 i14 r4 $r6 c1 i15 $r7 ]	[exit: r0 i14 r4 i15 $r6 c1 $c2 ]
$i3 = c1 + $c2..........................	[entry: r0 i14 r4 i15 $r6 c1 $c2 ]	[exit: r0 i14 r4 i15 $r6 $i3 ]
$i4 = $i3 - 194.........................	[entry: r0 i14 r4 i15 $r6 $i3 ]	[exit: r0 i14 r4 i15 $r6 $i4 ]
$i5 = $i4 % 26..........................	[entry: r0 i14 r4 i15 $r6 $i4 ]	[exit: r0 i14 r4 i15 $r6 $i5 ]
$i6 = $i5 + 97..........................	[entry: r0 i14 r4 i15 $r6 $i5 ]	[exit: r0 i14 r4 i15 $r6 $i6 ]
$c7 = (char) $i6........................	[entry: r0 i14 r4 i15 $r6 $i6 ]	[exit: r0 i14 r4 i15 $c7 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)	[entry: r0 i14 r4 i15 $c7 $r6 ]	[exit: r0 i14 r4 i15 $r8 ]
r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r8 ]	[exit: r13 r0 i14 r4 i15 ]
goto [?= i16 = i15 + 1].................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 r4 i15 ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 i14 r4 i15 c1 r13 ]	[exit: r0 i14 r4 i15 c1 r13 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 r4 i15 c1 r13 $r1 ]	[exit: r0 i14 r4 i15 c1 r13 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 r4 i15 c1 r13 $r1 ]	[exit: r0 i14 r4 i15 c1 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)	[entry: r0 i14 r4 i15 c1 $r2 ]	[exit: r0 i14 r4 i15 $r3 ]
r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r3 ]	[exit: r13 r0 i14 r4 i15 ]
i16 = i15 + 1...........................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 i16 r4 ]
$i17 = virtualinvoke r4.<java.lang.String: int length()>()	[entry: r13 r0 i14 i16 r4 ]	[exit: r13 r4 r0 i14 i16 $i17 ]
i15 = i16 % $i17........................	[entry: r13 r4 r0 i14 i16 $i17 ]	[exit: r13 i15 r4 r0 i14 ]
i14 = i14 + 1...........................	[entry: r13 i15 r4 r0 i14 ]	[exit: r13 i15 r4 i14 r0 ]
goto [?= $i0 = virtualinvoke r0.<java.lang.String: int length()>()]	[entry: r13 i15 r4 i14 r0 ]	[exit: r13 i15 r4 i14 r0 ]
return r13..............................	[entry: r13 ]	[exit: ]
********************
Class Name: ciphers.Vigenere, Method Name: decrypt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r4 := @parameter1: java.lang.String.....	[entry: r0 ]	[exit: r4 r0 ]
r13 = ""................................	[entry: r4 r0 ]	[exit: r13 r4 r0 ]
i14 = 0.................................	[entry: r13 r4 r0 ]	[exit: r13 r4 i14 r0 ]
i15 = 0.................................	[entry: r13 r4 i14 r0 ]	[exit: r13 i15 r4 i14 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r13 i15 r4 i14 r0 ]	[exit: r13 i15 r4 r0 i14 $i0 ]
if i14 >= $i0 goto return r13...........	[entry: r13 i15 r4 r0 i14 $i0 ]	[exit: r13 i15 r4 i14 r0 ]
c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i14)	[entry: i15 r4 r13 i14 r0 ]	[exit: r0 i14 i15 r4 r13 c1 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c1)	[entry: r0 i14 i15 r4 r13 c1 ]	[exit: r0 i14 i15 r4 r13 c1 $z0 ]
if $z0 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 i14 i15 r4 r13 c1 $z0 ]	[exit: r0 i14 i15 r4 r13 c1 ]
$z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c1)	[entry: r0 i14 i15 r4 r13 c1 ]	[exit: r0 i14 c1 i15 r4 r13 $z1 ]
if $z1 == 0 goto $r5 = new java.lang.StringBuilder	[entry: r0 i14 c1 i15 r4 r13 $z1 ]	[exit: r0 i14 c1 i15 r4 r13 ]
$r9 = new java.lang.StringBuilder.......	[entry: r0 i14 c1 i15 r4 r13 ]	[exit: r0 i14 c1 i15 r4 r13 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 c1 i15 r4 r13 $r9 ]	[exit: r0 i14 c1 i15 r4 r13 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 c1 i15 r4 r13 $r9 ]	[exit: r0 i14 $r10 c1 i15 r4 ]
$r11 = virtualinvoke r4.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r0 i14 $r10 c1 i15 r4 ]	[exit: r0 i14 r4 $r10 c1 i15 $r11 ]
$c8 = virtualinvoke $r11.<java.lang.String: char charAt(int)>(i15)	[entry: r0 i14 r4 $r10 c1 i15 $r11 ]	[exit: r0 i14 r4 i15 $r10 c1 $c8 ]
$i9 = c1 - $c8..........................	[entry: r0 i14 r4 i15 $r10 c1 $c8 ]	[exit: r0 i14 r4 i15 $r10 $i9 ]
$i10 = 25 - $i9.........................	[entry: r0 i14 r4 i15 $r10 $i9 ]	[exit: r0 i14 r4 i15 $r10 $i10 ]
$i11 = $i10 % 26........................	[entry: r0 i14 r4 i15 $r10 $i10 ]	[exit: r0 i14 r4 i15 $r10 $i11 ]
$i12 = 90 - $i11........................	[entry: r0 i14 r4 i15 $r10 $i11 ]	[exit: r0 i14 r4 i15 $r10 $i12 ]
$c13 = (char) $i12......................	[entry: r0 i14 r4 i15 $r10 $i12 ]	[exit: r0 i14 r4 i15 $c13 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13)	[entry: r0 i14 r4 i15 $c13 $r10 ]	[exit: r0 i14 r4 i15 $r12 ]
r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r12 ]	[exit: r13 r0 i14 r4 i15 ]
goto [?= i16 = i15 + 1].................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 r4 i15 ]
$r5 = new java.lang.StringBuilder.......	[entry: r0 i14 c1 i15 r4 r13 ]	[exit: r0 i14 c1 i15 r4 r13 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 c1 i15 r4 r13 $r5 ]	[exit: r0 i14 c1 i15 r4 r13 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 c1 i15 r4 r13 $r5 ]	[exit: r0 i14 $r6 c1 i15 r4 ]
$r7 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r0 i14 $r6 c1 i15 r4 ]	[exit: r0 i14 r4 $r6 c1 i15 $r7 ]
$c2 = virtualinvoke $r7.<java.lang.String: char charAt(int)>(i15)	[entry: r0 i14 r4 $r6 c1 i15 $r7 ]	[exit: r0 i14 r4 i15 $r6 c1 $c2 ]
$i3 = c1 - $c2..........................	[entry: r0 i14 r4 i15 $r6 c1 $c2 ]	[exit: r0 i14 r4 i15 $r6 $i3 ]
$i4 = 25 - $i3..........................	[entry: r0 i14 r4 i15 $r6 $i3 ]	[exit: r0 i14 r4 i15 $r6 $i4 ]
$i5 = $i4 % 26..........................	[entry: r0 i14 r4 i15 $r6 $i4 ]	[exit: r0 i14 r4 i15 $r6 $i5 ]
$i6 = 122 - $i5.........................	[entry: r0 i14 r4 i15 $r6 $i5 ]	[exit: r0 i14 r4 i15 $r6 $i6 ]
$c7 = (char) $i6........................	[entry: r0 i14 r4 i15 $r6 $i6 ]	[exit: r0 i14 r4 i15 $c7 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)	[entry: r0 i14 r4 i15 $c7 $r6 ]	[exit: r0 i14 r4 i15 $r8 ]
r13 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r8 ]	[exit: r13 r0 i14 r4 i15 ]
goto [?= i16 = i15 + 1].................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 r4 i15 ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 i14 r4 i15 c1 r13 ]	[exit: r0 i14 r4 i15 c1 r13 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i14 r4 i15 c1 r13 $r1 ]	[exit: r0 i14 r4 i15 c1 r13 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r13)	[entry: r0 i14 r4 i15 c1 r13 $r1 ]	[exit: r0 i14 r4 i15 c1 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)	[entry: r0 i14 r4 i15 c1 $r2 ]	[exit: r0 i14 r4 i15 $r3 ]
r13 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i14 r4 i15 $r3 ]	[exit: r13 r0 i14 r4 i15 ]
i16 = i15 + 1...........................	[entry: r13 r0 i14 r4 i15 ]	[exit: r13 r0 i14 i16 r4 ]
$i17 = virtualinvoke r4.<java.lang.String: int length()>()	[entry: r13 r0 i14 i16 r4 ]	[exit: r13 r4 r0 i14 i16 $i17 ]
i15 = i16 % $i17........................	[entry: r13 r4 r0 i14 i16 $i17 ]	[exit: r13 i15 r4 r0 i14 ]
i14 = i14 + 1...........................	[entry: r13 i15 r4 r0 i14 ]	[exit: r13 i15 r4 i14 r0 ]
goto [?= $i0 = virtualinvoke r0.<java.lang.String: int length()>()]	[entry: r13 i15 r4 i14 r0 ]	[exit: r13 i15 r4 i14 r0 ]
return r13..............................	[entry: r13 ]	[exit: ]
********************
Class Name: ciphers.Vigenere, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
r0 = "Hello World!".....................	[entry: ]	[exit: r0 ]
r1 = "itsakey"..........................	[entry: r0 ]	[exit: r1 r0 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r0 ]	[exit: r1 r0 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>(r0)	[entry: r1 r0 $r2 ]	[exit: r0 r1 ]
r3 = staticinvoke <ciphers.Vigenere: java.lang.String encrypt(java.lang.String,java.lang.String)>(r0, r1)	[entry: r0 r1 ]	[exit: r1 r3 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>(r3)	[entry: r1 r3 $r4 ]	[exit: r3 r1 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r1 ]	[exit: $r5 r3 r1 ]
$r6 = staticinvoke <ciphers.Vigenere: java.lang.String decrypt(java.lang.String,java.lang.String)>(r3, r1)	[entry: $r5 r3 r1 ]	[exit: $r6 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6)	[entry: $r6 $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: scheduleCore, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
i7 := @parameter1: int..................	[entry: r0 ]	[exit: i7 r0 ]
r21 = virtualinvoke r0.<java.math.BigInteger: java.lang.String toString(int)>(16)	[entry: i7 r0 ]	[exit: i7 r21 ]
$i0 = virtualinvoke r21.<java.lang.String: int length()>()	[entry: i7 r21 ]	[exit: i7 r21 $i0 ]
if $i0 >= 8 goto r1 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, 2)	[entry: i7 r21 $i0 ]	[exit: i7 r21 ]
$r18 = new java.lang.StringBuilder......	[entry: i7 r21 ]	[exit: i7 r21 $r18 ]
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()	[entry: i7 r21 $r18 ]	[exit: i7 r21 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0")	[entry: i7 r21 $r18 ]	[exit: i7 r21 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21)	[entry: i7 r21 $r19 ]	[exit: i7 $r20 ]
r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 $r20 ]	[exit: i7 r21 ]
goto [?= $i0 = virtualinvoke r21.<java.lang.String: int length()>()]	[entry: i7 r21 ]	[exit: i7 r21 ]
r1 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int,int)>(0, 2)	[entry: i7 r21 ]	[exit: i7 r1 r21 ]
r2 = virtualinvoke r21.<java.lang.String: java.lang.String substring(int)>(2)	[entry: i7 r1 r21 ]	[exit: i7 r1 r2 ]
$r3 = new java.lang.StringBuilder.......	[entry: i7 r1 r2 ]	[exit: i7 r1 r2 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: i7 r1 r2 $r3 ]	[exit: i7 r1 r2 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)	[entry: i7 r1 r2 $r3 ]	[exit: i7 r1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: i7 r1 $r4 ]	[exit: i7 $r5 ]
r22 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 $r5 ]	[exit: r22 i7 ]
i9 = 0..................................	[entry: r22 i7 ]	[exit: r22 i7 i9 ]
if i9 >= 4 goto $r6 = new java.math.BigInteger	[entry: r22 i7 i9 ]	[exit: r22 i7 i9 ]
$i3 = i9 * 2............................	[entry: i7 r22 i9 ]	[exit: i7 $i3 r22 i9 ]
$i1 = i9 + 1............................	[entry: i7 $i3 r22 i9 ]	[exit: i7 i9 $i3 r22 $i1 ]
$i2 = $i1 * 2...........................	[entry: i7 i9 $i3 r22 $i1 ]	[exit: i7 i9 $i3 $i2 r22 ]
r23 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>($i3, $i2)	[entry: i7 i9 $i3 $i2 r22 ]	[exit: r22 i7 i9 r23 ]
i10 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r23, 16)	[entry: r22 i7 i9 r23 ]	[exit: r22 i7 i9 i10 ]
$r7 = <ciphers.AES: int[] SBOX>.........	[entry: r22 i7 i9 i10 ]	[exit: r22 i7 i9 $r7 i10 ]
i11 = $r7[i10]..........................	[entry: r22 i7 i9 $r7 i10 ]	[exit: r22 i11 i7 i9 ]
if i9 != 0 goto r24 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i11)	[entry: r22 i11 i7 i9 ]	[exit: i7 r22 i9 i11 ]
$r17 = <ciphers.AES: int[] RCON>........	[entry: r22 i9 i11 i7 ]	[exit: r22 i9 i11 $r17 i7 ]
$i8 = $r17[i7]..........................	[entry: r22 i9 i11 $r17 i7 ]	[exit: i7 r22 i9 i11 $i8 ]
i11 = i11 ^ $i8.........................	[entry: i7 r22 i9 i11 $i8 ]	[exit: i7 r22 i9 i11 ]
r24 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i11)	[entry: i7 r22 i9 i11 ]	[exit: i7 r22 i9 r24 ]
$i12 = virtualinvoke r24.<java.lang.String: int length()>()	[entry: i7 r22 i9 r24 ]	[exit: i7 r24 r22 i9 $i12 ]
if $i12 >= 2 goto $r8 = new java.lang.StringBuilder	[entry: i7 r24 r22 i9 $i12 ]	[exit: i7 r24 r22 i9 ]
$r14 = new java.lang.StringBuilder......	[entry: i7 r22 i9 r24 ]	[exit: i7 r22 i9 r24 $r14 ]
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()	[entry: i7 r22 i9 r24 $r14 ]	[exit: i7 r22 i9 r24 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)	[entry: i7 r22 i9 r24 $r14 ]	[exit: i7 r22 i9 r24 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24)	[entry: i7 r22 i9 r24 $r15 ]	[exit: i7 r22 i9 $r16 ]
r24 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 r22 i9 $r16 ]	[exit: i7 r22 i9 r24 ]
goto [?= $i12 = virtualinvoke r24.<java.lang.String: int length()>()]	[entry: i7 r22 i9 r24 ]	[exit: i7 r22 i9 r24 ]
$r8 = new java.lang.StringBuilder.......	[entry: i7 r24 r22 i9 ]	[exit: i7 r24 r22 i9 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: i7 r24 r22 i9 $r8 ]	[exit: i7 r24 $r8 r22 i9 ]
$i4 = i9 * 2............................	[entry: i7 r24 $r8 r22 i9 ]	[exit: i7 i9 r24 $r8 $i4 r22 ]
$r9 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int,int)>(0, $i4)	[entry: i7 i9 r24 $r8 $i4 r22 ]	[exit: i7 r22 i9 r24 $r9 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)	[entry: i7 r22 i9 r24 $r9 $r8 ]	[exit: i7 r22 i9 r24 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24)	[entry: i7 r22 i9 r24 $r10 ]	[exit: i7 $r11 r22 i9 ]
$i5 = i9 + 1............................	[entry: i7 $r11 r22 i9 ]	[exit: i7 i9 $r11 r22 $i5 ]
$i6 = $i5 * 2...........................	[entry: i7 i9 $r11 r22 $i5 ]	[exit: i7 i9 $r11 $i6 r22 ]
$r12 = virtualinvoke r22.<java.lang.String: java.lang.String substring(int)>($i6)	[entry: i7 i9 $r11 $i6 r22 ]	[exit: i7 i9 $r12 $r11 ]
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)	[entry: i7 i9 $r12 $r11 ]	[exit: i7 i9 $r13 ]
r22 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 i9 $r13 ]	[exit: r22 i7 i9 ]
i9 = i9 + 1.............................	[entry: r22 i7 i9 ]	[exit: r22 i7 i9 ]
goto [?= (branch)]......................	[entry: r22 i7 i9 ]	[exit: r22 i7 i9 ]
$r6 = new java.math.BigInteger..........	[entry: r22 ]	[exit: r22 $r6 ]
specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String,int)>(r22, 16)	[entry: r22 $r6 ]	[exit: $r6 ]
return $r6..............................	[entry: $r6 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: keyExpansion, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r1 ]
$r0 = newarray (java.math.BigInteger)[11]	[entry: r1 ]	[exit: $r0 r1 ]
$r0[0] = r1.............................	[entry: $r0 r1 ]	[exit: $r0 ]
$r2 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r2 ]
specialinvoke $r2.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r3 ]
specialinvoke $r3.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r4 ]
specialinvoke $r4.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
$r5 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r5 ]
specialinvoke $r5.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r0[4] = $r5............................	[entry: $r0 $r5 ]	[exit: $r0 ]
$r6 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r6 ]
specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r6 ]	[exit: $r0 $r6 ]
$r0[5] = $r6............................	[entry: $r0 $r6 ]	[exit: $r0 ]
$r7 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r7 ]
specialinvoke $r7.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r7 ]	[exit: $r0 $r7 ]
$r0[6] = $r7............................	[entry: $r0 $r7 ]	[exit: $r0 ]
$r8 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r8 ]
specialinvoke $r8.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r8 ]	[exit: $r0 $r8 ]
$r0[7] = $r8............................	[entry: $r0 $r8 ]	[exit: $r0 ]
$r9 = new java.math.BigInteger..........	[entry: $r0 ]	[exit: $r0 $r9 ]
specialinvoke $r9.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r9 ]	[exit: $r0 $r9 ]
$r0[8] = $r9............................	[entry: $r0 $r9 ]	[exit: $r0 ]
$r10 = new java.math.BigInteger.........	[entry: $r0 ]	[exit: $r0 $r10 ]
specialinvoke $r10.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r10 ]	[exit: $r0 $r10 ]
$r0[9] = $r10...........................	[entry: $r0 $r10 ]	[exit: $r0 ]
$r11 = new java.math.BigInteger.........	[entry: $r0 ]	[exit: $r0 $r11 ]
specialinvoke $r11.<java.math.BigInteger: void <init>(java.lang.String)>("0")	[entry: $r0 $r11 ]	[exit: $r0 $r11 ]
$r0[10] = $r11..........................	[entry: $r0 $r11 ]	[exit: $r0 ]
r12 = $r0...............................	[entry: $r0 ]	[exit: r12 ]
i5 = 1..................................	[entry: r12 ]	[exit: r12 i5 ]
i6 = 1..................................	[entry: r12 i5 ]	[exit: r12 i5 i6 ]
if i6 >= 11 goto return r12.............	[entry: r12 i5 i6 ]	[exit: r12 i5 i6 ]
$i0 = i6 - 1............................	[entry: i5 r12 i6 ]	[exit: i5 i6 r12 $i0 ]
$r14 = r12[$i0].........................	[entry: i5 i6 r12 $i0 ]	[exit: i5 r12 i6 $r14 ]
$r13 = new java.math.BigInteger.........	[entry: i5 r12 i6 $r14 ]	[exit: i5 r12 i6 $r14 $r13 ]
specialinvoke $r13.<java.math.BigInteger: void <init>(java.lang.String,int)>("100000000", 16)	[entry: i5 r12 i6 $r14 $r13 ]	[exit: i5 r12 i6 $r13 $r14 ]
r44 = virtualinvoke $r14.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r13)	[entry: i5 r12 i6 $r13 $r14 ]	[exit: r44 i5 r12 i6 ]
$r15 = newarray (java.math.BigInteger)[4]	[entry: r44 i5 r12 i6 ]	[exit: r44 i5 $r15 r12 i6 ]
$i1 = i6 - 1............................	[entry: r44 i5 $r15 r12 i6 ]	[exit: r44 i5 i6 $r15 r12 $i1 ]
$r17 = r12[$i1].........................	[entry: r44 i5 i6 $r15 r12 $i1 ]	[exit: r44 i5 r12 i6 $r15 $r17 ]
$r16 = new java.math.BigInteger.........	[entry: r44 i5 r12 i6 $r15 $r17 ]	[exit: r44 i5 r12 i6 $r15 $r17 $r16 ]
specialinvoke $r16.<java.math.BigInteger: void <init>(java.lang.String,int)>("100000000", 16)	[entry: r44 i5 r12 i6 $r15 $r17 $r16 ]	[exit: r44 i5 r12 i6 $r15 $r16 $r17 ]
$r18 = virtualinvoke $r17.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r16)	[entry: r44 i5 r12 i6 $r15 $r16 $r17 ]	[exit: r44 i5 r12 i6 $r15 $r18 ]
$r15[0] = $r18..........................	[entry: r44 i5 r12 i6 $r15 $r18 ]	[exit: r44 i5 $r15 r12 i6 ]
$i2 = i6 - 1............................	[entry: r44 i5 $r15 r12 i6 ]	[exit: r44 i5 i6 $r15 r12 $i2 ]
$r20 = r12[$i2].........................	[entry: r44 i5 i6 $r15 r12 $i2 ]	[exit: r44 i5 r12 i6 $r15 $r20 ]
$r19 = new java.math.BigInteger.........	[entry: r44 i5 r12 i6 $r15 $r20 ]	[exit: r44 i5 r12 i6 $r15 $r20 $r19 ]
specialinvoke $r19.<java.math.BigInteger: void <init>(java.lang.String,int)>("10000000000000000", 16)	[entry: r44 i5 r12 i6 $r15 $r20 $r19 ]	[exit: r44 i5 r12 i6 $r15 $r19 $r20 ]
$r21 = virtualinvoke $r20.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r19)	[entry: r44 i5 r12 i6 $r15 $r19 $r20 ]	[exit: r44 i5 r12 i6 $r15 $r21 ]
$r22 = new java.math.BigInteger.........	[entry: r44 i5 r12 i6 $r15 $r21 ]	[exit: r44 i5 r12 i6 $r15 $r21 $r22 ]
specialinvoke $r22.<java.math.BigInteger: void <init>(java.lang.String,int)>("100000000", 16)	[entry: r44 i5 r12 i6 $r15 $r21 $r22 ]	[exit: r44 i5 r12 i6 $r15 $r22 $r21 ]
$r23 = virtualinvoke $r21.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r22)	[entry: r44 i5 r12 i6 $r15 $r22 $r21 ]	[exit: r44 i5 r12 i6 $r15 $r23 ]
$r15[1] = $r23..........................	[entry: r44 i5 r12 i6 $r15 $r23 ]	[exit: r44 i5 $r15 r12 i6 ]
$i3 = i6 - 1............................	[entry: r44 i5 $r15 r12 i6 ]	[exit: r44 i5 i6 $r15 r12 $i3 ]
$r25 = r12[$i3].........................	[entry: r44 i5 i6 $r15 r12 $i3 ]	[exit: r44 i5 r12 i6 $r15 $r25 ]
$r24 = new java.math.BigInteger.........	[entry: r44 i5 r12 i6 $r15 $r25 ]	[exit: r44 i5 r12 i6 $r15 $r25 $r24 ]
specialinvoke $r24.<java.math.BigInteger: void <init>(java.lang.String,int)>("1000000000000000000000000", 16)	[entry: r44 i5 r12 i6 $r15 $r25 $r24 ]	[exit: r44 i5 r12 i6 $r15 $r24 $r25 ]
$r26 = virtualinvoke $r25.<java.math.BigInteger: java.math.BigInteger remainder(java.math.BigInteger)>($r24)	[entry: r44 i5 r12 i6 $r15 $r24 $r25 ]	[exit: r44 i5 r12 i6 $r15 $r26 ]
$r27 = new java.math.BigInteger.........	[entry: r44 i5 r12 i6 $r15 $r26 ]	[exit: r44 i5 r12 i6 $r15 $r26 $r27 ]
specialinvoke $r27.<java.math.BigInteger: void <init>(java.lang.String,int)>("10000000000000000", 16)	[entry: r44 i5 r12 i6 $r15 $r26 $r27 ]	[exit: r44 i5 r12 i6 $r15 $r27 $r26 ]
$r28 = virtualinvoke $r26.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r27)	[entry: r44 i5 r12 i6 $r15 $r27 $r26 ]	[exit: r44 i5 r12 i6 $r15 $r28 ]
$r15[2] = $r28..........................	[entry: r44 i5 r12 i6 $r15 $r28 ]	[exit: r44 i5 $r15 r12 i6 ]
$i4 = i6 - 1............................	[entry: r44 i5 $r15 r12 i6 ]	[exit: i6 r44 i5 $r15 r12 $i4 ]
$r30 = r12[$i4].........................	[entry: i6 r44 i5 $r15 r12 $i4 ]	[exit: r12 i6 r44 i5 $r15 $r30 ]
$r29 = new java.math.BigInteger.........	[entry: r12 i6 r44 i5 $r15 $r30 ]	[exit: r12 i6 r44 i5 $r15 $r30 $r29 ]
specialinvoke $r29.<java.math.BigInteger: void <init>(java.lang.String,int)>("1000000000000000000000000", 16)	[entry: r12 i6 r44 i5 $r15 $r30 $r29 ]	[exit: r12 i6 r44 i5 $r15 $r29 $r30 ]
$r31 = virtualinvoke $r30.<java.math.BigInteger: java.math.BigInteger divide(java.math.BigInteger)>($r29)	[entry: r12 i6 r44 i5 $r15 $r29 $r30 ]	[exit: r12 i6 r44 i5 $r15 $r31 ]
$r15[3] = $r31..........................	[entry: r12 i6 r44 i5 $r15 $r31 ]	[exit: r12 i6 r44 i5 $r15 ]
r32 = $r15..............................	[entry: r12 i6 r44 i5 $r15 ]	[exit: r12 i6 r32 r44 i5 ]
r45 = staticinvoke <ciphers.AES: java.math.BigInteger scheduleCore(java.math.BigInteger,int)>(r44, i5)	[entry: r12 i6 r32 r44 i5 ]	[exit: r12 i6 r45 r32 i5 ]
i5 = i5 + 1.............................	[entry: r12 i6 r45 r32 i5 ]	[exit: i5 r12 i6 r45 r32 ]
$r33 = r32[3]...........................	[entry: i5 r12 i6 r45 r32 ]	[exit: i5 r12 i6 r32 $r33 r45 ]
r46 = virtualinvoke r45.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>($r33)	[entry: i5 r12 i6 r32 $r33 r45 ]	[exit: i5 r12 i6 r46 r32 ]
$r34 = r32[2]...........................	[entry: i5 r12 i6 r46 r32 ]	[exit: i5 r12 i6 r32 $r34 r46 ]
r47 = virtualinvoke r46.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>($r34)	[entry: i5 r12 i6 r32 $r34 r46 ]	[exit: i5 r12 i6 r46 r47 r32 ]
$r35 = r32[1]...........................	[entry: i5 r12 i6 r46 r47 r32 ]	[exit: i5 r12 i6 r46 r32 $r35 r47 ]
r48 = virtualinvoke r47.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>($r35)	[entry: i5 r12 i6 r46 r32 $r35 r47 ]	[exit: i5 r12 i6 r46 r47 r48 r32 ]
$r36 = r32[0]...........................	[entry: i5 r12 i6 r46 r47 r48 r32 ]	[exit: i5 r12 i6 r46 r47 $r36 r48 ]
r37 = virtualinvoke r48.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>($r36)	[entry: i5 r12 i6 r46 r47 $r36 r48 ]	[exit: i5 r12 i6 r37 r46 r47 r48 ]
$r38 = new java.math.BigInteger.........	[entry: i5 r12 i6 r37 r46 r47 r48 ]	[exit: i5 r12 i6 r37 r46 r47 r48 $r38 ]
specialinvoke $r38.<java.math.BigInteger: void <init>(java.lang.String,int)>("100000000", 16)	[entry: i5 r12 i6 r37 r46 r47 r48 $r38 ]	[exit: i5 r12 i6 r37 r46 r47 $r38 r48 ]
r49 = virtualinvoke r48.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r38)	[entry: i5 r12 i6 r37 r46 r47 $r38 r48 ]	[exit: i5 r12 i6 r37 r49 r46 r47 ]
$r39 = new java.math.BigInteger.........	[entry: i5 r12 i6 r37 r49 r46 r47 ]	[exit: i5 r12 i6 r37 r49 r46 r47 $r39 ]
specialinvoke $r39.<java.math.BigInteger: void <init>(java.lang.String,int)>("10000000000000000", 16)	[entry: i5 r12 i6 r37 r49 r46 r47 $r39 ]	[exit: i5 r12 i6 r37 r49 r46 $r39 r47 ]
r50 = virtualinvoke r47.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r39)	[entry: i5 r12 i6 r37 r49 r46 $r39 r47 ]	[exit: i5 r12 i6 r37 r49 r50 r46 ]
$r40 = new java.math.BigInteger.........	[entry: i5 r12 i6 r37 r49 r50 r46 ]	[exit: i5 r12 i6 r37 r49 r50 r46 $r40 ]
specialinvoke $r40.<java.math.BigInteger: void <init>(java.lang.String,int)>("1000000000000000000000000", 16)	[entry: i5 r12 i6 r37 r49 r50 r46 $r40 ]	[exit: i5 r12 i6 r37 r49 r50 $r40 r46 ]
r51 = virtualinvoke r46.<java.math.BigInteger: java.math.BigInteger multiply(java.math.BigInteger)>($r40)	[entry: i5 r12 i6 r37 r49 r50 $r40 r46 ]	[exit: i5 r12 i6 r37 r49 r50 r51 ]
$r41 = virtualinvoke r51.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r50)	[entry: i5 r12 i6 r37 r49 r50 r51 ]	[exit: i5 r12 i6 r37 r49 $r41 ]
$r42 = virtualinvoke $r41.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r49)	[entry: i5 r12 i6 r37 r49 $r41 ]	[exit: i5 r12 i6 r37 $r42 ]
$r43 = virtualinvoke $r42.<java.math.BigInteger: java.math.BigInteger add(java.math.BigInteger)>(r37)	[entry: i5 r12 i6 r37 $r42 ]	[exit: i5 r12 i6 $r43 ]
r12[i6] = $r43..........................	[entry: i5 r12 i6 $r43 ]	[exit: r12 i5 i6 ]
i6 = i6 + 1.............................	[entry: r12 i5 i6 ]	[exit: r12 i5 i6 ]
goto [?= (branch)]......................	[entry: r12 i5 i6 ]	[exit: r12 i5 i6 ]
return r12..............................	[entry: r12 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: splitBlockIntoCells, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r1 ]
r0 = newarray (int)[16].................	[entry: r1 ]	[exit: r0 r1 ]
r6 = virtualinvoke r1.<java.math.BigInteger: java.lang.String toString(int)>(2)	[entry: r0 r1 ]	[exit: r0 r6 ]
$i0 = virtualinvoke r6.<java.lang.String: int length()>()	[entry: r0 r6 ]	[exit: r6 r0 $i0 ]
if $i0 >= 128 goto i6 = 0...............	[entry: r6 r0 $i0 ]	[exit: r6 r0 ]
$r3 = new java.lang.StringBuilder.......	[entry: r0 r6 ]	[exit: r0 r6 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: r0 r6 $r3 ]	[exit: r0 r6 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)	[entry: r0 r6 $r3 ]	[exit: r0 r6 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)	[entry: r0 r6 $r4 ]	[exit: r0 $r5 ]
r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 $r5 ]	[exit: r0 r6 ]
goto [?= $i0 = virtualinvoke r6.<java.lang.String: int length()>()]	[entry: r0 r6 ]	[exit: r0 r6 ]
i6 = 0..................................	[entry: r6 r0 ]	[exit: r6 i6 r0 ]
$i1 = lengthof r0.......................	[entry: r6 i6 r0 ]	[exit: r0 r6 i6 $i1 ]
if i6 >= $i1 goto return r0.............	[entry: r0 r6 i6 $i1 ]	[exit: r0 r6 i6 ]
$i4 = 8 * i6............................	[entry: r0 r6 i6 ]	[exit: r0 $i4 r6 i6 ]
$i2 = i6 + 1............................	[entry: r0 $i4 r6 i6 ]	[exit: r0 i6 $i4 r6 $i2 ]
$i3 = 8 * $i2...........................	[entry: r0 i6 $i4 r6 $i2 ]	[exit: r0 i6 $i4 $i3 r6 ]
r2 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int,int)>($i4, $i3)	[entry: r0 i6 $i4 $i3 r6 ]	[exit: r6 r0 i6 r2 ]
$i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r2, 2)	[entry: r6 r0 i6 r2 ]	[exit: r6 r0 i6 $i5 ]
r0[i6] = $i5............................	[entry: r6 r0 i6 $i5 ]	[exit: r6 r0 i6 ]
i6 = i6 + 1.............................	[entry: r6 r0 i6 ]	[exit: r6 i6 r0 ]
goto [?= $i1 = lengthof r0].............	[entry: r6 i6 r0 ]	[exit: r6 i6 r0 ]
return r0...............................	[entry: r0 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: mergeCellsIntoBlock, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: int[]................	[entry: ]	[exit: r1 ]
r8 = "".................................	[entry: r1 ]	[exit: r8 r1 ]
i2 = 0..................................	[entry: r8 r1 ]	[exit: r8 r1 i2 ]
if i2 >= 16 goto $r0 = new java.math.BigInteger	[entry: r8 r1 i2 ]	[exit: r8 r1 i2 ]
$i0 = r1[i2]............................	[entry: r8 r1 i2 ]	[exit: r1 i2 r8 $i0 ]
r9 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>($i0)	[entry: r1 i2 r8 $i0 ]	[exit: r1 i2 r8 r9 ]
$i1 = virtualinvoke r9.<java.lang.String: int length()>()	[entry: r1 i2 r8 r9 ]	[exit: r1 i2 r9 r8 $i1 ]
if $i1 >= 8 goto $r2 = new java.lang.StringBuilder	[entry: r1 i2 r9 r8 $i1 ]	[exit: r1 i2 r9 r8 ]
$r5 = new java.lang.StringBuilder.......	[entry: r1 i2 r8 r9 ]	[exit: r1 i2 r8 r9 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i2 r8 r9 $r5 ]	[exit: r1 i2 r8 r9 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(48)	[entry: r1 i2 r8 r9 $r5 ]	[exit: r1 i2 r8 r9 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9)	[entry: r1 i2 r8 r9 $r6 ]	[exit: r1 i2 r8 $r7 ]
r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i2 r8 $r7 ]	[exit: r1 i2 r8 r9 ]
goto [?= $i1 = virtualinvoke r9.<java.lang.String: int length()>()]	[entry: r1 i2 r8 r9 ]	[exit: r1 i2 r8 r9 ]
$r2 = new java.lang.StringBuilder.......	[entry: r1 i2 r9 r8 ]	[exit: r1 i2 r9 r8 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i2 r9 r8 $r2 ]	[exit: r1 i2 r9 r8 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)	[entry: r1 i2 r9 r8 $r2 ]	[exit: r1 i2 r9 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9)	[entry: r1 i2 r9 $r3 ]	[exit: r1 i2 $r4 ]
r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i2 $r4 ]	[exit: r8 r1 i2 ]
i2 = i2 + 1.............................	[entry: r8 r1 i2 ]	[exit: r8 r1 i2 ]
goto [?= (branch)]......................	[entry: r8 r1 i2 ]	[exit: r8 r1 i2 ]
$r0 = new java.math.BigInteger..........	[entry: r8 ]	[exit: r8 $r0 ]
specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String,int)>(r8, 2)	[entry: r8 $r0 ]	[exit: $r0 ]
return $r0..............................	[entry: $r0 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: addRoundKey, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 := @parameter1: java.math.BigInteger.	[entry: r0 ]	[exit: r1 r0 ]
$r2 = virtualinvoke r0.<java.math.BigInteger: java.math.BigInteger xor(java.math.BigInteger)>(r1)	[entry: r1 r0 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: subBytes, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
i2 = 0..................................	[entry: r1 ]	[exit: r1 i2 ]
if i2 >= 16 goto $r2 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r1)	[entry: r1 i2 ]	[exit: r1 i2 ]
$r3 = <ciphers.AES: int[] SBOX>.........	[entry: r1 i2 ]	[exit: $r3 r1 i2 ]
$i0 = r1[i2]............................	[entry: $r3 r1 i2 ]	[exit: r1 i2 $r3 $i0 ]
$i1 = $r3[$i0]..........................	[entry: r1 i2 $r3 $i0 ]	[exit: r1 i2 $i1 ]
r1[i2] = $i1............................	[entry: r1 i2 $i1 ]	[exit: r1 i2 ]
i2 = i2 + 1.............................	[entry: r1 i2 ]	[exit: r1 i2 ]
goto [?= (branch)]......................	[entry: r1 i2 ]	[exit: r1 i2 ]
$r2 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r1)	[entry: r1 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: subBytesDec, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
i2 = 0..................................	[entry: r1 ]	[exit: r1 i2 ]
if i2 >= 16 goto $r2 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r1)	[entry: r1 i2 ]	[exit: r1 i2 ]
$r3 = <ciphers.AES: int[] INVERSE_SBOX>.	[entry: r1 i2 ]	[exit: $r3 r1 i2 ]
$i0 = r1[i2]............................	[entry: $r3 r1 i2 ]	[exit: r1 i2 $r3 $i0 ]
$i1 = $r3[$i0]..........................	[entry: r1 i2 $r3 $i0 ]	[exit: r1 i2 $i1 ]
r1[i2] = $i1............................	[entry: r1 i2 $i1 ]	[exit: r1 i2 ]
i2 = i2 + 1.............................	[entry: r1 i2 ]	[exit: r1 i2 ]
goto [?= (branch)]......................	[entry: r1 i2 ]	[exit: r1 i2 ]
$r2 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r1)	[entry: r1 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: shiftRows, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
r2 = newarray (int)[16].................	[entry: r1 ]	[exit: r2 r1 ]
$i0 = r1[0].............................	[entry: r2 r1 ]	[exit: r1 r2 $i0 ]
r2[0] = $i0.............................	[entry: r1 r2 $i0 ]	[exit: r2 r1 ]
$i1 = r1[4].............................	[entry: r2 r1 ]	[exit: r1 r2 $i1 ]
r2[4] = $i1.............................	[entry: r1 r2 $i1 ]	[exit: r2 r1 ]
$i2 = r1[8].............................	[entry: r2 r1 ]	[exit: r1 r2 $i2 ]
r2[8] = $i2.............................	[entry: r1 r2 $i2 ]	[exit: r2 r1 ]
$i3 = r1[12]............................	[entry: r2 r1 ]	[exit: r1 r2 $i3 ]
r2[12] = $i3............................	[entry: r1 r2 $i3 ]	[exit: r2 r1 ]
$i4 = r1[5].............................	[entry: r2 r1 ]	[exit: r1 r2 $i4 ]
r2[1] = $i4.............................	[entry: r1 r2 $i4 ]	[exit: r2 r1 ]
$i5 = r1[9].............................	[entry: r2 r1 ]	[exit: r1 r2 $i5 ]
r2[5] = $i5.............................	[entry: r1 r2 $i5 ]	[exit: r2 r1 ]
$i6 = r1[13]............................	[entry: r2 r1 ]	[exit: r1 r2 $i6 ]
r2[9] = $i6.............................	[entry: r1 r2 $i6 ]	[exit: r2 r1 ]
$i7 = r1[1].............................	[entry: r2 r1 ]	[exit: r1 r2 $i7 ]
r2[13] = $i7............................	[entry: r1 r2 $i7 ]	[exit: r2 r1 ]
$i8 = r1[10]............................	[entry: r2 r1 ]	[exit: r1 r2 $i8 ]
r2[2] = $i8.............................	[entry: r1 r2 $i8 ]	[exit: r2 r1 ]
$i9 = r1[14]............................	[entry: r2 r1 ]	[exit: r1 r2 $i9 ]
r2[6] = $i9.............................	[entry: r1 r2 $i9 ]	[exit: r2 r1 ]
$i10 = r1[2]............................	[entry: r2 r1 ]	[exit: r1 r2 $i10 ]
r2[10] = $i10...........................	[entry: r1 r2 $i10 ]	[exit: r2 r1 ]
$i11 = r1[6]............................	[entry: r2 r1 ]	[exit: r1 r2 $i11 ]
r2[14] = $i11...........................	[entry: r1 r2 $i11 ]	[exit: r2 r1 ]
$i12 = r1[15]...........................	[entry: r2 r1 ]	[exit: r1 r2 $i12 ]
r2[3] = $i12............................	[entry: r1 r2 $i12 ]	[exit: r2 r1 ]
$i13 = r1[3]............................	[entry: r2 r1 ]	[exit: r1 r2 $i13 ]
r2[7] = $i13............................	[entry: r1 r2 $i13 ]	[exit: r2 r1 ]
$i14 = r1[7]............................	[entry: r2 r1 ]	[exit: r1 r2 $i14 ]
r2[11] = $i14...........................	[entry: r1 r2 $i14 ]	[exit: r2 r1 ]
$i15 = r1[11]...........................	[entry: r2 r1 ]	[exit: r2 $i15 ]
r2[15] = $i15...........................	[entry: r2 $i15 ]	[exit: r2 ]
$r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: shiftRowsDec, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
r2 = newarray (int)[16].................	[entry: r1 ]	[exit: r2 r1 ]
$i0 = r1[0].............................	[entry: r2 r1 ]	[exit: r1 r2 $i0 ]
r2[0] = $i0.............................	[entry: r1 r2 $i0 ]	[exit: r2 r1 ]
$i1 = r1[4].............................	[entry: r2 r1 ]	[exit: r1 r2 $i1 ]
r2[4] = $i1.............................	[entry: r1 r2 $i1 ]	[exit: r2 r1 ]
$i2 = r1[8].............................	[entry: r2 r1 ]	[exit: r1 r2 $i2 ]
r2[8] = $i2.............................	[entry: r1 r2 $i2 ]	[exit: r2 r1 ]
$i3 = r1[12]............................	[entry: r2 r1 ]	[exit: r1 r2 $i3 ]
r2[12] = $i3............................	[entry: r1 r2 $i3 ]	[exit: r2 r1 ]
$i4 = r1[13]............................	[entry: r2 r1 ]	[exit: r1 r2 $i4 ]
r2[1] = $i4.............................	[entry: r1 r2 $i4 ]	[exit: r2 r1 ]
$i5 = r1[1].............................	[entry: r2 r1 ]	[exit: r1 r2 $i5 ]
r2[5] = $i5.............................	[entry: r1 r2 $i5 ]	[exit: r2 r1 ]
$i6 = r1[5].............................	[entry: r2 r1 ]	[exit: r1 r2 $i6 ]
r2[9] = $i6.............................	[entry: r1 r2 $i6 ]	[exit: r2 r1 ]
$i7 = r1[9].............................	[entry: r2 r1 ]	[exit: r1 r2 $i7 ]
r2[13] = $i7............................	[entry: r1 r2 $i7 ]	[exit: r2 r1 ]
$i8 = r1[10]............................	[entry: r2 r1 ]	[exit: r1 r2 $i8 ]
r2[2] = $i8.............................	[entry: r1 r2 $i8 ]	[exit: r2 r1 ]
$i9 = r1[14]............................	[entry: r2 r1 ]	[exit: r1 r2 $i9 ]
r2[6] = $i9.............................	[entry: r1 r2 $i9 ]	[exit: r2 r1 ]
$i10 = r1[2]............................	[entry: r2 r1 ]	[exit: r1 r2 $i10 ]
r2[10] = $i10...........................	[entry: r1 r2 $i10 ]	[exit: r2 r1 ]
$i11 = r1[6]............................	[entry: r2 r1 ]	[exit: r1 r2 $i11 ]
r2[14] = $i11...........................	[entry: r1 r2 $i11 ]	[exit: r2 r1 ]
$i12 = r1[7]............................	[entry: r2 r1 ]	[exit: r1 r2 $i12 ]
r2[3] = $i12............................	[entry: r1 r2 $i12 ]	[exit: r2 r1 ]
$i13 = r1[11]...........................	[entry: r2 r1 ]	[exit: r1 r2 $i13 ]
r2[7] = $i13............................	[entry: r1 r2 $i13 ]	[exit: r2 r1 ]
$i14 = r1[15]...........................	[entry: r2 r1 ]	[exit: r1 r2 $i14 ]
r2[11] = $i14...........................	[entry: r1 r2 $i14 ]	[exit: r2 r1 ]
$i15 = r1[3]............................	[entry: r2 r1 ]	[exit: r2 $i15 ]
r2[15] = $i15...........................	[entry: r2 $i15 ]	[exit: r2 ]
$r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: mixColumns, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
r2 = newarray (int)[16].................	[entry: r1 ]	[exit: r2 r1 ]
i54 = 0.................................	[entry: r2 r1 ]	[exit: r2 r1 i54 ]
if i54 >= 4 goto $r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 r1 i54 ]	[exit: r2 r1 i54 ]
$r4 = newarray (int)[4].................	[entry: r2 r1 i54 ]	[exit: r2 $r4 r1 i54 ]
$i0 = i54 * 4...........................	[entry: r2 $r4 r1 i54 ]	[exit: r2 i54 $r4 r1 $i0 ]
$i1 = r1[$i0]...........................	[entry: r2 i54 $r4 r1 $i0 ]	[exit: r2 r1 i54 $r4 $i1 ]
$r4[0] = $i1............................	[entry: r2 r1 i54 $r4 $i1 ]	[exit: r2 $r4 r1 i54 ]
$i2 = i54 * 4...........................	[entry: r2 $r4 r1 i54 ]	[exit: r2 i54 $r4 r1 $i2 ]
$i3 = $i2 + 1...........................	[entry: r2 i54 $r4 r1 $i2 ]	[exit: r2 i54 $r4 r1 $i3 ]
$i4 = r1[$i3]...........................	[entry: r2 i54 $r4 r1 $i3 ]	[exit: r2 r1 i54 $r4 $i4 ]
$r4[1] = $i4............................	[entry: r2 r1 i54 $r4 $i4 ]	[exit: r2 $r4 r1 i54 ]
$i5 = i54 * 4...........................	[entry: r2 $r4 r1 i54 ]	[exit: r2 i54 $r4 r1 $i5 ]
$i6 = $i5 + 2...........................	[entry: r2 i54 $r4 r1 $i5 ]	[exit: r2 i54 $r4 r1 $i6 ]
$i7 = r1[$i6]...........................	[entry: r2 i54 $r4 r1 $i6 ]	[exit: r2 r1 i54 $r4 $i7 ]
$r4[2] = $i7............................	[entry: r2 r1 i54 $r4 $i7 ]	[exit: r2 $r4 r1 i54 ]
$i8 = i54 * 4...........................	[entry: r2 $r4 r1 i54 ]	[exit: r2 i54 $r4 r1 $i8 ]
$i9 = $i8 + 3...........................	[entry: r2 i54 $r4 r1 $i8 ]	[exit: r2 i54 $r4 r1 $i9 ]
$i10 = r1[$i9]..........................	[entry: r2 i54 $r4 r1 $i9 ]	[exit: r1 r2 i54 $r4 $i10 ]
$r4[3] = $i10...........................	[entry: r1 r2 i54 $r4 $i10 ]	[exit: r1 r2 i54 $r4 ]
r5 = $r4................................	[entry: r1 r2 i54 $r4 ]	[exit: r1 r2 r5 i54 ]
$i20 = i54 * 4..........................	[entry: r1 r2 r5 i54 ]	[exit: r1 i54 r2 $i20 r5 ]
$r6 = <ciphers.AES: int[] MULT2>........	[entry: r1 i54 r2 $i20 r5 ]	[exit: r1 i54 r2 $i20 $r6 r5 ]
$i11 = r5[0]............................	[entry: r1 i54 r2 $i20 $r6 r5 ]	[exit: r1 i54 r2 $i20 r5 $r6 $i11 ]
$i14 = $r6[$i11]........................	[entry: r1 i54 r2 $i20 r5 $r6 $i11 ]	[exit: r1 i54 r2 $i20 $i14 r5 ]
$r7 = <ciphers.AES: int[] MULT3>........	[entry: r1 i54 r2 $i20 $i14 r5 ]	[exit: r1 i54 r2 $i20 $i14 $r7 r5 ]
$i12 = r5[1]............................	[entry: r1 i54 r2 $i20 $i14 $r7 r5 ]	[exit: r1 i54 r2 $i20 r5 $i14 $r7 $i12 ]
$i13 = $r7[$i12]........................	[entry: r1 i54 r2 $i20 r5 $i14 $r7 $i12 ]	[exit: r1 i54 r2 $i20 r5 $i14 $i13 ]
$i16 = $i14 ^ $i13......................	[entry: r1 i54 r2 $i20 r5 $i14 $i13 ]	[exit: r1 i54 r2 $i20 $i16 r5 ]
$i15 = r5[2]............................	[entry: r1 i54 r2 $i20 $i16 r5 ]	[exit: r1 i54 r2 $i20 r5 $i16 $i15 ]
$i18 = $i16 ^ $i15......................	[entry: r1 i54 r2 $i20 r5 $i16 $i15 ]	[exit: r1 i54 r2 $i20 $i18 r5 ]
$i17 = r5[3]............................	[entry: r1 i54 r2 $i20 $i18 r5 ]	[exit: r1 r5 i54 r2 $i20 $i18 $i17 ]
$i19 = $i18 ^ $i17......................	[entry: r1 r5 i54 r2 $i20 $i18 $i17 ]	[exit: r1 r5 i54 r2 $i20 $i19 ]
r2[$i20] = $i19.........................	[entry: r1 r5 i54 r2 $i20 $i19 ]	[exit: r1 r2 r5 i54 ]
$i21 = i54 * 4..........................	[entry: r1 r2 r5 i54 ]	[exit: r1 i54 r2 r5 $i21 ]
$i31 = $i21 + 1.........................	[entry: r1 i54 r2 r5 $i21 ]	[exit: r1 i54 r2 $i31 r5 ]
$i24 = r5[0]............................	[entry: r1 i54 r2 $i31 r5 ]	[exit: r1 i54 r2 $i31 $i24 r5 ]
$r8 = <ciphers.AES: int[] MULT2>........	[entry: r1 i54 r2 $i31 $i24 r5 ]	[exit: r1 i54 r2 $i31 $i24 $r8 r5 ]
$i22 = r5[1]............................	[entry: r1 i54 r2 $i31 $i24 $r8 r5 ]	[exit: r1 i54 r2 $i31 r5 $i24 $r8 $i22 ]
$i23 = $r8[$i22]........................	[entry: r1 i54 r2 $i31 r5 $i24 $r8 $i22 ]	[exit: r1 i54 r2 $i31 r5 $i24 $i23 ]
$i27 = $i24 ^ $i23......................	[entry: r1 i54 r2 $i31 r5 $i24 $i23 ]	[exit: r1 i54 r2 $i31 $i27 r5 ]
$r9 = <ciphers.AES: int[] MULT3>........	[entry: r1 i54 r2 $i31 $i27 r5 ]	[exit: r1 i54 r2 $i31 $i27 $r9 r5 ]
$i25 = r5[2]............................	[entry: r1 i54 r2 $i31 $i27 $r9 r5 ]	[exit: r1 i54 r2 $i31 r5 $i27 $r9 $i25 ]
$i26 = $r9[$i25]........................	[entry: r1 i54 r2 $i31 r5 $i27 $r9 $i25 ]	[exit: r1 i54 r2 $i31 r5 $i27 $i26 ]
$i29 = $i27 ^ $i26......................	[entry: r1 i54 r2 $i31 r5 $i27 $i26 ]	[exit: r1 i54 r2 $i31 $i29 r5 ]
$i28 = r5[3]............................	[entry: r1 i54 r2 $i31 $i29 r5 ]	[exit: r1 r5 i54 r2 $i31 $i29 $i28 ]
$i30 = $i29 ^ $i28......................	[entry: r1 r5 i54 r2 $i31 $i29 $i28 ]	[exit: r1 r5 i54 r2 $i31 $i30 ]
r2[$i31] = $i30.........................	[entry: r1 r5 i54 r2 $i31 $i30 ]	[exit: r1 r2 r5 i54 ]
$i32 = i54 * 4..........................	[entry: r1 r2 r5 i54 ]	[exit: r1 i54 r2 r5 $i32 ]
$i42 = $i32 + 2.........................	[entry: r1 i54 r2 r5 $i32 ]	[exit: r1 i54 r2 $i42 r5 ]
$i34 = r5[0]............................	[entry: r1 i54 r2 $i42 r5 ]	[exit: r1 i54 r2 $i42 $i34 r5 ]
$i33 = r5[1]............................	[entry: r1 i54 r2 $i42 $i34 r5 ]	[exit: r1 i54 r2 $i42 r5 $i34 $i33 ]
$i37 = $i34 ^ $i33......................	[entry: r1 i54 r2 $i42 r5 $i34 $i33 ]	[exit: r1 i54 r2 $i42 $i37 r5 ]
$r10 = <ciphers.AES: int[] MULT2>.......	[entry: r1 i54 r2 $i42 $i37 r5 ]	[exit: r1 i54 r2 $i42 $i37 $r10 r5 ]
$i35 = r5[2]............................	[entry: r1 i54 r2 $i42 $i37 $r10 r5 ]	[exit: r1 i54 r2 $i42 r5 $i37 $r10 $i35 ]
$i36 = $r10[$i35].......................	[entry: r1 i54 r2 $i42 r5 $i37 $r10 $i35 ]	[exit: r1 i54 r2 $i42 r5 $i37 $i36 ]
$i40 = $i37 ^ $i36......................	[entry: r1 i54 r2 $i42 r5 $i37 $i36 ]	[exit: r1 i54 r2 $i42 $i40 r5 ]
$r11 = <ciphers.AES: int[] MULT3>.......	[entry: r1 i54 r2 $i42 $i40 r5 ]	[exit: r1 i54 r2 $i42 $i40 $r11 r5 ]
$i38 = r5[3]............................	[entry: r1 i54 r2 $i42 $i40 $r11 r5 ]	[exit: r1 r5 i54 r2 $i42 $i40 $r11 $i38 ]
$i39 = $r11[$i38].......................	[entry: r1 r5 i54 r2 $i42 $i40 $r11 $i38 ]	[exit: r1 r5 i54 r2 $i42 $i40 $i39 ]
$i41 = $i40 ^ $i39......................	[entry: r1 r5 i54 r2 $i42 $i40 $i39 ]	[exit: r1 r5 i54 r2 $i42 $i41 ]
r2[$i42] = $i41.........................	[entry: r1 r5 i54 r2 $i42 $i41 ]	[exit: r1 r2 r5 i54 ]
$i43 = i54 * 4..........................	[entry: r1 r2 r5 i54 ]	[exit: r1 i54 r2 r5 $i43 ]
$i53 = $i43 + 3.........................	[entry: r1 i54 r2 r5 $i43 ]	[exit: r1 i54 r2 $i53 r5 ]
$r12 = <ciphers.AES: int[] MULT3>.......	[entry: r1 i54 r2 $i53 r5 ]	[exit: r1 i54 r2 $i53 $r12 r5 ]
$i44 = r5[0]............................	[entry: r1 i54 r2 $i53 $r12 r5 ]	[exit: r1 i54 r2 $i53 r5 $r12 $i44 ]
$i46 = $r12[$i44].......................	[entry: r1 i54 r2 $i53 r5 $r12 $i44 ]	[exit: r1 i54 r2 $i53 $i46 r5 ]
$i45 = r5[1]............................	[entry: r1 i54 r2 $i53 $i46 r5 ]	[exit: r1 i54 r2 $i53 r5 $i46 $i45 ]
$i48 = $i46 ^ $i45......................	[entry: r1 i54 r2 $i53 r5 $i46 $i45 ]	[exit: r1 i54 r2 $i53 $i48 r5 ]
$i47 = r5[2]............................	[entry: r1 i54 r2 $i53 $i48 r5 ]	[exit: r1 i54 r2 $i53 r5 $i48 $i47 ]
$i51 = $i48 ^ $i47......................	[entry: r1 i54 r2 $i53 r5 $i48 $i47 ]	[exit: r1 i54 r2 $i53 $i51 r5 ]
$r13 = <ciphers.AES: int[] MULT2>.......	[entry: r1 i54 r2 $i53 $i51 r5 ]	[exit: r1 i54 r2 $i53 $i51 $r13 r5 ]
$i49 = r5[3]............................	[entry: r1 i54 r2 $i53 $i51 $r13 r5 ]	[exit: r1 i54 r2 $i53 $i51 $r13 $i49 ]
$i50 = $r13[$i49].......................	[entry: r1 i54 r2 $i53 $i51 $r13 $i49 ]	[exit: r1 i54 r2 $i53 $i51 $i50 ]
$i52 = $i51 ^ $i50......................	[entry: r1 i54 r2 $i53 $i51 $i50 ]	[exit: r1 i54 r2 $i53 $i52 ]
r2[$i53] = $i52.........................	[entry: r1 i54 r2 $i53 $i52 ]	[exit: r2 r1 i54 ]
i54 = i54 + 1...........................	[entry: r2 r1 i54 ]	[exit: r2 r1 i54 ]
goto [?= (branch)]......................	[entry: r2 r1 i54 ]	[exit: r2 r1 i54 ]
$r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: mixColumnsDec, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r0 ]
r1 = staticinvoke <ciphers.AES: int[] splitBlockIntoCells(java.math.BigInteger)>(r0)	[entry: r0 ]	[exit: r1 ]
r2 = newarray (int)[16].................	[entry: r1 ]	[exit: r2 r1 ]
i62 = 0.................................	[entry: r2 r1 ]	[exit: r2 r1 i62 ]
if i62 >= 4 goto $r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 r1 i62 ]	[exit: r2 r1 i62 ]
$r4 = newarray (int)[4].................	[entry: r2 r1 i62 ]	[exit: r2 $r4 r1 i62 ]
$i0 = i62 * 4...........................	[entry: r2 $r4 r1 i62 ]	[exit: r2 i62 $r4 r1 $i0 ]
$i1 = r1[$i0]...........................	[entry: r2 i62 $r4 r1 $i0 ]	[exit: r2 r1 i62 $r4 $i1 ]
$r4[0] = $i1............................	[entry: r2 r1 i62 $r4 $i1 ]	[exit: r2 $r4 r1 i62 ]
$i2 = i62 * 4...........................	[entry: r2 $r4 r1 i62 ]	[exit: r2 i62 $r4 r1 $i2 ]
$i3 = $i2 + 1...........................	[entry: r2 i62 $r4 r1 $i2 ]	[exit: r2 i62 $r4 r1 $i3 ]
$i4 = r1[$i3]...........................	[entry: r2 i62 $r4 r1 $i3 ]	[exit: r2 r1 i62 $r4 $i4 ]
$r4[1] = $i4............................	[entry: r2 r1 i62 $r4 $i4 ]	[exit: r2 $r4 r1 i62 ]
$i5 = i62 * 4...........................	[entry: r2 $r4 r1 i62 ]	[exit: r2 i62 $r4 r1 $i5 ]
$i6 = $i5 + 2...........................	[entry: r2 i62 $r4 r1 $i5 ]	[exit: r2 i62 $r4 r1 $i6 ]
$i7 = r1[$i6]...........................	[entry: r2 i62 $r4 r1 $i6 ]	[exit: r2 r1 i62 $r4 $i7 ]
$r4[2] = $i7............................	[entry: r2 r1 i62 $r4 $i7 ]	[exit: r2 $r4 r1 i62 ]
$i8 = i62 * 4...........................	[entry: r2 $r4 r1 i62 ]	[exit: r2 i62 $r4 r1 $i8 ]
$i9 = $i8 + 3...........................	[entry: r2 i62 $r4 r1 $i8 ]	[exit: r2 i62 $r4 r1 $i9 ]
$i10 = r1[$i9]..........................	[entry: r2 i62 $r4 r1 $i9 ]	[exit: r1 r2 i62 $r4 $i10 ]
$r4[3] = $i10...........................	[entry: r1 r2 i62 $r4 $i10 ]	[exit: r1 r2 i62 $r4 ]
r5 = $r4................................	[entry: r1 r2 i62 $r4 ]	[exit: r1 r2 r5 i62 ]
$i22 = i62 * 4..........................	[entry: r1 r2 r5 i62 ]	[exit: r1 i62 r2 $i22 r5 ]
$r6 = <ciphers.AES: int[] MULT14>.......	[entry: r1 i62 r2 $i22 r5 ]	[exit: r1 i62 r2 $i22 $r6 r5 ]
$i11 = r5[0]............................	[entry: r1 i62 r2 $i22 $r6 r5 ]	[exit: r1 i62 r2 $i22 r5 $r6 $i11 ]
$i14 = $r6[$i11]........................	[entry: r1 i62 r2 $i22 r5 $r6 $i11 ]	[exit: r1 i62 r2 $i22 $i14 r5 ]
$r7 = <ciphers.AES: int[] MULT11>.......	[entry: r1 i62 r2 $i22 $i14 r5 ]	[exit: r1 i62 r2 $i22 $i14 $r7 r5 ]
$i12 = r5[1]............................	[entry: r1 i62 r2 $i22 $i14 $r7 r5 ]	[exit: r1 i62 r2 $i22 r5 $i14 $r7 $i12 ]
$i13 = $r7[$i12]........................	[entry: r1 i62 r2 $i22 r5 $i14 $r7 $i12 ]	[exit: r1 i62 r2 $i22 r5 $i14 $i13 ]
$i17 = $i14 ^ $i13......................	[entry: r1 i62 r2 $i22 r5 $i14 $i13 ]	[exit: r1 i62 r2 $i22 $i17 r5 ]
$r8 = <ciphers.AES: int[] MULT13>.......	[entry: r1 i62 r2 $i22 $i17 r5 ]	[exit: r1 i62 r2 $i22 $i17 $r8 r5 ]
$i15 = r5[2]............................	[entry: r1 i62 r2 $i22 $i17 $r8 r5 ]	[exit: r1 i62 r2 $i22 r5 $i17 $r8 $i15 ]
$i16 = $r8[$i15]........................	[entry: r1 i62 r2 $i22 r5 $i17 $r8 $i15 ]	[exit: r1 i62 r2 $i22 r5 $i17 $i16 ]
$i20 = $i17 ^ $i16......................	[entry: r1 i62 r2 $i22 r5 $i17 $i16 ]	[exit: r1 i62 r2 $i22 $i20 r5 ]
$r9 = <ciphers.AES: int[] MULT9>........	[entry: r1 i62 r2 $i22 $i20 r5 ]	[exit: r1 i62 r2 $i22 $i20 $r9 r5 ]
$i18 = r5[3]............................	[entry: r1 i62 r2 $i22 $i20 $r9 r5 ]	[exit: r1 r5 i62 r2 $i22 $i20 $r9 $i18 ]
$i19 = $r9[$i18]........................	[entry: r1 r5 i62 r2 $i22 $i20 $r9 $i18 ]	[exit: r1 r5 i62 r2 $i22 $i20 $i19 ]
$i21 = $i20 ^ $i19......................	[entry: r1 r5 i62 r2 $i22 $i20 $i19 ]	[exit: r1 r5 i62 r2 $i22 $i21 ]
r2[$i22] = $i21.........................	[entry: r1 r5 i62 r2 $i22 $i21 ]	[exit: r1 r2 r5 i62 ]
$i23 = i62 * 4..........................	[entry: r1 r2 r5 i62 ]	[exit: r1 i62 r2 r5 $i23 ]
$i35 = $i23 + 1.........................	[entry: r1 i62 r2 r5 $i23 ]	[exit: r1 i62 r2 $i35 r5 ]
$r10 = <ciphers.AES: int[] MULT9>.......	[entry: r1 i62 r2 $i35 r5 ]	[exit: r1 i62 r2 $i35 $r10 r5 ]
$i24 = r5[0]............................	[entry: r1 i62 r2 $i35 $r10 r5 ]	[exit: r1 i62 r2 $i35 r5 $r10 $i24 ]
$i27 = $r10[$i24].......................	[entry: r1 i62 r2 $i35 r5 $r10 $i24 ]	[exit: r1 i62 r2 $i35 $i27 r5 ]
$r11 = <ciphers.AES: int[] MULT14>......	[entry: r1 i62 r2 $i35 $i27 r5 ]	[exit: r1 i62 r2 $i35 $i27 $r11 r5 ]
$i25 = r5[1]............................	[entry: r1 i62 r2 $i35 $i27 $r11 r5 ]	[exit: r1 i62 r2 $i35 r5 $i27 $r11 $i25 ]
$i26 = $r11[$i25].......................	[entry: r1 i62 r2 $i35 r5 $i27 $r11 $i25 ]	[exit: r1 i62 r2 $i35 r5 $i27 $i26 ]
$i30 = $i27 ^ $i26......................	[entry: r1 i62 r2 $i35 r5 $i27 $i26 ]	[exit: r1 i62 r2 $i35 $i30 r5 ]
$r12 = <ciphers.AES: int[] MULT11>......	[entry: r1 i62 r2 $i35 $i30 r5 ]	[exit: r1 i62 r2 $i35 $i30 $r12 r5 ]
$i28 = r5[2]............................	[entry: r1 i62 r2 $i35 $i30 $r12 r5 ]	[exit: r1 i62 r2 $i35 r5 $i30 $r12 $i28 ]
$i29 = $r12[$i28].......................	[entry: r1 i62 r2 $i35 r5 $i30 $r12 $i28 ]	[exit: r1 i62 r2 $i35 r5 $i30 $i29 ]
$i33 = $i30 ^ $i29......................	[entry: r1 i62 r2 $i35 r5 $i30 $i29 ]	[exit: r1 i62 r2 $i35 $i33 r5 ]
$r13 = <ciphers.AES: int[] MULT13>......	[entry: r1 i62 r2 $i35 $i33 r5 ]	[exit: r1 i62 r2 $i35 $i33 $r13 r5 ]
$i31 = r5[3]............................	[entry: r1 i62 r2 $i35 $i33 $r13 r5 ]	[exit: r1 r5 i62 r2 $i35 $i33 $r13 $i31 ]
$i32 = $r13[$i31].......................	[entry: r1 r5 i62 r2 $i35 $i33 $r13 $i31 ]	[exit: r1 r5 i62 r2 $i35 $i33 $i32 ]
$i34 = $i33 ^ $i32......................	[entry: r1 r5 i62 r2 $i35 $i33 $i32 ]	[exit: r1 r5 i62 r2 $i35 $i34 ]
r2[$i35] = $i34.........................	[entry: r1 r5 i62 r2 $i35 $i34 ]	[exit: r1 r2 r5 i62 ]
$i36 = i62 * 4..........................	[entry: r1 r2 r5 i62 ]	[exit: r1 i62 r2 r5 $i36 ]
$i48 = $i36 + 2.........................	[entry: r1 i62 r2 r5 $i36 ]	[exit: r1 i62 r2 $i48 r5 ]
$r14 = <ciphers.AES: int[] MULT13>......	[entry: r1 i62 r2 $i48 r5 ]	[exit: r1 i62 r2 $i48 $r14 r5 ]
$i37 = r5[0]............................	[entry: r1 i62 r2 $i48 $r14 r5 ]	[exit: r1 i62 r2 $i48 r5 $r14 $i37 ]
$i40 = $r14[$i37].......................	[entry: r1 i62 r2 $i48 r5 $r14 $i37 ]	[exit: r1 i62 r2 $i48 $i40 r5 ]
$r15 = <ciphers.AES: int[] MULT9>.......	[entry: r1 i62 r2 $i48 $i40 r5 ]	[exit: r1 i62 r2 $i48 $i40 $r15 r5 ]
$i38 = r5[1]............................	[entry: r1 i62 r2 $i48 $i40 $r15 r5 ]	[exit: r1 i62 r2 $i48 r5 $i40 $r15 $i38 ]
$i39 = $r15[$i38].......................	[entry: r1 i62 r2 $i48 r5 $i40 $r15 $i38 ]	[exit: r1 i62 r2 $i48 r5 $i40 $i39 ]
$i43 = $i40 ^ $i39......................	[entry: r1 i62 r2 $i48 r5 $i40 $i39 ]	[exit: r1 i62 r2 $i48 $i43 r5 ]
$r16 = <ciphers.AES: int[] MULT14>......	[entry: r1 i62 r2 $i48 $i43 r5 ]	[exit: r1 i62 r2 $i48 $i43 $r16 r5 ]
$i41 = r5[2]............................	[entry: r1 i62 r2 $i48 $i43 $r16 r5 ]	[exit: r1 i62 r2 $i48 r5 $i43 $r16 $i41 ]
$i42 = $r16[$i41].......................	[entry: r1 i62 r2 $i48 r5 $i43 $r16 $i41 ]	[exit: r1 i62 r2 $i48 r5 $i43 $i42 ]
$i46 = $i43 ^ $i42......................	[entry: r1 i62 r2 $i48 r5 $i43 $i42 ]	[exit: r1 i62 r2 $i48 $i46 r5 ]
$r17 = <ciphers.AES: int[] MULT11>......	[entry: r1 i62 r2 $i48 $i46 r5 ]	[exit: r1 i62 r2 $i48 $i46 $r17 r5 ]
$i44 = r5[3]............................	[entry: r1 i62 r2 $i48 $i46 $r17 r5 ]	[exit: r1 r5 i62 r2 $i48 $i46 $r17 $i44 ]
$i45 = $r17[$i44].......................	[entry: r1 r5 i62 r2 $i48 $i46 $r17 $i44 ]	[exit: r1 r5 i62 r2 $i48 $i46 $i45 ]
$i47 = $i46 ^ $i45......................	[entry: r1 r5 i62 r2 $i48 $i46 $i45 ]	[exit: r1 r5 i62 r2 $i48 $i47 ]
r2[$i48] = $i47.........................	[entry: r1 r5 i62 r2 $i48 $i47 ]	[exit: r1 r2 r5 i62 ]
$i49 = i62 * 4..........................	[entry: r1 r2 r5 i62 ]	[exit: r1 i62 r2 r5 $i49 ]
$i61 = $i49 + 3.........................	[entry: r1 i62 r2 r5 $i49 ]	[exit: r1 i62 r2 $i61 r5 ]
$r18 = <ciphers.AES: int[] MULT11>......	[entry: r1 i62 r2 $i61 r5 ]	[exit: r1 i62 r2 $i61 $r18 r5 ]
$i50 = r5[0]............................	[entry: r1 i62 r2 $i61 $r18 r5 ]	[exit: r1 i62 r2 $i61 r5 $r18 $i50 ]
$i53 = $r18[$i50].......................	[entry: r1 i62 r2 $i61 r5 $r18 $i50 ]	[exit: r1 i62 r2 $i61 $i53 r5 ]
$r19 = <ciphers.AES: int[] MULT13>......	[entry: r1 i62 r2 $i61 $i53 r5 ]	[exit: r1 i62 r2 $i61 $i53 $r19 r5 ]
$i51 = r5[1]............................	[entry: r1 i62 r2 $i61 $i53 $r19 r5 ]	[exit: r1 i62 r2 $i61 r5 $i53 $r19 $i51 ]
$i52 = $r19[$i51].......................	[entry: r1 i62 r2 $i61 r5 $i53 $r19 $i51 ]	[exit: r1 i62 r2 $i61 r5 $i53 $i52 ]
$i56 = $i53 ^ $i52......................	[entry: r1 i62 r2 $i61 r5 $i53 $i52 ]	[exit: r1 i62 r2 $i61 $i56 r5 ]
$r20 = <ciphers.AES: int[] MULT9>.......	[entry: r1 i62 r2 $i61 $i56 r5 ]	[exit: r1 i62 r2 $i61 $i56 $r20 r5 ]
$i54 = r5[2]............................	[entry: r1 i62 r2 $i61 $i56 $r20 r5 ]	[exit: r1 i62 r2 $i61 r5 $i56 $r20 $i54 ]
$i55 = $r20[$i54].......................	[entry: r1 i62 r2 $i61 r5 $i56 $r20 $i54 ]	[exit: r1 i62 r2 $i61 r5 $i56 $i55 ]
$i59 = $i56 ^ $i55......................	[entry: r1 i62 r2 $i61 r5 $i56 $i55 ]	[exit: r1 i62 r2 $i61 $i59 r5 ]
$r21 = <ciphers.AES: int[] MULT14>......	[entry: r1 i62 r2 $i61 $i59 r5 ]	[exit: r1 i62 r2 $i61 $i59 $r21 r5 ]
$i57 = r5[3]............................	[entry: r1 i62 r2 $i61 $i59 $r21 r5 ]	[exit: r1 i62 r2 $i61 $i59 $r21 $i57 ]
$i58 = $r21[$i57].......................	[entry: r1 i62 r2 $i61 $i59 $r21 $i57 ]	[exit: r1 i62 r2 $i61 $i59 $i58 ]
$i60 = $i59 ^ $i58......................	[entry: r1 i62 r2 $i61 $i59 $i58 ]	[exit: r1 i62 r2 $i61 $i60 ]
r2[$i61] = $i60.........................	[entry: r1 i62 r2 $i61 $i60 ]	[exit: r2 r1 i62 ]
i62 = i62 + 1...........................	[entry: r2 r1 i62 ]	[exit: r2 r1 i62 ]
goto [?= (branch)]......................	[entry: r2 r1 i62 ]	[exit: r2 r1 i62 ]
$r3 = staticinvoke <ciphers.AES: java.math.BigInteger mergeCellsIntoBlock(int[])>(r2)	[entry: r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: encrypt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r5 ]
r0 := @parameter1: java.math.BigInteger.	[entry: r5 ]	[exit: r5 r0 ]
r1 = staticinvoke <ciphers.AES: java.math.BigInteger[] keyExpansion(java.math.BigInteger)>(r0)	[entry: r5 r0 ]	[exit: r5 r1 ]
$r2 = r1[0].............................	[entry: r5 r1 ]	[exit: r1 r5 $r2 ]
r6 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r5, $r2)	[entry: r1 r5 $r2 ]	[exit: r1 r6 ]
i0 = 1..................................	[entry: r1 r6 ]	[exit: r1 r6 i0 ]
if i0 >= 10 goto r10 = staticinvoke <ciphers.AES: java.math.BigInteger subBytes(java.math.BigInteger)>(r6)	[entry: r1 r6 i0 ]	[exit: r1 r6 i0 ]
r7 = staticinvoke <ciphers.AES: java.math.BigInteger subBytes(java.math.BigInteger)>(r6)	[entry: r1 i0 r6 ]	[exit: r1 i0 r7 ]
r8 = staticinvoke <ciphers.AES: java.math.BigInteger shiftRows(java.math.BigInteger)>(r7)	[entry: r1 i0 r7 ]	[exit: r1 i0 r8 ]
r9 = staticinvoke <ciphers.AES: java.math.BigInteger mixColumns(java.math.BigInteger)>(r8)	[entry: r1 i0 r8 ]	[exit: r9 r1 i0 ]
$r4 = r1[i0]............................	[entry: r9 r1 i0 ]	[exit: r1 i0 r9 $r4 ]
r6 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r9, $r4)	[entry: r1 i0 r9 $r4 ]	[exit: r1 r6 i0 ]
i0 = i0 + 1.............................	[entry: r1 r6 i0 ]	[exit: r1 r6 i0 ]
goto [?= (branch)]......................	[entry: r1 r6 i0 ]	[exit: r1 r6 i0 ]
r10 = staticinvoke <ciphers.AES: java.math.BigInteger subBytes(java.math.BigInteger)>(r6)	[entry: r1 r6 ]	[exit: r1 r10 ]
r11 = staticinvoke <ciphers.AES: java.math.BigInteger shiftRows(java.math.BigInteger)>(r10)	[entry: r1 r10 ]	[exit: r11 r1 ]
$r3 = r1[10]............................	[entry: r11 r1 ]	[exit: r11 $r3 ]
r12 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r11, $r3)	[entry: r11 $r3 ]	[exit: r12 ]
return r12..............................	[entry: r12 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: decrypt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.math.BigInteger.	[entry: ]	[exit: r5 ]
r0 := @parameter1: java.math.BigInteger.	[entry: r5 ]	[exit: r5 r0 ]
r1 = staticinvoke <ciphers.AES: java.math.BigInteger[] keyExpansion(java.math.BigInteger)>(r0)	[entry: r5 r0 ]	[exit: r5 r1 ]
$r2 = r1[10]............................	[entry: r5 r1 ]	[exit: r1 r5 $r2 ]
r6 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r5, $r2)	[entry: r1 r5 $r2 ]	[exit: r1 r6 ]
r7 = staticinvoke <ciphers.AES: java.math.BigInteger shiftRowsDec(java.math.BigInteger)>(r6)	[entry: r1 r6 ]	[exit: r1 r7 ]
r8 = staticinvoke <ciphers.AES: java.math.BigInteger subBytesDec(java.math.BigInteger)>(r7)	[entry: r1 r7 ]	[exit: r8 r1 ]
i0 = 9..................................	[entry: r8 r1 ]	[exit: r8 r1 i0 ]
if i0 <= 0 goto $r3 = r1[0].............	[entry: r8 r1 i0 ]	[exit: r8 r1 i0 ]
$r4 = r1[i0]............................	[entry: r8 r1 i0 ]	[exit: r1 i0 r8 $r4 ]
r9 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r8, $r4)	[entry: r1 i0 r8 $r4 ]	[exit: r1 i0 r9 ]
r10 = staticinvoke <ciphers.AES: java.math.BigInteger mixColumnsDec(java.math.BigInteger)>(r9)	[entry: r1 i0 r9 ]	[exit: r1 i0 r10 ]
r11 = staticinvoke <ciphers.AES: java.math.BigInteger shiftRowsDec(java.math.BigInteger)>(r10)	[entry: r1 i0 r10 ]	[exit: r1 i0 r11 ]
r8 = staticinvoke <ciphers.AES: java.math.BigInteger subBytesDec(java.math.BigInteger)>(r11)	[entry: r1 i0 r11 ]	[exit: r8 r1 i0 ]
i0 = i0 + -1............................	[entry: r8 r1 i0 ]	[exit: r8 r1 i0 ]
goto [?= (branch)]......................	[entry: r8 r1 i0 ]	[exit: r8 r1 i0 ]
$r3 = r1[0].............................	[entry: r8 r1 ]	[exit: r8 $r3 ]
r12 = staticinvoke <ciphers.AES: java.math.BigInteger addRoundKey(java.math.BigInteger,java.math.BigInteger)>(r8, $r3)	[entry: r8 $r3 ]	[exit: r12 ]
return r12..............................	[entry: r12 ]	[exit: ]
********************
Class Name: ciphers.AES, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r38 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
r39 = null..............................	[entry: r2 ]	[exit: r39 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 ]	[exit: r39 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter (e) letter for encrpyt or (d) letter for decrypt :")	[entry: r39 r2 $r3 ]	[exit: r39 r2 ]
$r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r39 r2 ]	[exit: r39 r2 $r4 ]
c0 = virtualinvoke $r4.<java.lang.String: char charAt(int)>(0)	[entry: r39 r2 $r4 ]	[exit: r39 r2 c0 ]
lookupswitch(c0) {     case 68: goto $r18 = <java.lang.System: java.io.PrintStream out>;     case 69: goto $r5 = <java.lang.System: java.io.PrintStream out>;     case 100: goto $r18 = <java.lang.System: java.io.PrintStream out>;     case 101: goto $r5 = <java.lang.System: java.io.PrintStream out>;     default: goto $r31 = <java.lang.System: java.io.PrintStream out>; }	[entry: r39 r2 c0 ]	[exit: r39 r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 ]	[exit: r39 r2 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Choose a plaintext block (128-Bit Integer in base 16):")	[entry: r39 r2 $r5 ]	[exit: r39 r2 ]
r40 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r39 r2 ]	[exit: r39 r2 r40 ]
$r6 = new java.math.BigInteger..........	[entry: r39 r2 r40 ]	[exit: r39 r2 r40 $r6 ]
specialinvoke $r6.<java.math.BigInteger: void <init>(java.lang.String,int)>(r40, 16)	[entry: r39 r2 r40 $r6 ]	[exit: r39 r2 $r6 ]
r7 = $r6................................	[entry: r39 r2 $r6 ]	[exit: r39 r7 r2 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r7 r2 ]	[exit: r39 r7 r2 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Choose a Key (128-Bit Integer in base 16):")	[entry: r39 r7 r2 $r8 ]	[exit: r39 r7 r2 ]
r41 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r39 r7 r2 ]	[exit: r39 r2 r7 r41 ]
$r9 = new java.math.BigInteger..........	[entry: r39 r2 r7 r41 ]	[exit: r39 r2 r7 r41 $r9 ]
specialinvoke $r9.<java.math.BigInteger: void <init>(java.lang.String,int)>(r41, 16)	[entry: r39 r2 r7 r41 $r9 ]	[exit: r39 r2 r7 $r9 ]
r10 = $r9...............................	[entry: r39 r2 r7 $r9 ]	[exit: r39 r2 r7 r10 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 r7 r10 ]	[exit: r39 r2 $r12 r7 r10 ]
$r11 = new java.lang.StringBuilder......	[entry: r39 r2 $r12 r7 r10 ]	[exit: r39 r2 $r12 r7 r10 $r11 ]
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()	[entry: r39 r2 $r12 r7 r10 $r11 ]	[exit: r39 r2 $r12 r7 r10 $r11 ]
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The encrypted message is: \n")	[entry: r39 r2 $r12 r7 r10 $r11 ]	[exit: r39 r2 $r12 $r13 r7 r10 ]
$r14 = staticinvoke <ciphers.AES: java.math.BigInteger encrypt(java.math.BigInteger,java.math.BigInteger)>(r7, r10)	[entry: r39 r2 $r12 $r13 r7 r10 ]	[exit: r39 r2 $r12 $r13 $r14 ]
$r15 = virtualinvoke $r14.<java.math.BigInteger: java.lang.String toString(int)>(16)	[entry: r39 r2 $r12 $r13 $r14 ]	[exit: r39 r2 $r12 $r15 $r13 ]
$r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)	[entry: r39 r2 $r12 $r15 $r13 ]	[exit: r39 r2 $r12 $r16 ]
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r39 r2 $r12 $r16 ]	[exit: r39 r2 $r17 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r17)	[entry: r39 r2 $r17 $r12 ]	[exit: r39 r2 ]
goto [?= (branch)]......................	[entry: r39 r2 ]	[exit: r39 r2 ]
$r18 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 ]	[exit: r39 r2 $r18 ]
virtualinvoke $r18.<java.io.PrintStream: void println(java.lang.String)>("Enter your ciphertext block (128-Bit Integer in base 16):")	[entry: r39 r2 $r18 ]	[exit: r39 r2 ]
r42 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r39 r2 ]	[exit: r39 r2 r42 ]
$r19 = new java.math.BigInteger.........	[entry: r39 r2 r42 ]	[exit: r39 r2 r42 $r19 ]
specialinvoke $r19.<java.math.BigInteger: void <init>(java.lang.String,int)>(r42, 16)	[entry: r39 r2 r42 $r19 ]	[exit: r39 r2 $r19 ]
r20 = $r19..............................	[entry: r39 r2 $r19 ]	[exit: r39 r20 r2 ]
$r21 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r20 r2 ]	[exit: r39 r20 r2 $r21 ]
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>("Choose a Key (128-Bit Integer in base 16):")	[entry: r39 r20 r2 $r21 ]	[exit: r39 r20 r2 ]
r43 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r39 r20 r2 ]	[exit: r39 r2 r20 r43 ]
$r22 = new java.math.BigInteger.........	[entry: r39 r2 r20 r43 ]	[exit: r39 r2 r20 r43 $r22 ]
specialinvoke $r22.<java.math.BigInteger: void <init>(java.lang.String,int)>(r43, 16)	[entry: r39 r2 r20 r43 $r22 ]	[exit: r39 r2 r20 $r22 ]
r23 = $r22..............................	[entry: r39 r2 r20 $r22 ]	[exit: r39 r2 r20 r23 ]
$r25 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 r20 r23 ]	[exit: r39 r2 $r25 r20 r23 ]
$r24 = new java.lang.StringBuilder......	[entry: r39 r2 $r25 r20 r23 ]	[exit: r39 r2 $r25 r20 r23 $r24 ]
specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()	[entry: r39 r2 $r25 r20 r23 $r24 ]	[exit: r39 r2 $r25 r20 r23 $r24 ]
$r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The deciphered message is:\n")	[entry: r39 r2 $r25 r20 r23 $r24 ]	[exit: r39 r2 $r25 $r26 r20 r23 ]
$r27 = staticinvoke <ciphers.AES: java.math.BigInteger decrypt(java.math.BigInteger,java.math.BigInteger)>(r20, r23)	[entry: r39 r2 $r25 $r26 r20 r23 ]	[exit: r39 r2 $r25 $r26 $r27 ]
$r28 = virtualinvoke $r27.<java.math.BigInteger: java.lang.String toString(int)>(16)	[entry: r39 r2 $r25 $r26 $r27 ]	[exit: r39 r2 $r25 $r28 $r26 ]
$r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28)	[entry: r39 r2 $r25 $r28 $r26 ]	[exit: r39 r2 $r25 $r29 ]
$r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r39 r2 $r25 $r29 ]	[exit: r39 r2 $r30 $r25 ]
virtualinvoke $r25.<java.io.PrintStream: void println(java.lang.String)>($r30)	[entry: r39 r2 $r30 $r25 ]	[exit: r39 r2 ]
goto [?= (branch)]......................	[entry: r39 r2 ]	[exit: r39 r2 ]
$r31 = <java.lang.System: java.io.PrintStream out>	[entry: r39 r2 ]	[exit: r39 r2 $r31 ]
virtualinvoke $r31.<java.io.PrintStream: void println(java.lang.String)>("** End **")	[entry: r39 r2 $r31 ]	[exit: r39 r2 ]
if r2 == null goto return...............	[entry: r39 r2 ]	[exit: r2 r39 ]
if r39 == null goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r39 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
$r37 := @caughtexception................	[entry: r39 ]	[exit: r39 $r37 ]
r44 = $r37..............................	[entry: r39 $r37 ]	[exit: r44 r39 ]
virtualinvoke r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r44)	[entry: r44 r39 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
$r36 := @caughtexception................	[entry: ]	[exit: $r36 ]
r45 = $r36..............................	[entry: $r36 ]	[exit: r45 ]
r39 = r45...............................	[entry: r45 ]	[exit: r45 ]
throw r45...............................	[entry: r45 ]	[exit: ]
$r35 := @caughtexception................	[entry: r39 r2 ]	[exit: r39 r2 $r35 ]
r34 = $r35..............................	[entry: r39 r2 $r35 ]	[exit: r34 r39 r2 ]
if r2 == null goto throw r34............	[entry: r34 r39 r2 ]	[exit: r34 r2 r39 ]
if r39 == null goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r34 r2 r39 ]	[exit: r34 r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r34 r2 ]	[exit: r34 ]
goto [?= throw r34].....................	[entry: r34 ]	[exit: r34 ]
$r32 := @caughtexception................	[entry: r34 r39 ]	[exit: r34 r39 $r32 ]
r33 = $r32..............................	[entry: r34 r39 $r32 ]	[exit: r34 r33 r39 ]
virtualinvoke r39.<java.lang.Throwable: void addSuppressed(java.lang.Throwable)>(r33)	[entry: r34 r33 r39 ]	[exit: r34 ]
goto [?= throw r34].....................	[entry: r34 ]	[exit: r34 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r34 r2 ]	[exit: r34 ]
throw r34...............................	[entry: r34 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r81 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[20]................	[entry: ]	[exit: $r0 ]
$r0[0] = 366............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 160............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 242............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 161............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 178............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 77.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 151............................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 226............................	[entry: $r0 ]	[exit: $r0 ]
$r0[9] = 244............................	[entry: $r0 ]	[exit: $r0 ]
$r0[10] = 241...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[11] = 234...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[12] = 380...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[13] = 98............................	[entry: $r0 ]	[exit: $r0 ]
$r0[14] = 193...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[15] = 253...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[16] = 329...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[17] = 80............................	[entry: $r0 ]	[exit: $r0 ]
$r0[18] = 199...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[19] = 374...........................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new A_Star.A_Star$Graph...........	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<A_Star.A_Star$Graph: void <init>(int)>(20)	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r4 = new java.util.ArrayList...........	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
$r5 = newarray (java.lang.Integer)[95]..	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 $r5 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r6 ]
$r5[0] = $r6............................	[entry: r1 r3 $r4 $r5 $r6 ]	[exit: r1 r3 $r4 $r5 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r7 ]
$r5[1] = $r7............................	[entry: r1 r3 $r4 $r5 $r7 ]	[exit: r1 r3 $r4 $r5 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r8 ]
$r5[2] = $r8............................	[entry: r1 r3 $r4 $r5 $r8 ]	[exit: r1 r3 $r4 $r5 ]
$r5[3] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r9 ]
$r5[4] = $r9............................	[entry: r1 r3 $r4 $r5 $r9 ]	[exit: r1 r3 $r4 $r5 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r10 ]
$r5[5] = $r10...........................	[entry: r1 r3 $r4 $r5 $r10 ]	[exit: r1 r3 $r4 $r5 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(140)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r11 ]
$r5[6] = $r11...........................	[entry: r1 r3 $r4 $r5 $r11 ]	[exit: r1 r3 $r4 $r5 ]
$r5[7] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r12 ]
$r5[8] = $r12...........................	[entry: r1 r3 $r4 $r5 $r12 ]	[exit: r1 r3 $r4 $r5 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r13 ]
$r5[9] = $r13...........................	[entry: r1 r3 $r4 $r5 $r13 ]	[exit: r1 r3 $r4 $r5 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(118)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r14 ]
$r5[10] = $r14..........................	[entry: r1 r3 $r4 $r5 $r14 ]	[exit: r1 r3 $r4 $r5 ]
$r5[11] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r15 ]
$r5[12] = $r15..........................	[entry: r1 r3 $r4 $r5 $r15 ]	[exit: r1 r3 $r4 $r5 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r16 ]
$r5[13] = $r16..........................	[entry: r1 r3 $r4 $r5 $r16 ]	[exit: r1 r3 $r4 $r5 ]
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(71)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r17 ]
$r5[14] = $r17..........................	[entry: r1 r3 $r4 $r5 $r17 ]	[exit: r1 r3 $r4 $r5 ]
$r5[15] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r18 ]
$r5[16] = $r18..........................	[entry: r1 r3 $r4 $r5 $r18 ]	[exit: r1 r3 $r4 $r5 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r19 ]
$r5[17] = $r19..........................	[entry: r1 r3 $r4 $r5 $r19 ]	[exit: r1 r3 $r4 $r5 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(151)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r20 ]
$r5[18] = $r20..........................	[entry: r1 r3 $r4 $r5 $r20 ]	[exit: r1 r3 $r4 $r5 ]
$r5[19] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r21 ]
$r5[20] = $r21..........................	[entry: r1 r3 $r4 $r5 $r21 ]	[exit: r1 r3 $r4 $r5 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r22 ]
$r5[21] = $r22..........................	[entry: r1 r3 $r4 $r5 $r22 ]	[exit: r1 r3 $r4 $r5 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(111)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r23 ]
$r5[22] = $r23..........................	[entry: r1 r3 $r4 $r5 $r23 ]	[exit: r1 r3 $r4 $r5 ]
$r5[23] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r24 ]
$r5[24] = $r24..........................	[entry: r1 r3 $r4 $r5 $r24 ]	[exit: r1 r3 $r4 $r5 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r25 ]
$r5[25] = $r25..........................	[entry: r1 r3 $r4 $r5 $r25 ]	[exit: r1 r3 $r4 $r5 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r26 ]
$r5[26] = $r26..........................	[entry: r1 r3 $r4 $r5 $r26 ]	[exit: r1 r3 $r4 $r5 ]
$r5[27] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r27 ]
$r5[28] = $r27..........................	[entry: r1 r3 $r4 $r5 $r27 ]	[exit: r1 r3 $r4 $r5 ]
$r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r28 ]
$r5[29] = $r28..........................	[entry: r1 r3 $r4 $r5 $r28 ]	[exit: r1 r3 $r4 $r5 ]
$r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r29 ]
$r5[30] = $r29..........................	[entry: r1 r3 $r4 $r5 $r29 ]	[exit: r1 r3 $r4 $r5 ]
$r5[31] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r30 ]
$r5[32] = $r30..........................	[entry: r1 r3 $r4 $r5 $r30 ]	[exit: r1 r3 $r4 $r5 ]
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r31 ]
$r5[33] = $r31..........................	[entry: r1 r3 $r4 $r5 $r31 ]	[exit: r1 r3 $r4 $r5 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(120)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r32 ]
$r5[34] = $r32..........................	[entry: r1 r3 $r4 $r5 $r32 ]	[exit: r1 r3 $r4 $r5 ]
$r5[35] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r33 ]
$r5[36] = $r33..........................	[entry: r1 r3 $r4 $r5 $r33 ]	[exit: r1 r3 $r4 $r5 ]
$r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r34 ]
$r5[37] = $r34..........................	[entry: r1 r3 $r4 $r5 $r34 ]	[exit: r1 r3 $r4 $r5 ]
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(146)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r35 ]
$r5[38] = $r35..........................	[entry: r1 r3 $r4 $r5 $r35 ]	[exit: r1 r3 $r4 $r5 ]
$r5[39] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r36 ]
$r5[40] = $r36..........................	[entry: r1 r3 $r4 $r5 $r36 ]	[exit: r1 r3 $r4 $r5 ]
$r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r37 ]
$r5[41] = $r37..........................	[entry: r1 r3 $r4 $r5 $r37 ]	[exit: r1 r3 $r4 $r5 ]
$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(138)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r38 ]
$r5[42] = $r38..........................	[entry: r1 r3 $r4 $r5 $r38 ]	[exit: r1 r3 $r4 $r5 ]
$r5[43] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r39 ]
$r5[44] = $r39..........................	[entry: r1 r3 $r4 $r5 $r39 ]	[exit: r1 r3 $r4 $r5 ]
$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r40 ]
$r5[45] = $r40..........................	[entry: r1 r3 $r4 $r5 $r40 ]	[exit: r1 r3 $r4 $r5 ]
$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(115)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r41 ]
$r5[46] = $r41..........................	[entry: r1 r3 $r4 $r5 $r41 ]	[exit: r1 r3 $r4 $r5 ]
$r5[47] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r42 ]
$r5[48] = $r42..........................	[entry: r1 r3 $r4 $r5 $r42 ]	[exit: r1 r3 $r4 $r5 ]
$r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r43 ]
$r5[49] = $r43..........................	[entry: r1 r3 $r4 $r5 $r43 ]	[exit: r1 r3 $r4 $r5 ]
$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r44 ]
$r5[50] = $r44..........................	[entry: r1 r3 $r4 $r5 $r44 ]	[exit: r1 r3 $r4 $r5 ]
$r5[51] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r45 ]
$r5[52] = $r45..........................	[entry: r1 r3 $r4 $r5 $r45 ]	[exit: r1 r3 $r4 $r5 ]
$r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r46 ]
$r5[53] = $r46..........................	[entry: r1 r3 $r4 $r5 $r46 ]	[exit: r1 r3 $r4 $r5 ]
$r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r47 ]
$r5[54] = $r47..........................	[entry: r1 r3 $r4 $r5 $r47 ]	[exit: r1 r3 $r4 $r5 ]
$r5[55] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r48 ]
$r5[56] = $r48..........................	[entry: r1 r3 $r4 $r5 $r48 ]	[exit: r1 r3 $r4 $r5 ]
$r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r49 ]
$r5[57] = $r49..........................	[entry: r1 r3 $r4 $r5 $r49 ]	[exit: r1 r3 $r4 $r5 ]
$r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(97)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r50 ]
$r5[58] = $r50..........................	[entry: r1 r3 $r4 $r5 $r50 ]	[exit: r1 r3 $r4 $r5 ]
$r5[59] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r51 ]
$r5[60] = $r51..........................	[entry: r1 r3 $r4 $r5 $r51 ]	[exit: r1 r3 $r4 $r5 ]
$r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r52 ]
$r5[61] = $r52..........................	[entry: r1 r3 $r4 $r5 $r52 ]	[exit: r1 r3 $r4 $r5 ]
$r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(211)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r53 ]
$r5[62] = $r53..........................	[entry: r1 r3 $r4 $r5 $r53 ]	[exit: r1 r3 $r4 $r5 ]
$r5[63] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r54 ]
$r5[64] = $r54..........................	[entry: r1 r3 $r4 $r5 $r54 ]	[exit: r1 r3 $r4 $r5 ]
$r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r55 ]
$r5[65] = $r55..........................	[entry: r1 r3 $r4 $r5 $r55 ]	[exit: r1 r3 $r4 $r5 ]
$r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r56 ]
$r5[66] = $r56..........................	[entry: r1 r3 $r4 $r5 $r56 ]	[exit: r1 r3 $r4 $r5 ]
$r5[67] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r57 ]
$r5[68] = $r57..........................	[entry: r1 r3 $r4 $r5 $r57 ]	[exit: r1 r3 $r4 $r5 ]
$r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r58 ]
$r5[69] = $r58..........................	[entry: r1 r3 $r4 $r5 $r58 ]	[exit: r1 r3 $r4 $r5 ]
$r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(160)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r59 ]
$r5[70] = $r59..........................	[entry: r1 r3 $r4 $r5 $r59 ]	[exit: r1 r3 $r4 $r5 ]
$r5[71] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r60 ]
$r5[72] = $r60..........................	[entry: r1 r3 $r4 $r5 $r60 ]	[exit: r1 r3 $r4 $r5 ]
$r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r61 ]
$r5[73] = $r61..........................	[entry: r1 r3 $r4 $r5 $r61 ]	[exit: r1 r3 $r4 $r5 ]
$r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(85)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r62 ]
$r5[74] = $r62..........................	[entry: r1 r3 $r4 $r5 $r62 ]	[exit: r1 r3 $r4 $r5 ]
$r5[75] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r63 ]
$r5[76] = $r63..........................	[entry: r1 r3 $r4 $r5 $r63 ]	[exit: r1 r3 $r4 $r5 ]
$r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r64 ]
$r5[77] = $r64..........................	[entry: r1 r3 $r4 $r5 $r64 ]	[exit: r1 r3 $r4 $r5 ]
$r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(98)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r65 ]
$r5[78] = $r65..........................	[entry: r1 r3 $r4 $r5 $r65 ]	[exit: r1 r3 $r4 $r5 ]
$r5[79] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r66 ]
$r5[80] = $r66..........................	[entry: r1 r3 $r4 $r5 $r66 ]	[exit: r1 r3 $r4 $r5 ]
$r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r67 ]
$r5[81] = $r67..........................	[entry: r1 r3 $r4 $r5 $r67 ]	[exit: r1 r3 $r4 $r5 ]
$r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(86)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r68 ]
$r5[82] = $r68..........................	[entry: r1 r3 $r4 $r5 $r68 ]	[exit: r1 r3 $r4 $r5 ]
$r5[83] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r69 ]
$r5[84] = $r69..........................	[entry: r1 r3 $r4 $r5 $r69 ]	[exit: r1 r3 $r4 $r5 ]
$r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r70 ]
$r5[85] = $r70..........................	[entry: r1 r3 $r4 $r5 $r70 ]	[exit: r1 r3 $r4 $r5 ]
$r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(142)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r71 ]
$r5[86] = $r71..........................	[entry: r1 r3 $r4 $r5 $r71 ]	[exit: r1 r3 $r4 $r5 ]
$r5[87] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r72 ]
$r5[88] = $r72..........................	[entry: r1 r3 $r4 $r5 $r72 ]	[exit: r1 r3 $r4 $r5 ]
$r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r73 ]
$r5[89] = $r73..........................	[entry: r1 r3 $r4 $r5 $r73 ]	[exit: r1 r3 $r4 $r5 ]
$r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(92)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r74 ]
$r5[90] = $r74..........................	[entry: r1 r3 $r4 $r5 $r74 ]	[exit: r1 r3 $r4 $r5 ]
$r5[91] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r75 ]
$r5[92] = $r75..........................	[entry: r1 r3 $r4 $r5 $r75 ]	[exit: r1 r3 $r4 $r5 ]
$r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r76 ]
$r5[93] = $r76..........................	[entry: r1 r3 $r4 $r5 $r76 ]	[exit: r1 r3 $r4 $r5 ]
$r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r77 ]
$r5[94] = $r77..........................	[entry: r1 r3 $r4 $r5 $r77 ]	[exit: r1 r3 $r4 $r5 ]
$r78 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r78 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r78)	[entry: r1 r3 $r78 $r4 ]	[exit: r1 r3 $r4 ]
r79 = $r4...............................	[entry: r1 r3 $r4 ]	[exit: r1 r3 r79 ]
staticinvoke <A_Star.A_Star: void initializeGraph(A_Star.A_Star$Graph,java.util.ArrayList)>(r3, r79)	[entry: r1 r3 r79 ]	[exit: r3 r1 ]
r80 = staticinvoke <A_Star.A_Star: A_Star.A_Star$PathAndDistance aStar(int,int,A_Star.A_Star$Graph,int[])>(3, 1, r3, r1)	[entry: r3 r1 ]	[exit: r80 ]
staticinvoke <A_Star.A_Star$PathAndDistance: void access$100(A_Star.A_Star$PathAndDistance)>(r80)	[entry: r80 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: aStar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i4 := @parameter1: int..................	[entry: i0 ]	[exit: i4 i0 ]
r15 := @parameter2: A_Star.A_Star$Graph.	[entry: i4 i0 ]	[exit: r15 i4 i0 ]
r27 := @parameter3: int[]...............	[entry: r15 i4 i0 ]	[exit: r27 r15 i4 i0 ]
$r0 = new java.util.PriorityQueue.......	[entry: r27 r15 i4 i0 ]	[exit: r27 r15 i4 i0 $r0 ]
$r1 = staticinvoke <A_Star.A_Star$lambda_aStar_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 i0 $r0 $r1 ]
$r2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r1)	[entry: r27 r15 i4 i0 $r0 $r1 ]	[exit: r27 r15 i4 i0 $r2 $r0 ]
specialinvoke $r0.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r2)	[entry: r27 r15 i4 i0 $r2 $r0 ]	[exit: r27 r15 i4 i0 $r0 ]
r3 = $r0................................	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 r3 i0 ]
$r4 = new A_Star.A_Star$PathAndDistance.	[entry: r27 r15 i4 r3 i0 ]	[exit: r27 r15 i4 r3 $r4 i0 ]
$r5 = new java.util.ArrayList...........	[entry: r27 r15 i4 r3 $r4 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 i0 ]
$r6 = newarray (java.lang.Integer)[1]...	[entry: r27 r15 i4 r3 $r4 $r5 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]
$r6[0] = $r7............................	[entry: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 ]
$r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 ]	[exit: r27 r15 i4 r3 $r4 $r8 $r5 ]
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r8)	[entry: r27 r15 i4 r3 $r4 $r8 $r5 ]	[exit: r27 r15 i4 r3 $r5 $r4 ]
specialinvoke $r4.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(0, $r5, 0)	[entry: r27 r15 i4 r3 $r5 $r4 ]	[exit: r27 r15 i4 $r4 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r4)	[entry: r27 r15 i4 $r4 r3 ]	[exit: r27 r15 i4 r3 ]
z6 = 0..................................	[entry: r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 ]
$r9 = new A_Star.A_Star$PathAndDistance.	[entry: z6 r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
specialinvoke $r9.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
r28 = $r9...............................	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 $z1 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 != 0 goto (branch)................	[entry: r28 r27 r15 i4 r3 z6 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r10 = virtualinvoke r3.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: z6 r27 r15 i4 r3 ]	[exit: r3 z6 r27 r15 i4 $r10 ]
r28 = (A_Star.A_Star$PathAndDistance) $r10	[entry: r3 z6 r27 r15 i4 $r10 ]	[exit: r3 z6 r27 r15 i4 r28 ]
$r11 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 r28 ]	[exit: r3 z6 r27 r15 i4 $r11 r28 ]
$r12 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 $r11 r28 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $r12 ]
$i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>()	[entry: r28 r3 z6 r27 r15 i4 $r11 $r12 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $i1 ]
$i2 = $i1 - 1...........................	[entry: r28 r3 z6 r27 r15 i4 $r11 $i1 ]	[exit: r28 r3 z6 r27 r15 i4 $i2 $r11 ]
$r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>($i2)	[entry: r28 r3 z6 r27 r15 i4 $i2 $r11 ]	[exit: r28 r3 z6 r27 r15 i4 $r13 ]
$r14 = (java.lang.Integer) $r13.........	[entry: r28 r3 z6 r27 r15 i4 $r13 ]	[exit: r28 r3 z6 r27 r15 i4 $r14 ]
i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()	[entry: r28 r3 z6 r27 r15 i4 $r14 ]	[exit: r28 r3 z6 r27 r15 i3 i4 ]
if i3 != i4 goto $r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 r3 z6 r27 r15 i3 i4 ]	[exit: r28 r27 r15 i4 r3 z6 i3 ]
z6 = 1..................................	[entry: r28 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
goto [?= (branch)]......................	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 z6 r27 i4 r3 r15 i3 ]	[exit: r28 z6 r27 r15 i4 r3 $r16 ]
r17 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r28 z6 r27 r15 i4 r3 $r16 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $z2 ]
if $z2 == 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 $z2 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()	[entry: z6 r27 r15 i4 r3 r28 r17 ]	[exit: z6 r27 r15 i4 r3 r17 r28 $r18 ]
r19 = (A_Star.A_Star$Edge) $r18.........	[entry: z6 r27 r15 i4 r3 r17 r28 $r18 ]	[exit: z6 r27 r15 i4 r3 r17 r19 r28 ]
$r20 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r27 r15 i4 r3 r17 r19 r28 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]
$i5 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]
$z3 = virtualinvoke $r20.<java.util.ArrayList: boolean contains(java.lang.Object)>($r21)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]
if $z3 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 ]
$r22 = new java.util.ArrayList..........	[entry: z6 r15 i4 r17 r3 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]
$r23 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]
specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r23)	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]
r24 = $r22..............................	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]
$i6 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]
virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r25)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]	[exit: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]
$r26 = new A_Star.A_Star$PathAndDistance	[entry: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]
$i7 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: int getDistance()>()	[entry: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]
$i8 = virtualinvoke r19.<A_Star.A_Star$Edge: int getWeight()>()	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]
$i9 = $i7 + $i8.........................	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]
$i10 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]
$i11 = r27[$i10]........................	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]	[exit: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]
specialinvoke $r26.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>($i9, r24, $i11)	[entry: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]	[exit: r28 z6 r27 r15 i4 r17 $r26 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r26)	[entry: r28 z6 r27 r15 i4 r17 $r26 r3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()]	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 == 0 goto $r29 = new A_Star.A_Star$PathAndDistance	[entry: r28 z6 ]	[exit: r28 ]
$r29 = r28..............................	[entry: r28 ]	[exit: $r29 ]
goto [?= return $r29]...................	[entry: $r29 ]	[exit: $r29 ]
$r29 = new A_Star.A_Star$PathAndDistance	[entry: ]	[exit: $r29 ]
specialinvoke $r29.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: $r29 ]	[exit: $r29 ]
return $r29.............................	[entry: $r29 ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r81 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[20]................	[entry: ]	[exit: $r0 ]
$r0[0] = 366............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 160............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 242............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 161............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 178............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 77.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 151............................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 226............................	[entry: $r0 ]	[exit: $r0 ]
$r0[9] = 244............................	[entry: $r0 ]	[exit: $r0 ]
$r0[10] = 241...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[11] = 234...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[12] = 380...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[13] = 98............................	[entry: $r0 ]	[exit: $r0 ]
$r0[14] = 193...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[15] = 253...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[16] = 329...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[17] = 80............................	[entry: $r0 ]	[exit: $r0 ]
$r0[18] = 199...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[19] = 374...........................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new A_Star.A_Star$Graph...........	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<A_Star.A_Star$Graph: void <init>(int)>(20)	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r4 = new java.util.ArrayList...........	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
$r5 = newarray (java.lang.Integer)[95]..	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 $r5 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r6 ]
$r5[0] = $r6............................	[entry: r1 r3 $r4 $r5 $r6 ]	[exit: r1 r3 $r4 $r5 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r7 ]
$r5[1] = $r7............................	[entry: r1 r3 $r4 $r5 $r7 ]	[exit: r1 r3 $r4 $r5 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r8 ]
$r5[2] = $r8............................	[entry: r1 r3 $r4 $r5 $r8 ]	[exit: r1 r3 $r4 $r5 ]
$r5[3] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r9 ]
$r5[4] = $r9............................	[entry: r1 r3 $r4 $r5 $r9 ]	[exit: r1 r3 $r4 $r5 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r10 ]
$r5[5] = $r10...........................	[entry: r1 r3 $r4 $r5 $r10 ]	[exit: r1 r3 $r4 $r5 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(140)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r11 ]
$r5[6] = $r11...........................	[entry: r1 r3 $r4 $r5 $r11 ]	[exit: r1 r3 $r4 $r5 ]
$r5[7] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r12 ]
$r5[8] = $r12...........................	[entry: r1 r3 $r4 $r5 $r12 ]	[exit: r1 r3 $r4 $r5 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r13 ]
$r5[9] = $r13...........................	[entry: r1 r3 $r4 $r5 $r13 ]	[exit: r1 r3 $r4 $r5 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(118)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r14 ]
$r5[10] = $r14..........................	[entry: r1 r3 $r4 $r5 $r14 ]	[exit: r1 r3 $r4 $r5 ]
$r5[11] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r15 ]
$r5[12] = $r15..........................	[entry: r1 r3 $r4 $r5 $r15 ]	[exit: r1 r3 $r4 $r5 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r16 ]
$r5[13] = $r16..........................	[entry: r1 r3 $r4 $r5 $r16 ]	[exit: r1 r3 $r4 $r5 ]
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(71)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r17 ]
$r5[14] = $r17..........................	[entry: r1 r3 $r4 $r5 $r17 ]	[exit: r1 r3 $r4 $r5 ]
$r5[15] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r18 ]
$r5[16] = $r18..........................	[entry: r1 r3 $r4 $r5 $r18 ]	[exit: r1 r3 $r4 $r5 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r19 ]
$r5[17] = $r19..........................	[entry: r1 r3 $r4 $r5 $r19 ]	[exit: r1 r3 $r4 $r5 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(151)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r20 ]
$r5[18] = $r20..........................	[entry: r1 r3 $r4 $r5 $r20 ]	[exit: r1 r3 $r4 $r5 ]
$r5[19] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r21 ]
$r5[20] = $r21..........................	[entry: r1 r3 $r4 $r5 $r21 ]	[exit: r1 r3 $r4 $r5 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r22 ]
$r5[21] = $r22..........................	[entry: r1 r3 $r4 $r5 $r22 ]	[exit: r1 r3 $r4 $r5 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(111)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r23 ]
$r5[22] = $r23..........................	[entry: r1 r3 $r4 $r5 $r23 ]	[exit: r1 r3 $r4 $r5 ]
$r5[23] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r24 ]
$r5[24] = $r24..........................	[entry: r1 r3 $r4 $r5 $r24 ]	[exit: r1 r3 $r4 $r5 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r25 ]
$r5[25] = $r25..........................	[entry: r1 r3 $r4 $r5 $r25 ]	[exit: r1 r3 $r4 $r5 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r26 ]
$r5[26] = $r26..........................	[entry: r1 r3 $r4 $r5 $r26 ]	[exit: r1 r3 $r4 $r5 ]
$r5[27] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r27 ]
$r5[28] = $r27..........................	[entry: r1 r3 $r4 $r5 $r27 ]	[exit: r1 r3 $r4 $r5 ]
$r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r28 ]
$r5[29] = $r28..........................	[entry: r1 r3 $r4 $r5 $r28 ]	[exit: r1 r3 $r4 $r5 ]
$r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r29 ]
$r5[30] = $r29..........................	[entry: r1 r3 $r4 $r5 $r29 ]	[exit: r1 r3 $r4 $r5 ]
$r5[31] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r30 ]
$r5[32] = $r30..........................	[entry: r1 r3 $r4 $r5 $r30 ]	[exit: r1 r3 $r4 $r5 ]
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r31 ]
$r5[33] = $r31..........................	[entry: r1 r3 $r4 $r5 $r31 ]	[exit: r1 r3 $r4 $r5 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(120)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r32 ]
$r5[34] = $r32..........................	[entry: r1 r3 $r4 $r5 $r32 ]	[exit: r1 r3 $r4 $r5 ]
$r5[35] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r33 ]
$r5[36] = $r33..........................	[entry: r1 r3 $r4 $r5 $r33 ]	[exit: r1 r3 $r4 $r5 ]
$r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r34 ]
$r5[37] = $r34..........................	[entry: r1 r3 $r4 $r5 $r34 ]	[exit: r1 r3 $r4 $r5 ]
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(146)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r35 ]
$r5[38] = $r35..........................	[entry: r1 r3 $r4 $r5 $r35 ]	[exit: r1 r3 $r4 $r5 ]
$r5[39] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r36 ]
$r5[40] = $r36..........................	[entry: r1 r3 $r4 $r5 $r36 ]	[exit: r1 r3 $r4 $r5 ]
$r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r37 ]
$r5[41] = $r37..........................	[entry: r1 r3 $r4 $r5 $r37 ]	[exit: r1 r3 $r4 $r5 ]
$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(138)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r38 ]
$r5[42] = $r38..........................	[entry: r1 r3 $r4 $r5 $r38 ]	[exit: r1 r3 $r4 $r5 ]
$r5[43] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r39 ]
$r5[44] = $r39..........................	[entry: r1 r3 $r4 $r5 $r39 ]	[exit: r1 r3 $r4 $r5 ]
$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r40 ]
$r5[45] = $r40..........................	[entry: r1 r3 $r4 $r5 $r40 ]	[exit: r1 r3 $r4 $r5 ]
$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(115)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r41 ]
$r5[46] = $r41..........................	[entry: r1 r3 $r4 $r5 $r41 ]	[exit: r1 r3 $r4 $r5 ]
$r5[47] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r42 ]
$r5[48] = $r42..........................	[entry: r1 r3 $r4 $r5 $r42 ]	[exit: r1 r3 $r4 $r5 ]
$r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r43 ]
$r5[49] = $r43..........................	[entry: r1 r3 $r4 $r5 $r43 ]	[exit: r1 r3 $r4 $r5 ]
$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r44 ]
$r5[50] = $r44..........................	[entry: r1 r3 $r4 $r5 $r44 ]	[exit: r1 r3 $r4 $r5 ]
$r5[51] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r45 ]
$r5[52] = $r45..........................	[entry: r1 r3 $r4 $r5 $r45 ]	[exit: r1 r3 $r4 $r5 ]
$r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r46 ]
$r5[53] = $r46..........................	[entry: r1 r3 $r4 $r5 $r46 ]	[exit: r1 r3 $r4 $r5 ]
$r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r47 ]
$r5[54] = $r47..........................	[entry: r1 r3 $r4 $r5 $r47 ]	[exit: r1 r3 $r4 $r5 ]
$r5[55] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r48 ]
$r5[56] = $r48..........................	[entry: r1 r3 $r4 $r5 $r48 ]	[exit: r1 r3 $r4 $r5 ]
$r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r49 ]
$r5[57] = $r49..........................	[entry: r1 r3 $r4 $r5 $r49 ]	[exit: r1 r3 $r4 $r5 ]
$r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(97)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r50 ]
$r5[58] = $r50..........................	[entry: r1 r3 $r4 $r5 $r50 ]	[exit: r1 r3 $r4 $r5 ]
$r5[59] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r51 ]
$r5[60] = $r51..........................	[entry: r1 r3 $r4 $r5 $r51 ]	[exit: r1 r3 $r4 $r5 ]
$r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r52 ]
$r5[61] = $r52..........................	[entry: r1 r3 $r4 $r5 $r52 ]	[exit: r1 r3 $r4 $r5 ]
$r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(211)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r53 ]
$r5[62] = $r53..........................	[entry: r1 r3 $r4 $r5 $r53 ]	[exit: r1 r3 $r4 $r5 ]
$r5[63] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r54 ]
$r5[64] = $r54..........................	[entry: r1 r3 $r4 $r5 $r54 ]	[exit: r1 r3 $r4 $r5 ]
$r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r55 ]
$r5[65] = $r55..........................	[entry: r1 r3 $r4 $r5 $r55 ]	[exit: r1 r3 $r4 $r5 ]
$r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r56 ]
$r5[66] = $r56..........................	[entry: r1 r3 $r4 $r5 $r56 ]	[exit: r1 r3 $r4 $r5 ]
$r5[67] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r57 ]
$r5[68] = $r57..........................	[entry: r1 r3 $r4 $r5 $r57 ]	[exit: r1 r3 $r4 $r5 ]
$r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r58 ]
$r5[69] = $r58..........................	[entry: r1 r3 $r4 $r5 $r58 ]	[exit: r1 r3 $r4 $r5 ]
$r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(160)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r59 ]
$r5[70] = $r59..........................	[entry: r1 r3 $r4 $r5 $r59 ]	[exit: r1 r3 $r4 $r5 ]
$r5[71] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r60 ]
$r5[72] = $r60..........................	[entry: r1 r3 $r4 $r5 $r60 ]	[exit: r1 r3 $r4 $r5 ]
$r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r61 ]
$r5[73] = $r61..........................	[entry: r1 r3 $r4 $r5 $r61 ]	[exit: r1 r3 $r4 $r5 ]
$r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(85)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r62 ]
$r5[74] = $r62..........................	[entry: r1 r3 $r4 $r5 $r62 ]	[exit: r1 r3 $r4 $r5 ]
$r5[75] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r63 ]
$r5[76] = $r63..........................	[entry: r1 r3 $r4 $r5 $r63 ]	[exit: r1 r3 $r4 $r5 ]
$r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r64 ]
$r5[77] = $r64..........................	[entry: r1 r3 $r4 $r5 $r64 ]	[exit: r1 r3 $r4 $r5 ]
$r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(98)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r65 ]
$r5[78] = $r65..........................	[entry: r1 r3 $r4 $r5 $r65 ]	[exit: r1 r3 $r4 $r5 ]
$r5[79] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r66 ]
$r5[80] = $r66..........................	[entry: r1 r3 $r4 $r5 $r66 ]	[exit: r1 r3 $r4 $r5 ]
$r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r67 ]
$r5[81] = $r67..........................	[entry: r1 r3 $r4 $r5 $r67 ]	[exit: r1 r3 $r4 $r5 ]
$r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(86)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r68 ]
$r5[82] = $r68..........................	[entry: r1 r3 $r4 $r5 $r68 ]	[exit: r1 r3 $r4 $r5 ]
$r5[83] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r69 ]
$r5[84] = $r69..........................	[entry: r1 r3 $r4 $r5 $r69 ]	[exit: r1 r3 $r4 $r5 ]
$r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r70 ]
$r5[85] = $r70..........................	[entry: r1 r3 $r4 $r5 $r70 ]	[exit: r1 r3 $r4 $r5 ]
$r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(142)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r71 ]
$r5[86] = $r71..........................	[entry: r1 r3 $r4 $r5 $r71 ]	[exit: r1 r3 $r4 $r5 ]
$r5[87] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r72 ]
$r5[88] = $r72..........................	[entry: r1 r3 $r4 $r5 $r72 ]	[exit: r1 r3 $r4 $r5 ]
$r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r73 ]
$r5[89] = $r73..........................	[entry: r1 r3 $r4 $r5 $r73 ]	[exit: r1 r3 $r4 $r5 ]
$r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(92)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r74 ]
$r5[90] = $r74..........................	[entry: r1 r3 $r4 $r5 $r74 ]	[exit: r1 r3 $r4 $r5 ]
$r5[91] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r75 ]
$r5[92] = $r75..........................	[entry: r1 r3 $r4 $r5 $r75 ]	[exit: r1 r3 $r4 $r5 ]
$r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r76 ]
$r5[93] = $r76..........................	[entry: r1 r3 $r4 $r5 $r76 ]	[exit: r1 r3 $r4 $r5 ]
$r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r77 ]
$r5[94] = $r77..........................	[entry: r1 r3 $r4 $r5 $r77 ]	[exit: r1 r3 $r4 $r5 ]
$r78 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r78 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r78)	[entry: r1 r3 $r78 $r4 ]	[exit: r1 r3 $r4 ]
r79 = $r4...............................	[entry: r1 r3 $r4 ]	[exit: r1 r3 r79 ]
staticinvoke <A_Star.A_Star: void initializeGraph(A_Star.A_Star$Graph,java.util.ArrayList)>(r3, r79)	[entry: r1 r3 r79 ]	[exit: r3 r1 ]
r80 = staticinvoke <A_Star.A_Star: A_Star.A_Star$PathAndDistance aStar(int,int,A_Star.A_Star$Graph,int[])>(3, 1, r3, r1)	[entry: r3 r1 ]	[exit: r80 ]
staticinvoke <A_Star.A_Star$PathAndDistance: void access$100(A_Star.A_Star$PathAndDistance)>(r80)	[entry: r80 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: aStar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i4 := @parameter1: int..................	[entry: i0 ]	[exit: i4 i0 ]
r15 := @parameter2: A_Star.A_Star$Graph.	[entry: i4 i0 ]	[exit: r15 i4 i0 ]
r27 := @parameter3: int[]...............	[entry: r15 i4 i0 ]	[exit: r27 r15 i4 i0 ]
$r0 = new java.util.PriorityQueue.......	[entry: r27 r15 i4 i0 ]	[exit: r27 r15 i4 i0 $r0 ]
$r1 = staticinvoke <A_Star.A_Star$lambda_aStar_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 i0 $r0 $r1 ]
$r2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r1)	[entry: r27 r15 i4 i0 $r0 $r1 ]	[exit: r27 r15 i4 i0 $r2 $r0 ]
specialinvoke $r0.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r2)	[entry: r27 r15 i4 i0 $r2 $r0 ]	[exit: r27 r15 i4 i0 $r0 ]
r3 = $r0................................	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 r3 i0 ]
$r4 = new A_Star.A_Star$PathAndDistance.	[entry: r27 r15 i4 r3 i0 ]	[exit: r27 r15 i4 r3 $r4 i0 ]
$r5 = new java.util.ArrayList...........	[entry: r27 r15 i4 r3 $r4 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 i0 ]
$r6 = newarray (java.lang.Integer)[1]...	[entry: r27 r15 i4 r3 $r4 $r5 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]
$r6[0] = $r7............................	[entry: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 ]
$r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 ]	[exit: r27 r15 i4 r3 $r4 $r8 $r5 ]
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r8)	[entry: r27 r15 i4 r3 $r4 $r8 $r5 ]	[exit: r27 r15 i4 r3 $r5 $r4 ]
specialinvoke $r4.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(0, $r5, 0)	[entry: r27 r15 i4 r3 $r5 $r4 ]	[exit: r27 r15 i4 $r4 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r4)	[entry: r27 r15 i4 $r4 r3 ]	[exit: r27 r15 i4 r3 ]
z6 = 0..................................	[entry: r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 ]
$r9 = new A_Star.A_Star$PathAndDistance.	[entry: z6 r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
specialinvoke $r9.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
r28 = $r9...............................	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 $z1 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 != 0 goto (branch)................	[entry: r28 r27 r15 i4 r3 z6 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r10 = virtualinvoke r3.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: z6 r27 r15 i4 r3 ]	[exit: r3 z6 r27 r15 i4 $r10 ]
r28 = (A_Star.A_Star$PathAndDistance) $r10	[entry: r3 z6 r27 r15 i4 $r10 ]	[exit: r3 z6 r27 r15 i4 r28 ]
$r11 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 r28 ]	[exit: r3 z6 r27 r15 i4 $r11 r28 ]
$r12 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 $r11 r28 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $r12 ]
$i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>()	[entry: r28 r3 z6 r27 r15 i4 $r11 $r12 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $i1 ]
$i2 = $i1 - 1...........................	[entry: r28 r3 z6 r27 r15 i4 $r11 $i1 ]	[exit: r28 r3 z6 r27 r15 i4 $i2 $r11 ]
$r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>($i2)	[entry: r28 r3 z6 r27 r15 i4 $i2 $r11 ]	[exit: r28 r3 z6 r27 r15 i4 $r13 ]
$r14 = (java.lang.Integer) $r13.........	[entry: r28 r3 z6 r27 r15 i4 $r13 ]	[exit: r28 r3 z6 r27 r15 i4 $r14 ]
i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()	[entry: r28 r3 z6 r27 r15 i4 $r14 ]	[exit: r28 r3 z6 r27 r15 i3 i4 ]
if i3 != i4 goto $r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 r3 z6 r27 r15 i3 i4 ]	[exit: r28 r27 r15 i4 r3 z6 i3 ]
z6 = 1..................................	[entry: r28 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
goto [?= (branch)]......................	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 z6 r27 i4 r3 r15 i3 ]	[exit: r28 z6 r27 r15 i4 r3 $r16 ]
r17 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r28 z6 r27 r15 i4 r3 $r16 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $z2 ]
if $z2 == 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 $z2 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()	[entry: z6 r27 r15 i4 r3 r28 r17 ]	[exit: z6 r27 r15 i4 r3 r17 r28 $r18 ]
r19 = (A_Star.A_Star$Edge) $r18.........	[entry: z6 r27 r15 i4 r3 r17 r28 $r18 ]	[exit: z6 r27 r15 i4 r3 r17 r19 r28 ]
$r20 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r27 r15 i4 r3 r17 r19 r28 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]
$i5 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]
$z3 = virtualinvoke $r20.<java.util.ArrayList: boolean contains(java.lang.Object)>($r21)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]
if $z3 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 ]
$r22 = new java.util.ArrayList..........	[entry: z6 r15 i4 r17 r3 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]
$r23 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]
specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r23)	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]
r24 = $r22..............................	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]
$i6 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]
virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r25)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]	[exit: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]
$r26 = new A_Star.A_Star$PathAndDistance	[entry: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]
$i7 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: int getDistance()>()	[entry: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]
$i8 = virtualinvoke r19.<A_Star.A_Star$Edge: int getWeight()>()	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]
$i9 = $i7 + $i8.........................	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]
$i10 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]
$i11 = r27[$i10]........................	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]	[exit: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]
specialinvoke $r26.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>($i9, r24, $i11)	[entry: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]	[exit: r28 z6 r27 r15 i4 r17 $r26 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r26)	[entry: r28 z6 r27 r15 i4 r17 $r26 r3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()]	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 == 0 goto $r29 = new A_Star.A_Star$PathAndDistance	[entry: r28 z6 ]	[exit: r28 ]
$r29 = r28..............................	[entry: r28 ]	[exit: $r29 ]
goto [?= return $r29]...................	[entry: $r29 ]	[exit: $r29 ]
$r29 = new A_Star.A_Star$PathAndDistance	[entry: ]	[exit: $r29 ]
specialinvoke $r29.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: $r29 ]	[exit: $r29 ]
return $r29.............................	[entry: $r29 ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r81 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[20]................	[entry: ]	[exit: $r0 ]
$r0[0] = 366............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 160............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 242............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 161............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 178............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 77.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 151............................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 226............................	[entry: $r0 ]	[exit: $r0 ]
$r0[9] = 244............................	[entry: $r0 ]	[exit: $r0 ]
$r0[10] = 241...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[11] = 234...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[12] = 380...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[13] = 98............................	[entry: $r0 ]	[exit: $r0 ]
$r0[14] = 193...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[15] = 253...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[16] = 329...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[17] = 80............................	[entry: $r0 ]	[exit: $r0 ]
$r0[18] = 199...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[19] = 374...........................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new A_Star.A_Star$Graph...........	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<A_Star.A_Star$Graph: void <init>(int)>(20)	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r4 = new java.util.ArrayList...........	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
$r5 = newarray (java.lang.Integer)[95]..	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 $r5 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r6 ]
$r5[0] = $r6............................	[entry: r1 r3 $r4 $r5 $r6 ]	[exit: r1 r3 $r4 $r5 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r7 ]
$r5[1] = $r7............................	[entry: r1 r3 $r4 $r5 $r7 ]	[exit: r1 r3 $r4 $r5 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r8 ]
$r5[2] = $r8............................	[entry: r1 r3 $r4 $r5 $r8 ]	[exit: r1 r3 $r4 $r5 ]
$r5[3] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r9 ]
$r5[4] = $r9............................	[entry: r1 r3 $r4 $r5 $r9 ]	[exit: r1 r3 $r4 $r5 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r10 ]
$r5[5] = $r10...........................	[entry: r1 r3 $r4 $r5 $r10 ]	[exit: r1 r3 $r4 $r5 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(140)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r11 ]
$r5[6] = $r11...........................	[entry: r1 r3 $r4 $r5 $r11 ]	[exit: r1 r3 $r4 $r5 ]
$r5[7] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r12 ]
$r5[8] = $r12...........................	[entry: r1 r3 $r4 $r5 $r12 ]	[exit: r1 r3 $r4 $r5 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r13 ]
$r5[9] = $r13...........................	[entry: r1 r3 $r4 $r5 $r13 ]	[exit: r1 r3 $r4 $r5 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(118)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r14 ]
$r5[10] = $r14..........................	[entry: r1 r3 $r4 $r5 $r14 ]	[exit: r1 r3 $r4 $r5 ]
$r5[11] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r15 ]
$r5[12] = $r15..........................	[entry: r1 r3 $r4 $r5 $r15 ]	[exit: r1 r3 $r4 $r5 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r16 ]
$r5[13] = $r16..........................	[entry: r1 r3 $r4 $r5 $r16 ]	[exit: r1 r3 $r4 $r5 ]
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(71)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r17 ]
$r5[14] = $r17..........................	[entry: r1 r3 $r4 $r5 $r17 ]	[exit: r1 r3 $r4 $r5 ]
$r5[15] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r18 ]
$r5[16] = $r18..........................	[entry: r1 r3 $r4 $r5 $r18 ]	[exit: r1 r3 $r4 $r5 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r19 ]
$r5[17] = $r19..........................	[entry: r1 r3 $r4 $r5 $r19 ]	[exit: r1 r3 $r4 $r5 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(151)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r20 ]
$r5[18] = $r20..........................	[entry: r1 r3 $r4 $r5 $r20 ]	[exit: r1 r3 $r4 $r5 ]
$r5[19] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r21 ]
$r5[20] = $r21..........................	[entry: r1 r3 $r4 $r5 $r21 ]	[exit: r1 r3 $r4 $r5 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r22 ]
$r5[21] = $r22..........................	[entry: r1 r3 $r4 $r5 $r22 ]	[exit: r1 r3 $r4 $r5 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(111)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r23 ]
$r5[22] = $r23..........................	[entry: r1 r3 $r4 $r5 $r23 ]	[exit: r1 r3 $r4 $r5 ]
$r5[23] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r24 ]
$r5[24] = $r24..........................	[entry: r1 r3 $r4 $r5 $r24 ]	[exit: r1 r3 $r4 $r5 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r25 ]
$r5[25] = $r25..........................	[entry: r1 r3 $r4 $r5 $r25 ]	[exit: r1 r3 $r4 $r5 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r26 ]
$r5[26] = $r26..........................	[entry: r1 r3 $r4 $r5 $r26 ]	[exit: r1 r3 $r4 $r5 ]
$r5[27] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r27 ]
$r5[28] = $r27..........................	[entry: r1 r3 $r4 $r5 $r27 ]	[exit: r1 r3 $r4 $r5 ]
$r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r28 ]
$r5[29] = $r28..........................	[entry: r1 r3 $r4 $r5 $r28 ]	[exit: r1 r3 $r4 $r5 ]
$r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r29 ]
$r5[30] = $r29..........................	[entry: r1 r3 $r4 $r5 $r29 ]	[exit: r1 r3 $r4 $r5 ]
$r5[31] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r30 ]
$r5[32] = $r30..........................	[entry: r1 r3 $r4 $r5 $r30 ]	[exit: r1 r3 $r4 $r5 ]
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r31 ]
$r5[33] = $r31..........................	[entry: r1 r3 $r4 $r5 $r31 ]	[exit: r1 r3 $r4 $r5 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(120)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r32 ]
$r5[34] = $r32..........................	[entry: r1 r3 $r4 $r5 $r32 ]	[exit: r1 r3 $r4 $r5 ]
$r5[35] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r33 ]
$r5[36] = $r33..........................	[entry: r1 r3 $r4 $r5 $r33 ]	[exit: r1 r3 $r4 $r5 ]
$r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r34 ]
$r5[37] = $r34..........................	[entry: r1 r3 $r4 $r5 $r34 ]	[exit: r1 r3 $r4 $r5 ]
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(146)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r35 ]
$r5[38] = $r35..........................	[entry: r1 r3 $r4 $r5 $r35 ]	[exit: r1 r3 $r4 $r5 ]
$r5[39] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r36 ]
$r5[40] = $r36..........................	[entry: r1 r3 $r4 $r5 $r36 ]	[exit: r1 r3 $r4 $r5 ]
$r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r37 ]
$r5[41] = $r37..........................	[entry: r1 r3 $r4 $r5 $r37 ]	[exit: r1 r3 $r4 $r5 ]
$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(138)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r38 ]
$r5[42] = $r38..........................	[entry: r1 r3 $r4 $r5 $r38 ]	[exit: r1 r3 $r4 $r5 ]
$r5[43] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r39 ]
$r5[44] = $r39..........................	[entry: r1 r3 $r4 $r5 $r39 ]	[exit: r1 r3 $r4 $r5 ]
$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r40 ]
$r5[45] = $r40..........................	[entry: r1 r3 $r4 $r5 $r40 ]	[exit: r1 r3 $r4 $r5 ]
$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(115)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r41 ]
$r5[46] = $r41..........................	[entry: r1 r3 $r4 $r5 $r41 ]	[exit: r1 r3 $r4 $r5 ]
$r5[47] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r42 ]
$r5[48] = $r42..........................	[entry: r1 r3 $r4 $r5 $r42 ]	[exit: r1 r3 $r4 $r5 ]
$r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r43 ]
$r5[49] = $r43..........................	[entry: r1 r3 $r4 $r5 $r43 ]	[exit: r1 r3 $r4 $r5 ]
$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r44 ]
$r5[50] = $r44..........................	[entry: r1 r3 $r4 $r5 $r44 ]	[exit: r1 r3 $r4 $r5 ]
$r5[51] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r45 ]
$r5[52] = $r45..........................	[entry: r1 r3 $r4 $r5 $r45 ]	[exit: r1 r3 $r4 $r5 ]
$r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r46 ]
$r5[53] = $r46..........................	[entry: r1 r3 $r4 $r5 $r46 ]	[exit: r1 r3 $r4 $r5 ]
$r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r47 ]
$r5[54] = $r47..........................	[entry: r1 r3 $r4 $r5 $r47 ]	[exit: r1 r3 $r4 $r5 ]
$r5[55] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r48 ]
$r5[56] = $r48..........................	[entry: r1 r3 $r4 $r5 $r48 ]	[exit: r1 r3 $r4 $r5 ]
$r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r49 ]
$r5[57] = $r49..........................	[entry: r1 r3 $r4 $r5 $r49 ]	[exit: r1 r3 $r4 $r5 ]
$r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(97)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r50 ]
$r5[58] = $r50..........................	[entry: r1 r3 $r4 $r5 $r50 ]	[exit: r1 r3 $r4 $r5 ]
$r5[59] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r51 ]
$r5[60] = $r51..........................	[entry: r1 r3 $r4 $r5 $r51 ]	[exit: r1 r3 $r4 $r5 ]
$r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r52 ]
$r5[61] = $r52..........................	[entry: r1 r3 $r4 $r5 $r52 ]	[exit: r1 r3 $r4 $r5 ]
$r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(211)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r53 ]
$r5[62] = $r53..........................	[entry: r1 r3 $r4 $r5 $r53 ]	[exit: r1 r3 $r4 $r5 ]
$r5[63] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r54 ]
$r5[64] = $r54..........................	[entry: r1 r3 $r4 $r5 $r54 ]	[exit: r1 r3 $r4 $r5 ]
$r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r55 ]
$r5[65] = $r55..........................	[entry: r1 r3 $r4 $r5 $r55 ]	[exit: r1 r3 $r4 $r5 ]
$r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r56 ]
$r5[66] = $r56..........................	[entry: r1 r3 $r4 $r5 $r56 ]	[exit: r1 r3 $r4 $r5 ]
$r5[67] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r57 ]
$r5[68] = $r57..........................	[entry: r1 r3 $r4 $r5 $r57 ]	[exit: r1 r3 $r4 $r5 ]
$r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r58 ]
$r5[69] = $r58..........................	[entry: r1 r3 $r4 $r5 $r58 ]	[exit: r1 r3 $r4 $r5 ]
$r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(160)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r59 ]
$r5[70] = $r59..........................	[entry: r1 r3 $r4 $r5 $r59 ]	[exit: r1 r3 $r4 $r5 ]
$r5[71] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r60 ]
$r5[72] = $r60..........................	[entry: r1 r3 $r4 $r5 $r60 ]	[exit: r1 r3 $r4 $r5 ]
$r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r61 ]
$r5[73] = $r61..........................	[entry: r1 r3 $r4 $r5 $r61 ]	[exit: r1 r3 $r4 $r5 ]
$r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(85)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r62 ]
$r5[74] = $r62..........................	[entry: r1 r3 $r4 $r5 $r62 ]	[exit: r1 r3 $r4 $r5 ]
$r5[75] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r63 ]
$r5[76] = $r63..........................	[entry: r1 r3 $r4 $r5 $r63 ]	[exit: r1 r3 $r4 $r5 ]
$r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r64 ]
$r5[77] = $r64..........................	[entry: r1 r3 $r4 $r5 $r64 ]	[exit: r1 r3 $r4 $r5 ]
$r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(98)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r65 ]
$r5[78] = $r65..........................	[entry: r1 r3 $r4 $r5 $r65 ]	[exit: r1 r3 $r4 $r5 ]
$r5[79] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r66 ]
$r5[80] = $r66..........................	[entry: r1 r3 $r4 $r5 $r66 ]	[exit: r1 r3 $r4 $r5 ]
$r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r67 ]
$r5[81] = $r67..........................	[entry: r1 r3 $r4 $r5 $r67 ]	[exit: r1 r3 $r4 $r5 ]
$r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(86)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r68 ]
$r5[82] = $r68..........................	[entry: r1 r3 $r4 $r5 $r68 ]	[exit: r1 r3 $r4 $r5 ]
$r5[83] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r69 ]
$r5[84] = $r69..........................	[entry: r1 r3 $r4 $r5 $r69 ]	[exit: r1 r3 $r4 $r5 ]
$r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r70 ]
$r5[85] = $r70..........................	[entry: r1 r3 $r4 $r5 $r70 ]	[exit: r1 r3 $r4 $r5 ]
$r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(142)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r71 ]
$r5[86] = $r71..........................	[entry: r1 r3 $r4 $r5 $r71 ]	[exit: r1 r3 $r4 $r5 ]
$r5[87] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r72 ]
$r5[88] = $r72..........................	[entry: r1 r3 $r4 $r5 $r72 ]	[exit: r1 r3 $r4 $r5 ]
$r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r73 ]
$r5[89] = $r73..........................	[entry: r1 r3 $r4 $r5 $r73 ]	[exit: r1 r3 $r4 $r5 ]
$r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(92)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r74 ]
$r5[90] = $r74..........................	[entry: r1 r3 $r4 $r5 $r74 ]	[exit: r1 r3 $r4 $r5 ]
$r5[91] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r75 ]
$r5[92] = $r75..........................	[entry: r1 r3 $r4 $r5 $r75 ]	[exit: r1 r3 $r4 $r5 ]
$r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r76 ]
$r5[93] = $r76..........................	[entry: r1 r3 $r4 $r5 $r76 ]	[exit: r1 r3 $r4 $r5 ]
$r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r77 ]
$r5[94] = $r77..........................	[entry: r1 r3 $r4 $r5 $r77 ]	[exit: r1 r3 $r4 $r5 ]
$r78 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r78 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r78)	[entry: r1 r3 $r78 $r4 ]	[exit: r1 r3 $r4 ]
r79 = $r4...............................	[entry: r1 r3 $r4 ]	[exit: r1 r3 r79 ]
staticinvoke <A_Star.A_Star: void initializeGraph(A_Star.A_Star$Graph,java.util.ArrayList)>(r3, r79)	[entry: r1 r3 r79 ]	[exit: r3 r1 ]
r80 = staticinvoke <A_Star.A_Star: A_Star.A_Star$PathAndDistance aStar(int,int,A_Star.A_Star$Graph,int[])>(3, 1, r3, r1)	[entry: r3 r1 ]	[exit: r80 ]
staticinvoke <A_Star.A_Star$PathAndDistance: void access$100(A_Star.A_Star$PathAndDistance)>(r80)	[entry: r80 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: aStar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i4 := @parameter1: int..................	[entry: i0 ]	[exit: i4 i0 ]
r15 := @parameter2: A_Star.A_Star$Graph.	[entry: i4 i0 ]	[exit: r15 i4 i0 ]
r27 := @parameter3: int[]...............	[entry: r15 i4 i0 ]	[exit: r27 r15 i4 i0 ]
$r0 = new java.util.PriorityQueue.......	[entry: r27 r15 i4 i0 ]	[exit: r27 r15 i4 i0 $r0 ]
$r1 = staticinvoke <A_Star.A_Star$lambda_aStar_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 i0 $r0 $r1 ]
$r2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r1)	[entry: r27 r15 i4 i0 $r0 $r1 ]	[exit: r27 r15 i4 i0 $r2 $r0 ]
specialinvoke $r0.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r2)	[entry: r27 r15 i4 i0 $r2 $r0 ]	[exit: r27 r15 i4 i0 $r0 ]
r3 = $r0................................	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 r3 i0 ]
$r4 = new A_Star.A_Star$PathAndDistance.	[entry: r27 r15 i4 r3 i0 ]	[exit: r27 r15 i4 r3 $r4 i0 ]
$r5 = new java.util.ArrayList...........	[entry: r27 r15 i4 r3 $r4 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 i0 ]
$r6 = newarray (java.lang.Integer)[1]...	[entry: r27 r15 i4 r3 $r4 $r5 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]
$r6[0] = $r7............................	[entry: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 ]
$r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 ]	[exit: r27 r15 i4 r3 $r4 $r8 $r5 ]
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r8)	[entry: r27 r15 i4 r3 $r4 $r8 $r5 ]	[exit: r27 r15 i4 r3 $r5 $r4 ]
specialinvoke $r4.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(0, $r5, 0)	[entry: r27 r15 i4 r3 $r5 $r4 ]	[exit: r27 r15 i4 $r4 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r4)	[entry: r27 r15 i4 $r4 r3 ]	[exit: r27 r15 i4 r3 ]
z6 = 0..................................	[entry: r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 ]
$r9 = new A_Star.A_Star$PathAndDistance.	[entry: z6 r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
specialinvoke $r9.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
r28 = $r9...............................	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 $z1 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 != 0 goto (branch)................	[entry: r28 r27 r15 i4 r3 z6 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r10 = virtualinvoke r3.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: z6 r27 r15 i4 r3 ]	[exit: r3 z6 r27 r15 i4 $r10 ]
r28 = (A_Star.A_Star$PathAndDistance) $r10	[entry: r3 z6 r27 r15 i4 $r10 ]	[exit: r3 z6 r27 r15 i4 r28 ]
$r11 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 r28 ]	[exit: r3 z6 r27 r15 i4 $r11 r28 ]
$r12 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 $r11 r28 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $r12 ]
$i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>()	[entry: r28 r3 z6 r27 r15 i4 $r11 $r12 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $i1 ]
$i2 = $i1 - 1...........................	[entry: r28 r3 z6 r27 r15 i4 $r11 $i1 ]	[exit: r28 r3 z6 r27 r15 i4 $i2 $r11 ]
$r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>($i2)	[entry: r28 r3 z6 r27 r15 i4 $i2 $r11 ]	[exit: r28 r3 z6 r27 r15 i4 $r13 ]
$r14 = (java.lang.Integer) $r13.........	[entry: r28 r3 z6 r27 r15 i4 $r13 ]	[exit: r28 r3 z6 r27 r15 i4 $r14 ]
i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()	[entry: r28 r3 z6 r27 r15 i4 $r14 ]	[exit: r28 r3 z6 r27 r15 i3 i4 ]
if i3 != i4 goto $r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 r3 z6 r27 r15 i3 i4 ]	[exit: r28 r27 r15 i4 r3 z6 i3 ]
z6 = 1..................................	[entry: r28 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
goto [?= (branch)]......................	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 z6 r27 i4 r3 r15 i3 ]	[exit: r28 z6 r27 r15 i4 r3 $r16 ]
r17 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r28 z6 r27 r15 i4 r3 $r16 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $z2 ]
if $z2 == 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 $z2 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()	[entry: z6 r27 r15 i4 r3 r28 r17 ]	[exit: z6 r27 r15 i4 r3 r17 r28 $r18 ]
r19 = (A_Star.A_Star$Edge) $r18.........	[entry: z6 r27 r15 i4 r3 r17 r28 $r18 ]	[exit: z6 r27 r15 i4 r3 r17 r19 r28 ]
$r20 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r27 r15 i4 r3 r17 r19 r28 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]
$i5 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]
$z3 = virtualinvoke $r20.<java.util.ArrayList: boolean contains(java.lang.Object)>($r21)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]
if $z3 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 ]
$r22 = new java.util.ArrayList..........	[entry: z6 r15 i4 r17 r3 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]
$r23 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]
specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r23)	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]
r24 = $r22..............................	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]
$i6 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]
virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r25)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]	[exit: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]
$r26 = new A_Star.A_Star$PathAndDistance	[entry: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]
$i7 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: int getDistance()>()	[entry: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]
$i8 = virtualinvoke r19.<A_Star.A_Star$Edge: int getWeight()>()	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]
$i9 = $i7 + $i8.........................	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]
$i10 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]
$i11 = r27[$i10]........................	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]	[exit: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]
specialinvoke $r26.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>($i9, r24, $i11)	[entry: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]	[exit: r28 z6 r27 r15 i4 r17 $r26 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r26)	[entry: r28 z6 r27 r15 i4 r17 $r26 r3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()]	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 == 0 goto $r29 = new A_Star.A_Star$PathAndDistance	[entry: r28 z6 ]	[exit: r28 ]
$r29 = r28..............................	[entry: r28 ]	[exit: $r29 ]
goto [?= return $r29]...................	[entry: $r29 ]	[exit: $r29 ]
$r29 = new A_Star.A_Star$PathAndDistance	[entry: ]	[exit: $r29 ]
specialinvoke $r29.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: $r29 ]	[exit: $r29 ]
return $r29.............................	[entry: $r29 ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r81 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[20]................	[entry: ]	[exit: $r0 ]
$r0[0] = 366............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 160............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 242............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 161............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 178............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 77.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 151............................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 226............................	[entry: $r0 ]	[exit: $r0 ]
$r0[9] = 244............................	[entry: $r0 ]	[exit: $r0 ]
$r0[10] = 241...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[11] = 234...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[12] = 380...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[13] = 98............................	[entry: $r0 ]	[exit: $r0 ]
$r0[14] = 193...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[15] = 253...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[16] = 329...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[17] = 80............................	[entry: $r0 ]	[exit: $r0 ]
$r0[18] = 199...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[19] = 374...........................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new A_Star.A_Star$Graph...........	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<A_Star.A_Star$Graph: void <init>(int)>(20)	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r4 = new java.util.ArrayList...........	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
$r5 = newarray (java.lang.Integer)[95]..	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 $r5 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r6 ]
$r5[0] = $r6............................	[entry: r1 r3 $r4 $r5 $r6 ]	[exit: r1 r3 $r4 $r5 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r7 ]
$r5[1] = $r7............................	[entry: r1 r3 $r4 $r5 $r7 ]	[exit: r1 r3 $r4 $r5 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r8 ]
$r5[2] = $r8............................	[entry: r1 r3 $r4 $r5 $r8 ]	[exit: r1 r3 $r4 $r5 ]
$r5[3] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r9 ]
$r5[4] = $r9............................	[entry: r1 r3 $r4 $r5 $r9 ]	[exit: r1 r3 $r4 $r5 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r10 ]
$r5[5] = $r10...........................	[entry: r1 r3 $r4 $r5 $r10 ]	[exit: r1 r3 $r4 $r5 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(140)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r11 ]
$r5[6] = $r11...........................	[entry: r1 r3 $r4 $r5 $r11 ]	[exit: r1 r3 $r4 $r5 ]
$r5[7] = null...........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r12 ]
$r5[8] = $r12...........................	[entry: r1 r3 $r4 $r5 $r12 ]	[exit: r1 r3 $r4 $r5 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r13 ]
$r5[9] = $r13...........................	[entry: r1 r3 $r4 $r5 $r13 ]	[exit: r1 r3 $r4 $r5 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(118)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r14 ]
$r5[10] = $r14..........................	[entry: r1 r3 $r4 $r5 $r14 ]	[exit: r1 r3 $r4 $r5 ]
$r5[11] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(19)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r15 ]
$r5[12] = $r15..........................	[entry: r1 r3 $r4 $r5 $r15 ]	[exit: r1 r3 $r4 $r5 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r16 ]
$r5[13] = $r16..........................	[entry: r1 r3 $r4 $r5 $r16 ]	[exit: r1 r3 $r4 $r5 ]
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(71)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r17 ]
$r5[14] = $r17..........................	[entry: r1 r3 $r4 $r5 $r17 ]	[exit: r1 r3 $r4 $r5 ]
$r5[15] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(12)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r18 ]
$r5[16] = $r18..........................	[entry: r1 r3 $r4 $r5 $r18 ]	[exit: r1 r3 $r4 $r5 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r19 ]
$r5[17] = $r19..........................	[entry: r1 r3 $r4 $r5 $r19 ]	[exit: r1 r3 $r4 $r5 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(151)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r20 ]
$r5[18] = $r20..........................	[entry: r1 r3 $r4 $r5 $r20 ]	[exit: r1 r3 $r4 $r5 ]
$r5[19] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(16)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r21 ]
$r5[20] = $r21..........................	[entry: r1 r3 $r4 $r5 $r21 ]	[exit: r1 r3 $r4 $r5 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r22 ]
$r5[21] = $r22..........................	[entry: r1 r3 $r4 $r5 $r22 ]	[exit: r1 r3 $r4 $r5 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(111)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r23 ]
$r5[22] = $r23..........................	[entry: r1 r3 $r4 $r5 $r23 ]	[exit: r1 r3 $r4 $r5 ]
$r5[23] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r24 ]
$r5[24] = $r24..........................	[entry: r1 r3 $r4 $r5 $r24 ]	[exit: r1 r3 $r4 $r5 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r25 ]
$r5[25] = $r25..........................	[entry: r1 r3 $r4 $r5 $r25 ]	[exit: r1 r3 $r4 $r5 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(70)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r26 ]
$r5[26] = $r26..........................	[entry: r1 r3 $r4 $r5 $r26 ]	[exit: r1 r3 $r4 $r5 ]
$r5[27] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r27 ]
$r5[28] = $r27..........................	[entry: r1 r3 $r4 $r5 $r27 ]	[exit: r1 r3 $r4 $r5 ]
$r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r28 ]
$r5[29] = $r28..........................	[entry: r1 r3 $r4 $r5 $r28 ]	[exit: r1 r3 $r4 $r5 ]
$r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(75)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r29 ]
$r5[30] = $r29..........................	[entry: r1 r3 $r4 $r5 $r29 ]	[exit: r1 r3 $r4 $r5 ]
$r5[31] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r30 ]
$r5[32] = $r30..........................	[entry: r1 r3 $r4 $r5 $r30 ]	[exit: r1 r3 $r4 $r5 ]
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r31 ]
$r5[33] = $r31..........................	[entry: r1 r3 $r4 $r5 $r31 ]	[exit: r1 r3 $r4 $r5 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(120)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r32 ]
$r5[34] = $r32..........................	[entry: r1 r3 $r4 $r5 $r32 ]	[exit: r1 r3 $r4 $r5 ]
$r5[35] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r33 ]
$r5[36] = $r33..........................	[entry: r1 r3 $r4 $r5 $r33 ]	[exit: r1 r3 $r4 $r5 ]
$r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r34 ]
$r5[37] = $r34..........................	[entry: r1 r3 $r4 $r5 $r34 ]	[exit: r1 r3 $r4 $r5 ]
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(146)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r35 ]
$r5[38] = $r35..........................	[entry: r1 r3 $r4 $r5 $r35 ]	[exit: r1 r3 $r4 $r5 ]
$r5[39] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r36 ]
$r5[40] = $r36..........................	[entry: r1 r3 $r4 $r5 $r36 ]	[exit: r1 r3 $r4 $r5 ]
$r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r37 ]
$r5[41] = $r37..........................	[entry: r1 r3 $r4 $r5 $r37 ]	[exit: r1 r3 $r4 $r5 ]
$r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(138)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r38 ]
$r5[42] = $r38..........................	[entry: r1 r3 $r4 $r5 $r38 ]	[exit: r1 r3 $r4 $r5 ]
$r5[43] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r39 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r39 ]
$r5[44] = $r39..........................	[entry: r1 r3 $r4 $r5 $r39 ]	[exit: r1 r3 $r4 $r5 ]
$r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r40 ]
$r5[45] = $r40..........................	[entry: r1 r3 $r4 $r5 $r40 ]	[exit: r1 r3 $r4 $r5 ]
$r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(115)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r41 ]
$r5[46] = $r41..........................	[entry: r1 r3 $r4 $r5 $r41 ]	[exit: r1 r3 $r4 $r5 ]
$r5[47] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r42 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r42 ]
$r5[48] = $r42..........................	[entry: r1 r3 $r4 $r5 $r42 ]	[exit: r1 r3 $r4 $r5 ]
$r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r43 ]
$r5[49] = $r43..........................	[entry: r1 r3 $r4 $r5 $r43 ]	[exit: r1 r3 $r4 $r5 ]
$r44 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(80)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r44 ]
$r5[50] = $r44..........................	[entry: r1 r3 $r4 $r5 $r44 ]	[exit: r1 r3 $r4 $r5 ]
$r5[51] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r45 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(15)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r45 ]
$r5[52] = $r45..........................	[entry: r1 r3 $r4 $r5 $r45 ]	[exit: r1 r3 $r4 $r5 ]
$r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r46 ]
$r5[53] = $r46..........................	[entry: r1 r3 $r4 $r5 $r46 ]	[exit: r1 r3 $r4 $r5 ]
$r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(99)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r47 ]
$r5[54] = $r47..........................	[entry: r1 r3 $r4 $r5 $r47 ]	[exit: r1 r3 $r4 $r5 ]
$r5[55] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(14)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r48 ]
$r5[56] = $r48..........................	[entry: r1 r3 $r4 $r5 $r48 ]	[exit: r1 r3 $r4 $r5 ]
$r49 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r49 ]
$r5[57] = $r49..........................	[entry: r1 r3 $r4 $r5 $r49 ]	[exit: r1 r3 $r4 $r5 ]
$r50 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(97)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r50 ]
$r5[58] = $r50..........................	[entry: r1 r3 $r4 $r5 $r50 ]	[exit: r1 r3 $r4 $r5 ]
$r5[59] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r51 ]
$r5[60] = $r51..........................	[entry: r1 r3 $r4 $r5 $r51 ]	[exit: r1 r3 $r4 $r5 ]
$r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r52 ]
$r5[61] = $r52..........................	[entry: r1 r3 $r4 $r5 $r52 ]	[exit: r1 r3 $r4 $r5 ]
$r53 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(211)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r53 ]
$r5[62] = $r53..........................	[entry: r1 r3 $r4 $r5 $r53 ]	[exit: r1 r3 $r4 $r5 ]
$r5[63] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r54 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(13)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r54 ]
$r5[64] = $r54..........................	[entry: r1 r3 $r4 $r5 $r54 ]	[exit: r1 r3 $r4 $r5 ]
$r55 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r55 ]
$r5[65] = $r55..........................	[entry: r1 r3 $r4 $r5 $r55 ]	[exit: r1 r3 $r4 $r5 ]
$r56 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r56 ]
$r5[66] = $r56..........................	[entry: r1 r3 $r4 $r5 $r56 ]	[exit: r1 r3 $r4 $r5 ]
$r5[67] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r57 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(6)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r57 ]
$r5[68] = $r57..........................	[entry: r1 r3 $r4 $r5 $r57 ]	[exit: r1 r3 $r4 $r5 ]
$r58 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r58 ]
$r5[69] = $r58..........................	[entry: r1 r3 $r4 $r5 $r58 ]	[exit: r1 r3 $r4 $r5 ]
$r59 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(160)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r59 ]
$r5[70] = $r59..........................	[entry: r1 r3 $r4 $r5 $r59 ]	[exit: r1 r3 $r4 $r5 ]
$r5[71] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r60 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r60 ]
$r5[72] = $r60..........................	[entry: r1 r3 $r4 $r5 $r60 ]	[exit: r1 r3 $r4 $r5 ]
$r61 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r61 ]
$r5[73] = $r61..........................	[entry: r1 r3 $r4 $r5 $r61 ]	[exit: r1 r3 $r4 $r5 ]
$r62 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(85)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r62 ]
$r5[74] = $r62..........................	[entry: r1 r3 $r4 $r5 $r62 ]	[exit: r1 r3 $r4 $r5 ]
$r5[75] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r63 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r63 ]
$r5[76] = $r63..........................	[entry: r1 r3 $r4 $r5 $r63 ]	[exit: r1 r3 $r4 $r5 ]
$r64 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r64 ]
$r5[77] = $r64..........................	[entry: r1 r3 $r4 $r5 $r64 ]	[exit: r1 r3 $r4 $r5 ]
$r65 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(98)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r65 ]
$r5[78] = $r65..........................	[entry: r1 r3 $r4 $r5 $r65 ]	[exit: r1 r3 $r4 $r5 ]
$r5[79] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r66 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r66 ]
$r5[80] = $r66..........................	[entry: r1 r3 $r4 $r5 $r66 ]	[exit: r1 r3 $r4 $r5 ]
$r67 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r67 ]
$r5[81] = $r67..........................	[entry: r1 r3 $r4 $r5 $r67 ]	[exit: r1 r3 $r4 $r5 ]
$r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(86)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r68 ]
$r5[82] = $r68..........................	[entry: r1 r3 $r4 $r5 $r68 ]	[exit: r1 r3 $r4 $r5 ]
$r5[83] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r69 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(17)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r69 ]
$r5[84] = $r69..........................	[entry: r1 r3 $r4 $r5 $r69 ]	[exit: r1 r3 $r4 $r5 ]
$r70 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r70 ]
$r5[85] = $r70..........................	[entry: r1 r3 $r4 $r5 $r70 ]	[exit: r1 r3 $r4 $r5 ]
$r71 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(142)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r71 ]
$r5[86] = $r71..........................	[entry: r1 r3 $r4 $r5 $r71 ]	[exit: r1 r3 $r4 $r5 ]
$r5[87] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(18)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r72 ]
$r5[88] = $r72..........................	[entry: r1 r3 $r4 $r5 $r72 ]	[exit: r1 r3 $r4 $r5 ]
$r73 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r73 ]
$r5[89] = $r73..........................	[entry: r1 r3 $r4 $r5 $r73 ]	[exit: r1 r3 $r4 $r5 ]
$r74 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(92)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r74 ]
$r5[90] = $r74..........................	[entry: r1 r3 $r4 $r5 $r74 ]	[exit: r1 r3 $r4 $r5 ]
$r5[91] = null..........................	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 ]
$r75 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r75 ]
$r5[92] = $r75..........................	[entry: r1 r3 $r4 $r5 $r75 ]	[exit: r1 r3 $r4 $r5 ]
$r76 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(11)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r76 ]
$r5[93] = $r76..........................	[entry: r1 r3 $r4 $r5 $r76 ]	[exit: r1 r3 $r4 $r5 ]
$r77 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(87)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r4 $r5 $r77 ]
$r5[94] = $r77..........................	[entry: r1 r3 $r4 $r5 $r77 ]	[exit: r1 r3 $r4 $r5 ]
$r78 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r5)	[entry: r1 r3 $r4 $r5 ]	[exit: r1 r3 $r78 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>(java.util.Collection)>($r78)	[entry: r1 r3 $r78 $r4 ]	[exit: r1 r3 $r4 ]
r79 = $r4...............................	[entry: r1 r3 $r4 ]	[exit: r1 r3 r79 ]
staticinvoke <A_Star.A_Star: void initializeGraph(A_Star.A_Star$Graph,java.util.ArrayList)>(r3, r79)	[entry: r1 r3 r79 ]	[exit: r3 r1 ]
r80 = staticinvoke <A_Star.A_Star: A_Star.A_Star$PathAndDistance aStar(int,int,A_Star.A_Star$Graph,int[])>(3, 1, r3, r1)	[entry: r3 r1 ]	[exit: r80 ]
staticinvoke <A_Star.A_Star$PathAndDistance: void access$100(A_Star.A_Star$PathAndDistance)>(r80)	[entry: r80 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: A_Star.A_Star, Method Name: aStar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i4 := @parameter1: int..................	[entry: i0 ]	[exit: i4 i0 ]
r15 := @parameter2: A_Star.A_Star$Graph.	[entry: i4 i0 ]	[exit: r15 i4 i0 ]
r27 := @parameter3: int[]...............	[entry: r15 i4 i0 ]	[exit: r27 r15 i4 i0 ]
$r0 = new java.util.PriorityQueue.......	[entry: r27 r15 i4 i0 ]	[exit: r27 r15 i4 i0 $r0 ]
$r1 = staticinvoke <A_Star.A_Star$lambda_aStar_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 i0 $r0 $r1 ]
$r2 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r1)	[entry: r27 r15 i4 i0 $r0 $r1 ]	[exit: r27 r15 i4 i0 $r2 $r0 ]
specialinvoke $r0.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r2)	[entry: r27 r15 i4 i0 $r2 $r0 ]	[exit: r27 r15 i4 i0 $r0 ]
r3 = $r0................................	[entry: r27 r15 i4 i0 $r0 ]	[exit: r27 r15 i4 r3 i0 ]
$r4 = new A_Star.A_Star$PathAndDistance.	[entry: r27 r15 i4 r3 i0 ]	[exit: r27 r15 i4 r3 $r4 i0 ]
$r5 = new java.util.ArrayList...........	[entry: r27 r15 i4 r3 $r4 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 i0 ]
$r6 = newarray (java.lang.Integer)[1]...	[entry: r27 r15 i4 r3 $r4 $r5 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 i0 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]
$r6[0] = $r7............................	[entry: r27 r15 i4 r3 $r4 $r5 $r6 $r7 ]	[exit: r27 r15 i4 r3 $r4 $r5 $r6 ]
$r8 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r6)	[entry: r27 r15 i4 r3 $r4 $r5 $r6 ]	[exit: r27 r15 i4 r3 $r4 $r8 $r5 ]
specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r8)	[entry: r27 r15 i4 r3 $r4 $r8 $r5 ]	[exit: r27 r15 i4 r3 $r5 $r4 ]
specialinvoke $r4.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(0, $r5, 0)	[entry: r27 r15 i4 r3 $r5 $r4 ]	[exit: r27 r15 i4 $r4 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r4)	[entry: r27 r15 i4 $r4 r3 ]	[exit: r27 r15 i4 r3 ]
z6 = 0..................................	[entry: r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 ]
$r9 = new A_Star.A_Star$PathAndDistance.	[entry: z6 r27 r15 i4 r3 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
specialinvoke $r9.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: z6 r27 r15 i4 r3 $r9 ]
r28 = $r9...............................	[entry: z6 r27 r15 i4 r3 $r9 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 $z1 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 != 0 goto (branch)................	[entry: r28 r27 r15 i4 r3 z6 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r10 = virtualinvoke r3.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: z6 r27 r15 i4 r3 ]	[exit: r3 z6 r27 r15 i4 $r10 ]
r28 = (A_Star.A_Star$PathAndDistance) $r10	[entry: r3 z6 r27 r15 i4 $r10 ]	[exit: r3 z6 r27 r15 i4 r28 ]
$r11 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 r28 ]	[exit: r3 z6 r27 r15 i4 $r11 r28 ]
$r12 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: r3 z6 r27 r15 i4 $r11 r28 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $r12 ]
$i1 = virtualinvoke $r12.<java.util.ArrayList: int size()>()	[entry: r28 r3 z6 r27 r15 i4 $r11 $r12 ]	[exit: r28 r3 z6 r27 r15 i4 $r11 $i1 ]
$i2 = $i1 - 1...........................	[entry: r28 r3 z6 r27 r15 i4 $r11 $i1 ]	[exit: r28 r3 z6 r27 r15 i4 $i2 $r11 ]
$r13 = virtualinvoke $r11.<java.util.ArrayList: java.lang.Object get(int)>($i2)	[entry: r28 r3 z6 r27 r15 i4 $i2 $r11 ]	[exit: r28 r3 z6 r27 r15 i4 $r13 ]
$r14 = (java.lang.Integer) $r13.........	[entry: r28 r3 z6 r27 r15 i4 $r13 ]	[exit: r28 r3 z6 r27 r15 i4 $r14 ]
i3 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()	[entry: r28 r3 z6 r27 r15 i4 $r14 ]	[exit: r28 r3 z6 r27 r15 i3 i4 ]
if i3 != i4 goto $r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 r3 z6 r27 r15 i3 i4 ]	[exit: r28 r27 r15 i4 r3 z6 i3 ]
z6 = 1..................................	[entry: r28 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
goto [?= (branch)]......................	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
$r16 = staticinvoke <A_Star.A_Star$Graph: java.util.ArrayList access$200(A_Star.A_Star$Graph,int)>(r15, i3)	[entry: r28 z6 r27 i4 r3 r15 i3 ]	[exit: r28 z6 r27 r15 i4 r3 $r16 ]
r17 = virtualinvoke $r16.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r28 z6 r27 r15 i4 r3 $r16 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $z2 ]
if $z2 == 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 $z2 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
$r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>()	[entry: z6 r27 r15 i4 r3 r28 r17 ]	[exit: z6 r27 r15 i4 r3 r17 r28 $r18 ]
r19 = (A_Star.A_Star$Edge) $r18.........	[entry: z6 r27 r15 i4 r3 r17 r28 $r18 ]	[exit: z6 r27 r15 i4 r3 r17 r19 r28 ]
$r20 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r27 r15 i4 r3 r17 r19 r28 ]	[exit: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]
$i5 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r27 r15 i4 r3 r17 $r20 r19 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r20 $i5 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]
$z3 = virtualinvoke $r20.<java.util.ArrayList: boolean contains(java.lang.Object)>($r21)	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $r21 $r20 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]
if $z3 != 0 goto (branch)...............	[entry: r28 z6 r27 r15 i4 r3 r17 r19 $z3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 r19 ]
$r22 = new java.util.ArrayList..........	[entry: z6 r15 i4 r17 r3 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]
$r23 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: java.util.ArrayList getPath()>()	[entry: z6 r15 i4 r17 r3 r27 r19 $r22 r28 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]
specialinvoke $r22.<java.util.ArrayList: void <init>(java.util.Collection)>($r23)	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r23 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]
r24 = $r22..............................	[entry: z6 r15 i4 r17 r3 r27 r28 r19 $r22 ]	[exit: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]
$i6 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: z6 r15 i4 r17 r3 r27 r28 r24 r19 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 r24 $i6 ]	[exit: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]
virtualinvoke r24.<java.util.ArrayList: boolean add(java.lang.Object)>($r25)	[entry: z6 r15 i4 r17 r3 r27 r19 r28 $r25 r24 ]	[exit: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]
$r26 = new A_Star.A_Star$PathAndDistance	[entry: z6 r15 i4 r17 r3 r24 r27 r19 r28 ]	[exit: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]
$i7 = virtualinvoke r28.<A_Star.A_Star$PathAndDistance: int getDistance()>()	[entry: z6 r15 i4 r17 r3 r24 $r26 r27 r19 r28 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]
$i8 = virtualinvoke r19.<A_Star.A_Star$Edge: int getWeight()>()	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 $i7 r19 ]	[exit: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]
$i9 = $i7 + $i8.........................	[entry: r28 z6 r15 i4 r17 r3 r24 $r26 r27 r19 $i7 $i8 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]
$i10 = virtualinvoke r19.<A_Star.A_Star$Edge: int getTo()>()	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 r19 ]	[exit: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]
$i11 = r27[$i10]........................	[entry: r28 z6 r15 i4 r17 r3 $i9 r24 $r26 r27 $i10 ]	[exit: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]
specialinvoke $r26.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>($i9, r24, $i11)	[entry: r28 z6 r27 r15 i4 r17 r3 $i9 r24 $i11 $r26 ]	[exit: r28 z6 r27 r15 i4 r17 $r26 r3 ]
virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r26)	[entry: r28 z6 r27 r15 i4 r17 $r26 r3 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z2 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>()]	[entry: r28 z6 r27 r15 i4 r3 r17 ]	[exit: r28 z6 r27 r15 i4 r3 r17 ]
goto [?= $z1 = virtualinvoke r3.<java.util.PriorityQueue: boolean isEmpty()>()]	[entry: r28 z6 r27 r15 i4 r3 ]	[exit: r28 z6 r27 r15 i4 r3 ]
if z6 == 0 goto $r29 = new A_Star.A_Star$PathAndDistance	[entry: r28 z6 ]	[exit: r28 ]
$r29 = r28..............................	[entry: r28 ]	[exit: $r29 ]
goto [?= return $r29]...................	[entry: $r29 ]	[exit: $r29 ]
$r29 = new A_Star.A_Star$PathAndDistance	[entry: ]	[exit: $r29 ]
specialinvoke $r29.<A_Star.A_Star$PathAndDistance: void <init>(int,java.util.ArrayList,int)>(-1, null, -1)	[entry: $r29 ]	[exit: $r29 ]
return $r29.............................	[entry: $r29 ]	[exit: ]
********************
Class Name: Kruskal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r27 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = newarray (java.util.HashSet)[7]....	[entry: ]	[exit: r0 ]
i7 = 0..................................	[entry: r0 ]	[exit: i7 r0 ]
$i0 = lengthof r0.......................	[entry: i7 r0 ]	[exit: r0 i7 $i0 ]
if i7 >= $i0 goto staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 1, 2)	[entry: r0 i7 $i0 ]	[exit: r0 i7 ]
$r26 = new java.util.HashSet............	[entry: r0 i7 ]	[exit: r0 i7 $r26 ]
specialinvoke $r26.<java.util.HashSet: void <init>()>()	[entry: r0 i7 $r26 ]	[exit: r0 i7 $r26 ]
r0[i7] = $r26...........................	[entry: r0 i7 $r26 ]	[exit: r0 i7 ]
i7 = i7 + 1.............................	[entry: r0 i7 ]	[exit: i7 r0 ]
goto [?= $i0 = lengthof r0].............	[entry: i7 r0 ]	[exit: i7 r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 1, 2)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 2, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 3, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 1, 2, 4)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 2, 3, 5)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 1, 4, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 2, 4, 1)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 3, 5, 7)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 4, 5, 8)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 5, 6, 9)	[entry: r0 ]	[exit: r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Initial Graph: ")	[entry: r0 $r1 ]	[exit: r0 ]
i8 = 0..................................	[entry: r0 ]	[exit: i8 r0 ]
$i1 = lengthof r0.......................	[entry: i8 r0 ]	[exit: r0 i8 $i1 ]
if i8 >= $i1 goto $r2 = new Kruskal.....	[entry: r0 i8 $i1 ]	[exit: r0 i8 ]
$r16 = r0[i8]...........................	[entry: r0 i8 ]	[exit: r0 i8 $r16 ]
r28 = virtualinvoke $r16.<java.util.HashSet: java.util.Iterator iterator()>()	[entry: r0 i8 $r16 ]	[exit: r0 i8 r28 ]
$z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()	[entry: r0 i8 r28 ]	[exit: r0 i8 r28 $z1 ]
if $z1 == 0 goto i8 = i8 + 1............	[entry: r0 i8 r28 $z1 ]	[exit: r0 i8 r28 ]
$r17 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()	[entry: r0 i8 r28 ]	[exit: r0 r28 i8 $r17 ]
r29 = (Kruskal$Edge) $r17...............	[entry: r0 r28 i8 $r17 ]	[exit: r0 r28 r29 i8 ]
$r19 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r28 r29 i8 ]	[exit: r0 r28 $r19 r29 i8 ]
$r18 = new java.lang.StringBuilder......	[entry: r0 r28 $r19 r29 i8 ]	[exit: r0 r28 $r19 r29 i8 $r18 ]
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()	[entry: r0 r28 $r19 r29 i8 $r18 ]	[exit: r0 r28 $r19 r29 i8 $r18 ]
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8)	[entry: r0 r28 $r19 r29 i8 $r18 ]	[exit: r0 i8 r28 $r19 r29 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <-- weight ")	[entry: r0 i8 r28 $r19 r29 $r20 ]	[exit: r0 i8 r28 $r19 $r21 r29 ]
$i5 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r29)	[entry: r0 i8 r28 $r19 $r21 r29 ]	[exit: r0 i8 r28 $r19 r29 $i5 $r21 ]
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: r0 i8 r28 $r19 r29 $i5 $r21 ]	[exit: r0 i8 r28 $r19 r29 $r22 ]
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ")	[entry: r0 i8 r28 $r19 r29 $r22 ]	[exit: r0 i8 r28 $r19 $r23 r29 ]
$i6 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r29)	[entry: r0 i8 r28 $r19 $r23 r29 ]	[exit: r0 i8 r28 $r19 $i6 $r23 ]
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6)	[entry: r0 i8 r28 $r19 $i6 $r23 ]	[exit: r0 i8 r28 $r19 $r24 ]
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i8 r28 $r19 $r24 ]	[exit: r0 i8 r28 $r25 $r19 ]
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r25)	[entry: r0 i8 r28 $r25 $r19 ]	[exit: r0 i8 r28 ]
goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]	[entry: r0 i8 r28 ]	[exit: r0 i8 r28 ]
i8 = i8 + 1.............................	[entry: r0 i8 ]	[exit: i8 r0 ]
goto [?= $i1 = lengthof r0].............	[entry: i8 r0 ]	[exit: i8 r0 ]
$r2 = new Kruskal.......................	[entry: r0 ]	[exit: r0 $r2 ]
specialinvoke $r2.<Kruskal: void <init>()>()	[entry: r0 $r2 ]	[exit: r0 $r2 ]
r30 = $r2...............................	[entry: r0 $r2 ]	[exit: r0 r30 ]
r31 = virtualinvoke r30.<Kruskal: java.util.HashSet[] kruskal(java.util.HashSet[])>(r0)	[entry: r0 r30 ]	[exit: r31 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r31 ]	[exit: r31 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("\nMinimal Graph: ")	[entry: r31 $r3 ]	[exit: r31 ]
i9 = 0..................................	[entry: r31 ]	[exit: i9 r31 ]
$i2 = lengthof r31......................	[entry: i9 r31 ]	[exit: r31 i9 $i2 ]
if i9 >= $i2 goto return................	[entry: r31 i9 $i2 ]	[exit: r31 i9 ]
$r4 = r31[i9]...........................	[entry: r31 i9 ]	[exit: r31 i9 $r4 ]
r5 = virtualinvoke $r4.<java.util.HashSet: java.util.Iterator iterator()>()	[entry: r31 i9 $r4 ]	[exit: r31 i9 r5 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()	[entry: r31 i9 r5 ]	[exit: r31 i9 r5 $z0 ]
if $z0 == 0 goto i9 = i9 + 1............	[entry: r31 i9 r5 $z0 ]	[exit: r31 i9 r5 ]
$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()	[entry: r31 i9 r5 ]	[exit: r31 r5 i9 $r6 ]
r7 = (Kruskal$Edge) $r6.................	[entry: r31 r5 i9 $r6 ]	[exit: r31 r5 r7 i9 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r31 r5 r7 i9 ]	[exit: r31 r5 $r9 r7 i9 ]
$r8 = new java.lang.StringBuilder.......	[entry: r31 r5 $r9 r7 i9 ]	[exit: r31 r5 $r9 r7 i9 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: r31 r5 $r9 r7 i9 $r8 ]	[exit: r31 r5 $r9 r7 i9 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)	[entry: r31 r5 $r9 r7 i9 $r8 ]	[exit: r31 i9 r5 $r9 r7 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <-- weight ")	[entry: r31 i9 r5 $r9 r7 $r10 ]	[exit: r31 i9 r5 $r9 $r11 r7 ]
$i3 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r7)	[entry: r31 i9 r5 $r9 $r11 r7 ]	[exit: r31 i9 r5 $r9 r7 $i3 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r31 i9 r5 $r9 r7 $i3 $r11 ]	[exit: r31 i9 r5 $r9 r7 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ")	[entry: r31 i9 r5 $r9 r7 $r12 ]	[exit: r31 i9 r5 $r9 $r13 r7 ]
$i4 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r7)	[entry: r31 i9 r5 $r9 $r13 r7 ]	[exit: r31 i9 r5 $r9 $i4 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)	[entry: r31 i9 r5 $r9 $i4 $r13 ]	[exit: r31 i9 r5 $r9 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r31 i9 r5 $r9 $r14 ]	[exit: r31 i9 r5 $r15 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r31 i9 r5 $r15 $r9 ]	[exit: r31 i9 r5 ]
goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]	[entry: r31 i9 r5 ]	[exit: r31 i9 r5 ]
i9 = i9 + 1.............................	[entry: r31 i9 ]	[exit: i9 r31 ]
goto [?= $i2 = lengthof r31]............	[entry: i9 r31 ]	[exit: i9 r31 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Kruskal, Method Name: kruskal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r24 := @this: Kruskal...................	[entry: ]	[exit: ]
r0 := @parameter0: java.util.HashSet[]..	[entry: ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: r0 i0 ]
r1 = newarray (int)[i0].................	[entry: r0 i0 ]	[exit: r1 r0 i0 ]
r2 = newarray (java.util.HashSet)[i0]...	[entry: r1 r0 i0 ]	[exit: r2 r1 r0 i0 ]
r3 = newarray (java.util.HashSet)[i0]...	[entry: r2 r1 r0 i0 ]	[exit: r3 r2 r1 r0 i0 ]
$r4 = new java.util.PriorityQueue.......	[entry: r3 r2 r1 r0 i0 ]	[exit: r3 r2 r1 r0 i0 $r4 ]
$r5 = staticinvoke <Kruskal$lambda_kruskal_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r3 r2 r1 r0 i0 $r4 ]	[exit: r3 r2 r1 r0 i0 $r4 $r5 ]
$r6 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r5)	[entry: r3 r2 r1 r0 i0 $r4 $r5 ]	[exit: r3 r2 r1 r0 i0 $r6 $r4 ]
specialinvoke $r4.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r6)	[entry: r3 r2 r1 r0 i0 $r6 $r4 ]	[exit: r3 r2 r1 r0 i0 $r4 ]
r7 = $r4................................	[entry: r3 r2 r1 r0 i0 $r4 ]	[exit: r3 r2 r1 r7 r0 i0 ]
i18 = 0.................................	[entry: r3 r2 r1 r7 r0 i0 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
if i18 >= i0 goto i19 = 0...............	[entry: r3 r2 r1 r7 r0 i18 i0 ]	[exit: r3 r2 r1 r7 i0 r0 i18 ]
$r19 = new java.util.HashSet............	[entry: i0 r7 r0 r1 r2 r3 i18 ]	[exit: i0 r7 r0 r1 r2 r3 i18 $r19 ]
specialinvoke $r19.<java.util.HashSet: void <init>()>()	[entry: i0 r7 r0 r1 r2 r3 i18 $r19 ]	[exit: i0 r7 r0 r1 r2 r3 i18 $r19 ]
r3[i18] = $r19..........................	[entry: i0 r7 r0 r1 r2 r3 i18 $r19 ]	[exit: r3 i0 r7 r0 r1 r2 i18 ]
$r20 = new java.util.HashSet............	[entry: r3 i0 r7 r0 r1 r2 i18 ]	[exit: r3 i0 r7 r0 r1 r2 i18 $r20 ]
specialinvoke $r20.<java.util.HashSet: void <init>()>()	[entry: r3 i0 r7 r0 r1 r2 i18 $r20 ]	[exit: r3 i0 r7 r0 r1 r2 i18 $r20 ]
r2[i18] = $r20..........................	[entry: r3 i0 r7 r0 r1 r2 i18 $r20 ]	[exit: r3 i0 r7 r0 r1 r2 i18 ]
$r21 = r2[i18]..........................	[entry: r3 i0 r7 r0 r1 r2 i18 ]	[exit: r3 r2 i0 r7 r0 r1 $r21 i18 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18)	[entry: r3 r2 i0 r7 r0 r1 $r21 i18 ]	[exit: r3 r2 i0 r7 r0 r1 i18 $r22 $r21 ]
virtualinvoke $r21.<java.util.HashSet: boolean add(java.lang.Object)>($r22)	[entry: r3 r2 i0 r7 r0 r1 i18 $r22 $r21 ]	[exit: r3 r2 i0 r7 r0 r1 i18 ]
r1[i18] = i18...........................	[entry: r3 r2 i0 r7 r0 r1 i18 ]	[exit: r3 r2 r1 i0 r7 r0 i18 ]
$r23 = r0[i18]..........................	[entry: r3 r2 r1 i0 r7 r0 i18 ]	[exit: r3 r2 r1 r0 i0 i18 $r23 r7 ]
virtualinvoke r7.<java.util.PriorityQueue: boolean addAll(java.util.Collection)>($r23)	[entry: r3 r2 r1 r0 i0 i18 $r23 r7 ]	[exit: r3 r2 r1 r7 r0 i0 i18 ]
i18 = i18 + 1...........................	[entry: r3 r2 r1 r7 r0 i0 i18 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 r1 r7 r0 i18 i0 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
i19 = 0.................................	[entry: r3 r2 r1 r7 i0 ]	[exit: r3 r2 r1 r7 i19 i0 ]
if i19 == i0 goto return r3.............	[entry: r3 r2 r1 r7 i19 i0 ]	[exit: r3 i19 i0 r2 r1 r7 ]
$z0 = virtualinvoke r7.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r3 i19 i0 r2 r1 r7 ]	[exit: r3 i19 i0 r2 r1 r7 $z0 ]
if $z0 != 0 goto return r3..............	[entry: r3 i19 i0 r2 r1 r7 $z0 ]	[exit: r3 i19 i0 r2 r1 r7 ]
$r8 = virtualinvoke r7.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: r3 i19 i0 r2 r1 r7 ]	[exit: r3 r7 i19 i0 r2 r1 $r8 ]
r9 = (Kruskal$Edge) $r8.................	[entry: r3 r7 i19 i0 r2 r1 $r8 ]	[exit: r3 r7 i19 i0 r2 r1 r9 ]
$i1 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r7 i19 i0 r2 r1 r9 ]	[exit: r3 r7 i19 i0 r9 r2 r1 $i1 ]
$i2 = r1[$i1]...........................	[entry: r3 r7 i19 i0 r9 r2 r1 $i1 ]	[exit: r3 r1 r7 i19 i0 r9 r2 $i2 ]
$r10 = r2[$i2]..........................	[entry: r3 r1 r7 i19 i0 r9 r2 $i2 ]	[exit: r3 r2 r1 r7 i19 i0 $r10 r9 ]
$i3 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r3 r2 r1 r7 i19 i0 $r10 r9 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r10 $i3 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)	[entry: r3 r2 r1 r7 i19 i0 r9 $r10 $i3 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r11 $r10 ]
$z1 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>($r11)	[entry: r3 r2 r1 r7 i19 i0 r9 $r11 $r10 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r3 r2 r1 r7 i19 i0 r9 $z1 ]	[exit: r3 r2 r1 r7 i19 i0 r9 ]
$i4 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r3 r7 i19 i0 r2 r1 r9 ]	[exit: r3 r7 i19 i0 r9 r2 r1 $i4 ]
$i5 = r1[$i4]...........................	[entry: r3 r7 i19 i0 r9 r2 r1 $i4 ]	[exit: r3 r1 r7 i19 i0 r9 r2 $i5 ]
$r12 = r2[$i5]..........................	[entry: r3 r1 r7 i19 i0 r9 r2 $i5 ]	[exit: r3 r2 r1 r7 i19 i0 $r12 r9 ]
$i6 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r2 r1 r7 i19 i0 $r12 r9 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r12 $i6 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: r3 r2 r1 r7 i19 i0 r9 $r12 $i6 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r13 $r12 ]
$z2 = virtualinvoke $r12.<java.util.HashSet: boolean contains(java.lang.Object)>($r13)	[entry: r3 r2 r1 r7 i19 i0 r9 $r13 $r12 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $z2 ]
if $z2 != 0 goto (branch)...............	[entry: r3 r2 r1 r7 i19 i0 r9 $z2 ]	[exit: r3 r2 r1 r7 i19 i0 r9 ]
$i7 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 r2 r1 r9 ]	[exit: r7 i0 r3 r9 r2 r1 $i7 ]
$i8 = r1[$i7]...........................	[entry: r7 i0 r3 r9 r2 r1 $i7 ]	[exit: r7 i0 r3 r1 r9 r2 $i8 ]
$r14 = r2[$i8]..........................	[entry: r7 i0 r3 r1 r9 r2 $i8 ]	[exit: r7 i0 r3 $r14 r2 r1 r9 ]
$i9 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 $r14 r2 r1 r9 ]	[exit: r7 i0 r3 r9 $r14 r2 r1 $i9 ]
$i10 = r1[$i9]..........................	[entry: r7 i0 r3 r9 $r14 r2 r1 $i9 ]	[exit: r7 i0 r3 r1 r9 $r14 r2 $i10 ]
$r15 = r2[$i10].........................	[entry: r7 i0 r3 r1 r9 $r14 r2 $i10 ]	[exit: r7 i0 r3 r2 r1 r9 $r15 $r14 ]
virtualinvoke $r14.<java.util.HashSet: boolean addAll(java.util.Collection)>($r15)	[entry: r7 i0 r3 r2 r1 r9 $r15 $r14 ]	[exit: r7 i0 r3 r2 r1 r9 ]
$i11 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 r2 r1 r9 ]	[exit: r7 i0 r3 r9 r2 r1 $i11 ]
$i12 = r1[$i11].........................	[entry: r7 i0 r3 r9 r2 r1 $i11 ]	[exit: r7 i0 r3 r1 r9 r2 $i12 ]
$r16 = r2[$i12].........................	[entry: r7 i0 r3 r1 r9 r2 $i12 ]	[exit: r7 i0 r2 r3 $r16 r1 r9 ]
$r17 = staticinvoke <Kruskal$lambda_kruskal_1__2: java.util.function.Consumer bootstrap$(int[],Kruskal$Edge)>(r1, r9)	[entry: r7 i0 r2 r3 $r16 r1 r9 ]	[exit: r7 i0 r2 r1 r3 r9 $r17 $r16 ]
virtualinvoke $r16.<java.util.HashSet: void forEach(java.util.function.Consumer)>($r17)	[entry: r7 i0 r2 r1 r3 r9 $r17 $r16 ]	[exit: r7 i0 r2 r1 r3 r9 ]
$i13 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 r9 ]	[exit: r7 i0 r2 r1 r3 $i13 r9 ]
$i14 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 $i13 r9 ]	[exit: r7 i0 r2 r1 r3 $i13 $i14 r9 ]
$i15 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 $i13 $i14 r9 ]	[exit: r7 i0 r2 r1 r9 r3 $i13 $i14 $i15 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r3, $i13, $i14, $i15)	[entry: r7 i0 r2 r1 r9 r3 $i13 $i14 $i15 ]	[exit: r3 r7 i0 r2 r1 r9 ]
$i16 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r7 i0 r2 r1 r9 ]	[exit: r3 r7 i0 r2 r1 $i16 ]
$i17 = r1[$i16].........................	[entry: r3 r7 i0 r2 r1 $i16 ]	[exit: r3 r1 r7 i0 r2 $i17 ]
$r18 = r2[$i17].........................	[entry: r3 r1 r7 i0 r2 $i17 ]	[exit: r3 r2 r1 r7 i0 $r18 ]
i19 = virtualinvoke $r18.<java.util.HashSet: int size()>()	[entry: r3 r2 r1 r7 i0 $r18 ]	[exit: r3 r2 r1 r7 i19 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 r1 r7 i19 i0 ]	[exit: r3 r2 r1 r7 i19 i0 ]
return r3...............................	[entry: r3 ]	[exit: ]
********************
Class Name: DynamicProgramming.EditDistance, Method Name: minDistance, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 := @parameter1: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r1 r0 ]	[exit: r0 i0 r1 ]
i1 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r0 i0 r1 ]	[exit: r1 r0 i1 i0 ]
$i3 = i0 + 1............................	[entry: r1 r0 i1 i0 ]	[exit: r1 r0 i0 $i3 i1 ]
$i2 = i1 + 1............................	[entry: r1 r0 i0 $i3 i1 ]	[exit: r1 r0 i1 i0 $i3 $i2 ]
r2 = newmultiarray (int)[$i3][$i2]......	[entry: r1 r0 i1 i0 $i3 $i2 ]	[exit: r2 r1 r0 i1 i0 ]
i20 = 0.................................	[entry: r2 r1 r0 i1 i0 ]	[exit: r2 r1 r0 i1 i20 i0 ]
if i20 > i0 goto i21 = 0................	[entry: r2 r1 r0 i1 i20 i0 ]	[exit: r2 r1 r0 i0 i1 i20 ]
$r11 = r2[i20]..........................	[entry: r1 r0 i1 i0 r2 i20 ]	[exit: r2 r1 r0 i1 i0 $r11 i20 ]
$r11[0] = i20...........................	[entry: r2 r1 r0 i1 i0 $r11 i20 ]	[exit: r2 r1 r0 i1 i0 i20 ]
i20 = i20 + 1...........................	[entry: r2 r1 r0 i1 i0 i20 ]	[exit: r2 r1 r0 i1 i20 i0 ]
goto [?= (branch)]......................	[entry: r2 r1 r0 i1 i20 i0 ]	[exit: r2 r1 r0 i1 i20 i0 ]
i21 = 0.................................	[entry: r2 r1 r0 i0 i1 ]	[exit: r2 r1 r0 i0 i21 i1 ]
if i21 > i1 goto i22 = 0................	[entry: r2 r1 r0 i0 i21 i1 ]	[exit: i1 r2 r1 r0 i0 i21 ]
$r10 = r2[0]............................	[entry: r1 r0 i0 i1 i21 r2 ]	[exit: r2 r1 r0 i0 i1 $r10 i21 ]
$r10[i21] = i21.........................	[entry: r2 r1 r0 i0 i1 $r10 i21 ]	[exit: r2 r1 r0 i0 i1 i21 ]
i21 = i21 + 1...........................	[entry: r2 r1 r0 i0 i1 i21 ]	[exit: r2 r1 r0 i0 i21 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 r0 i0 i21 i1 ]	[exit: r2 r1 r0 i0 i21 i1 ]
i22 = 0.................................	[entry: i1 r2 r1 r0 i0 ]	[exit: i1 r2 r1 r0 i22 i0 ]
if i22 >= i0 goto $r3 = r2[i0]..........	[entry: i1 r2 r1 r0 i22 i0 ]	[exit: i1 r2 i0 r1 i22 r0 ]
c5 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i22)	[entry: r2 i0 r1 i1 i22 r0 ]	[exit: r2 r1 r0 i0 i22 c5 i1 ]
i23 = 0.................................	[entry: r2 r1 r0 i0 i22 c5 i1 ]	[exit: r2 r1 r0 i0 i22 c5 i23 i1 ]
if i23 >= i1 goto i22 = i22 + 1.........	[entry: r2 r1 r0 i0 i22 c5 i23 i1 ]	[exit: i1 r2 r1 r0 i0 i22 c5 i23 ]
c6 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i23)	[entry: r0 i0 i1 r2 i22 c5 i23 r1 ]	[exit: r1 r0 i0 i1 i23 r2 i22 c5 c6 ]
if c5 != c6 goto $r4 = r2[i22]..........	[entry: r1 r0 i0 i1 i23 r2 i22 c5 c6 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 ]
$i17 = i22 + 1..........................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 ]	[exit: r1 r0 i0 c5 i1 i22 i23 r2 $i17 ]
$r9 = r2[$i17]..........................	[entry: r1 r0 i0 c5 i1 i22 i23 r2 $i17 ]	[exit: r1 r0 i0 c5 i1 $r9 r2 i22 i23 ]
$i19 = i23 + 1..........................	[entry: r1 r0 i0 c5 i1 $r9 r2 i22 i23 ]	[exit: r1 r0 i0 c5 i1 $r9 $i19 i23 r2 i22 ]
$r8 = r2[i22]...........................	[entry: r1 r0 i0 c5 i1 $r9 $i19 i23 r2 i22 ]	[exit: r2 r1 r0 i0 i22 c5 i1 $r9 $i19 $r8 i23 ]
$i18 = $r8[i23].........................	[entry: r2 r1 r0 i0 i22 c5 i1 $r9 $i19 $r8 i23 ]	[exit: r2 r1 r0 i0 i22 c5 i1 i23 $r9 $i19 $i18 ]
$r9[$i19] = $i18........................	[entry: r2 r1 r0 i0 i22 c5 i1 i23 $r9 $i19 $i18 ]	[exit: r2 r1 r0 i0 i22 c5 i1 i23 ]
goto [?= i23 = i23 + 1].................	[entry: r2 r1 r0 i0 i22 c5 i1 i23 ]	[exit: r2 r1 r0 i0 i22 c5 i1 i23 ]
$r4 = r2[i22]...........................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 ]	[exit: r1 r0 i0 c5 i1 r2 i22 $r4 i23 ]
$i7 = $r4[i23]..........................	[entry: r1 r0 i0 c5 i1 r2 i22 $r4 i23 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 $i7 ]
i8 = $i7 + 1............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 $i7 ]	[exit: r1 r0 i0 c5 i1 i8 i23 r2 i22 ]
$r5 = r2[i22]...........................	[entry: r1 r0 i0 c5 i1 i8 i23 r2 i22 ]	[exit: r1 r0 i0 c5 i1 i8 r2 i22 $r5 i23 ]
$i9 = i23 + 1...........................	[entry: r1 r0 i0 c5 i1 i8 r2 i22 $r5 i23 ]	[exit: r1 r0 i0 c5 i1 i8 i23 r2 i22 $r5 $i9 ]
$i10 = $r5[$i9].........................	[entry: r1 r0 i0 c5 i1 i8 i23 r2 i22 $r5 $i9 ]	[exit: r1 r0 i0 c5 i1 i8 i23 r2 i22 $i10 ]
i11 = $i10 + 1..........................	[entry: r1 r0 i0 c5 i1 i8 i23 r2 i22 $i10 ]	[exit: r1 r0 i0 c5 i1 i8 i11 i23 r2 i22 ]
$i12 = i22 + 1..........................	[entry: r1 r0 i0 c5 i1 i8 i11 i23 r2 i22 ]	[exit: r1 r0 i0 c5 i1 i22 i8 i11 i23 r2 $i12 ]
$r6 = r2[$i12]..........................	[entry: r1 r0 i0 c5 i1 i22 i8 i11 i23 r2 $i12 ]	[exit: r1 r0 i0 c5 i1 r2 i22 i8 i11 $r6 i23 ]
$i13 = $r6[i23].........................	[entry: r1 r0 i0 c5 i1 r2 i22 i8 i11 $r6 i23 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i8 i11 $i13 ]
i14 = $i13 + 1..........................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i8 i11 $i13 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 i8 i11 ]
if i8 <= i11 goto $i24 = i8.............	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 i8 i11 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 i11 i8 ]
$i24 = i11..............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 i11 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 $i24 ]
goto [?= i25 = $i24]....................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 $i24 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 $i24 ]
$i24 = i8...............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 i8 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 $i24 ]
i25 = $i24..............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 $i24 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i14 i25 ]
if i14 <= i25 goto $i26 = i14...........	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 i25 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 i25 i14 ]
$i26 = i25..............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i25 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 $i26 ]
goto [?= i27 = $i26]....................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 $i26 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 $i26 ]
$i26 = i14..............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 i14 ]	[exit: r1 r0 i0 c5 i1 i23 r2 i22 $i26 ]
i27 = $i26..............................	[entry: r1 r0 i0 c5 i1 i23 r2 i22 $i26 ]	[exit: r1 r0 i0 c5 i1 i27 i23 r2 i22 ]
$i15 = i22 + 1..........................	[entry: r1 r0 i0 c5 i1 i27 i23 r2 i22 ]	[exit: r1 r0 i0 i22 c5 i1 i27 i23 r2 $i15 ]
$r7 = r2[$i15]..........................	[entry: r1 r0 i0 i22 c5 i1 i27 i23 r2 $i15 ]	[exit: r2 r1 r0 i0 i22 c5 i1 $r7 i27 i23 ]
$i16 = i23 + 1..........................	[entry: r2 r1 r0 i0 i22 c5 i1 $r7 i27 i23 ]	[exit: r2 r1 r0 i0 i22 c5 i1 i23 $r7 $i16 i27 ]
$r7[$i16] = i27.........................	[entry: r2 r1 r0 i0 i22 c5 i1 i23 $r7 $i16 i27 ]	[exit: r2 r1 r0 i0 i22 c5 i1 i23 ]
i23 = i23 + 1...........................	[entry: r2 r1 r0 i0 i22 c5 i1 i23 ]	[exit: r2 r1 r0 i0 i22 c5 i23 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 r0 i0 i22 c5 i23 i1 ]	[exit: r2 r1 r0 i0 i22 c5 i23 i1 ]
i22 = i22 + 1...........................	[entry: i1 r2 r1 r0 i0 i22 ]	[exit: i1 r2 r1 r0 i22 i0 ]
goto [?= (branch)]......................	[entry: i1 r2 r1 r0 i22 i0 ]	[exit: i1 r2 r1 r0 i22 i0 ]
$r3 = r2[i0]............................	[entry: i1 r2 i0 ]	[exit: $r3 i1 ]
$i4 = $r3[i1]...........................	[entry: $r3 i1 ]	[exit: $i4 ]
return $i4..............................	[entry: $i4 ]	[exit: ]
********************
Class Name: DynamicProgramming.EditDistance, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter the First String")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r4 r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r2 ]	[exit: r4 r2 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Enter the Second String")	[entry: r4 r2 $r5 ]	[exit: r4 r2 ]
r6 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r4 r2 ]	[exit: r2 r4 r6 ]
i0 = staticinvoke <DynamicProgramming.EditDistance: int minDistance(java.lang.String,java.lang.String)>(r4, r6)	[entry: r2 r4 r6 ]	[exit: r2 i0 r6 r4 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 r6 r4 ]	[exit: r2 $r8 i0 r6 r4 ]
$r7 = new java.lang.StringBuilder.......	[entry: r2 $r8 i0 r6 r4 ]	[exit: r2 $r8 i0 r6 r4 $r7 ]
specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r8 i0 r6 r4 $r7 ]	[exit: r2 $r8 i0 r6 r4 $r7 ]
$r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The minimum Edit Distance between \"")	[entry: r2 $r8 i0 r6 r4 $r7 ]	[exit: r2 $r8 i0 r6 r4 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: r2 $r8 i0 r6 r4 $r9 ]	[exit: r2 $r8 i0 r6 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" and \"")	[entry: r2 $r8 i0 r6 $r10 ]	[exit: r2 $r8 i0 r6 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6)	[entry: r2 $r8 i0 r6 $r11 ]	[exit: r2 $r8 i0 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" is ")	[entry: r2 $r8 i0 $r12 ]	[exit: r2 $r8 i0 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r8 i0 $r13 ]	[exit: r2 $r8 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r8 $r14 ]	[exit: r2 $r15 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r2 $r15 $r8 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestIncreasingSubsequence, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
r3 = newarray (int)[i0].................	[entry: r2 i0 ]	[exit: r2 r3 i0 ]
i3 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i3 i0 ]
if i3 >= i0 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 i3 i0 ]	[exit: r2 r3 i0 i3 ]
$i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r3 i3 r2 ]	[exit: r2 i0 r3 i3 $i2 ]
r3[i3] = $i2............................	[entry: r2 i0 r3 i3 $i2 ]	[exit: r2 r3 i0 i3 ]
i3 = i3 + 1.............................	[entry: r2 r3 i0 i3 ]	[exit: r2 r3 i3 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i3 i0 ]	[exit: r2 r3 i3 i0 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 ]	[exit: r2 $r4 r3 ]
$i1 = staticinvoke <DynamicProgramming.LongestIncreasingSubsequence: int LIS(int[])>(r3)	[entry: r2 $r4 r3 ]	[exit: r2 $i1 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i1)	[entry: r2 $i1 $r4 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.KadaneAlgorithm, Method Name: largestContiguousSum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: r0 i0 ]
i2 = 0..................................	[entry: r0 i0 ]	[exit: i2 r0 i0 ]
i3 = -2147483648........................	[entry: i2 r0 i0 ]	[exit: i3 i2 r0 i0 ]
if i0 != 0 goto i4 = 0..................	[entry: i3 i2 r0 i0 ]	[exit: i3 i2 r0 i0 ]
return 0................................	[entry: ]	[exit: ]
i4 = 0..................................	[entry: i3 i2 r0 i0 ]	[exit: i3 i2 r0 i4 i0 ]
if i4 >= i0 goto return i3..............	[entry: i3 i2 r0 i4 i0 ]	[exit: i3 i0 i2 r0 i4 ]
$i1 = r0[i4]............................	[entry: i0 i3 i2 r0 i4 ]	[exit: r0 i0 i4 i3 i2 $i1 ]
i2 = i2 + $i1...........................	[entry: r0 i0 i4 i3 i2 $i1 ]	[exit: r0 i0 i4 i2 i3 ]
if i2 <= i3 goto (branch)...............	[entry: r0 i0 i4 i2 i3 ]	[exit: i3 r0 i0 i4 i2 ]
i3 = i2.................................	[entry: r0 i0 i4 i2 ]	[exit: i3 r0 i0 i4 i2 ]
if i2 > 0 goto i4 = i4 + 1..............	[entry: i3 r0 i0 i4 i2 ]	[exit: i3 i2 r0 i0 i4 ]
i2 = 0..................................	[entry: i3 r0 i0 i4 ]	[exit: i3 i2 r0 i0 i4 ]
i4 = i4 + 1.............................	[entry: i3 i2 r0 i0 i4 ]	[exit: i3 i2 r0 i4 i0 ]
goto [?= (branch)]......................	[entry: i3 i2 r0 i4 i0 ]	[exit: i3 i2 r0 i4 i0 ]
return i3...............................	[entry: i3 ]	[exit: ]
********************
Class Name: DynamicProgramming.KadaneAlgorithm, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
r3 = newarray (int)[i0].................	[entry: r2 i0 ]	[exit: r2 r3 i0 ]
i3 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i3 i0 ]
if i3 >= i0 goto i1 = staticinvoke <DynamicProgramming.KadaneAlgorithm: int largestContiguousSum(int[])>(r3)	[entry: r2 r3 i3 i0 ]	[exit: r2 r3 i0 i3 ]
$i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r3 i3 r2 ]	[exit: r2 i0 r3 i3 $i2 ]
r3[i3] = $i2............................	[entry: r2 i0 r3 i3 $i2 ]	[exit: r2 r3 i0 i3 ]
i3 = i3 + 1.............................	[entry: r2 r3 i0 i3 ]	[exit: r2 r3 i3 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i3 i0 ]	[exit: r2 r3 i3 i0 ]
i1 = staticinvoke <DynamicProgramming.KadaneAlgorithm: int largestContiguousSum(int[])>(r3)	[entry: r2 r3 ]	[exit: r2 i1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i1 ]	[exit: r2 i1 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(int)>(i1)	[entry: r2 i1 $r4 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.LevenshteinDistance, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = "".................................	[entry: ]	[exit: r0 ]
r1 = "".................................	[entry: r0 ]	[exit: r1 r0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r0 ]	[exit: $r3 r1 r0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 r1 r0 ]	[exit: $r3 r1 r0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 r1 r0 $r2 ]	[exit: $r3 r1 r0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Levenshtein distance between ")	[entry: $r3 r1 r0 $r2 ]	[exit: $r3 r1 r0 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: $r3 r1 r0 $r4 ]	[exit: r0 $r3 r1 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ")	[entry: r0 $r3 r1 $r5 ]	[exit: r0 $r3 r1 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: r0 $r3 r1 $r6 ]	[exit: r0 r1 $r3 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ")	[entry: r0 r1 $r3 $r7 ]	[exit: r0 r1 $r3 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 r1 $r3 $r8 ]	[exit: r0 r1 $r9 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r9)	[entry: r0 r1 $r9 $r3 ]	[exit: r0 r1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r1 ]	[exit: $r10 r0 r1 ]
$i0 = staticinvoke <DynamicProgramming.LevenshteinDistance: int calculate_distance(java.lang.String,java.lang.String)>(r0, r1)	[entry: $r10 r0 r1 ]	[exit: $i0 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(int)>($i0)	[entry: $i0 $r10 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestValidParentheses, Method Name: getLongestValidParentheses, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto return 0.............	[entry: r0 ]	[exit: r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 >= 2 goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 $i0 ]	[exit: r0 ]
return 0................................	[entry: ]	[exit: ]
r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 ]	[exit: r1 ]
i1 = lengthof r1........................	[entry: r1 ]	[exit: r1 i1 ]
r2 = newarray (int)[i1].................	[entry: r1 i1 ]	[exit: i1 r1 r2 ]
r2[0] = 0...............................	[entry: i1 r1 r2 ]	[exit: i1 r2 r1 ]
$c2 = r1[1].............................	[entry: i1 r2 r1 ]	[exit: i1 r2 r1 $c2 ]
if $c2 != 41 goto $b23 = 0..............	[entry: i1 r2 r1 $c2 ]	[exit: i1 r2 r1 ]
$c21 = r1[0]............................	[entry: i1 r2 r1 ]	[exit: r1 i1 r2 $c21 ]
if $c21 != 40 goto $b23 = 0.............	[entry: r1 i1 r2 $c21 ]	[exit: r1 i1 r2 ]
$b23 = 2................................	[entry: r1 i1 r2 ]	[exit: r1 i1 r2 $b23 ]
goto [?= r2[1] = $b23]..................	[entry: r1 i1 r2 $b23 ]	[exit: r1 i1 r2 $b23 ]
$b23 = 0................................	[entry: r1 i1 r2 ]	[exit: r1 i1 r2 $b23 ]
r2[1] = $b23............................	[entry: r1 i1 r2 $b23 ]	[exit: r1 i1 r2 ]
i24 = r2[1].............................	[entry: r1 i1 r2 ]	[exit: i24 r2 r1 i1 ]
i25 = 2.................................	[entry: i24 r2 r1 i1 ]	[exit: i24 r2 r1 i25 i1 ]
if i25 >= i1 goto return i24............	[entry: i24 r2 r1 i25 i1 ]	[exit: i24 i1 r2 r1 i25 ]
$c3 = r1[i25]...........................	[entry: i1 i24 r2 r1 i25 ]	[exit: i1 i24 r2 i25 r1 $c3 ]
if $c3 != 41 goto $i27 = r2[i25]........	[entry: i1 i24 r2 i25 r1 $c3 ]	[exit: r1 i1 i24 r2 i25 ]
$i4 = i25 - 1...........................	[entry: i1 i24 r2 r1 i25 ]	[exit: i1 i24 r2 i25 r1 $i4 ]
$c5 = r1[$i4]...........................	[entry: i1 i24 r2 i25 r1 $i4 ]	[exit: i1 i24 r2 i25 r1 $c5 ]
if $c5 != 40 goto $i6 = i25 - 1.........	[entry: i1 i24 r2 i25 r1 $c5 ]	[exit: r1 i1 i24 r2 i25 ]
$i18 = i25 - 2..........................	[entry: r1 i1 i24 r2 i25 ]	[exit: r1 i1 i24 i25 r2 $i18 ]
$i19 = r2[$i18].........................	[entry: r1 i1 i24 i25 r2 $i18 ]	[exit: r1 i1 i24 r2 i25 $i19 ]
$i20 = $i19 + 2.........................	[entry: r1 i1 i24 r2 i25 $i19 ]	[exit: r1 i1 i24 r2 i25 $i20 ]
r2[i25] = $i20..........................	[entry: r1 i1 i24 r2 i25 $i20 ]	[exit: r1 i1 i24 r2 i25 ]
goto [?= $i27 = r2[i25]]................	[entry: r1 i1 i24 r2 i25 ]	[exit: r1 i1 i24 r2 i25 ]
$i6 = i25 - 1...........................	[entry: i1 i24 r1 r2 i25 ]	[exit: i1 i24 r1 i25 r2 $i6 ]
$i7 = r2[$i6]...........................	[entry: i1 i24 r1 i25 r2 $i6 ]	[exit: i1 i24 r2 r1 i25 $i7 ]
$i8 = i25 - $i7.........................	[entry: i1 i24 r2 r1 i25 $i7 ]	[exit: i1 i24 r2 i25 r1 $i8 ]
i9 = $i8 - 1............................	[entry: i1 i24 r2 i25 r1 $i8 ]	[exit: i1 i24 r2 i25 r1 i9 ]
if i9 < 0 goto $i27 = r2[i25]...........	[entry: i1 i24 r2 i25 r1 i9 ]	[exit: r1 i1 i24 r2 i25 i9 ]
$c10 = r1[i9]...........................	[entry: i1 i24 r2 i25 r1 i9 ]	[exit: r1 i1 i24 r2 i25 i9 $c10 ]
if $c10 != 40 goto $i27 = r2[i25].......	[entry: r1 i1 i24 r2 i25 i9 $c10 ]	[exit: r1 i1 i24 r2 i25 i9 ]
$i17 = i25..............................	[entry: r1 i1 i24 i9 r2 i25 ]	[exit: r1 i1 i24 $i17 i9 r2 i25 ]
$i11 = i25 - 1..........................	[entry: r1 i1 i24 $i17 i9 r2 i25 ]	[exit: r1 i1 i24 i25 $i17 i9 r2 $i11 ]
$i12 = r2[$i11].........................	[entry: r1 i1 i24 i25 $i17 i9 r2 $i11 ]	[exit: r1 i1 i24 i25 $i17 r2 i9 $i12 ]
$i14 = $i12 + 2.........................	[entry: r1 i1 i24 i25 $i17 r2 i9 $i12 ]	[exit: r1 i1 i24 i25 $i17 $i14 r2 i9 ]
$i13 = i9 - 1...........................	[entry: r1 i1 i24 i25 $i17 $i14 r2 i9 ]	[exit: r1 i1 i24 i25 $i17 $i14 r2 i9 $i13 ]
if $i13 < 0 goto $i26 = 0...............	[entry: r1 i1 i24 i25 $i17 $i14 r2 i9 $i13 ]	[exit: r1 i1 i24 i25 $i17 $i14 r2 i9 ]
$i16 = i9 - 1...........................	[entry: r1 i1 i24 i25 $i17 $i14 r2 i9 ]	[exit: r1 i1 i24 i25 $i17 $i14 r2 $i16 ]
$i26 = r2[$i16].........................	[entry: r1 i1 i24 i25 $i17 $i14 r2 $i16 ]	[exit: r1 i1 i24 i25 r2 $i17 $i14 $i26 ]
goto [?= $i15 = $i14 + $i26]............	[entry: r1 i1 i24 i25 r2 $i17 $i14 $i26 ]	[exit: r1 i1 i24 i25 r2 $i17 $i14 $i26 ]
$i26 = 0................................	[entry: r1 i1 i24 i25 r2 $i17 $i14 ]	[exit: r1 i1 i24 i25 r2 $i17 $i14 $i26 ]
$i15 = $i14 + $i26......................	[entry: r1 i1 i24 i25 r2 $i17 $i14 $i26 ]	[exit: r1 i1 i24 i25 r2 $i17 $i15 ]
r2[$i17] = $i15.........................	[entry: r1 i1 i24 i25 r2 $i17 $i15 ]	[exit: r1 i1 i24 r2 i25 ]
$i27 = r2[i25]..........................	[entry: r1 i1 i24 r2 i25 ]	[exit: r2 r1 i1 i25 i24 $i27 ]
i24 = staticinvoke <java.lang.Math: int max(int,int)>(i24, $i27)	[entry: r2 r1 i1 i25 i24 $i27 ]	[exit: i24 r2 r1 i1 i25 ]
i25 = i25 + 1...........................	[entry: i24 r2 r1 i1 i25 ]	[exit: i24 r2 r1 i25 i1 ]
goto [?= (branch)]......................	[entry: i24 r2 r1 i25 i1 ]	[exit: i24 r2 r1 i25 i1 ]
return i24..............................	[entry: i24 ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestValidParentheses, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
r3 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r3 ]
$r4 = "quit"............................	[entry: r2 r3 ]	[exit: r2 r3 $r4 ]
$z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3)	[entry: r2 r3 $r4 ]	[exit: r2 r3 $z0 ]
if $z0 == 0 goto i0 = staticinvoke <DynamicProgramming.LongestValidParentheses: int getLongestValidParentheses(java.lang.String)>(r3)	[entry: r2 r3 $z0 ]	[exit: r2 r3 ]
goto [?= virtualinvoke r2.<java.util.Scanner: void close()>()]	[entry: r2 ]	[exit: r2 ]
i0 = staticinvoke <DynamicProgramming.LongestValidParentheses: int getLongestValidParentheses(java.lang.String)>(r3)	[entry: r2 r3 ]	[exit: r2 i0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 i0 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(int)>(i0)	[entry: r2 i0 $r5 ]	[exit: r2 ]
goto [?= r3 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()]	[entry: r2 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.RodCutting, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[5].................	[entry: ]	[exit: $r0 ]
$r0[0] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 5..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 13.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 19.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 20.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i0 = lengthof r1........................	[entry: r1 ]	[exit: r1 i0 ]
i1 = staticinvoke <DynamicProgramming.RodCutting: int cutRod(int[],int)>(r1, i0)	[entry: r1 i0 ]	[exit: i1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i1 ]	[exit: $r3 i1 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 i1 ]	[exit: $r3 i1 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 i1 $r2 ]	[exit: $r3 i1 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Maximum Obtainable Value is ")	[entry: $r3 i1 $r2 ]	[exit: $r3 i1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: $r3 i1 $r4 ]	[exit: $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 $r5 ]	[exit: $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6)	[entry: $r6 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.Knapsack, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[3].................	[entry: ]	[exit: $r0 ]
$r0[0] = 50.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 100............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 130............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = newarray (int)[3].................	[entry: r1 ]	[exit: r1 $r2 ]
$r2[0] = 10.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[1] = 20.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[2] = 40.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r3 r1 ]
b0 = 50.................................	[entry: r3 r1 ]	[exit: b0 r3 r1 ]
i1 = lengthof r1........................	[entry: b0 r3 r1 ]	[exit: b0 r3 r1 i1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: b0 r3 r1 i1 ]	[exit: $r4 b0 r3 r1 i1 ]
$i2 = staticinvoke <DynamicProgramming.Knapsack: int knapSack(int,int[],int[],int)>(b0, r3, r1, i1)	[entry: $r4 b0 r3 r1 i1 ]	[exit: $i2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)	[entry: $i2 $r4 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.MinimumSumPartition, Method Name: subSet, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: i0 r0 ]
i1 = staticinvoke <DynamicProgramming.MinimumSumPartition: int getSum(int[])>(r0)	[entry: i0 r0 ]	[exit: r0 i1 i0 ]
$i3 = i0 + 1............................	[entry: r0 i1 i0 ]	[exit: r0 i0 $i3 i1 ]
$i2 = i1 + 1............................	[entry: r0 i0 $i3 i1 ]	[exit: r0 i1 i0 $i3 $i2 ]
r1 = newmultiarray (boolean)[$i3][$i2]..	[entry: r0 i1 i0 $i3 $i2 ]	[exit: r1 r0 i1 i0 ]
i18 = 0.................................	[entry: r1 r0 i1 i0 ]	[exit: r1 r0 i1 i18 i0 ]
if i18 > i0 goto i19 = 0................	[entry: r1 r0 i1 i18 i0 ]	[exit: r1 r0 i0 i1 i18 ]
$r10 = r1[i18]..........................	[entry: r0 i1 i0 r1 i18 ]	[exit: r1 r0 i1 i0 i18 $r10 ]
$r10[0] = 1.............................	[entry: r1 r0 i1 i0 i18 $r10 ]	[exit: r1 r0 i1 i0 i18 ]
i18 = i18 + 1...........................	[entry: r1 r0 i1 i0 i18 ]	[exit: r1 r0 i1 i18 i0 ]
goto [?= (branch)]......................	[entry: r1 r0 i1 i18 i0 ]	[exit: r1 r0 i1 i18 i0 ]
i19 = 0.................................	[entry: r1 r0 i0 i1 ]	[exit: r1 r0 i0 i19 i1 ]
if i19 > i1 goto i20 = 1................	[entry: r1 r0 i0 i19 i1 ]	[exit: r1 i1 r0 i0 i19 ]
$r9 = r1[0].............................	[entry: r0 i0 i1 i19 r1 ]	[exit: r1 r0 i0 i1 $r9 i19 ]
$r9[i19] = 0............................	[entry: r1 r0 i0 i1 $r9 i19 ]	[exit: r1 r0 i0 i1 i19 ]
i19 = i19 + 1...........................	[entry: r1 r0 i0 i1 i19 ]	[exit: r1 r0 i0 i19 i1 ]
goto [?= (branch)]......................	[entry: r1 r0 i0 i19 i1 ]	[exit: r1 r0 i0 i19 i1 ]
i20 = 1.................................	[entry: r1 i1 r0 i0 ]	[exit: r1 i1 r0 i20 i0 ]
if i20 > i0 goto r11 = newarray (int)[i1]	[entry: r1 i1 r0 i20 i0 ]	[exit: r1 i0 i1 i20 r0 ]
i21 = 1.................................	[entry: r1 i0 i20 r0 i1 ]	[exit: r1 i0 i20 r0 i21 i1 ]
if i21 > i1 goto i20 = i20 + 1..........	[entry: r1 i0 i20 r0 i21 i1 ]	[exit: r1 i1 r0 i0 i20 i21 ]
$i7 = i20 - 1...........................	[entry: i0 i1 r1 i21 r0 i20 ]	[exit: i0 i1 r1 i20 i21 r0 $i7 ]
$i8 = r0[$i7]...........................	[entry: i0 i1 r1 i20 i21 r0 $i7 ]	[exit: i0 i1 r0 r1 i20 $i8 i21 ]
if $i8 >= i21 goto $i9 = i20 - 1........	[entry: i0 i1 r0 r1 i20 $i8 i21 ]	[exit: i0 i1 r0 i21 r1 i20 ]
$r7 = r1[i20]...........................	[entry: i0 i1 r0 i21 r1 i20 ]	[exit: i0 i1 $r7 r0 r1 i20 i21 ]
$i17 = i21..............................	[entry: i0 i1 $r7 r0 r1 i20 i21 ]	[exit: i0 i1 $r7 $i17 i21 r0 r1 i20 ]
$i12 = i20 - 1..........................	[entry: i0 i1 $r7 $i17 i21 r0 r1 i20 ]	[exit: i0 i1 $r7 $i17 i21 r0 i20 r1 $i12 ]
$r6 = r1[$i12]..........................	[entry: i0 i1 $r7 $i17 i21 r0 i20 r1 $i12 ]	[exit: r1 i0 i1 $r7 $i17 $r6 i21 r0 i20 ]
$i13 = i20 - 1..........................	[entry: r1 i0 i1 $r7 $i17 $r6 i21 r0 i20 ]	[exit: r1 i0 i20 i1 $r7 $i17 $r6 i21 r0 $i13 ]
$i14 = r0[$i13].........................	[entry: r1 i0 i20 i1 $r7 $i17 $r6 i21 r0 $i13 ]	[exit: r1 i0 i20 r0 i1 $r7 $i17 $r6 i21 $i14 ]
$i15 = i21 - $i14.......................	[entry: r1 i0 i20 r0 i1 $r7 $i17 $r6 i21 $i14 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $r6 $i15 ]
$z2 = $r6[$i15].........................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 $r6 $i15 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $z2 ]
if $z2 != 0 goto $z4 = 1................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 $z2 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 ]
$i16 = i20 - 1..........................	[entry: i0 r0 i1 $r7 $i17 i21 r1 i20 ]	[exit: i0 i20 r0 i1 $r7 $i17 i21 r1 $i16 ]
$r8 = r1[$i16]..........................	[entry: i0 i20 r0 i1 $r7 $i17 i21 r1 $i16 ]	[exit: r1 i0 i20 r0 i1 $r7 $i17 $r8 i21 ]
$z3 = $r8[i21]..........................	[entry: r1 i0 i20 r0 i1 $r7 $i17 $r8 i21 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $z3 ]
if $z3 == 0 goto $z4 = 0................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 $z3 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 ]
$z4 = 1.................................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $z4 ]
goto [?= $r7[$i17] = $z4]...............	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 $z4 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $z4 ]
$z4 = 0.................................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 ]	[exit: r1 i0 i20 r0 i1 i21 $r7 $i17 $z4 ]
$r7[$i17] = $z4.........................	[entry: r1 i0 i20 r0 i1 i21 $r7 $i17 $z4 ]	[exit: r1 i0 i20 r0 i1 i21 ]
goto [?= i21 = i21 + 1].................	[entry: r1 i0 i20 r0 i1 i21 ]	[exit: r1 i0 i20 r0 i1 i21 ]
$i9 = i20 - 1...........................	[entry: i0 i1 r1 i21 r0 i20 ]	[exit: i0 i1 r1 i20 i21 r0 $i9 ]
$i10 = r0[$i9]..........................	[entry: i0 i1 r1 i20 i21 r0 $i9 ]	[exit: i0 r0 i1 r1 i20 $i10 i21 ]
if $i10 != i21 goto $r4 = r1[i20].......	[entry: i0 r0 i1 r1 i20 $i10 i21 ]	[exit: i0 r0 i1 i21 r1 i20 ]
$r5 = r1[i20]...........................	[entry: i0 r0 i1 i21 r1 i20 ]	[exit: r1 i0 i20 r0 i1 $r5 i21 ]
$r5[i21] = 1............................	[entry: r1 i0 i20 r0 i1 $r5 i21 ]	[exit: r1 i0 i20 r0 i1 i21 ]
goto [?= i21 = i21 + 1].................	[entry: r1 i0 i20 r0 i1 i21 ]	[exit: r1 i0 i20 r0 i1 i21 ]
$r4 = r1[i20]...........................	[entry: i0 r0 i1 i21 r1 i20 ]	[exit: i0 r0 i1 $r4 i21 r1 i20 ]
$i11 = i20 - 1..........................	[entry: i0 r0 i1 $r4 i21 r1 i20 ]	[exit: i0 i20 r0 i1 $r4 i21 r1 $i11 ]
$r3 = r1[$i11]..........................	[entry: i0 i20 r0 i1 $r4 i21 r1 $i11 ]	[exit: r1 i0 i20 r0 i1 $r4 $r3 i21 ]
$z1 = $r3[i21]..........................	[entry: r1 i0 i20 r0 i1 $r4 $r3 i21 ]	[exit: r1 i0 i20 r0 i1 $r4 i21 $z1 ]
$r4[i21] = $z1..........................	[entry: r1 i0 i20 r0 i1 $r4 i21 $z1 ]	[exit: r1 i0 i20 r0 i1 i21 ]
i21 = i21 + 1...........................	[entry: r1 i0 i20 r0 i1 i21 ]	[exit: r1 i0 i20 r0 i21 i1 ]
goto [?= (branch)]......................	[entry: r1 i0 i20 r0 i21 i1 ]	[exit: r1 i0 i20 r0 i21 i1 ]
i20 = i20 + 1...........................	[entry: r1 i1 r0 i0 i20 ]	[exit: r1 i1 r0 i20 i0 ]
goto [?= (branch)]......................	[entry: r1 i1 r0 i20 i0 ]	[exit: r1 i1 r0 i20 i0 ]
r11 = newarray (int)[i1]................	[entry: r1 i0 i1 ]	[exit: r11 r1 i0 i1 ]
i22 = 0.................................	[entry: r11 r1 i0 i1 ]	[exit: r11 i22 r1 i0 i1 ]
i23 = 0.................................	[entry: r11 i22 r1 i0 i1 ]	[exit: r11 i22 r1 i0 i23 i1 ]
$i4 = i1 / 2............................	[entry: r11 i22 r1 i0 i23 i1 ]	[exit: r11 i1 i22 r1 i0 i23 $i4 ]
if i23 > $i4 goto $i5 = staticinvoke <DynamicProgramming.MinimumSumPartition: int getMin(int[],int)>(r11, i1)	[entry: r11 i1 i22 r1 i0 i23 $i4 ]	[exit: r11 i1 i22 i23 r1 i0 ]
$r2 = r1[i0]............................	[entry: r11 i1 i22 i23 r1 i0 ]	[exit: r11 i22 r1 i0 i1 $r2 i23 ]
$z0 = $r2[i23]..........................	[entry: r11 i22 r1 i0 i1 $r2 i23 ]	[exit: r11 i22 r1 i0 i1 i23 $z0 ]
if $z0 == 0 goto i23 = i23 + 1..........	[entry: r11 i22 r1 i0 i1 i23 $z0 ]	[exit: r11 i22 r1 i0 i1 i23 ]
$i6 = i22...............................	[entry: r1 i0 i1 r11 i23 i22 ]	[exit: r1 i0 i1 r11 $i6 i23 i22 ]
i22 = i22 + 1...........................	[entry: r1 i0 i1 r11 $i6 i23 i22 ]	[exit: i22 r1 i0 i1 r11 $i6 i23 ]
r11[$i6] = i23..........................	[entry: i22 r1 i0 i1 r11 $i6 i23 ]	[exit: r11 i22 r1 i0 i1 i23 ]
i23 = i23 + 1...........................	[entry: r11 i22 r1 i0 i1 i23 ]	[exit: r11 i22 r1 i0 i23 i1 ]
goto [?= $i4 = i1 / 2]..................	[entry: r11 i22 r1 i0 i23 i1 ]	[exit: r11 i22 r1 i0 i23 i1 ]
$i5 = staticinvoke <DynamicProgramming.MinimumSumPartition: int getMin(int[],int)>(r11, i1)	[entry: r11 i1 ]	[exit: $i5 ]
return $i5..............................	[entry: $i5 ]	[exit: ]
********************
Class Name: DynamicProgramming.MinimumSumPartition, Method Name: getSum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i2 = 0..................................	[entry: r0 ]	[exit: i2 r0 ]
r1 = r0.................................	[entry: i2 r0 ]	[exit: i2 r1 ]
i0 = lengthof r1........................	[entry: i2 r1 ]	[exit: i2 r1 i0 ]
i3 = 0..................................	[entry: i2 r1 i0 ]	[exit: i2 r1 i3 i0 ]
if i3 >= i0 goto return i2..............	[entry: i2 r1 i3 i0 ]	[exit: i2 i0 r1 i3 ]
i1 = r1[i3].............................	[entry: i0 i2 r1 i3 ]	[exit: r1 i0 i3 i2 i1 ]
i2 = i2 + i1............................	[entry: r1 i0 i3 i2 i1 ]	[exit: i2 r1 i0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r1 i0 i3 ]	[exit: i2 r1 i3 i0 ]
goto [?= (branch)]......................	[entry: i2 r1 i3 i0 ]	[exit: i2 r1 i3 i0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: DynamicProgramming.MinimumSumPartition, Method Name: getMin, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i3 := @parameter1: int..................	[entry: r0 ]	[exit: i3 r0 ]
$i0 = lengthof r0.......................	[entry: i3 r0 ]	[exit: i3 r0 $i0 ]
if $i0 != 0 goto i6 = 2147483647........	[entry: i3 r0 $i0 ]	[exit: i3 r0 ]
return 0................................	[entry: ]	[exit: ]
i6 = 2147483647.........................	[entry: i3 r0 ]	[exit: i6 i3 r0 ]
r1 = r0.................................	[entry: i6 i3 r0 ]	[exit: i6 i3 r1 ]
i1 = lengthof r1........................	[entry: i6 i3 r1 ]	[exit: i6 i3 r1 i1 ]
i7 = 0..................................	[entry: i6 i3 r1 i1 ]	[exit: i6 i3 r1 i7 i1 ]
if i7 >= i1 goto return i6..............	[entry: i6 i3 r1 i7 i1 ]	[exit: i6 i1 i3 r1 i7 ]
i2 = r1[i7].............................	[entry: i1 i6 i3 r1 i7 ]	[exit: r1 i1 i7 i6 i3 i2 ]
$i4 = 2 * i2............................	[entry: r1 i1 i7 i6 i3 i2 ]	[exit: r1 i1 i7 i6 i3 $i4 ]
$i5 = i3 - $i4..........................	[entry: r1 i1 i7 i6 i3 $i4 ]	[exit: i3 r1 i1 i7 i6 $i5 ]
i6 = staticinvoke <java.lang.Math: int min(int,int)>(i6, $i5)	[entry: i3 r1 i1 i7 i6 $i5 ]	[exit: i6 i3 r1 i1 i7 ]
i7 = i7 + 1.............................	[entry: i6 i3 r1 i1 i7 ]	[exit: i6 i3 r1 i7 i1 ]
goto [?= (branch)]......................	[entry: i6 i3 r1 i7 i1 ]	[exit: i6 i3 r1 i7 i1 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: DynamicProgramming.MinimumSumPartition, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r4 = newarray (int)[4].................	[entry: ]	[exit: $r4 ]
$r4[0] = 1..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[1] = 6..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[2] = 11.............................	[entry: $r4 ]	[exit: $r4 ]
$r4[3] = 5..............................	[entry: $r4 ]	[exit: $r4 ]
$i2 = staticinvoke <DynamicProgramming.MinimumSumPartition: int subSet(int[])>($r4)	[entry: $r4 ]	[exit: $i2 ]
if $i2 == 1 goto $z1 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: $i2 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$r2 = newarray (int)[4].................	[entry: ]	[exit: $r2 ]
$r2[0] = 36.............................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = 7..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = 46.............................	[entry: $r2 ]	[exit: $r2 ]
$r2[3] = 40.............................	[entry: $r2 ]	[exit: $r2 ]
$i1 = staticinvoke <DynamicProgramming.MinimumSumPartition: int subSet(int[])>($r2)	[entry: $r2 ]	[exit: $i1 ]
if $i1 == 23 goto $z2 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: $i1 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <DynamicProgramming.MinimumSumPartition: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$r0 = newarray (int)[4].................	[entry: ]	[exit: $r0 ]
$r0[0] = 1..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 3..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 9..............................	[entry: $r0 ]	[exit: $r0 ]
$i0 = staticinvoke <DynamicProgramming.MinimumSumPartition: int subSet(int[])>($r0)	[entry: $r0 ]	[exit: $i0 ]
if $i0 == 3 goto return.................	[entry: $i0 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.FordFulkerson, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r25 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("V : 6")	[entry: $r0 ]	[exit: ]
<DynamicProgramming.FordFulkerson: int V> = 6	[entry: ]	[exit: ]
$i1 = <DynamicProgramming.FordFulkerson: int V>	[entry: ]	[exit: $i1 ]
$i0 = <DynamicProgramming.FordFulkerson: int V>	[entry: $i1 ]	[exit: $i1 $i0 ]
$r1 = newmultiarray (int)[$i1][$i0].....	[entry: $i1 $i0 ]	[exit: $r1 ]
<DynamicProgramming.FordFulkerson: int[][] capacity> = $r1	[entry: $r1 ]	[exit: ]
$r2 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r2 ]
$r3 = $r2[0]............................	[entry: $r2 ]	[exit: $r3 ]
$r3[1] = 12.............................	[entry: $r3 ]	[exit: ]
$r4 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r4 ]
$r5 = $r4[0]............................	[entry: $r4 ]	[exit: $r5 ]
$r5[3] = 13.............................	[entry: $r5 ]	[exit: ]
$r6 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r6 ]
$r7 = $r6[1]............................	[entry: $r6 ]	[exit: $r7 ]
$r7[2] = 10.............................	[entry: $r7 ]	[exit: ]
$r8 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r8 ]
$r9 = $r8[2]............................	[entry: $r8 ]	[exit: $r9 ]
$r9[3] = 13.............................	[entry: $r9 ]	[exit: ]
$r10 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r10 ]
$r11 = $r10[2]..........................	[entry: $r10 ]	[exit: $r11 ]
$r11[4] = 3.............................	[entry: $r11 ]	[exit: ]
$r12 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r12 ]
$r13 = $r12[2]..........................	[entry: $r12 ]	[exit: $r13 ]
$r13[5] = 15............................	[entry: $r13 ]	[exit: ]
$r14 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r14 ]
$r15 = $r14[3]..........................	[entry: $r14 ]	[exit: $r15 ]
$r15[2] = 7.............................	[entry: $r15 ]	[exit: ]
$r16 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r16 ]
$r17 = $r16[3]..........................	[entry: $r16 ]	[exit: $r17 ]
$r17[4] = 15............................	[entry: $r17 ]	[exit: ]
$r18 = <DynamicProgramming.FordFulkerson: int[][] capacity>	[entry: ]	[exit: $r18 ]
$r19 = $r18[4]..........................	[entry: $r18 ]	[exit: $r19 ]
$r19[5] = 17............................	[entry: $r19 ]	[exit: ]
$r21 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r21 ]
$r20 = new java.lang.StringBuilder......	[entry: $r21 ]	[exit: $r21 $r20 ]
specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()	[entry: $r21 $r20 ]	[exit: $r21 $r20 ]
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Max capacity in networkFlow : ")	[entry: $r21 $r20 ]	[exit: $r21 $r22 ]
$i2 = staticinvoke <DynamicProgramming.FordFulkerson: int networkFlow(int,int)>(0, 5)	[entry: $r21 $r22 ]	[exit: $r21 $i2 $r22 ]
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)	[entry: $r21 $i2 $r22 ]	[exit: $r21 $r23 ]
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r21 $r23 ]	[exit: $r24 $r21 ]
virtualinvoke $r21.<java.io.PrintStream: void println(java.lang.String)>($r24)	[entry: $r24 $r21 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.SubsetSum, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[5].................	[entry: ]	[exit: $r0 ]
$r0[0] = 50.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 10.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 15.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 34.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z7 = staticinvoke <DynamicProgramming.SubsetSum: boolean subsetSum(int[],int)>(r1, 64)	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto $z1 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z7 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto $z2 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z1 ]	[exit: r1 ]
$z6 = staticinvoke <DynamicProgramming.SubsetSum: boolean subsetSum(int[],int)>(r1, 99)	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z2 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto $z3 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z2 ]	[exit: r1 ]
$z5 = staticinvoke <DynamicProgramming.SubsetSum: boolean subsetSum(int[],int)>(r1, 5)	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 == 0 goto $z3 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z3 = <DynamicProgramming.SubsetSum: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto return.................	[entry: r1 $z3 ]	[exit: r1 ]
$z4 = staticinvoke <DynamicProgramming.SubsetSum: boolean subsetSum(int[],int)>(r1, 66)	[entry: r1 ]	[exit: $z4 ]
if $z4 == 0 goto return.................	[entry: $z4 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.MatrixChainMultiplication, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r50 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
i26 = 1.................................	[entry: ]	[exit: i26 ]
$r0 = new java.lang.StringBuilder.......	[entry: i26 ]	[exit: i26 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i26 $r0 ]	[exit: i26 $r0 ]
$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("input size of matrix A(")	[entry: i26 $r0 ]	[exit: i26 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i26)	[entry: i26 $r1 ]	[exit: i26 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ( ex. 10 20 ) : ")	[entry: i26 $r2 ]	[exit: i26 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i26 $r3 ]	[exit: i26 $r4 ]
r51 = staticinvoke <DynamicProgramming.MatrixChainMultiplication: java.lang.String[] input(java.lang.String)>($r4)	[entry: i26 $r4 ]	[exit: i26 r51 ]
$r5 = r51[0]............................	[entry: i26 r51 ]	[exit: i26 r51 $r5 ]
i27 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5)	[entry: i26 r51 $r5 ]	[exit: i26 r51 i27 ]
if i27 != 0 goto $r6 = r51[1]...........	[entry: i26 r51 i27 ]	[exit: i26 i27 r51 ]
goto [?= $r10 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>]	[entry: ]	[exit: ]
$r6 = r51[1]............................	[entry: i26 i27 r51 ]	[exit: i26 i27 $r6 ]
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r6)	[entry: i26 i27 $r6 ]	[exit: i26 i27 i0 ]
$r7 = new DynamicProgramming.Matrix.....	[entry: i26 i27 i0 ]	[exit: i26 i27 i0 $r7 ]
specialinvoke $r7.<DynamicProgramming.Matrix: void <init>(int,int,int)>(i26, i27, i0)	[entry: i26 i27 i0 $r7 ]	[exit: i26 $r7 ]
r8 = $r7................................	[entry: i26 $r7 ]	[exit: i26 r8 ]
$r9 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: i26 r8 ]	[exit: i26 r8 $r9 ]
virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r8)	[entry: i26 r8 $r9 ]	[exit: i26 ]
i26 = i26 + 1...........................	[entry: i26 ]	[exit: i26 ]
goto [?= $r0 = new java.lang.StringBuilder]	[entry: i26 ]	[exit: i26 ]
$r10 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: ]	[exit: $r10 ]
r52 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: $r10 ]	[exit: r52 ]
$z1 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>()	[entry: r52 ]	[exit: r52 $z1 ]
if $z1 == 0 goto $r11 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: r52 $z1 ]	[exit: r52 ]
$r43 = interfaceinvoke r52.<java.util.Iterator: java.lang.Object next()>()	[entry: r52 ]	[exit: r52 $r43 ]
r53 = (DynamicProgramming.Matrix) $r43..	[entry: r52 $r43 ]	[exit: r52 r53 ]
$r45 = <java.lang.System: java.io.PrintStream out>	[entry: r52 r53 ]	[exit: r52 $r45 r53 ]
$r44 = newarray (java.lang.Object)[3]...	[entry: r52 $r45 r53 ]	[exit: r52 $r45 $r44 r53 ]
$i23 = virtualinvoke r53.<DynamicProgramming.Matrix: int count()>()	[entry: r52 $r45 $r44 r53 ]	[exit: r52 $r45 r53 $r44 $i23 ]
$r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i23)	[entry: r52 $r45 r53 $r44 $i23 ]	[exit: r52 $r45 r53 $r44 $r46 ]
$r44[0] = $r46..........................	[entry: r52 $r45 r53 $r44 $r46 ]	[exit: r52 $r45 $r44 r53 ]
$i24 = virtualinvoke r53.<DynamicProgramming.Matrix: int col()>()	[entry: r52 $r45 $r44 r53 ]	[exit: r52 $r45 r53 $r44 $i24 ]
$r47 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i24)	[entry: r52 $r45 r53 $r44 $i24 ]	[exit: r52 $r45 r53 $r44 $r47 ]
$r44[1] = $r47..........................	[entry: r52 $r45 r53 $r44 $r47 ]	[exit: r52 $r45 $r44 r53 ]
$i25 = virtualinvoke r53.<DynamicProgramming.Matrix: int row()>()	[entry: r52 $r45 $r44 r53 ]	[exit: r52 $r45 $r44 $i25 ]
$r48 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i25)	[entry: r52 $r45 $r44 $i25 ]	[exit: r52 $r45 $r44 $r48 ]
$r44[2] = $r48..........................	[entry: r52 $r45 $r44 $r48 ]	[exit: r52 $r44 $r45 ]
virtualinvoke $r45.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("A(%d)  =  %2d  x  %2d%n", $r44)	[entry: r52 $r44 $r45 ]	[exit: r52 ]
goto [?= $z1 = interfaceinvoke r52.<java.util.Iterator: boolean hasNext()>()]	[entry: r52 ]	[exit: r52 ]
$r11 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: ]	[exit: $r11 ]
$i1 = virtualinvoke $r11.<java.util.ArrayList: int size()>()	[entry: $r11 ]	[exit: $i1 ]
<DynamicProgramming.MatrixChainMultiplication: int size> = $i1	[entry: $i1 ]	[exit: ]
$i2 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: ]	[exit: $i2 ]
$i5 = $i2 + 1...........................	[entry: $i2 ]	[exit: $i5 ]
$i3 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: $i5 ]	[exit: $i5 $i3 ]
$i4 = $i3 + 1...........................	[entry: $i5 $i3 ]	[exit: $i5 $i4 ]
$r12 = newmultiarray (int)[$i5][$i4]....	[entry: $i5 $i4 ]	[exit: $r12 ]
<DynamicProgramming.MatrixChainMultiplication: int[][] m> = $r12	[entry: $r12 ]	[exit: ]
$i6 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: ]	[exit: $i6 ]
$i9 = $i6 + 1...........................	[entry: $i6 ]	[exit: $i9 ]
$i7 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: $i9 ]	[exit: $i9 $i7 ]
$i8 = $i7 + 1...........................	[entry: $i9 $i7 ]	[exit: $i9 $i8 ]
$r13 = newmultiarray (int)[$i9][$i8]....	[entry: $i9 $i8 ]	[exit: $r13 ]
<DynamicProgramming.MatrixChainMultiplication: int[][] s> = $r13	[entry: $r13 ]	[exit: ]
$i10 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: ]	[exit: $i10 ]
$i11 = $i10 + 1.........................	[entry: $i10 ]	[exit: $i11 ]
$r14 = newarray (int)[$i11].............	[entry: $i11 ]	[exit: $r14 ]
<DynamicProgramming.MatrixChainMultiplication: int[] p> = $r14	[entry: $r14 ]	[exit: ]
i28 = 0.................................	[entry: ]	[exit: i28 ]
$i12 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: i28 ]	[exit: i28 $i12 ]
$i13 = $i12 + 1.........................	[entry: i28 $i12 ]	[exit: i28 $i13 ]
if i28 >= $i13 goto i29 = 0.............	[entry: i28 $i13 ]	[exit: i28 ]
$r39 = <DynamicProgramming.MatrixChainMultiplication: int[][] m>	[entry: i28 ]	[exit: $r39 i28 ]
$r40 = $r39[i28]........................	[entry: $r39 i28 ]	[exit: i28 $r40 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>($r40, -1)	[entry: i28 $r40 ]	[exit: i28 ]
$r41 = <DynamicProgramming.MatrixChainMultiplication: int[][] s>	[entry: i28 ]	[exit: $r41 i28 ]
$r42 = $r41[i28]........................	[entry: $r41 i28 ]	[exit: i28 $r42 ]
staticinvoke <java.util.Arrays: void fill(int[],int)>($r42, -1)	[entry: i28 $r42 ]	[exit: i28 ]
i28 = i28 + 1...........................	[entry: i28 ]	[exit: i28 ]
goto [?= $i12 = <DynamicProgramming.MatrixChainMultiplication: int size>]	[entry: i28 ]	[exit: i28 ]
i29 = 0.................................	[entry: ]	[exit: i29 ]
$r15 = <DynamicProgramming.MatrixChainMultiplication: int[] p>	[entry: i29 ]	[exit: i29 $r15 ]
$i14 = lengthof $r15....................	[entry: i29 $r15 ]	[exit: i29 $i14 ]
if i29 >= $i14 goto staticinvoke <DynamicProgramming.MatrixChainMultiplication: void matrixChainOrder()>()	[entry: i29 $i14 ]	[exit: i29 ]
$r33 = <DynamicProgramming.MatrixChainMultiplication: int[] p>	[entry: i29 ]	[exit: $r33 i29 ]
$i22 = i29..............................	[entry: $r33 i29 ]	[exit: $r33 $i22 i29 ]
if i29 != 0 goto $r32 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: $r33 $i22 i29 ]	[exit: $r33 $i22 i29 ]
$r36 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: $r33 $i22 i29 ]	[exit: $r33 $i22 i29 $r36 ]
$r37 = virtualinvoke $r36.<java.util.ArrayList: java.lang.Object get(int)>(i29)	[entry: $r33 $i22 i29 $r36 ]	[exit: i29 $r33 $i22 $r37 ]
$r38 = (DynamicProgramming.Matrix) $r37.	[entry: i29 $r33 $i22 $r37 ]	[exit: i29 $r33 $i22 $r38 ]
$i30 = virtualinvoke $r38.<DynamicProgramming.Matrix: int col()>()	[entry: i29 $r33 $i22 $r38 ]	[exit: i29 $r33 $i22 $i30 ]
goto [?= $r33[$i22] = $i30].............	[entry: i29 $r33 $i22 $i30 ]	[exit: i29 $r33 $i22 $i30 ]
$r32 = <DynamicProgramming.MatrixChainMultiplication: java.util.ArrayList mArray>	[entry: $r33 $i22 i29 ]	[exit: $r33 $i22 $r32 i29 ]
$i21 = i29 - 1..........................	[entry: $r33 $i22 $r32 i29 ]	[exit: i29 $r33 $i22 $i21 $r32 ]
$r34 = virtualinvoke $r32.<java.util.ArrayList: java.lang.Object get(int)>($i21)	[entry: i29 $r33 $i22 $i21 $r32 ]	[exit: i29 $r33 $i22 $r34 ]
$r35 = (DynamicProgramming.Matrix) $r34.	[entry: i29 $r33 $i22 $r34 ]	[exit: i29 $r33 $i22 $r35 ]
$i30 = virtualinvoke $r35.<DynamicProgramming.Matrix: int row()>()	[entry: i29 $r33 $i22 $r35 ]	[exit: i29 $r33 $i22 $i30 ]
$r33[$i22] = $i30.......................	[entry: i29 $r33 $i22 $i30 ]	[exit: i29 ]
i29 = i29 + 1...........................	[entry: i29 ]	[exit: i29 ]
goto [?= $r15 = <DynamicProgramming.MatrixChainMultiplication: int[] p>]	[entry: i29 ]	[exit: i29 ]
staticinvoke <DynamicProgramming.MatrixChainMultiplication: void matrixChainOrder()>()	[entry: ]	[exit: ]
i31 = 0.................................	[entry: ]	[exit: i31 ]
$i15 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: i31 ]	[exit: i31 $i15 ]
if i31 >= $i15 goto $r16 = <java.lang.System: java.io.PrintStream out>	[entry: i31 $i15 ]	[exit: i31 ]
$r31 = <java.lang.System: java.io.PrintStream out>	[entry: i31 ]	[exit: i31 $r31 ]
virtualinvoke $r31.<java.io.PrintStream: void print(java.lang.String)>("-------")	[entry: i31 $r31 ]	[exit: i31 ]
i31 = i31 + 1...........................	[entry: i31 ]	[exit: i31 ]
goto [?= $i15 = <DynamicProgramming.MatrixChainMultiplication: int size>]	[entry: i31 ]	[exit: i31 ]
$r16 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r16 ]
virtualinvoke $r16.<java.io.PrintStream: void println()>()	[entry: $r16 ]	[exit: ]
$r17 = <DynamicProgramming.MatrixChainMultiplication: int[][] m>	[entry: ]	[exit: $r17 ]
staticinvoke <DynamicProgramming.MatrixChainMultiplication: void printArray(int[][])>($r17)	[entry: $r17 ]	[exit: ]
i32 = 0.................................	[entry: ]	[exit: i32 ]
$i16 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: i32 ]	[exit: i32 $i16 ]
if i32 >= $i16 goto $r18 = <java.lang.System: java.io.PrintStream out>	[entry: i32 $i16 ]	[exit: i32 ]
$r30 = <java.lang.System: java.io.PrintStream out>	[entry: i32 ]	[exit: i32 $r30 ]
virtualinvoke $r30.<java.io.PrintStream: void print(java.lang.String)>("-------")	[entry: i32 $r30 ]	[exit: i32 ]
i32 = i32 + 1...........................	[entry: i32 ]	[exit: i32 ]
goto [?= $i16 = <DynamicProgramming.MatrixChainMultiplication: int size>]	[entry: i32 ]	[exit: i32 ]
$r18 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r18 ]
virtualinvoke $r18.<java.io.PrintStream: void println()>()	[entry: $r18 ]	[exit: ]
$r19 = <DynamicProgramming.MatrixChainMultiplication: int[][] s>	[entry: ]	[exit: $r19 ]
staticinvoke <DynamicProgramming.MatrixChainMultiplication: void printArray(int[][])>($r19)	[entry: $r19 ]	[exit: ]
i33 = 0.................................	[entry: ]	[exit: i33 ]
$i17 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: i33 ]	[exit: i33 $i17 ]
if i33 >= $i17 goto $r20 = <java.lang.System: java.io.PrintStream out>	[entry: i33 $i17 ]	[exit: i33 ]
$r29 = <java.lang.System: java.io.PrintStream out>	[entry: i33 ]	[exit: i33 $r29 ]
virtualinvoke $r29.<java.io.PrintStream: void print(java.lang.String)>("-------")	[entry: i33 $r29 ]	[exit: i33 ]
i33 = i33 + 1...........................	[entry: i33 ]	[exit: i33 ]
goto [?= $i17 = <DynamicProgramming.MatrixChainMultiplication: int size>]	[entry: i33 ]	[exit: i33 ]
$r20 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r20 ]
virtualinvoke $r20.<java.io.PrintStream: void println()>()	[entry: $r20 ]	[exit: ]
$r22 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r22 ]
$r21 = new java.lang.StringBuilder......	[entry: $r22 ]	[exit: $r22 $r21 ]
specialinvoke $r21.<java.lang.StringBuilder: void <init>()>()	[entry: $r22 $r21 ]	[exit: $r22 $r21 ]
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Optimal solution : ")	[entry: $r22 $r21 ]	[exit: $r22 $r23 ]
$r24 = <DynamicProgramming.MatrixChainMultiplication: int[][] m>	[entry: $r22 $r23 ]	[exit: $r22 $r23 $r24 ]
$r25 = $r24[1]..........................	[entry: $r22 $r23 $r24 ]	[exit: $r22 $r23 $r25 ]
$i18 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: $r22 $r23 $r25 ]	[exit: $r22 $r23 $r25 $i18 ]
$i19 = $r25[$i18].......................	[entry: $r22 $r23 $r25 $i18 ]	[exit: $r22 $i19 $r23 ]
$r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i19)	[entry: $r22 $i19 $r23 ]	[exit: $r22 $r26 ]
$r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r22 $r26 ]	[exit: $r27 $r22 ]
virtualinvoke $r22.<java.io.PrintStream: void println(java.lang.String)>($r27)	[entry: $r27 $r22 ]	[exit: ]
$r28 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r28 ]
virtualinvoke $r28.<java.io.PrintStream: void print(java.lang.String)>("Optimal parens : ")	[entry: $r28 ]	[exit: ]
$i20 = <DynamicProgramming.MatrixChainMultiplication: int size>	[entry: ]	[exit: $i20 ]
staticinvoke <DynamicProgramming.MatrixChainMultiplication: void printOptimalParens(int,int)>(1, $i20)	[entry: $i20 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.EggDropping, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
b0 = 2..................................	[entry: ]	[exit: b0 ]
b1 = 4..................................	[entry: b0 ]	[exit: b0 b1 ]
i2 = staticinvoke <DynamicProgramming.EggDropping: int minTrials(int,int)>(b0, b1)	[entry: b0 b1 ]	[exit: i2 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i2 ]	[exit: i2 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i2)	[entry: i2 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestCommonSubsequence, Method Name: getLCS, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 := @parameter1: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
if r0 == null goto return null..........	[entry: r1 r0 ]	[exit: r0 r1 ]
if r1 != null goto $i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 r1 ]	[exit: r1 r0 ]
return null.............................	[entry: ]	[exit: ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r1 r0 ]	[exit: r0 r1 $i0 ]
if $i0 == 0 goto return ""..............	[entry: r0 r1 $i0 ]	[exit: r0 r1 ]
$i1 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r0 r1 ]	[exit: r1 r0 $i1 ]
if $i1 != 0 goto r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("")	[entry: r1 r0 $i1 ]	[exit: r1 r0 ]
return ""...............................	[entry: ]	[exit: ]
r2 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("")	[entry: r1 r0 ]	[exit: r0 r2 r1 ]
r3 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>("")	[entry: r0 r2 r1 ]	[exit: r0 r1 r3 r2 ]
$i2 = lengthof r2.......................	[entry: r0 r1 r3 r2 ]	[exit: r0 r1 r2 r3 $i2 ]
$i5 = $i2 + 1...........................	[entry: r0 r1 r2 r3 $i2 ]	[exit: r0 r1 r2 $i5 r3 ]
$i3 = lengthof r3.......................	[entry: r0 r1 r2 $i5 r3 ]	[exit: r0 r1 r3 r2 $i5 $i3 ]
$i4 = $i3 + 1...........................	[entry: r0 r1 r3 r2 $i5 $i3 ]	[exit: r0 r1 r3 r2 $i5 $i4 ]
r4 = newmultiarray (int)[$i5][$i4]......	[entry: r0 r1 r3 r2 $i5 $i4 ]	[exit: r0 r1 r4 r3 r2 ]
i27 = 0.................................	[entry: r0 r1 r4 r3 r2 ]	[exit: r0 r1 r4 r3 i27 r2 ]
$i6 = lengthof r2.......................	[entry: r0 r1 r4 r3 i27 r2 ]	[exit: r0 r1 r4 r2 r3 i27 $i6 ]
$i7 = $i6 + 1...........................	[entry: r0 r1 r4 r2 r3 i27 $i6 ]	[exit: r0 r1 r4 r2 r3 i27 $i7 ]
if i27 >= $i7 goto i28 = 1..............	[entry: r0 r1 r4 r2 r3 i27 $i7 ]	[exit: r0 r1 r4 r2 r3 i27 ]
$r16 = r4[i27]..........................	[entry: r0 r1 r3 r2 r4 i27 ]	[exit: r0 r1 r4 r3 r2 i27 $r16 ]
$r16[0] = 0.............................	[entry: r0 r1 r4 r3 r2 i27 $r16 ]	[exit: r0 r1 r4 r3 r2 i27 ]
i27 = i27 + 1...........................	[entry: r0 r1 r4 r3 r2 i27 ]	[exit: r0 r1 r4 r3 i27 r2 ]
goto [?= $i6 = lengthof r2].............	[entry: r0 r1 r4 r3 i27 r2 ]	[exit: r0 r1 r4 r3 i27 r2 ]
i28 = 1.................................	[entry: r0 r1 r4 r2 r3 ]	[exit: r0 r1 r4 r2 i28 r3 ]
$i8 = lengthof r3.......................	[entry: r0 r1 r4 r2 i28 r3 ]	[exit: r0 r1 r4 r3 r2 i28 $i8 ]
$i9 = $i8 + 1...........................	[entry: r0 r1 r4 r3 r2 i28 $i8 ]	[exit: r0 r1 r4 r3 r2 i28 $i9 ]
if i28 >= $i9 goto i29 = 1..............	[entry: r0 r1 r4 r3 r2 i28 $i9 ]	[exit: r0 r1 r4 r3 r2 i28 ]
$r15 = r4[0]............................	[entry: r0 r1 r2 r3 i28 r4 ]	[exit: r0 r1 r4 r2 r3 $r15 i28 ]
$r15[i28] = 0...........................	[entry: r0 r1 r4 r2 r3 $r15 i28 ]	[exit: r0 r1 r4 r2 r3 i28 ]
i28 = i28 + 1...........................	[entry: r0 r1 r4 r2 r3 i28 ]	[exit: r0 r1 r4 r2 i28 r3 ]
goto [?= $i8 = lengthof r3].............	[entry: r0 r1 r4 r2 i28 r3 ]	[exit: r0 r1 r4 r2 i28 r3 ]
i29 = 1.................................	[entry: r0 r1 r4 r3 r2 ]	[exit: r0 r1 r4 r3 i29 r2 ]
$i10 = lengthof r2......................	[entry: r0 r1 r4 r3 i29 r2 ]	[exit: r0 r1 r4 r2 r3 i29 $i10 ]
$i11 = $i10 + 1.........................	[entry: r0 r1 r4 r2 r3 i29 $i10 ]	[exit: r0 r1 r4 r2 r3 i29 $i11 ]
if i29 >= $i11 goto $r5 = staticinvoke <DynamicProgramming.LongestCommonSubsequence: java.lang.String lcsString(java.lang.String,java.lang.String,int[][])>(r0, r1, r4)	[entry: r0 r1 r4 r2 r3 i29 $i11 ]	[exit: r0 r1 r4 r2 i29 r3 ]
i30 = 1.................................	[entry: r0 r1 r4 r2 i29 r3 ]	[exit: r0 r1 r4 r2 i29 i30 r3 ]
$i12 = lengthof r3......................	[entry: r0 r1 r4 r2 i29 i30 r3 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $i12 ]
$i13 = $i12 + 1.........................	[entry: r0 r1 r4 r2 i29 r3 i30 $i12 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $i13 ]
if i30 >= $i13 goto i29 = i29 + 1.......	[entry: r0 r1 r4 r2 i29 r3 i30 $i13 ]	[exit: r0 r1 r4 r3 r2 i29 i30 ]
$i14 = i29 - 1..........................	[entry: r0 r1 r4 r3 i30 r2 i29 ]	[exit: r0 r1 r4 i29 r3 i30 r2 $i14 ]
$r7 = r2[$i14]..........................	[entry: r0 r1 r4 i29 r3 i30 r2 $i14 ]	[exit: r0 r1 r2 r4 i29 $r7 r3 i30 ]
$i15 = i30 - 1..........................	[entry: r0 r1 r2 r4 i29 $r7 r3 i30 ]	[exit: r0 r1 r2 i30 r4 i29 $r7 r3 $i15 ]
$r6 = r3[$i15]..........................	[entry: r0 r1 r2 i30 r4 i29 $r7 r3 $i15 ]	[exit: r0 r1 r2 r3 i30 r4 i29 $r6 $r7 ]
$z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6)	[entry: r0 r1 r2 r3 i30 r4 i29 $r6 $r7 ]	[exit: r0 r1 r2 r3 i30 r4 i29 $z0 ]
if $z0 == 0 goto $r11 = r4[i29].........	[entry: r0 r1 r2 r3 i30 r4 i29 $z0 ]	[exit: r0 r1 r2 r3 i30 r4 i29 ]
$r14 = r4[i29]..........................	[entry: r0 r1 r2 r3 i30 r4 i29 ]	[exit: r0 r1 r2 r3 $r14 i30 r4 i29 ]
$i23 = i29 - 1..........................	[entry: r0 r1 r2 r3 $r14 i30 r4 i29 ]	[exit: r0 r1 r2 i29 r3 $r14 i30 r4 $i23 ]
$r13 = r4[$i23].........................	[entry: r0 r1 r2 i29 r3 $r14 i30 r4 $i23 ]	[exit: r0 r1 r4 r2 i29 r3 $r14 $r13 i30 ]
$i24 = i30 - 1..........................	[entry: r0 r1 r4 r2 i29 r3 $r14 $r13 i30 ]	[exit: r0 r1 r4 r2 i29 r3 $r14 i30 $r13 $i24 ]
$i25 = $r13[$i24].......................	[entry: r0 r1 r4 r2 i29 r3 $r14 i30 $r13 $i24 ]	[exit: r0 r1 r4 r2 i29 r3 $r14 i30 $i25 ]
$i26 = $i25 + 1.........................	[entry: r0 r1 r4 r2 i29 r3 $r14 i30 $i25 ]	[exit: r0 r1 r4 r2 i29 r3 $r14 i30 $i26 ]
$r14[i30] = $i26........................	[entry: r0 r1 r4 r2 i29 r3 $r14 i30 $i26 ]	[exit: r0 r1 r4 r2 i29 r3 i30 ]
goto [?= i30 = i30 + 1].................	[entry: r0 r1 r4 r2 i29 r3 i30 ]	[exit: r0 r1 r4 r2 i29 r3 i30 ]
$r11 = r4[i29]..........................	[entry: r0 r1 r2 r3 i30 r4 i29 ]	[exit: r0 r1 r2 r3 $r11 r4 i29 i30 ]
$i22 = i30..............................	[entry: r0 r1 r2 r3 $r11 r4 i29 i30 ]	[exit: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 ]
$i16 = i29 - 1..........................	[entry: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 ]	[exit: r0 r1 r2 r3 $r11 $i22 i29 i30 r4 $i16 ]
$r8 = r4[$i16]..........................	[entry: r0 r1 r2 r3 $r11 $i22 i29 i30 r4 $i16 ]	[exit: r0 r1 r2 r3 $r11 $i22 r4 i29 $r8 i30 ]
$i19 = $r8[i30].........................	[entry: r0 r1 r2 r3 $r11 $i22 r4 i29 $r8 i30 ]	[exit: r0 r1 r2 r3 $r11 $i22 $i19 i30 r4 i29 ]
$r9 = r4[i29]...........................	[entry: r0 r1 r2 r3 $r11 $i22 $i19 i30 r4 i29 ]	[exit: r0 r1 r2 r3 $r11 $i22 r4 i29 $i19 $r9 i30 ]
$i17 = i30 - 1..........................	[entry: r0 r1 r2 r3 $r11 $i22 r4 i29 $i19 $r9 i30 ]	[exit: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 $i19 $r9 $i17 ]
$i18 = $r9[$i17]........................	[entry: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 $i19 $r9 $i17 ]	[exit: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 $i19 $i18 ]
if $i19 <= $i18 goto $r10 = r4[i29].....	[entry: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 $i19 $i18 ]	[exit: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 ]
$i21 = i29 - 1..........................	[entry: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 ]	[exit: r0 r1 r2 i29 r3 $r11 $i22 i30 r4 $i21 ]
$r12 = r4[$i21].........................	[entry: r0 r1 r2 i29 r3 $r11 $i22 i30 r4 $i21 ]	[exit: r0 r1 r4 r2 i29 r3 $r11 $i22 $r12 i30 ]
$i31 = $r12[i30]........................	[entry: r0 r1 r4 r2 i29 r3 $r11 $i22 $r12 i30 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $i31 ]
goto [?= $r11[$i22] = $i31].............	[entry: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $i31 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $i31 ]
$r10 = r4[i29]..........................	[entry: r0 r1 r2 r3 $r11 $i22 i30 r4 i29 ]	[exit: r0 r1 r4 r2 i29 r3 $r11 $i22 $r10 i30 ]
$i20 = i30 - 1..........................	[entry: r0 r1 r4 r2 i29 r3 $r11 $i22 $r10 i30 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $r10 $i20 ]
$i31 = $r10[$i20].......................	[entry: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $r10 $i20 ]	[exit: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $i31 ]
$r11[$i22] = $i31.......................	[entry: r0 r1 r4 r2 i29 r3 i30 $r11 $i22 $i31 ]	[exit: r0 r1 r4 r2 i29 r3 i30 ]
i30 = i30 + 1...........................	[entry: r0 r1 r4 r2 i29 r3 i30 ]	[exit: r0 r1 r4 r2 i29 i30 r3 ]
goto [?= $i12 = lengthof r3]............	[entry: r0 r1 r4 r2 i29 i30 r3 ]	[exit: r0 r1 r4 r2 i29 i30 r3 ]
i29 = i29 + 1...........................	[entry: r0 r1 r4 r3 r2 i29 ]	[exit: r0 r1 r4 r3 i29 r2 ]
goto [?= $i10 = lengthof r2]............	[entry: r0 r1 r4 r3 i29 r2 ]	[exit: r0 r1 r4 r3 i29 r2 ]
$r5 = staticinvoke <DynamicProgramming.LongestCommonSubsequence: java.lang.String lcsString(java.lang.String,java.lang.String,int[][])>(r0, r1, r4)	[entry: r0 r1 r4 ]	[exit: $r5 ]
return $r5..............................	[entry: $r5 ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestCommonSubsequence, Method Name: lcsString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String.....	[entry: ]	[exit: r2 ]
r3 := @parameter1: java.lang.String.....	[entry: r2 ]	[exit: r3 r2 ]
r6 := @parameter2: int[][]..............	[entry: r3 r2 ]	[exit: r6 r3 r2 ]
$r0 = new java.lang.StringBuilder.......	[entry: r6 r3 r2 ]	[exit: r6 r3 r2 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: r6 r3 r2 $r0 ]	[exit: r6 r3 r2 $r0 ]
r1 = $r0................................	[entry: r6 r3 r2 $r0 ]	[exit: r1 r6 r3 r2 ]
i10 = virtualinvoke r2.<java.lang.String: int length()>()	[entry: r1 r6 r3 r2 ]	[exit: r1 r6 r2 i10 r3 ]
i11 = virtualinvoke r3.<java.lang.String: int length()>()	[entry: r1 r6 r2 i10 r3 ]	[exit: r1 r6 r3 r2 i11 i10 ]
if i10 <= 0 goto $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i10 i11 ]
if i11 <= 0 goto $r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r1 r6 r3 r2 i10 i11 ]	[exit: r1 r6 r3 i11 r2 i10 ]
$i0 = i10 - 1...........................	[entry: r1 r6 r3 i11 r2 i10 ]	[exit: r1 i10 r6 r3 i11 $i0 r2 ]
$c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i0)	[entry: r1 i10 r6 r3 i11 $i0 r2 ]	[exit: r1 r2 i10 r6 $c1 r3 i11 ]
$i2 = i11 - 1...........................	[entry: r1 r2 i10 r6 $c1 r3 i11 ]	[exit: i11 r1 r2 i10 r6 $c1 $i2 r3 ]
$c3 = virtualinvoke r3.<java.lang.String: char charAt(int)>($i2)	[entry: i11 r1 r2 i10 r6 $c1 $i2 r3 ]	[exit: r6 r3 i11 r1 r2 i10 $c1 $c3 ]
if $c1 != $c3 goto $i4 = i10 - 1........	[entry: r6 r3 i11 r1 r2 i10 $c1 $c3 ]	[exit: r6 r3 i11 r1 r2 i10 ]
$i8 = i10 - 1...........................	[entry: r6 r3 i11 r1 r2 i10 ]	[exit: r6 r3 i11 i10 r1 $i8 r2 ]
$c9 = virtualinvoke r2.<java.lang.String: char charAt(int)>($i8)	[entry: r6 r3 i11 i10 r1 $i8 r2 ]	[exit: r6 r3 r2 i11 i10 $c9 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c9)	[entry: r6 r3 r2 i11 i10 $c9 r1 ]	[exit: r1 r6 r3 r2 i11 i10 ]
i10 = i10 + -1..........................	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i10 i11 ]
i11 = i11 + -1..........................	[entry: r1 r6 r3 r2 i10 i11 ]	[exit: r1 r6 r3 r2 i11 i10 ]
goto [?= (branch)]......................	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i11 i10 ]
$i4 = i10 - 1...........................	[entry: r1 r3 r2 i11 r6 i10 ]	[exit: r1 r3 r2 i10 i11 r6 $i4 ]
$r7 = r6[$i4]...........................	[entry: r1 r3 r2 i10 i11 r6 $i4 ]	[exit: r1 r3 r2 r6 i10 $r7 i11 ]
$i7 = $r7[i11]..........................	[entry: r1 r3 r2 r6 i10 $r7 i11 ]	[exit: r1 r3 r2 $i7 i11 r6 i10 ]
$r8 = r6[i10]...........................	[entry: r1 r3 r2 $i7 i11 r6 i10 ]	[exit: r1 r6 r3 r2 i10 $i7 $r8 i11 ]
$i5 = i11 - 1...........................	[entry: r1 r6 r3 r2 i10 $i7 $r8 i11 ]	[exit: r1 r6 r3 r2 i11 i10 $i7 $r8 $i5 ]
$i6 = $r8[$i5]..........................	[entry: r1 r6 r3 r2 i11 i10 $i7 $r8 $i5 ]	[exit: r1 r6 r3 r2 i11 i10 $i7 $i6 ]
if $i7 <= $i6 goto i11 = i11 + -1.......	[entry: r1 r6 r3 r2 i11 i10 $i7 $i6 ]	[exit: r1 r6 r3 r2 i11 i10 ]
i10 = i10 + -1..........................	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i11 i10 ]
goto [?= (branch)]......................	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i11 i10 ]
i11 = i11 + -1..........................	[entry: r1 r6 r3 r2 i10 i11 ]	[exit: r1 r6 r3 r2 i11 i10 ]
goto [?= (branch)]......................	[entry: r1 r6 r3 r2 i11 i10 ]	[exit: r1 r6 r3 r2 i11 i10 ]
$r4 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r1 ]	[exit: $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r4 ]	[exit: $r5 ]
return $r5..............................	[entry: $r5 ]	[exit: ]
********************
Class Name: DynamicProgramming.LongestCommonSubsequence, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r23 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = "DSGSHSRGSRHTRD"...................	[entry: ]	[exit: r0 ]
r1 = "DATRGAGTSHS"......................	[entry: r0 ]	[exit: r0 r1 ]
r2 = staticinvoke <DynamicProgramming.LongestCommonSubsequence: java.lang.String getLCS(java.lang.String,java.lang.String)>(r0, r1)	[entry: r0 r1 ]	[exit: r1 r0 r2 ]
if r2 == null goto return...............	[entry: r1 r0 r2 ]	[exit: r2 r1 r0 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r1 r0 ]	[exit: r2 r1 $r4 r0 ]
$r3 = new java.lang.StringBuilder.......	[entry: r2 r1 $r4 r0 ]	[exit: r2 r1 $r4 r0 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: r2 r1 $r4 r0 $r3 ]	[exit: r2 r1 $r4 r0 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String 1: ")	[entry: r2 r1 $r4 r0 $r3 ]	[exit: r2 r1 $r4 r0 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: r2 r1 $r4 r0 $r5 ]	[exit: r2 r1 $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 r1 $r4 $r6 ]	[exit: r2 r1 $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: r2 r1 $r7 $r4 ]	[exit: r2 r1 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r1 ]	[exit: r2 $r9 r1 ]
$r8 = new java.lang.StringBuilder.......	[entry: r2 $r9 r1 ]	[exit: r2 $r9 r1 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r9 r1 $r8 ]	[exit: r2 $r9 r1 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String 2: ")	[entry: r2 $r9 r1 $r8 ]	[exit: r2 $r9 r1 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: r2 $r9 r1 $r10 ]	[exit: r2 $r9 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r9 $r11 ]	[exit: r2 $r12 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)	[entry: r2 $r12 $r9 ]	[exit: r2 ]
$r14 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: $r14 r2 ]
$r13 = new java.lang.StringBuilder......	[entry: $r14 r2 ]	[exit: $r14 r2 $r13 ]
specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()	[entry: $r14 r2 $r13 ]	[exit: $r14 r2 $r13 ]
$r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LCS: ")	[entry: $r14 r2 $r13 ]	[exit: $r14 r2 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)	[entry: $r14 r2 $r15 ]	[exit: r2 $r14 $r16 ]
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r14 $r16 ]	[exit: r2 $r17 $r14 ]
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r17)	[entry: r2 $r17 $r14 ]	[exit: r2 ]
$r19 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: $r19 r2 ]
$r18 = new java.lang.StringBuilder......	[entry: $r19 r2 ]	[exit: $r19 r2 $r18 ]
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()	[entry: $r19 r2 $r18 ]	[exit: $r19 r2 $r18 ]
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LCS length: ")	[entry: $r19 r2 $r18 ]	[exit: $r19 $r20 r2 ]
$i0 = virtualinvoke r2.<java.lang.String: int length()>()	[entry: $r19 $r20 r2 ]	[exit: $r19 $i0 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r19 $i0 $r20 ]	[exit: $r19 $r21 ]
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r19 $r21 ]	[exit: $r22 $r19 ]
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r22)	[entry: $r22 $r19 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.CoinChange, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
b0 = 12.................................	[entry: ]	[exit: b0 ]
$r0 = newarray (int)[3].................	[entry: b0 ]	[exit: b0 $r0 ]
$r0[0] = 2..............................	[entry: b0 $r0 ]	[exit: b0 $r0 ]
$r0[1] = 4..............................	[entry: b0 $r0 ]	[exit: b0 $r0 ]
$r0[2] = 5..............................	[entry: b0 $r0 ]	[exit: b0 $r0 ]
r1 = $r0................................	[entry: b0 $r0 ]	[exit: r1 b0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 b0 ]	[exit: $r3 r1 b0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 r1 b0 ]	[exit: $r3 r1 b0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 r1 b0 $r2 ]	[exit: $r3 r1 b0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of combinations of getting change for ")	[entry: $r3 r1 b0 $r2 ]	[exit: $r3 r1 b0 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0)	[entry: $r3 r1 b0 $r4 ]	[exit: $r3 r1 b0 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ")	[entry: $r3 r1 b0 $r5 ]	[exit: $r3 $r6 r1 b0 ]
$i1 = staticinvoke <DynamicProgramming.CoinChange: int change(int[],int)>(r1, b0)	[entry: $r3 $r6 r1 b0 ]	[exit: r1 b0 $r3 $i1 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r1 b0 $r3 $i1 $r6 ]	[exit: r1 b0 $r3 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 b0 $r3 $r7 ]	[exit: r1 b0 $r8 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r1 b0 $r8 $r3 ]	[exit: r1 b0 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r1 b0 ]	[exit: $r10 r1 b0 ]
$r9 = new java.lang.StringBuilder.......	[entry: $r10 r1 b0 ]	[exit: $r10 r1 b0 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: $r10 r1 b0 $r9 ]	[exit: $r10 r1 b0 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minimum number of coins required for amount :")	[entry: $r10 r1 b0 $r9 ]	[exit: $r10 r1 b0 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(b0)	[entry: $r10 r1 b0 $r11 ]	[exit: $r10 r1 b0 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ")	[entry: $r10 r1 b0 $r12 ]	[exit: $r10 $r13 r1 b0 ]
$i2 = staticinvoke <DynamicProgramming.CoinChange: int minimumCoins(int[],int)>(r1, b0)	[entry: $r10 $r13 r1 b0 ]	[exit: $r10 $i2 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)	[entry: $r10 $i2 $r13 ]	[exit: $r10 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r10 $r14 ]	[exit: $r15 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: $r15 $r10 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DynamicProgramming.CoinChange, Method Name: change, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: int[]................	[entry: ]	[exit: r1 ]
i0 := @parameter1: int..................	[entry: r1 ]	[exit: r1 i0 ]
$i1 = i0 + 1............................	[entry: r1 i0 ]	[exit: i0 r1 $i1 ]
r0 = newarray (int)[$i1]................	[entry: i0 r1 $i1 ]	[exit: i0 r1 r0 ]
r0[0] = 1...............................	[entry: i0 r1 r0 ]	[exit: r0 i0 r1 ]
r2 = r1.................................	[entry: r0 i0 r1 ]	[exit: r0 i0 r2 ]
i2 = lengthof r2........................	[entry: r0 i0 r2 ]	[exit: r0 i0 r2 i2 ]
i10 = 0.................................	[entry: r0 i0 r2 i2 ]	[exit: r0 i0 r2 i10 i2 ]
if i10 >= i2 goto $i3 = r0[i0]..........	[entry: r0 i0 r2 i10 i2 ]	[exit: r0 i0 i2 r2 i10 ]
i4 = r2[i10]............................	[entry: r0 i2 i0 r2 i10 ]	[exit: r0 r2 i2 i10 i0 i4 ]
i11 = i4................................	[entry: r0 r2 i2 i10 i0 i4 ]	[exit: r0 r2 i2 i10 i4 i11 i0 ]
$i5 = i0 + 1............................	[entry: r0 r2 i2 i10 i4 i11 i0 ]	[exit: r0 i0 r2 i2 i10 i4 i11 $i5 ]
if i11 >= $i5 goto i10 = i10 + 1........	[entry: r0 i0 r2 i2 i10 i4 i11 $i5 ]	[exit: r0 i0 r2 i2 i10 i4 i11 ]
$i8 = r0[i11]...........................	[entry: r2 i2 i10 i0 i4 r0 i11 ]	[exit: r2 i2 i10 i0 $i8 r0 i11 i4 ]
$i6 = i11 - i4..........................	[entry: r2 i2 i10 i0 $i8 r0 i11 i4 ]	[exit: r2 i2 i10 i4 i0 i11 $i8 r0 $i6 ]
$i7 = r0[$i6]...........................	[entry: r2 i2 i10 i4 i0 i11 $i8 r0 $i6 ]	[exit: r2 i2 i10 i4 i0 r0 i11 $i8 $i7 ]
$i9 = $i8 + $i7.........................	[entry: r2 i2 i10 i4 i0 r0 i11 $i8 $i7 ]	[exit: r2 i2 i10 i4 i0 r0 i11 $i9 ]
r0[i11] = $i9...........................	[entry: r2 i2 i10 i4 i0 r0 i11 $i9 ]	[exit: r0 r2 i2 i10 i4 i0 i11 ]
i11 = i11 + 1...........................	[entry: r0 r2 i2 i10 i4 i0 i11 ]	[exit: r0 r2 i2 i10 i4 i11 i0 ]
goto [?= $i5 = i0 + 1]..................	[entry: r0 r2 i2 i10 i4 i11 i0 ]	[exit: r0 r2 i2 i10 i4 i11 i0 ]
i10 = i10 + 1...........................	[entry: r0 i0 r2 i2 i10 ]	[exit: r0 i0 r2 i10 i2 ]
goto [?= (branch)]......................	[entry: r0 i0 r2 i10 i2 ]	[exit: r0 i0 r2 i10 i2 ]
$i3 = r0[i0]............................	[entry: r0 i0 ]	[exit: $i3 ]
return $i3..............................	[entry: $i3 ]	[exit: ]
********************
Class Name: DynamicProgramming.CoinChange, Method Name: minimumCoins, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: int[]................	[entry: ]	[exit: r1 ]
i0 := @parameter1: int..................	[entry: r1 ]	[exit: r1 i0 ]
$i1 = i0 + 1............................	[entry: r1 i0 ]	[exit: r1 i0 $i1 ]
r0 = newarray (int)[$i1]................	[entry: r1 i0 $i1 ]	[exit: r1 i0 r0 ]
r0[0] = 0...............................	[entry: r1 i0 r0 ]	[exit: r0 r1 i0 ]
i10 = 1.................................	[entry: r0 r1 i0 ]	[exit: r0 r1 i10 i0 ]
if i10 > i0 goto i11 = 1................	[entry: r0 r1 i10 i0 ]	[exit: r0 r1 i0 i10 ]
r0[i10] = 2147483647....................	[entry: r1 i0 r0 i10 ]	[exit: r0 r1 i0 i10 ]
i10 = i10 + 1...........................	[entry: r0 r1 i0 i10 ]	[exit: r0 r1 i10 i0 ]
goto [?= (branch)]......................	[entry: r0 r1 i10 i0 ]	[exit: r0 r1 i10 i0 ]
i11 = 1.................................	[entry: r0 r1 i0 ]	[exit: r0 r1 i11 i0 ]
if i11 > i0 goto $i2 = r0[i0]...........	[entry: r0 r1 i11 i0 ]	[exit: r0 i0 i11 r1 ]
r2 = r1.................................	[entry: r0 i0 i11 r1 ]	[exit: r0 r1 i0 i11 r2 ]
i3 = lengthof r2........................	[entry: r0 r1 i0 i11 r2 ]	[exit: r0 r1 i0 i11 r2 i3 ]
i12 = 0.................................	[entry: r0 r1 i0 i11 r2 i3 ]	[exit: r0 r1 i0 i11 r2 i12 i3 ]
if i12 >= i3 goto i11 = i11 + 1.........	[entry: r0 r1 i0 i11 r2 i12 i3 ]	[exit: r0 r1 i0 i11 i3 r2 i12 ]
i4 = r2[i12]............................	[entry: r0 r1 i0 i3 i11 r2 i12 ]	[exit: r0 r1 i0 r2 i3 i12 i4 i11 ]
if i4 > i11 goto i12 = i12 + 1..........	[entry: r0 r1 i0 r2 i3 i12 i4 i11 ]	[exit: r0 r1 i0 i11 r2 i3 i12 i4 ]
$i5 = i11 - i4..........................	[entry: r1 i0 r2 i3 i12 r0 i11 i4 ]	[exit: r1 i0 i11 r2 i3 i12 r0 $i5 ]
i6 = r0[$i5]............................	[entry: r1 i0 i11 r2 i3 i12 r0 $i5 ]	[exit: r0 r1 i0 i11 r2 i3 i12 i6 ]
if i6 == 2147483647 goto i12 = i12 + 1..	[entry: r0 r1 i0 i11 r2 i3 i12 i6 ]	[exit: r0 r1 i0 i11 r2 i3 i12 i6 ]
$i8 = i6 + 1............................	[entry: r1 i0 r2 i3 i12 r0 i11 i6 ]	[exit: r1 i0 r2 i3 i12 i6 $i8 r0 i11 ]
$i7 = r0[i11]...........................	[entry: r1 i0 r2 i3 i12 i6 $i8 r0 i11 ]	[exit: r0 r1 i0 i11 r2 i3 i12 i6 $i8 $i7 ]
if $i8 >= $i7 goto i12 = i12 + 1........	[entry: r0 r1 i0 i11 r2 i3 i12 i6 $i8 $i7 ]	[exit: r0 r1 i0 i11 r2 i3 i12 i6 ]
$i9 = i6 + 1............................	[entry: r1 i0 r2 i3 i12 r0 i11 i6 ]	[exit: r1 i0 r2 i3 i12 r0 i11 $i9 ]
r0[i11] = $i9...........................	[entry: r1 i0 r2 i3 i12 r0 i11 $i9 ]	[exit: r0 r1 i0 i11 r2 i3 i12 ]
i12 = i12 + 1...........................	[entry: r0 r1 i0 i11 r2 i3 i12 ]	[exit: r0 r1 i0 i11 r2 i12 i3 ]
goto [?= (branch)]......................	[entry: r0 r1 i0 i11 r2 i12 i3 ]	[exit: r0 r1 i0 i11 r2 i12 i3 ]
i11 = i11 + 1...........................	[entry: r0 r1 i0 i11 ]	[exit: r0 r1 i11 i0 ]
goto [?= (branch)]......................	[entry: r0 r1 i11 i0 ]	[exit: r0 r1 i11 i0 ]
$i2 = r0[i0]............................	[entry: r0 i0 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: test.LongestPalindromicSubsequence, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = "BBABCBCAB"........................	[entry: ]	[exit: r0 ]
r1 = "BABCBAB"..........................	[entry: r0 ]	[exit: r1 r0 ]
r2 = staticinvoke <test.LongestPalindromicSubsequence: java.lang.String LPS(java.lang.String)>(r0)	[entry: r1 r0 ]	[exit: r2 r0 r1 ]
r3 = staticinvoke <test.LongestPalindromicSubsequence: java.lang.String LPS(java.lang.String)>(r1)	[entry: r2 r0 r1 ]	[exit: r3 r1 r2 r0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r1 r2 r0 ]	[exit: r3 r1 $r5 r2 r0 ]
$r4 = new java.lang.StringBuilder.......	[entry: r3 r1 $r5 r2 r0 ]	[exit: r3 r1 $r5 r2 r0 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r3 r1 $r5 r2 r0 $r4 ]	[exit: r3 r1 $r5 r2 r0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: r3 r1 $r5 r2 r0 $r4 ]	[exit: r3 r1 $r5 r2 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ")	[entry: r3 r1 $r5 r2 $r6 ]	[exit: r3 r1 $r5 r2 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)	[entry: r3 r1 $r5 r2 $r7 ]	[exit: r3 r1 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 r1 $r5 $r8 ]	[exit: r3 r1 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r3 r1 $r9 $r5 ]	[exit: r3 r1 ]
$r11 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r1 ]	[exit: $r11 r3 r1 ]
$r10 = new java.lang.StringBuilder......	[entry: $r11 r3 r1 ]	[exit: $r11 r3 r1 $r10 ]
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()	[entry: $r11 r3 r1 $r10 ]	[exit: $r11 r3 r1 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: $r11 r3 r1 $r10 ]	[exit: $r11 r3 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" => ")	[entry: $r11 r3 $r12 ]	[exit: $r11 r3 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)	[entry: $r11 r3 $r13 ]	[exit: $r11 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r11 $r14 ]	[exit: $r15 $r11 ]
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: $r15 $r11 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: test.LongestPalindromicSubsequence, Method Name: LPS, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
$r0 = new java.lang.StringBuilder.......	[entry: r1 ]	[exit: r1 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1)	[entry: r1 $r0 ]	[exit: r1 $r0 ]
r4 = $r0................................	[entry: r1 $r0 ]	[exit: r1 r4 ]
r5 = virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r1 r4 ]	[exit: r1 r5 ]
$r2 = virtualinvoke r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r5 ]	[exit: r1 $r2 ]
$r3 = staticinvoke <test.LongestPalindromicSubsequence: java.lang.String recursiveLPS(java.lang.String,java.lang.String)>(r1, $r2)	[entry: r1 $r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: strings.Alphabetical, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z9 = staticinvoke <strings.Alphabetical: boolean isAlphabetical(java.lang.String)>("123abc")	[entry: ]	[exit: $z9 ]
if $z9 == 0 goto $z1 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z8 = staticinvoke <strings.Alphabetical: boolean isAlphabetical(java.lang.String)>("aBC")	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto $z2 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z7 = staticinvoke <strings.Alphabetical: boolean isAlphabetical(java.lang.String)>("abc")	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z3 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z6 = staticinvoke <strings.Alphabetical: boolean isAlphabetical(java.lang.String)>("xyzabc")	[entry: ]	[exit: $z6 ]
if $z6 == 0 goto $z4 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <strings.Alphabetical: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$z5 = staticinvoke <strings.Alphabetical: boolean isAlphabetical(java.lang.String)>("abcxyz")	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Alphabetical, Method Name: isAlphabetical, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r0 ]	[exit: r1 ]
i6 = 0..................................	[entry: r1 ]	[exit: i6 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: i6 r1 ]	[exit: r1 i6 $i0 ]
$i1 = $i0 - 1...........................	[entry: r1 i6 $i0 ]	[exit: r1 i6 $i1 ]
if i6 >= $i1 goto return 1..............	[entry: r1 i6 $i1 ]	[exit: i6 r1 ]
$c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6)	[entry: i6 r1 ]	[exit: i6 r1 $c2 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c2)	[entry: i6 r1 $c2 ]	[exit: i6 r1 $z0 ]
if $z0 == 0 goto return 0...............	[entry: i6 r1 $z0 ]	[exit: i6 r1 ]
$c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i6)	[entry: i6 r1 ]	[exit: $c3 r1 i6 ]
$i4 = i6 + 1............................	[entry: $c3 r1 i6 ]	[exit: i6 $c3 $i4 r1 ]
$c5 = virtualinvoke r1.<java.lang.String: char charAt(int)>($i4)	[entry: i6 $c3 $i4 r1 ]	[exit: r1 i6 $c3 $c5 ]
if $c3 <= $c5 goto i6 = i6 + 1..........	[entry: r1 i6 $c3 $c5 ]	[exit: r1 i6 ]
return 0................................	[entry: ]	[exit: ]
i6 = i6 + 1.............................	[entry: r1 i6 ]	[exit: i6 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: i6 r1 ]	[exit: i6 r1 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: strings.Upper, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (java.lang.String)[4]....	[entry: ]	[exit: $r0 ]
$r0[0] = "ABC"..........................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = "ABC123".......................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = "abcABC".......................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = "abc123ABC"....................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r2 = r1.................................	[entry: r1 ]	[exit: r2 ]
i0 = lengthof r2........................	[entry: r2 ]	[exit: r2 i0 ]
i1 = 0..................................	[entry: r2 i0 ]	[exit: r2 i1 i0 ]
if i1 >= i0 goto return.................	[entry: r2 i1 i0 ]	[exit: i0 r2 i1 ]
r3 = r2[i1].............................	[entry: i0 r2 i1 ]	[exit: r2 i0 i1 r3 ]
$z0 = <strings.Upper: boolean $assertionsDisabled>	[entry: r2 i0 i1 r3 ]	[exit: r2 i0 i1 r3 $z0 ]
if $z0 != 0 goto i1 = i1 + 1............	[entry: r2 i0 i1 r3 $z0 ]	[exit: r2 i0 i1 r3 ]
$r4 = staticinvoke <strings.Upper: java.lang.String toUpperCase(java.lang.String)>(r3)	[entry: r2 i0 i1 r3 ]	[exit: r2 i0 i1 $r4 r3 ]
$r5 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r2 i0 i1 $r4 r3 ]	[exit: r2 i0 i1 $r5 $r4 ]
$z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)	[entry: r2 i0 i1 $r5 $r4 ]	[exit: r2 i0 i1 $z1 ]
if $z1 != 0 goto i1 = i1 + 1............	[entry: r2 i0 i1 $z1 ]	[exit: r2 i0 i1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
i1 = i1 + 1.............................	[entry: r2 i0 i1 ]	[exit: r2 i1 i0 ]
goto [?= (branch)]......................	[entry: r2 i1 i0 ]	[exit: r2 i1 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Upper, Method Name: toUpperCase, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 ]	[exit: r1 ]
i5 = 0..................................	[entry: r1 ]	[exit: i5 r1 ]
$i0 = lengthof r1.......................	[entry: i5 r1 ]	[exit: r1 i5 $i0 ]
if i5 >= $i0 goto $r2 = new java.lang.String	[entry: r1 i5 $i0 ]	[exit: r1 i5 ]
$c1 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c1 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1)	[entry: r1 i5 $c1 ]	[exit: r1 i5 $z0 ]
if $z0 == 0 goto i5 = i5 + 1............	[entry: r1 i5 $z0 ]	[exit: r1 i5 ]
$c2 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c2 ]
$z1 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>($c2)	[entry: r1 i5 $c2 ]	[exit: r1 i5 $z1 ]
if $z1 == 0 goto i5 = i5 + 1............	[entry: r1 i5 $z1 ]	[exit: r1 i5 ]
$c3 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c3 ]
$c4 = staticinvoke <java.lang.Character: char toUpperCase(char)>($c3)	[entry: r1 i5 $c3 ]	[exit: r1 i5 $c4 ]
r1[i5] = $c4............................	[entry: r1 i5 $c4 ]	[exit: r1 i5 ]
i5 = i5 + 1.............................	[entry: r1 i5 ]	[exit: i5 r1 ]
goto [?= $i0 = lengthof r1].............	[entry: i5 r1 ]	[exit: i5 r1 ]
$r2 = new java.lang.String..............	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1)	[entry: r1 $r2 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: strings.CheckAnagrams, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z5 = staticinvoke <strings.CheckAnagrams: boolean isAnagrams(java.lang.String,java.lang.String)>("Silent", "Listen")	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z1 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z1 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z4 = staticinvoke <strings.CheckAnagrams: boolean isAnagrams(java.lang.String,java.lang.String)>("This is a string", "Is this a string")	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z2 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z2 = <strings.CheckAnagrams: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$z3 = staticinvoke <strings.CheckAnagrams: boolean isAnagrams(java.lang.String,java.lang.String)>("There", "Their")	[entry: ]	[exit: $z3 ]
if $z3 == 0 goto return.................	[entry: $z3 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.CheckAnagrams, Method Name: isAnagrams, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String.....	[entry: ]	[exit: r4 ]
r5 := @parameter1: java.lang.String.....	[entry: r4 ]	[exit: r5 r4 ]
r6 = virtualinvoke r4.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r5 r4 ]	[exit: r6 r5 ]
r7 = virtualinvoke r5.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r6 r5 ]	[exit: r7 r6 ]
r0 = virtualinvoke r6.<java.lang.String: char[] toCharArray()>()	[entry: r7 r6 ]	[exit: r0 r7 ]
r1 = virtualinvoke r7.<java.lang.String: char[] toCharArray()>()	[entry: r0 r7 ]	[exit: r1 r0 ]
staticinvoke <java.util.Arrays: void sort(char[])>(r0)	[entry: r1 r0 ]	[exit: r0 r1 ]
staticinvoke <java.util.Arrays: void sort(char[])>(r1)	[entry: r0 r1 ]	[exit: r1 r0 ]
$r2 = new java.lang.String..............	[entry: r1 r0 ]	[exit: r1 r0 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r0)	[entry: r1 r0 $r2 ]	[exit: $r2 r1 ]
$r3 = new java.lang.String..............	[entry: $r2 r1 ]	[exit: $r2 r1 $r3 ]
specialinvoke $r3.<java.lang.String: void <init>(char[])>(r1)	[entry: $r2 r1 $r3 ]	[exit: $r3 $r2 ]
$z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3)	[entry: $r3 $r2 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: strings.Palindrome, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (java.lang.String)[4]....	[entry: ]	[exit: $r0 ]
$r0[0] = null...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = "".............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = "aba"..........................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = "123321".......................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r5 = r1.................................	[entry: r1 ]	[exit: r5 ]
i0 = lengthof r5........................	[entry: r5 ]	[exit: r5 i0 ]
i1 = 0..................................	[entry: r5 i0 ]	[exit: r5 i1 i0 ]
if i1 >= i0 goto $r2 = newarray (java.lang.String)[3]	[entry: r5 i1 i0 ]	[exit: i0 r5 i1 ]
r6 = r5[i1].............................	[entry: i0 r5 i1 ]	[exit: r6 r5 i0 i1 ]
$z4 = <strings.Palindrome: boolean $assertionsDisabled>	[entry: r6 r5 i0 i1 ]	[exit: r6 r5 i0 i1 $z4 ]
if $z4 != 0 goto i1 = i1 + 1............	[entry: r6 r5 i0 i1 $z4 ]	[exit: r5 i0 i1 r6 ]
$z5 = staticinvoke <strings.Palindrome: boolean isPalindrome(java.lang.String)>(r6)	[entry: r5 i0 i1 r6 ]	[exit: r5 i0 i1 r6 $z5 ]
if $z5 == 0 goto $r7 = new java.lang.AssertionError	[entry: r5 i0 i1 r6 $z5 ]	[exit: r5 i0 i1 r6 ]
$z6 = staticinvoke <strings.Palindrome: boolean isPalindromeRecursion(java.lang.String)>(r6)	[entry: r5 i0 i1 r6 ]	[exit: r5 i0 i1 r6 $z6 ]
if $z6 == 0 goto $r7 = new java.lang.AssertionError	[entry: r5 i0 i1 r6 $z6 ]	[exit: r5 i0 i1 r6 ]
$z7 = staticinvoke <strings.Palindrome: boolean isPalindrome1(java.lang.String)>(r6)	[entry: r5 i0 i1 r6 ]	[exit: r5 i0 i1 $z7 ]
if $z7 != 0 goto i1 = i1 + 1............	[entry: r5 i0 i1 $z7 ]	[exit: r5 i0 i1 ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
i1 = i1 + 1.............................	[entry: r5 i0 i1 ]	[exit: r5 i1 i0 ]
goto [?= (branch)]......................	[entry: r5 i1 i0 ]	[exit: r5 i1 i0 ]
$r2 = newarray (java.lang.String)[3]....	[entry: ]	[exit: $r2 ]
$r2[0] = "abb"..........................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = "abc"..........................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = "abc123".......................	[entry: $r2 ]	[exit: $r2 ]
r8 = $r2................................	[entry: $r2 ]	[exit: r8 ]
r9 = r8.................................	[entry: r8 ]	[exit: r9 ]
i2 = lengthof r9........................	[entry: r9 ]	[exit: r9 i2 ]
i3 = 0..................................	[entry: r9 i2 ]	[exit: r9 i3 i2 ]
if i3 >= i2 goto return.................	[entry: r9 i3 i2 ]	[exit: i2 r9 i3 ]
r3 = r9[i3].............................	[entry: i2 r9 i3 ]	[exit: r3 r9 i2 i3 ]
$z0 = <strings.Palindrome: boolean $assertionsDisabled>	[entry: r3 r9 i2 i3 ]	[exit: r3 r9 i2 i3 $z0 ]
if $z0 != 0 goto i3 = i3 + 1............	[entry: r3 r9 i2 i3 $z0 ]	[exit: r9 i2 i3 r3 ]
$z1 = staticinvoke <strings.Palindrome: boolean isPalindrome(java.lang.String)>(r3)	[entry: r9 i2 i3 r3 ]	[exit: r9 i2 i3 r3 $z1 ]
if $z1 != 0 goto $r10 = new java.lang.AssertionError	[entry: r9 i2 i3 r3 $z1 ]	[exit: r9 i2 i3 r3 ]
$z2 = staticinvoke <strings.Palindrome: boolean isPalindromeRecursion(java.lang.String)>(r3)	[entry: r9 i2 i3 r3 ]	[exit: r9 i2 i3 r3 $z2 ]
if $z2 != 0 goto $r10 = new java.lang.AssertionError	[entry: r9 i2 i3 r3 $z2 ]	[exit: r9 i2 i3 r3 ]
$z3 = staticinvoke <strings.Palindrome: boolean isPalindrome1(java.lang.String)>(r3)	[entry: r9 i2 i3 r3 ]	[exit: r9 i2 i3 $z3 ]
if $z3 == 0 goto i3 = i3 + 1............	[entry: r9 i2 i3 $z3 ]	[exit: r9 i2 i3 ]
$r10 = new java.lang.AssertionError.....	[entry: ]	[exit: $r10 ]
specialinvoke $r10.<java.lang.AssertionError: void <init>()>()	[entry: $r10 ]	[exit: $r10 ]
throw $r10..............................	[entry: $r10 ]	[exit: ]
i3 = i3 + 1.............................	[entry: r9 i2 i3 ]	[exit: r9 i3 i2 ]
goto [?= (branch)]......................	[entry: r9 i3 i2 ]	[exit: r9 i3 i2 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Palindrome, Method Name: isPalindrome, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto $z1 = 1..............	[entry: r0 ]	[exit: r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 <= 1 goto $z1 = 1................	[entry: r0 $i0 ]	[exit: r0 ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>(r0)	[entry: r0 $r1 ]	[exit: r0 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r0 $r1 ]	[exit: r0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 $r2 ]	[exit: $r3 r0 ]
$z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>($r3)	[entry: $r3 r0 ]	[exit: $z0 ]
if $z0 == 0 goto $z1 = 0................	[entry: $z0 ]	[exit: ]
$z1 = 1.................................	[entry: ]	[exit: $z1 ]
goto [?= return $z1]....................	[entry: $z1 ]	[exit: $z1 ]
$z1 = 0.................................	[entry: ]	[exit: $z1 ]
return $z1..............................	[entry: $z1 ]	[exit: ]
********************
Class Name: strings.Palindrome, Method Name: isPalindromeRecursion, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto return 1.............	[entry: r0 ]	[exit: r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 > 1 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: r0 $i0 ]	[exit: r0 ]
return 1................................	[entry: ]	[exit: ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: r0 ]	[exit: $c1 r0 ]
$i2 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: $c1 r0 ]	[exit: $c1 r0 $i2 ]
$i3 = $i2 - 1...........................	[entry: $c1 r0 $i2 ]	[exit: $c1 $i3 r0 ]
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i3)	[entry: $c1 $i3 r0 ]	[exit: r0 $c1 $c4 ]
if $c1 == $c4 goto $i5 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 $c1 $c4 ]	[exit: r0 ]
return 0................................	[entry: ]	[exit: ]
$i5 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i5 ]
$i6 = $i5 - 1...........................	[entry: r0 $i5 ]	[exit: $i6 r0 ]
$r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(1, $i6)	[entry: $i6 r0 ]	[exit: $r1 ]
$z0 = staticinvoke <strings.Palindrome: boolean isPalindrome(java.lang.String)>($r1)	[entry: $r1 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: strings.Palindrome, Method Name: isPalindrome1, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto return 1.............	[entry: r0 ]	[exit: r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 > 1 goto i4 = 0..................	[entry: r0 $i0 ]	[exit: r0 ]
return 1................................	[entry: ]	[exit: ]
i4 = 0..................................	[entry: r0 ]	[exit: i4 r0 ]
$i1 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i4 r0 ]	[exit: r0 i4 $i1 ]
i5 = $i1 - 1............................	[entry: r0 i4 $i1 ]	[exit: r0 i4 i5 ]
if i4 >= i5 goto return 1...............	[entry: r0 i4 i5 ]	[exit: i5 i4 r0 ]
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4)	[entry: i5 i4 r0 ]	[exit: i4 $c2 i5 r0 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i5)	[entry: i4 $c2 i5 r0 ]	[exit: r0 i5 i4 $c2 $c3 ]
if $c2 == $c3 goto i4 = i4 + 1..........	[entry: r0 i5 i4 $c2 $c3 ]	[exit: r0 i5 i4 ]
return 0................................	[entry: ]	[exit: ]
i4 = i4 + 1.............................	[entry: r0 i5 i4 ]	[exit: r0 i4 i5 ]
i5 = i5 + -1............................	[entry: r0 i4 i5 ]	[exit: r0 i4 i5 ]
goto [?= (branch)]......................	[entry: r0 i4 i5 ]	[exit: r0 i4 i5 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: strings.ReverseString, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.ReverseString: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <strings.ReverseString: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r2 = staticinvoke <strings.ReverseString: java.lang.String reverse(java.lang.String)>("abc123")	[entry: ]	[exit: $r2 ]
$z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("321cba")	[entry: $r2 ]	[exit: $z3 ]
if $z3 != 0 goto $z1 = <strings.ReverseString: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <strings.ReverseString: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto return.................	[entry: $z1 ]	[exit: ]
$r0 = staticinvoke <strings.ReverseString: java.lang.String reverse2(java.lang.String)>("abc123")	[entry: ]	[exit: $r0 ]
$z2 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("321cba")	[entry: $r0 ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.ReverseString, Method Name: reverse, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
$r0 = new java.lang.StringBuilder.......	[entry: r1 ]	[exit: r1 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>(java.lang.String)>(r1)	[entry: r1 $r0 ]	[exit: $r0 ]
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: $r0 ]	[exit: $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: strings.ReverseString, Method Name: reverse2, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto return r0............	[entry: r0 ]	[exit: r0 ]
$z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 $z0 ]	[exit: r0 ]
return r0...............................	[entry: r0 ]	[exit: ]
r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 ]	[exit: r1 r0 ]
i3 = 0..................................	[entry: r1 r0 ]	[exit: r1 i3 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r1 i3 r0 ]	[exit: r1 i3 $i0 ]
i4 = $i0 - 1............................	[entry: r1 i3 $i0 ]	[exit: r1 i3 i4 ]
if i3 >= i4 goto $r2 = new java.lang.String	[entry: r1 i3 i4 ]	[exit: r1 i4 i3 ]
c1 = r1[i3].............................	[entry: i4 r1 i3 ]	[exit: c1 i3 r1 i4 ]
$c2 = r1[i4]............................	[entry: c1 i3 r1 i4 ]	[exit: i4 c1 r1 i3 $c2 ]
r1[i3] = $c2............................	[entry: i4 c1 r1 i3 $c2 ]	[exit: i3 r1 i4 c1 ]
r1[i4] = c1.............................	[entry: i3 r1 i4 c1 ]	[exit: r1 i4 i3 ]
i3 = i3 + 1.............................	[entry: r1 i4 i3 ]	[exit: r1 i3 i4 ]
i4 = i4 + -1............................	[entry: r1 i3 i4 ]	[exit: r1 i3 i4 ]
goto [?= (branch)]......................	[entry: r1 i3 i4 ]	[exit: r1 i3 i4 ]
$r2 = new java.lang.String..............	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1)	[entry: r1 $r2 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: strings.Pangram, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.Pangram: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <strings.Pangram: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z3 = staticinvoke <strings.Pangram: boolean isPangram(java.lang.String)>("The quick brown fox jumps over the lazy dog")	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z1 = <strings.Pangram: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z1 = <strings.Pangram: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto return.................	[entry: $z1 ]	[exit: ]
$z2 = staticinvoke <strings.Pangram: boolean isPangram(java.lang.String)>("The quick brown fox jumps over the azy dog")	[entry: ]	[exit: $z2 ]
if $z2 == 0 goto return.................	[entry: $z2 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Pangram, Method Name: isPangram, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
r0 = newarray (boolean)[26].............	[entry: r1 ]	[exit: r0 r1 ]
r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()	[entry: r0 r1 ]	[exit: r0 r2 ]
r3 = r2.................................	[entry: r0 r2 ]	[exit: r0 r3 ]
i1 = lengthof r3........................	[entry: r0 r3 ]	[exit: r0 r3 i1 ]
i2 = 0..................................	[entry: r0 r3 i1 ]	[exit: r0 r3 i2 i1 ]
if i2 >= i1 goto r4 = r0................	[entry: r0 r3 i2 i1 ]	[exit: r0 i1 r3 i2 ]
c3 = r3[i2].............................	[entry: r0 i1 r3 i2 ]	[exit: r0 r3 i1 i2 c3 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>(c3)	[entry: r0 r3 i1 i2 c3 ]	[exit: r0 r3 i1 i2 c3 $z0 ]
if $z0 == 0 goto i2 = i2 + 1............	[entry: r0 r3 i1 i2 c3 $z0 ]	[exit: r0 r3 i1 i2 c3 ]
$z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c3)	[entry: r3 i1 i2 r0 c3 ]	[exit: r3 i1 i2 r0 c3 $z1 ]
if $z1 == 0 goto $i4 = c3 - 97..........	[entry: r3 i1 i2 r0 c3 $z1 ]	[exit: r3 i1 i2 r0 c3 ]
$i4 = c3 - 65...........................	[entry: r3 i1 i2 r0 c3 ]	[exit: r3 i1 i2 r0 $i4 ]
goto [?= i0 = $i4]......................	[entry: r3 i1 i2 r0 $i4 ]	[exit: r3 i1 i2 r0 $i4 ]
$i4 = c3 - 97...........................	[entry: r3 i1 i2 r0 c3 ]	[exit: r3 i1 i2 r0 $i4 ]
i0 = $i4................................	[entry: r3 i1 i2 r0 $i4 ]	[exit: r3 i1 i2 r0 i0 ]
r0[i0] = 1..............................	[entry: r3 i1 i2 r0 i0 ]	[exit: r0 r3 i1 i2 ]
i2 = i2 + 1.............................	[entry: r0 r3 i1 i2 ]	[exit: r0 r3 i2 i1 ]
goto [?= (branch)]......................	[entry: r0 r3 i2 i1 ]	[exit: r0 r3 i2 i1 ]
r4 = r0.................................	[entry: r0 ]	[exit: r4 ]
i5 = lengthof r4........................	[entry: r4 ]	[exit: r4 i5 ]
i6 = 0..................................	[entry: r4 i5 ]	[exit: r4 i6 i5 ]
if i6 >= i5 goto return 1...............	[entry: r4 i6 i5 ]	[exit: i5 r4 i6 ]
z2 = r4[i6].............................	[entry: i5 r4 i6 ]	[exit: r4 i5 i6 z2 ]
if z2 != 0 goto i6 = i6 + 1.............	[entry: r4 i5 i6 z2 ]	[exit: r4 i5 i6 ]
return 0................................	[entry: ]	[exit: ]
i6 = i6 + 1.............................	[entry: r4 i5 i6 ]	[exit: r4 i6 i5 ]
goto [?= (branch)]......................	[entry: r4 i6 i5 ]	[exit: r4 i6 i5 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: strings.Lower, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (java.lang.String)[4]....	[entry: ]	[exit: $r0 ]
$r0[0] = "ABC"..........................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = "ABC123".......................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = "abcABC".......................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = "abc123ABC"....................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r2 = r1.................................	[entry: r1 ]	[exit: r2 ]
i0 = lengthof r2........................	[entry: r2 ]	[exit: r2 i0 ]
i1 = 0..................................	[entry: r2 i0 ]	[exit: r2 i1 i0 ]
if i1 >= i0 goto return.................	[entry: r2 i1 i0 ]	[exit: i0 r2 i1 ]
r3 = r2[i1].............................	[entry: i0 r2 i1 ]	[exit: r2 i0 i1 r3 ]
$z0 = <strings.Lower: boolean $assertionsDisabled>	[entry: r2 i0 i1 r3 ]	[exit: r2 i0 i1 r3 $z0 ]
if $z0 != 0 goto i1 = i1 + 1............	[entry: r2 i0 i1 r3 $z0 ]	[exit: r2 i0 i1 r3 ]
$r4 = staticinvoke <strings.Lower: java.lang.String toLowerCase(java.lang.String)>(r3)	[entry: r2 i0 i1 r3 ]	[exit: r2 i0 i1 $r4 r3 ]
$r5 = virtualinvoke r3.<java.lang.String: java.lang.String toLowerCase()>()	[entry: r2 i0 i1 $r4 r3 ]	[exit: r2 i0 i1 $r5 $r4 ]
$z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r5)	[entry: r2 i0 i1 $r5 $r4 ]	[exit: r2 i0 i1 $z1 ]
if $z1 != 0 goto i1 = i1 + 1............	[entry: r2 i0 i1 $z1 ]	[exit: r2 i0 i1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
i1 = i1 + 1.............................	[entry: r2 i0 i1 ]	[exit: r2 i1 i0 ]
goto [?= (branch)]......................	[entry: r2 i1 i0 ]	[exit: r2 i1 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Lower, Method Name: toLowerCase, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r0 ]	[exit: r1 ]
i5 = 0..................................	[entry: r1 ]	[exit: i5 r1 ]
$i0 = lengthof r1.......................	[entry: i5 r1 ]	[exit: r1 i5 $i0 ]
if i5 >= $i0 goto $r2 = new java.lang.String	[entry: r1 i5 $i0 ]	[exit: r1 i5 ]
$c1 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c1 ]
$z0 = staticinvoke <java.lang.Character: boolean isLetter(char)>($c1)	[entry: r1 i5 $c1 ]	[exit: r1 i5 $z0 ]
if $z0 == 0 goto i5 = i5 + 1............	[entry: r1 i5 $z0 ]	[exit: r1 i5 ]
$c2 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c2 ]
$z1 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>($c2)	[entry: r1 i5 $c2 ]	[exit: r1 i5 $z1 ]
if $z1 == 0 goto i5 = i5 + 1............	[entry: r1 i5 $z1 ]	[exit: r1 i5 ]
$c3 = r1[i5]............................	[entry: r1 i5 ]	[exit: r1 i5 $c3 ]
$c4 = staticinvoke <java.lang.Character: char toLowerCase(char)>($c3)	[entry: r1 i5 $c3 ]	[exit: r1 i5 $c4 ]
r1[i5] = $c4............................	[entry: r1 i5 $c4 ]	[exit: r1 i5 ]
i5 = i5 + 1.............................	[entry: r1 i5 ]	[exit: i5 r1 ]
goto [?= $i0 = lengthof r1].............	[entry: i5 r1 ]	[exit: i5 r1 ]
$r2 = new java.lang.String..............	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1)	[entry: r1 $r2 ]	[exit: $r2 ]
return $r2..............................	[entry: $r2 ]	[exit: ]
********************
Class Name: strings.CharactersSame, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z7 = staticinvoke <strings.CharactersSame: boolean isAllCharactersSame(java.lang.String)>("")	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z1 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z6 = staticinvoke <strings.CharactersSame: boolean isAllCharactersSame(java.lang.String)>("aab")	[entry: ]	[exit: $z6 ]
if $z6 == 0 goto $z2 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z5 = staticinvoke <strings.CharactersSame: boolean isAllCharactersSame(java.lang.String)>("aaa")	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z3 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <strings.CharactersSame: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$z4 = staticinvoke <strings.CharactersSame: boolean isAllCharactersSame(java.lang.String)>("11111")	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.CharactersSame, Method Name: isAllCharactersSame, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i3 = 1..................................	[entry: r0 ]	[exit: i3 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i3 r0 ]	[exit: r0 i3 i0 ]
if i3 >= i0 goto return 1...............	[entry: r0 i3 i0 ]	[exit: i0 i3 r0 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3)	[entry: i0 i3 r0 ]	[exit: i0 i3 $c1 r0 ]
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: i0 i3 $c1 r0 ]	[exit: r0 i0 i3 $c1 $c2 ]
if $c1 == $c2 goto i3 = i3 + 1..........	[entry: r0 i0 i3 $c1 $c2 ]	[exit: r0 i0 i3 ]
return 0................................	[entry: ]	[exit: ]
i3 = i3 + 1.............................	[entry: r0 i0 i3 ]	[exit: r0 i3 i0 ]
goto [?= (branch)]......................	[entry: r0 i3 i0 ]	[exit: r0 i3 i0 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: strings.Rotation, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <strings.Rotation: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $r0 = "abcdef".........	[entry: $z0 ]	[exit: ]
$r4 = staticinvoke <strings.Rotation: java.lang.String rotation(java.lang.String,int)>("abcdef", 2)	[entry: ]	[exit: $r4 ]
$z3 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("cdefab")	[entry: $r4 ]	[exit: $z3 ]
if $z3 != 0 goto $r0 = "abcdef".........	[entry: $z3 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$r0 = "abcdef"..........................	[entry: ]	[exit: $r0 ]
r1 = virtualinvoke $r0.<java.lang.String: char[] toCharArray()>()	[entry: $r0 ]	[exit: r1 ]
staticinvoke <strings.Rotation: void rotation(char[],int)>(r1, 2)	[entry: r1 ]	[exit: r1 ]
$z1 = <strings.Rotation: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto return.................	[entry: r1 $z1 ]	[exit: r1 ]
$r2 = new java.lang.String..............	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.lang.String: void <init>(char[])>(r1)	[entry: r1 $r2 ]	[exit: $r2 ]
$z2 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("cdefab")	[entry: $r2 ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: strings.Rotation, Method Name: reverse, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: char[]...............	[entry: ]	[exit: r0 ]
i2 := @parameter1: int..................	[entry: r0 ]	[exit: r0 i2 ]
i3 := @parameter2: int..................	[entry: r0 i2 ]	[exit: r0 i2 i3 ]
if i2 >= i3 goto return.................	[entry: r0 i2 i3 ]	[exit: i3 r0 i2 ]
c0 = r0[i2].............................	[entry: i3 r0 i2 ]	[exit: c0 i2 r0 i3 ]
$c1 = r0[i3]............................	[entry: c0 i2 r0 i3 ]	[exit: i3 c0 r0 i2 $c1 ]
r0[i2] = $c1............................	[entry: i3 c0 r0 i2 $c1 ]	[exit: i2 r0 i3 c0 ]
r0[i3] = c0.............................	[entry: i2 r0 i3 c0 ]	[exit: r0 i3 i2 ]
i2 = i2 + 1.............................	[entry: r0 i3 i2 ]	[exit: r0 i2 i3 ]
i3 = i3 + -1............................	[entry: r0 i2 i3 ]	[exit: r0 i2 i3 ]
goto [?= (branch)]......................	[entry: r0 i2 i3 ]	[exit: r0 i2 i3 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BucketSort, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
r0 = newarray (int)[10].................	[entry: ]	[exit: r0 ]
$r1 = new java.util.Random..............	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.util.Random: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
i8 = 0..................................	[entry: r2 r0 ]	[exit: r2 i8 r0 ]
$i0 = lengthof r0.......................	[entry: r2 i8 r0 ]	[exit: r0 r2 i8 $i0 ]
if i8 >= $i0 goto staticinvoke <Sorts.BucketSort: void bucketSort(int[])>(r0)	[entry: r0 r2 i8 $i0 ]	[exit: r0 i8 r2 ]
$i6 = virtualinvoke r2.<java.util.Random: int nextInt(int)>(100)	[entry: r0 i8 r2 ]	[exit: r2 r0 i8 $i6 ]
$i7 = $i6 - 50..........................	[entry: r2 r0 i8 $i6 ]	[exit: r2 r0 i8 $i7 ]
r0[i8] = $i7............................	[entry: r2 r0 i8 $i7 ]	[exit: r2 r0 i8 ]
i8 = i8 + 1.............................	[entry: r2 r0 i8 ]	[exit: r2 i8 r0 ]
goto [?= $i0 = lengthof r0].............	[entry: r2 i8 r0 ]	[exit: r2 i8 r0 ]
staticinvoke <Sorts.BucketSort: void bucketSort(int[])>(r0)	[entry: r0 ]	[exit: r0 ]
i9 = 0..................................	[entry: r0 ]	[exit: i9 r0 ]
$i1 = lengthof r0.......................	[entry: i9 r0 ]	[exit: r0 i9 $i1 ]
i2 = $i1 - 1............................	[entry: r0 i9 $i1 ]	[exit: r0 i9 i2 ]
if i9 >= i2 goto return.................	[entry: r0 i9 i2 ]	[exit: i2 r0 i9 ]
$z0 = <Sorts.BucketSort: boolean $assertionsDisabled>	[entry: i2 r0 i9 ]	[exit: i2 r0 i9 $z0 ]
if $z0 != 0 goto i9 = i9 + 1............	[entry: i2 r0 i9 $z0 ]	[exit: i2 r0 i9 ]
$i5 = r0[i9]............................	[entry: i2 r0 i9 ]	[exit: i2 $i5 r0 i9 ]
$i3 = i9 + 1............................	[entry: i2 $i5 r0 i9 ]	[exit: i2 i9 $i5 r0 $i3 ]
$i4 = r0[$i3]...........................	[entry: i2 i9 $i5 r0 $i3 ]	[exit: r0 i2 i9 $i5 $i4 ]
if $i5 <= $i4 goto i9 = i9 + 1..........	[entry: r0 i2 i9 $i5 $i4 ]	[exit: r0 i2 i9 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
i9 = i9 + 1.............................	[entry: r0 i2 i9 ]	[exit: r0 i9 i2 ]
goto [?= (branch)]......................	[entry: r0 i9 i2 ]	[exit: r0 i9 i2 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BucketSort, Method Name: max, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i2 = r0[0]..............................	[entry: r0 ]	[exit: i2 r0 ]
r1 = r0.................................	[entry: i2 r0 ]	[exit: i2 r1 ]
i0 = lengthof r1........................	[entry: i2 r1 ]	[exit: i2 r1 i0 ]
i3 = 0..................................	[entry: i2 r1 i0 ]	[exit: i2 r1 i3 i0 ]
if i3 >= i0 goto return i2..............	[entry: i2 r1 i3 i0 ]	[exit: i2 i0 r1 i3 ]
i1 = r1[i3].............................	[entry: i0 i2 r1 i3 ]	[exit: r1 i0 i3 i1 i2 ]
if i1 <= i2 goto i3 = i3 + 1............	[entry: r1 i0 i3 i1 i2 ]	[exit: i2 r1 i0 i3 i1 ]
i2 = i1.................................	[entry: r1 i0 i3 i1 ]	[exit: i2 r1 i0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r1 i0 i3 ]	[exit: i2 r1 i3 i0 ]
goto [?= (branch)]......................	[entry: i2 r1 i3 i0 ]	[exit: i2 r1 i3 i0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Sorts.BucketSort, Method Name: min, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i2 = r0[0]..............................	[entry: r0 ]	[exit: i2 r0 ]
r1 = r0.................................	[entry: i2 r0 ]	[exit: i2 r1 ]
i0 = lengthof r1........................	[entry: i2 r1 ]	[exit: i2 r1 i0 ]
i3 = 0..................................	[entry: i2 r1 i0 ]	[exit: i2 r1 i3 i0 ]
if i3 >= i0 goto return i2..............	[entry: i2 r1 i3 i0 ]	[exit: i2 i0 r1 i3 ]
i1 = r1[i3].............................	[entry: i0 i2 r1 i3 ]	[exit: r1 i0 i3 i1 i2 ]
if i1 >= i2 goto i3 = i3 + 1............	[entry: r1 i0 i3 i1 i2 ]	[exit: i2 r1 i0 i3 i1 ]
i2 = i1.................................	[entry: r1 i0 i3 i1 ]	[exit: i2 r1 i0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r1 i0 i3 ]	[exit: i2 r1 i3 i0 ]
goto [?= (branch)]......................	[entry: i2 r1 i3 i0 ]	[exit: i2 r1 i3 i0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: compAndSwap, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: Sorts.BitonicSort..........	[entry: ]	[exit: ]
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i0 := @parameter1: int..................	[entry: r0 ]	[exit: r0 i0 ]
i1 := @parameter2: int..................	[entry: r0 i0 ]	[exit: i1 r0 i0 ]
i6 := @parameter3: int..................	[entry: i1 r0 i0 ]	[exit: i6 i1 r0 i0 ]
$i3 = r0[i0]............................	[entry: i6 i1 r0 i0 ]	[exit: i6 i0 $i3 r0 i1 ]
$i2 = r0[i1]............................	[entry: i6 i0 $i3 r0 i1 ]	[exit: i6 i1 r0 i0 $i3 $i2 ]
if $i3 <= $i2 goto $i5 = r0[i0].........	[entry: i6 i1 r0 i0 $i3 $i2 ]	[exit: i6 i1 r0 i0 ]
if i6 == 1 goto i7 = r0[i0].............	[entry: i1 r0 i0 i6 ]	[exit: i6 i1 r0 i0 ]
$i5 = r0[i0]............................	[entry: i6 i1 r0 i0 ]	[exit: i0 i6 $i5 r0 i1 ]
$i4 = r0[i1]............................	[entry: i0 i6 $i5 r0 i1 ]	[exit: i1 r0 i0 i6 $i5 $i4 ]
if $i5 >= $i4 goto return...............	[entry: i1 r0 i0 i6 $i5 $i4 ]	[exit: i1 r0 i0 i6 ]
if i6 != 0 goto return..................	[entry: i1 r0 i0 i6 ]	[exit: i1 r0 i0 ]
i7 = r0[i0].............................	[entry: i1 r0 i0 ]	[exit: i7 i0 r0 i1 ]
$i8 = r0[i1]............................	[entry: i7 i0 r0 i1 ]	[exit: i1 i7 r0 i0 $i8 ]
r0[i0] = $i8............................	[entry: i1 i7 r0 i0 $i8 ]	[exit: r0 i1 i7 ]
r0[i1] = i7.............................	[entry: r0 i1 i7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: bitonicMerge, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Sorts.BitonicSort..........	[entry: ]	[exit: r0 ]
r1 := @parameter0: int[]................	[entry: r0 ]	[exit: r1 r0 ]
i2 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i2 ]
i0 := @parameter2: int..................	[entry: r1 r0 i2 ]	[exit: r1 r0 i2 i0 ]
i4 := @parameter3: int..................	[entry: r1 r0 i2 i0 ]	[exit: r1 i4 r0 i2 i0 ]
if i0 <= 1 goto return..................	[entry: r1 i4 r0 i2 i0 ]	[exit: r1 i4 r0 i2 i0 ]
i1 = i0 / 2.............................	[entry: r1 i4 r0 i2 i0 ]	[exit: r1 i4 r0 i1 i2 ]
i7 = i2.................................	[entry: r1 i4 r0 i1 i2 ]	[exit: r1 i4 r0 i7 i2 i1 ]
$i3 = i2 + i1...........................	[entry: r1 i4 r0 i7 i2 i1 ]	[exit: r1 i2 i1 i4 r0 i7 $i3 ]
if i7 >= $i3 goto virtualinvoke r0.<Sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)	[entry: r1 i2 i1 i4 r0 i7 $i3 ]	[exit: r1 i2 i1 i4 r0 i7 ]
$i6 = i7 + i1...........................	[entry: i2 r1 i4 r0 i7 i1 ]	[exit: i2 i1 r1 i7 $i6 i4 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void compAndSwap(int[],int,int,int)>(r1, i7, $i6, i4)	[entry: i2 i1 r1 i7 $i6 i4 r0 ]	[exit: r1 i4 r0 i2 i1 i7 ]
i7 = i7 + 1.............................	[entry: r1 i4 r0 i2 i1 i7 ]	[exit: r1 i4 r0 i7 i2 i1 ]
goto [?= $i3 = i2 + i1].................	[entry: r1 i4 r0 i7 i2 i1 ]	[exit: r1 i4 r0 i7 i2 i1 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i1, i4)	[entry: r1 i2 i1 i4 r0 ]	[exit: r1 i4 r0 i2 i1 ]
$i5 = i2 + i1...........................	[entry: r1 i4 r0 i2 i1 ]	[exit: r1 $i5 i1 i4 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, $i5, i1, i4)	[entry: r1 $i5 i1 i4 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: bitonicSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Sorts.BitonicSort..........	[entry: ]	[exit: r0 ]
r1 := @parameter0: int[]................	[entry: r0 ]	[exit: r1 r0 ]
i2 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 i2 r0 ]
i0 := @parameter2: int..................	[entry: r1 i2 r0 ]	[exit: r1 i2 r0 i0 ]
i4 := @parameter3: int..................	[entry: r1 i2 r0 i0 ]	[exit: i4 r1 i2 r0 i0 ]
if i0 <= 1 goto return..................	[entry: i4 r1 i2 r0 i0 ]	[exit: i4 r1 i2 r0 i0 ]
i1 = i0 / 2.............................	[entry: i4 r1 i2 r0 i0 ]	[exit: i0 i4 r1 i2 i1 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, i2, i1, 1)	[entry: i0 i4 r1 i2 i1 r0 ]	[exit: i0 i4 r1 r0 i2 i1 ]
$i3 = i2 + i1...........................	[entry: i0 i4 r1 r0 i2 i1 ]	[exit: i2 i0 i4 r1 $i3 i1 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, $i3, i1, 0)	[entry: i2 i0 i4 r1 $i3 i1 r0 ]	[exit: r1 i2 i0 i4 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicMerge(int[],int,int,int)>(r1, i2, i0, i4)	[entry: r1 i2 i0 i4 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: sort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Sorts.BitonicSort..........	[entry: ]	[exit: r0 ]
r1 := @parameter0: int[]................	[entry: r0 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 i0 r0 ]
i1 := @parameter2: int..................	[entry: r1 i0 r0 ]	[exit: r1 i0 i1 r0 ]
virtualinvoke r0.<Sorts.BitonicSort: void bitonicSort(int[],int,int,int)>(r1, 0, i0, i1)	[entry: r1 i0 i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: printArray, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: r0 i0 ]
i2 = 0..................................	[entry: r0 i0 ]	[exit: r0 i2 i0 ]
if i2 >= i0 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i2 i0 ]	[exit: i0 r0 i2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r0 i2 ]	[exit: i0 $r3 r0 i2 ]
$r2 = new java.lang.StringBuilder.......	[entry: i0 $r3 r0 i2 ]	[exit: i0 $r3 r0 i2 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: i0 $r3 r0 i2 $r2 ]	[exit: i0 $r3 $r2 r0 i2 ]
$i1 = r0[i2]............................	[entry: i0 $r3 $r2 r0 i2 ]	[exit: r0 i0 i2 $r3 $i1 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r0 i0 i2 $r3 $i1 $r2 ]	[exit: r0 i0 i2 $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r0 i0 i2 $r3 $r4 ]	[exit: r0 i0 i2 $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i0 i2 $r3 $r5 ]	[exit: r0 i0 i2 $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: r0 i0 i2 $r6 $r3 ]	[exit: r0 i0 i2 ]
i2 = i2 + 1.............................	[entry: r0 i0 i2 ]	[exit: r0 i2 i0 ]
goto [?= (branch)]......................	[entry: r0 i2 i0 ]	[exit: r0 i2 i0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println()>()	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.BitonicSort, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[8].................	[entry: ]	[exit: $r0 ]
$r0[0] = 3..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 7..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 8..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 6..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 1..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 5..............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
b0 = 1..................................	[entry: r1 ]	[exit: b0 r1 ]
$r2 = new Sorts.BitonicSort.............	[entry: b0 r1 ]	[exit: b0 r1 $r2 ]
specialinvoke $r2.<Sorts.BitonicSort: void <init>()>()	[entry: b0 r1 $r2 ]	[exit: b0 r1 $r2 ]
r3 = $r2................................	[entry: b0 r1 $r2 ]	[exit: b0 r3 r1 ]
$i1 = lengthof r1.......................	[entry: b0 r3 r1 ]	[exit: r1 $i1 b0 r3 ]
virtualinvoke r3.<Sorts.BitonicSort: void sort(int[],int,int)>(r1, $i1, b0)	[entry: r1 $i1 b0 r3 ]	[exit: r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("\nSorted array")	[entry: r1 $r4 ]	[exit: r1 ]
staticinvoke <Sorts.BitonicSort: void printArray(int[])>(r1)	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.RadixSort, Method Name: print, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: int[]................	[entry: ]	[exit: r2 ]
i0 := @parameter1: int..................	[entry: r2 ]	[exit: r2 i0 ]
i2 = 0..................................	[entry: r2 i0 ]	[exit: r2 i2 i0 ]
if i2 >= i0 goto return.................	[entry: r2 i2 i0 ]	[exit: i0 r2 i2 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r2 i2 ]	[exit: i0 $r1 r2 i2 ]
$r0 = new java.lang.StringBuilder.......	[entry: i0 $r1 r2 i2 ]	[exit: i0 $r1 r2 i2 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i0 $r1 r2 i2 $r0 ]	[exit: i0 $r1 $r0 r2 i2 ]
$i1 = r2[i2]............................	[entry: i0 $r1 $r0 r2 i2 ]	[exit: r2 i0 i2 $r1 $i1 $r0 ]
$r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r2 i0 i2 $r1 $i1 $r0 ]	[exit: r2 i0 i2 $r1 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 i0 i2 $r1 $r3 ]	[exit: r2 i0 i2 $r1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 i0 i2 $r1 $r4 ]	[exit: r2 i0 i2 $r5 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r5)	[entry: r2 i0 i2 $r5 $r1 ]	[exit: r2 i0 i2 ]
i2 = i2 + 1.............................	[entry: r2 i0 i2 ]	[exit: r2 i2 i0 ]
goto [?= (branch)]......................	[entry: r2 i2 i0 ]	[exit: r2 i2 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Sorts.RadixSort, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[8].................	[entry: ]	[exit: $r0 ]
$r0[0] = 170............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 45.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 75.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 90.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 802............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 24.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 66.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i0 = lengthof r1........................	[entry: r1 ]	[exit: r1 i0 ]
staticinvoke <Sorts.RadixSort: void radixsort(int[],int)>(r1, i0)	[entry: r1 i0 ]	[exit: r1 i0 ]
staticinvoke <Sorts.RadixSort: void print(int[],int)>(r1, i0)	[entry: r1 i0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.RomanToInteger, Method Name: romanToInt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String.....	[entry: ]	[exit: r8 ]
r9 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r8 ]	[exit: r9 ]
c4 = 32.................................	[entry: r9 ]	[exit: c4 r9 ]
i5 = 0..................................	[entry: c4 r9 ]	[exit: i5 c4 r9 ]
i6 = 0..................................	[entry: i5 c4 r9 ]	[exit: i5 i6 c4 r9 ]
$i0 = virtualinvoke r9.<java.lang.String: int length()>()	[entry: i5 i6 c4 r9 ]	[exit: i5 i6 c4 r9 $i0 ]
i7 = $i0 - 1............................	[entry: i5 i6 c4 r9 $i0 ]	[exit: i5 i6 c4 r9 i7 ]
if i7 < 0 goto return i5................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 i7 r9 ]
c1 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i7)	[entry: i5 i6 c4 i7 r9 ]	[exit: r9 i7 i5 i6 c1 c4 ]
if c4 == 32 goto $r10 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 i6 c1 c4 ]	[exit: r9 i7 i5 i6 c1 c4 ]
$r0 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 c1 i6 c4 ]	[exit: r9 i7 i5 c1 i6 $r0 c4 ]
$r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4)	[entry: r9 i7 i5 c1 i6 $r0 c4 ]	[exit: r9 i7 i5 c1 c4 i6 $r1 $r0 ]
$r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)	[entry: r9 i7 i5 c1 c4 i6 $r1 $r0 ]	[exit: r9 i7 i5 c1 c4 i6 $r2 ]
$r3 = (java.lang.Integer) $r2...........	[entry: r9 i7 i5 c1 c4 i6 $r2 ]	[exit: r9 i7 i5 c1 c4 i6 $r3 ]
$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()	[entry: r9 i7 i5 c1 c4 i6 $r3 ]	[exit: r9 i7 i5 c1 c4 $i3 i6 ]
if $i3 <= i6 goto $i8 = i6..............	[entry: r9 i7 i5 c1 c4 $i3 i6 ]	[exit: r9 i7 i5 c1 c4 i6 ]
$r4 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 c1 c4 ]	[exit: r9 i7 i5 c1 $r4 c4 ]
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4)	[entry: r9 i7 i5 c1 $r4 c4 ]	[exit: r9 i7 i5 c1 $r5 $r4 ]
$r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)	[entry: r9 i7 i5 c1 $r5 $r4 ]	[exit: r9 i7 i5 c1 $r6 ]
$r7 = (java.lang.Integer) $r6...........	[entry: r9 i7 i5 c1 $r6 ]	[exit: r9 i7 i5 c1 $r7 ]
$i8 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()	[entry: r9 i7 i5 c1 $r7 ]	[exit: r9 i7 i5 c1 $i8 ]
goto [?= i6 = $i8]......................	[entry: r9 i7 i5 c1 $i8 ]	[exit: r9 i7 i5 c1 $i8 ]
$i8 = i6................................	[entry: r9 i7 i5 c1 i6 ]	[exit: r9 i7 i5 c1 $i8 ]
i6 = $i8................................	[entry: r9 i7 i5 c1 $i8 ]	[exit: r9 i7 i5 i6 c1 ]
$r10 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 i6 c1 ]	[exit: r9 i7 i5 i6 $r10 c1 ]
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1)	[entry: r9 i7 i5 i6 $r10 c1 ]	[exit: r9 i7 c1 i5 i6 $r11 $r10 ]
$r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11)	[entry: r9 i7 c1 i5 i6 $r11 $r10 ]	[exit: r9 i7 c1 i5 i6 $r12 ]
$r13 = (java.lang.Integer) $r12.........	[entry: r9 i7 c1 i5 i6 $r12 ]	[exit: r9 i7 c1 i5 i6 $r13 ]
i2 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()	[entry: r9 i7 c1 i5 i6 $r13 ]	[exit: r9 i7 c1 i5 i2 i6 ]
if i2 < i6 goto i5 = i5 - i2............	[entry: r9 i7 c1 i5 i2 i6 ]	[exit: i6 r9 i7 c1 i5 i2 ]
i5 = i5 + i2............................	[entry: i6 r9 i7 c1 i5 i2 ]	[exit: i5 i6 r9 i7 c1 ]
goto [?= c4 = c1].......................	[entry: i5 i6 r9 i7 c1 ]	[exit: i5 i6 r9 i7 c1 ]
i5 = i5 - i2............................	[entry: i6 r9 i7 c1 i5 i2 ]	[exit: i5 i6 r9 i7 c1 ]
c4 = c1.................................	[entry: i5 i6 r9 i7 c1 ]	[exit: i5 i6 c4 r9 i7 ]
i7 = i7 + -1............................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 r9 i7 ]
goto [?= (branch)]......................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 r9 i7 ]
return i5...............................	[entry: i5 ]	[exit: ]
********************
Class Name: Conversions.RomanToInteger, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
i0 = staticinvoke <Conversions.RomanToInteger: int romanToInt(java.lang.String)>("MDCCCIV")	[entry: ]	[exit: i0 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: i0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i0)	[entry: i0 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.IntegerToRoman, Method Name: integerToRoman, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i5 := @parameter0: int..................	[entry: ]	[exit: i5 ]
if i5 > 0 goto $r0 = new java.lang.StringBuilder	[entry: i5 ]	[exit: i5 ]
return ""...............................	[entry: ]	[exit: ]
$r0 = new java.lang.StringBuilder.......	[entry: i5 ]	[exit: i5 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i5 $r0 ]	[exit: i5 $r0 ]
r1 = $r0................................	[entry: i5 $r0 ]	[exit: r1 i5 ]
i6 = 0..................................	[entry: r1 i5 ]	[exit: r1 i5 i6 ]
$r2 = <Conversions.IntegerToRoman: int[] allArabianRomanNumbers>	[entry: r1 i5 i6 ]	[exit: r1 i5 i6 $r2 ]
$i0 = lengthof $r2......................	[entry: r1 i5 i6 $r2 ]	[exit: r1 i5 i6 $i0 ]
if i6 >= $i0 goto $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i5 i6 $i0 ]	[exit: r1 i5 i6 ]
$r4 = <Conversions.IntegerToRoman: int[] allArabianRomanNumbers>	[entry: r1 i5 i6 ]	[exit: r1 i5 $r4 i6 ]
$i1 = $r4[i6]...........................	[entry: r1 i5 $r4 i6 ]	[exit: r1 i6 i5 $i1 ]
i2 = i5 / $i1...........................	[entry: r1 i6 i5 $i1 ]	[exit: r1 i5 i6 i2 ]
i7 = 0..................................	[entry: r1 i5 i6 i2 ]	[exit: r1 i5 i6 i7 i2 ]
if i7 >= i2 goto $r5 = <Conversions.IntegerToRoman: int[] allArabianRomanNumbers>	[entry: r1 i5 i6 i7 i2 ]	[exit: r1 i5 i2 i6 i7 ]
$r6 = <Conversions.IntegerToRoman: java.lang.String[] allRomanNumbers>	[entry: i5 i2 i7 r1 i6 ]	[exit: i5 i2 i7 r1 $r6 i6 ]
$r7 = $r6[i6]...........................	[entry: i5 i2 i7 r1 $r6 i6 ]	[exit: i5 i6 i2 i7 $r7 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)	[entry: i5 i6 i2 i7 $r7 r1 ]	[exit: r1 i5 i6 i2 i7 ]
i7 = i7 + 1.............................	[entry: r1 i5 i6 i2 i7 ]	[exit: r1 i5 i6 i7 i2 ]
goto [?= (branch)]......................	[entry: r1 i5 i6 i7 i2 ]	[exit: r1 i5 i6 i7 i2 ]
$r5 = <Conversions.IntegerToRoman: int[] allArabianRomanNumbers>	[entry: r1 i5 i2 i6 ]	[exit: r1 i5 i2 $r5 i6 ]
$i3 = $r5[i6]...........................	[entry: r1 i5 i2 $r5 i6 ]	[exit: r1 i6 i5 i2 $i3 ]
$i4 = i2 * $i3..........................	[entry: r1 i6 i5 i2 $i3 ]	[exit: r1 i6 i5 $i4 ]
i5 = i5 - $i4...........................	[entry: r1 i6 i5 $i4 ]	[exit: r1 i5 i6 ]
i6 = i6 + 1.............................	[entry: r1 i5 i6 ]	[exit: r1 i5 i6 ]
goto [?= $r2 = <Conversions.IntegerToRoman: int[] allArabianRomanNumbers>]	[entry: r1 i5 i6 ]	[exit: r1 i5 i6 ]
$r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Conversions.IntegerToRoman, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
$r1 = staticinvoke <Conversions.IntegerToRoman: java.lang.String integerToRoman(int)>(2131)	[entry: $r0 ]	[exit: $r1 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1)	[entry: $r1 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.DecimalToOctal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i5 = 0..................................	[entry: r2 ]	[exit: i5 r2 ]
i6 = 0..................................	[entry: i5 r2 ]	[exit: i5 i6 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i5 i6 r2 ]	[exit: i5 i6 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Decimal number: ")	[entry: i5 i6 r2 $r3 ]	[exit: i5 i6 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i5 i6 r2 ]	[exit: r2 i5 i6 i0 ]
i7 = i0.................................	[entry: r2 i5 i6 i0 ]	[exit: r2 i5 i6 i7 ]
if i7 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
i1 = i7 % 8.............................	[entry: r2 i5 i6 i7 ]	[exit: r2 i7 i5 i1 i6 ]
$i2 = i6................................	[entry: r2 i7 i5 i1 i6 ]	[exit: r2 i7 i5 i1 $i2 i6 ]
i6 = i6 + 1.............................	[entry: r2 i7 i5 i1 $i2 i6 ]	[exit: r2 i6 i7 i5 i1 $i2 ]
$d0 = (double) $i2......................	[entry: r2 i6 i7 i5 i1 $i2 ]	[exit: r2 i6 i7 i5 i1 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0)	[entry: r2 i6 i7 i5 i1 $d0 ]	[exit: r2 i6 i7 i5 i1 $d1 ]
$i3 = (int) $d1.........................	[entry: r2 i6 i7 i5 i1 $d1 ]	[exit: r2 i6 i7 i5 i1 $i3 ]
$i4 = i1 * $i3..........................	[entry: r2 i6 i7 i5 i1 $i3 ]	[exit: r2 i6 i7 i5 $i4 ]
i5 = i5 + $i4...........................	[entry: r2 i6 i7 i5 $i4 ]	[exit: r2 i5 i6 i7 ]
i7 = i7 / 8.............................	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
goto [?= (branch)]......................	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i5 ]	[exit: r2 $r5 i5 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i5 ]	[exit: r2 $r5 i5 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i5 $r4 ]	[exit: r2 $r5 i5 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Octal equivalent:")	[entry: r2 $r5 i5 $r4 ]	[exit: r2 $r5 i5 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)	[entry: r2 $r5 i5 $r6 ]	[exit: r2 $r5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r5 $r7 ]	[exit: r2 $r8 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r2 $r8 $r5 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.RomanToInteger, Method Name: romanToInt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String.....	[entry: ]	[exit: r8 ]
r9 = virtualinvoke r8.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r8 ]	[exit: r9 ]
c4 = 32.................................	[entry: r9 ]	[exit: c4 r9 ]
i5 = 0..................................	[entry: c4 r9 ]	[exit: i5 c4 r9 ]
i6 = 0..................................	[entry: i5 c4 r9 ]	[exit: i5 i6 c4 r9 ]
$i0 = virtualinvoke r9.<java.lang.String: int length()>()	[entry: i5 i6 c4 r9 ]	[exit: i5 i6 c4 r9 $i0 ]
i7 = $i0 - 1............................	[entry: i5 i6 c4 r9 $i0 ]	[exit: i5 i6 c4 r9 i7 ]
if i7 < 0 goto return i5................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 i7 r9 ]
c1 = virtualinvoke r9.<java.lang.String: char charAt(int)>(i7)	[entry: i5 i6 c4 i7 r9 ]	[exit: r9 i7 i5 i6 c1 c4 ]
if c4 == 32 goto $r10 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 i6 c1 c4 ]	[exit: r9 i7 i5 i6 c1 c4 ]
$r0 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 c1 i6 c4 ]	[exit: r9 i7 i5 c1 i6 $r0 c4 ]
$r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4)	[entry: r9 i7 i5 c1 i6 $r0 c4 ]	[exit: r9 i7 i5 c1 c4 i6 $r1 $r0 ]
$r2 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)	[entry: r9 i7 i5 c1 c4 i6 $r1 $r0 ]	[exit: r9 i7 i5 c1 c4 i6 $r2 ]
$r3 = (java.lang.Integer) $r2...........	[entry: r9 i7 i5 c1 c4 i6 $r2 ]	[exit: r9 i7 i5 c1 c4 i6 $r3 ]
$i3 = virtualinvoke $r3.<java.lang.Integer: int intValue()>()	[entry: r9 i7 i5 c1 c4 i6 $r3 ]	[exit: r9 i7 i5 c1 c4 $i3 i6 ]
if $i3 <= i6 goto $i8 = i6..............	[entry: r9 i7 i5 c1 c4 $i3 i6 ]	[exit: r9 i7 i5 c1 c4 i6 ]
$r4 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 c1 c4 ]	[exit: r9 i7 i5 c1 $r4 c4 ]
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c4)	[entry: r9 i7 i5 c1 $r4 c4 ]	[exit: r9 i7 i5 c1 $r5 $r4 ]
$r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)	[entry: r9 i7 i5 c1 $r5 $r4 ]	[exit: r9 i7 i5 c1 $r6 ]
$r7 = (java.lang.Integer) $r6...........	[entry: r9 i7 i5 c1 $r6 ]	[exit: r9 i7 i5 c1 $r7 ]
$i8 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()	[entry: r9 i7 i5 c1 $r7 ]	[exit: r9 i7 i5 c1 $i8 ]
goto [?= i6 = $i8]......................	[entry: r9 i7 i5 c1 $i8 ]	[exit: r9 i7 i5 c1 $i8 ]
$i8 = i6................................	[entry: r9 i7 i5 c1 i6 ]	[exit: r9 i7 i5 c1 $i8 ]
i6 = $i8................................	[entry: r9 i7 i5 c1 $i8 ]	[exit: r9 i7 i5 i6 c1 ]
$r10 = <Conversions.RomanToInteger: java.util.Map map>	[entry: r9 i7 i5 i6 c1 ]	[exit: r9 i7 i5 i6 $r10 c1 ]
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1)	[entry: r9 i7 i5 i6 $r10 c1 ]	[exit: r9 i7 c1 i5 i6 $r11 $r10 ]
$r12 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11)	[entry: r9 i7 c1 i5 i6 $r11 $r10 ]	[exit: r9 i7 c1 i5 i6 $r12 ]
$r13 = (java.lang.Integer) $r12.........	[entry: r9 i7 c1 i5 i6 $r12 ]	[exit: r9 i7 c1 i5 i6 $r13 ]
i2 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()	[entry: r9 i7 c1 i5 i6 $r13 ]	[exit: r9 i7 c1 i5 i2 i6 ]
if i2 < i6 goto i5 = i5 - i2............	[entry: r9 i7 c1 i5 i2 i6 ]	[exit: i6 r9 i7 c1 i5 i2 ]
i5 = i5 + i2............................	[entry: i6 r9 i7 c1 i5 i2 ]	[exit: i5 i6 r9 i7 c1 ]
goto [?= c4 = c1].......................	[entry: i5 i6 r9 i7 c1 ]	[exit: i5 i6 r9 i7 c1 ]
i5 = i5 - i2............................	[entry: i6 r9 i7 c1 i5 i2 ]	[exit: i5 i6 r9 i7 c1 ]
c4 = c1.................................	[entry: i5 i6 r9 i7 c1 ]	[exit: i5 i6 c4 r9 i7 ]
i7 = i7 + -1............................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 r9 i7 ]
goto [?= (branch)]......................	[entry: i5 i6 c4 r9 i7 ]	[exit: i5 i6 c4 r9 i7 ]
return i5...............................	[entry: i5 ]	[exit: ]
********************
Class Name: Conversions.RomanToInteger, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
i0 = staticinvoke <Conversions.RomanToInteger: int romanToInt(java.lang.String)>("MDCCCIV")	[entry: ]	[exit: i0 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: i0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(int)>(i0)	[entry: i0 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.OctalToDecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Octal Input: ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r4 ]
i0 = staticinvoke <Conversions.OctalToDecimal: int convertOctalToDecimal(java.lang.String)>(r4)	[entry: r2 r4 ]	[exit: r2 i0 ]
if i0 == -1 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 i0 ]	[exit: r2 i0 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r6 i0 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 i0 ]	[exit: r2 $r6 i0 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 i0 $r5 ]	[exit: r2 $r6 i0 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result convertOctalToDecimal : ")	[entry: r2 $r6 i0 $r5 ]	[exit: r2 $r6 i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r6 i0 $r7 ]	[exit: r2 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r6 $r8 ]	[exit: r2 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 $r9 $r6 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.OctalToDecimal, Method Name: convertOctalToDecimal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
$i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 8)	[entry: r0 ]	[exit: $i0 ]
r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)	[entry: $i0 ]	[exit: r3 ]
$i1 = virtualinvoke r3.<java.lang.Integer: int intValue()>()	[entry: r3 ]	[exit: $i1 ]
return $i1..............................	[entry: $i1 ]	[exit: ]
$r1 := @caughtexception.................	[entry: ]	[exit: $r1 ]
r4 = $r1................................	[entry: $r1 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Invalid Input, Expecting octal number 0-7")	[entry: $r2 ]	[exit: ]
return -1...............................	[entry: ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToAnyBase, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r14 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void print(java.lang.String)>("Enter number: ")	[entry: r2 $r15 ]	[exit: r2 ]
r3 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: r2 ]	[exit: r3 r2 ]
$r16 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r2 ]	[exit: r3 r2 $r16 ]
virtualinvoke $r16.<java.io.PrintStream: void print(java.lang.String)>("Enter beginning base (between 2 and 36): ")	[entry: r3 r2 $r16 ]	[exit: r3 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 r2 ]	[exit: r2 r3 i0 ]
if i0 > 36 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 i0 ]	[exit: r2 r3 i0 ]
if i0 >= 2 goto $z0 = staticinvoke <Conversions.AnyBaseToAnyBase: boolean validForBase(java.lang.String,int)>(r3, i0)	[entry: r2 r3 i0 ]	[exit: r2 r3 i0 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Invalid base!")	[entry: r2 $r4 ]	[exit: r2 ]
goto [?= $r15 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 ]	[exit: r2 ]
$z0 = staticinvoke <Conversions.AnyBaseToAnyBase: boolean validForBase(java.lang.String,int)>(r3, i0)	[entry: r2 r3 i0 ]	[exit: r3 i0 r2 $z0 ]
if $z0 != 0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i0 r2 $z0 ]	[exit: r3 i0 r2 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("The number is invalid for this base!")	[entry: r2 $r9 ]	[exit: r2 ]
goto [?= $r15 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 ]	[exit: r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i0 r2 ]	[exit: r3 i0 r2 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>("Enter end base (between 2 and 36): ")	[entry: r3 i0 r2 $r5 ]	[exit: r3 i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 i0 r2 ]	[exit: r2 r3 i0 i1 ]
if i1 > 36 goto $r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 i0 i1 ]	[exit: r2 r3 i0 i1 ]
if i1 >= 2 goto (branch)................	[entry: r2 r3 i0 i1 ]	[exit: r2 r3 i0 i1 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Invalid base!")	[entry: r2 $r6 ]	[exit: r2 ]
goto [?= $r15 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 ]	[exit: r2 ]
goto [?= $r7 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 r3 i0 i1 ]	[exit: r2 r3 i0 i1 ]
$r10 := @caughtexception................	[entry: r2 ]	[exit: r2 $r10 ]
r11 = $r10..............................	[entry: r2 $r10 ]	[exit: r2 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Invalid input.")	[entry: r2 $r12 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: r2 ]	[exit: r2 ]
goto [?= $r15 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 ]	[exit: r2 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 i0 i1 ]	[exit: r2 $r7 r3 i0 i1 ]
$r8 = staticinvoke <Conversions.AnyBaseToAnyBase: java.lang.String base2base(java.lang.String,int,int)>(r3, i0, i1)	[entry: r2 $r7 r3 i0 i1 ]	[exit: r2 $r8 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r2 $r8 $r7 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToAnyBase, Method Name: validForBase, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String.....	[entry: ]	[exit: r5 ]
i0 := @parameter1: int..................	[entry: r5 ]	[exit: r5 i0 ]
$r0 = newarray (char)[36]...............	[entry: r5 i0 ]	[exit: r5 i0 $r0 ]
$r0[0] = 48.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[1] = 49.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[2] = 50.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[3] = 51.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[4] = 52.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[5] = 53.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[6] = 54.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[7] = 55.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[8] = 56.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[9] = 57.............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[10] = 65............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[11] = 66............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[12] = 67............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[13] = 68............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[14] = 69............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[15] = 70............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[16] = 71............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[17] = 72............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[18] = 73............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[19] = 74............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[20] = 75............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[21] = 76............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[22] = 77............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[23] = 78............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[24] = 79............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[25] = 80............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[26] = 81............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[27] = 82............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[28] = 83............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[29] = 84............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[30] = 85............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[31] = 86............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[32] = 87............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[33] = 88............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[34] = 89............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
$r0[35] = 90............................	[entry: r5 i0 $r0 ]	[exit: r5 i0 $r0 ]
r1 = $r0................................	[entry: r5 i0 $r0 ]	[exit: r5 r1 i0 ]
r2 = staticinvoke <java.util.Arrays: char[] copyOfRange(char[],int,int)>(r1, 0, i0)	[entry: r5 r1 i0 ]	[exit: r5 r2 ]
$r3 = new java.util.HashSet.............	[entry: r5 r2 ]	[exit: r5 r2 $r3 ]
specialinvoke $r3.<java.util.HashSet: void <init>()>()	[entry: r5 r2 $r3 ]	[exit: r5 r2 $r3 ]
r4 = $r3................................	[entry: r5 r2 $r3 ]	[exit: r4 r5 r2 ]
i5 = 0..................................	[entry: r4 r5 r2 ]	[exit: r4 r5 i5 r2 ]
$i1 = lengthof r2.......................	[entry: r4 r5 i5 r2 ]	[exit: r4 r5 r2 i5 $i1 ]
if i5 >= $i1 goto r8 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>()	[entry: r4 r5 r2 i5 $i1 ]	[exit: r4 r5 r2 i5 ]
$c4 = r2[i5]............................	[entry: r5 r4 r2 i5 ]	[exit: r5 r2 i5 r4 $c4 ]
$r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c4)	[entry: r5 r2 i5 r4 $c4 ]	[exit: r5 r2 i5 $r7 r4 ]
virtualinvoke r4.<java.util.HashSet: boolean add(java.lang.Object)>($r7)	[entry: r5 r2 i5 $r7 r4 ]	[exit: r4 r5 r2 i5 ]
i5 = i5 + 1.............................	[entry: r4 r5 r2 i5 ]	[exit: r4 r5 i5 r2 ]
goto [?= $i1 = lengthof r2].............	[entry: r4 r5 i5 r2 ]	[exit: r4 r5 i5 r2 ]
r8 = virtualinvoke r5.<java.lang.String: char[] toCharArray()>()	[entry: r4 r5 ]	[exit: r4 r8 ]
i2 = lengthof r8........................	[entry: r4 r8 ]	[exit: r4 r8 i2 ]
i6 = 0..................................	[entry: r4 r8 i2 ]	[exit: r4 r8 i6 i2 ]
if i6 >= i2 goto return 1...............	[entry: r4 r8 i6 i2 ]	[exit: i2 r4 r8 i6 ]
c3 = r8[i6].............................	[entry: i2 r4 r8 i6 ]	[exit: r8 i2 i6 r4 c3 ]
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c3)	[entry: r8 i2 i6 r4 c3 ]	[exit: r8 i2 i6 $r6 r4 ]
$z0 = virtualinvoke r4.<java.util.HashSet: boolean contains(java.lang.Object)>($r6)	[entry: r8 i2 i6 $r6 r4 ]	[exit: r4 r8 i2 i6 $z0 ]
if $z0 != 0 goto i6 = i6 + 1............	[entry: r4 r8 i2 i6 $z0 ]	[exit: r4 r8 i2 i6 ]
return 0................................	[entry: ]	[exit: ]
i6 = i6 + 1.............................	[entry: r4 r8 i2 i6 ]	[exit: r4 r8 i6 i2 ]
goto [?= (branch)]......................	[entry: r4 r8 i6 i2 ]	[exit: r4 r8 i6 i2 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToAnyBase, Method Name: base2base, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i8 := @parameter1: int..................	[entry: r0 ]	[exit: i8 r0 ]
i1 := @parameter2: int..................	[entry: i8 r0 ]	[exit: i1 i8 r0 ]
i10 = 0.................................	[entry: i1 i8 r0 ]	[exit: i1 i10 i8 r0 ]
r8 = "".................................	[entry: i1 i10 i8 r0 ]	[exit: r8 i1 i10 i8 r0 ]
i11 = 0.................................	[entry: r8 i1 i10 i8 r0 ]	[exit: r8 i1 i10 i8 i11 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r8 i1 i10 i8 i11 r0 ]	[exit: r8 i1 i10 i8 r0 i11 $i0 ]
if i11 >= $i0 goto (branch).............	[entry: r8 i1 i10 i8 r0 i11 $i0 ]	[exit: r8 i1 i10 i8 i11 r0 ]
c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11)	[entry: r8 i1 i10 i8 i11 r0 ]	[exit: r8 i1 r0 i11 i10 i8 c7 ]
if c7 < 65 goto i12 = c7 - 48...........	[entry: r8 i1 r0 i11 i10 i8 c7 ]	[exit: r8 i1 r0 i11 i10 i8 c7 ]
if c7 > 90 goto i12 = c7 - 48...........	[entry: r8 i1 r0 i11 i10 i8 c7 ]	[exit: r8 i1 r0 i11 i10 i8 c7 ]
$i9 = c7 - 65...........................	[entry: r8 i1 r0 i11 i10 i8 c7 ]	[exit: r8 i1 r0 i11 i10 i8 $i9 ]
i12 = 10 + $i9..........................	[entry: r8 i1 r0 i11 i10 i8 $i9 ]	[exit: r8 i1 r0 i11 i12 i10 i8 ]
goto [?= $i13 = i10 * i8]...............	[entry: r8 i1 r0 i11 i12 i10 i8 ]	[exit: r8 i1 r0 i11 i12 i10 i8 ]
i12 = c7 - 48...........................	[entry: r8 i1 r0 i11 i10 i8 c7 ]	[exit: r8 i1 r0 i11 i12 i10 i8 ]
$i13 = i10 * i8.........................	[entry: r8 i1 r0 i11 i12 i10 i8 ]	[exit: r8 i1 i8 r0 i11 $i13 i12 ]
i10 = $i13 + i12........................	[entry: r8 i1 i8 r0 i11 $i13 i12 ]	[exit: r8 i1 i10 i8 r0 i11 ]
i11 = i11 + 1...........................	[entry: r8 i1 i10 i8 r0 i11 ]	[exit: r8 i1 i10 i8 i11 r0 ]
goto [?= $i0 = virtualinvoke r0.<java.lang.String: int length()>()]	[entry: r8 i1 i10 i8 i11 r0 ]	[exit: r8 i1 i10 i8 i11 r0 ]
if 0 != i10 goto (branch)...............	[entry: r8 i1 i10 ]	[exit: r8 i1 i10 ]
return "0"..............................	[entry: ]	[exit: ]
if i10 == 0 goto return r8..............	[entry: r8 i1 i10 ]	[exit: r8 i10 i1 ]
$i2 = i10 % i1..........................	[entry: r8 i10 i1 ]	[exit: r8 i10 i1 $i2 ]
if $i2 >= 10 goto $r1 = new java.lang.StringBuilder	[entry: r8 i10 i1 $i2 ]	[exit: r8 i10 i1 ]
$r4 = new java.lang.StringBuilder.......	[entry: r8 i10 i1 ]	[exit: r8 i10 i1 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r8 i10 i1 $r4 ]	[exit: r8 $r4 i10 i1 ]
$i6 = i10 % i1..........................	[entry: r8 $r4 i10 i1 ]	[exit: i10 i1 r8 $r4 $i6 ]
$r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i6)	[entry: i10 i1 r8 $r4 $i6 ]	[exit: i10 i1 r8 $r5 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)	[entry: i10 i1 r8 $r5 $r4 ]	[exit: i10 i1 r8 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)	[entry: i10 i1 r8 $r6 ]	[exit: i10 i1 $r7 ]
r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i10 i1 $r7 ]	[exit: r8 i10 i1 ]
goto [?= i10 = i10 / i1]................	[entry: r8 i10 i1 ]	[exit: r8 i10 i1 ]
$r1 = new java.lang.StringBuilder.......	[entry: r8 i10 i1 ]	[exit: r8 i10 i1 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r8 i10 i1 $r1 ]	[exit: r8 $r1 i10 i1 ]
$i3 = i10 % i1..........................	[entry: r8 $r1 i10 i1 ]	[exit: i10 i1 r8 $r1 $i3 ]
$i4 = $i3 + 55..........................	[entry: i10 i1 r8 $r1 $i3 ]	[exit: i10 i1 r8 $r1 $i4 ]
$c5 = (char) $i4........................	[entry: i10 i1 r8 $r1 $i4 ]	[exit: i10 i1 r8 $c5 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)	[entry: i10 i1 r8 $c5 $r1 ]	[exit: i10 i1 r8 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8)	[entry: i10 i1 r8 $r2 ]	[exit: i10 i1 $r3 ]
r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i10 i1 $r3 ]	[exit: r8 i10 i1 ]
i10 = i10 / i1..........................	[entry: r8 i10 i1 ]	[exit: r8 i1 i10 ]
goto [?= (branch)]......................	[entry: r8 i1 i10 ]	[exit: r8 i1 i10 ]
return r8...............................	[entry: r8 ]	[exit: ]
********************
Class Name: Conversions.OctalToHexadecimal, Method Name: octToDec, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i2 = 0..................................	[entry: r0 ]	[exit: i2 r0 ]
i3 = 0..................................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i2 i3 r0 ]	[exit: i2 r0 i3 $i0 ]
if i3 >= $i0 goto return i2.............	[entry: i2 r0 i3 $i0 ]	[exit: i2 i3 r0 ]
c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3)	[entry: i2 i3 r0 ]	[exit: r0 i3 i2 c4 ]
$i1 = c4 - 48...........................	[entry: r0 i3 i2 c4 ]	[exit: r0 i3 i2 $i1 ]
c5 = (char) $i1.........................	[entry: r0 i3 i2 $i1 ]	[exit: r0 i3 c5 i2 ]
i6 = i2 * 8.............................	[entry: r0 i3 c5 i2 ]	[exit: r0 i3 i6 c5 ]
i2 = i6 + c5............................	[entry: r0 i3 i6 c5 ]	[exit: i2 r0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r0 i3 ]	[exit: i2 i3 r0 ]
goto [?= $i0 = virtualinvoke r0.<java.lang.String: int length()>()]	[entry: i2 i3 r0 ]	[exit: i2 i3 r0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Conversions.OctalToHexadecimal, Method Name: decimalToHex, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i2 := @parameter0: int..................	[entry: ]	[exit: i2 ]
r0 = "0123456789ABCDEF".................	[entry: i2 ]	[exit: r0 i2 ]
if i2 > 0 goto r4 = ""..................	[entry: r0 i2 ]	[exit: r0 i2 ]
return "0"..............................	[entry: ]	[exit: ]
r4 = "".................................	[entry: r0 i2 ]	[exit: r4 r0 i2 ]
if i2 <= 0 goto return r4...............	[entry: r4 r0 i2 ]	[exit: r4 r0 i2 ]
i0 = i2 % 16............................	[entry: r4 r0 i2 ]	[exit: i2 r4 i0 r0 ]
$r1 = new java.lang.StringBuilder.......	[entry: i2 r4 i0 r0 ]	[exit: i2 r4 i0 r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: i2 r4 i0 r0 $r1 ]	[exit: i2 r4 $r1 i0 r0 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)	[entry: i2 r4 $r1 i0 r0 ]	[exit: r0 i2 r4 $c1 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)	[entry: r0 i2 r4 $c1 $r1 ]	[exit: r0 i2 r4 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: r0 i2 r4 $r2 ]	[exit: r0 i2 $r3 ]
r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i2 $r3 ]	[exit: r4 r0 i2 ]
i2 = i2 / 16............................	[entry: r4 r0 i2 ]	[exit: r4 r0 i2 ]
goto [?= (branch)]......................	[entry: r4 r0 i2 ]	[exit: r4 r0 i2 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: Conversions.OctalToHexadecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter the Octal number: ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: r2 ]	[exit: r2 r4 ]
i0 = staticinvoke <Conversions.OctalToHexadecimal: int octToDec(java.lang.String)>(r4)	[entry: r2 r4 ]	[exit: r2 i0 ]
r5 = staticinvoke <Conversions.OctalToHexadecimal: java.lang.String decimalToHex(int)>(i0)	[entry: r2 i0 ]	[exit: r2 r5 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r5 ]	[exit: r2 $r7 r5 ]
$r6 = new java.lang.StringBuilder.......	[entry: r2 $r7 r5 ]	[exit: r2 $r7 r5 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r7 r5 $r6 ]	[exit: r2 $r7 r5 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The Hexadecimal equivalant is: ")	[entry: r2 $r7 r5 $r6 ]	[exit: r2 $r7 r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)	[entry: r2 $r7 r5 $r8 ]	[exit: r2 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r7 $r9 ]	[exit: r2 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r2 $r10 $r7 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.HexToOct, Method Name: hex2decimal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
r0 = "0123456789ABCDEF".................	[entry: r1 ]	[exit: r0 r1 ]
r2 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r0 r1 ]	[exit: r0 r2 ]
i4 = 0..................................	[entry: r0 r2 ]	[exit: i4 r0 r2 ]
i5 = 0..................................	[entry: i4 r0 r2 ]	[exit: i4 r0 i5 r2 ]
$i0 = virtualinvoke r2.<java.lang.String: int length()>()	[entry: i4 r0 i5 r2 ]	[exit: i4 r0 r2 i5 $i0 ]
if i5 >= $i0 goto return i4.............	[entry: i4 r0 r2 i5 $i0 ]	[exit: i4 r0 i5 r2 ]
c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5)	[entry: i4 r0 i5 r2 ]	[exit: r2 i5 i4 c1 r0 ]
i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(c1)	[entry: r2 i5 i4 c1 r0 ]	[exit: r0 r2 i5 i2 i4 ]
$i3 = 16 * i4...........................	[entry: r0 r2 i5 i2 i4 ]	[exit: r0 r2 i5 $i3 i2 ]
i4 = $i3 + i2...........................	[entry: r0 r2 i5 $i3 i2 ]	[exit: i4 r0 r2 i5 ]
i5 = i5 + 1.............................	[entry: i4 r0 r2 i5 ]	[exit: i4 r0 i5 r2 ]
goto [?= $i0 = virtualinvoke r2.<java.lang.String: int length()>()]	[entry: i4 r0 i5 r2 ]	[exit: i4 r0 i5 r2 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: Conversions.HexToOct, Method Name: decimal2octal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i3 := @parameter0: int..................	[entry: ]	[exit: i3 ]
i4 = 1..................................	[entry: i3 ]	[exit: i4 i3 ]
i5 = 0..................................	[entry: i4 i3 ]	[exit: i5 i4 i3 ]
if i3 <= 0 goto i6 = i5 / 10............	[entry: i5 i4 i3 ]	[exit: i5 i4 i3 ]
i0 = i3 % 8.............................	[entry: i5 i4 i3 ]	[exit: i3 i5 i0 i4 ]
$d0 = (double) i4.......................	[entry: i3 i5 i0 i4 ]	[exit: i4 i3 i5 i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0)	[entry: i4 i3 i5 i0 $d0 ]	[exit: i4 i3 i5 i0 $d1 ]
$i1 = (int) $d1.........................	[entry: i4 i3 i5 i0 $d1 ]	[exit: i4 i3 i5 i0 $i1 ]
$i2 = i0 * $i1..........................	[entry: i4 i3 i5 i0 $i1 ]	[exit: i4 i3 $i2 i5 ]
i5 = $i2 + i5...........................	[entry: i4 i3 $i2 i5 ]	[exit: i5 i4 i3 ]
i3 = i3 / 8.............................	[entry: i5 i4 i3 ]	[exit: i5 i3 i4 ]
i4 = i4 + 1.............................	[entry: i5 i3 i4 ]	[exit: i5 i4 i3 ]
goto [?= (branch)]......................	[entry: i5 i4 i3 ]	[exit: i5 i4 i3 ]
i6 = i5 / 10............................	[entry: i5 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: Conversions.HexToOct, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter Hexadecimal Number : ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r4 ]
i0 = staticinvoke <Conversions.HexToOct: int hex2decimal(java.lang.String)>(r4)	[entry: r2 r4 ]	[exit: r2 i0 ]
i1 = staticinvoke <Conversions.HexToOct: int decimal2octal(int)>(i0)	[entry: r2 i0 ]	[exit: r2 i1 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i1 ]	[exit: r2 $r6 i1 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 i1 ]	[exit: r2 $r6 i1 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 i1 $r5 ]	[exit: r2 $r6 i1 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number in octal: ")	[entry: r2 $r6 i1 $r5 ]	[exit: r2 $r6 i1 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: r2 $r6 i1 $r7 ]	[exit: r2 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r6 $r8 ]	[exit: r2 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 $r9 $r6 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.BinaryToHexadecimal, Method Name: binToHex, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i4 := @parameter0: int..................	[entry: ]	[exit: i4 ]
$r0 = new java.util.HashMap.............	[entry: i4 ]	[exit: i4 $r0 ]
specialinvoke $r0.<java.util.HashMap: void <init>()>()	[entry: i4 $r0 ]	[exit: i4 $r0 ]
r1 = $r0................................	[entry: i4 $r0 ]	[exit: r1 i4 ]
r14 = ""................................	[entry: r1 i4 ]	[exit: r14 r1 i4 ]
i5 = 0..................................	[entry: r14 r1 i4 ]	[exit: r14 r1 i4 i5 ]
if i5 >= 10 goto i6 = 10................	[entry: r14 r1 i4 i5 ]	[exit: r14 r1 i4 i5 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5)	[entry: r14 i4 r1 i5 ]	[exit: r14 i4 $r11 r1 i5 ]
$r12 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i5)	[entry: r14 i4 $r11 r1 i5 ]	[exit: r14 i4 i5 $r11 $r12 r1 ]
virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12)	[entry: r14 i4 i5 $r11 $r12 r1 ]	[exit: r14 r1 i4 i5 ]
i5 = i5 + 1.............................	[entry: r14 r1 i4 i5 ]	[exit: r14 r1 i4 i5 ]
goto [?= (branch)]......................	[entry: r14 r1 i4 i5 ]	[exit: r14 r1 i4 i5 ]
i6 = 10.................................	[entry: r14 r1 i4 ]	[exit: r14 r1 i4 i6 ]
if i6 >= 16 goto (branch)...............	[entry: r14 r1 i4 i6 ]	[exit: r14 r1 i4 i6 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r14 i4 r1 i6 ]	[exit: r14 i4 $r8 r1 i6 ]
$i1 = 65 + i6...........................	[entry: r14 i4 $r8 r1 i6 ]	[exit: r14 i4 i6 $r8 r1 $i1 ]
$i2 = $i1 - 10..........................	[entry: r14 i4 i6 $r8 r1 $i1 ]	[exit: r14 i4 i6 $r8 r1 $i2 ]
$c3 = (char) $i2........................	[entry: r14 i4 i6 $r8 r1 $i2 ]	[exit: r14 i4 i6 $r8 r1 $c3 ]
$r9 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c3)	[entry: r14 i4 i6 $r8 r1 $c3 ]	[exit: r14 i4 i6 $r8 $r9 r1 ]
virtualinvoke r1.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, $r9)	[entry: r14 i4 i6 $r8 $r9 r1 ]	[exit: r14 r1 i4 i6 ]
i6 = i6 + 1.............................	[entry: r14 r1 i4 i6 ]	[exit: r14 r1 i4 i6 ]
goto [?= (branch)]......................	[entry: r14 r1 i4 i6 ]	[exit: r14 r1 i4 i6 ]
if i4 == 0 goto return r14..............	[entry: r14 r1 i4 ]	[exit: r14 i4 r1 ]
i7 = 0..................................	[entry: i4 r14 r1 ]	[exit: i4 r14 r1 i7 ]
i8 = 0..................................	[entry: i4 r14 r1 i7 ]	[exit: i4 r14 r1 i7 i8 ]
if i8 >= 4 goto $r2 = new java.lang.StringBuilder	[entry: i4 r14 r1 i7 i8 ]	[exit: i4 r14 r1 i7 i8 ]
i0 = i4 % 10............................	[entry: r14 r1 i8 i7 i4 ]	[exit: r14 r1 i8 i0 i7 i4 ]
i4 = i4 / 10............................	[entry: r14 r1 i8 i0 i7 i4 ]	[exit: i4 r14 r1 i8 i0 i7 ]
$d1 = (double) i7.......................	[entry: i4 r14 r1 i8 i0 i7 ]	[exit: i4 r14 r1 $d1 i8 i0 ]
$d2 = (double) i0.......................	[entry: i4 r14 r1 $d1 i8 i0 ]	[exit: i4 r14 r1 $d1 $d2 i8 ]
$d0 = (double) i8.......................	[entry: i4 r14 r1 $d1 $d2 i8 ]	[exit: i4 r14 r1 i8 $d1 $d2 $d0 ]
$d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0)	[entry: i4 r14 r1 i8 $d1 $d2 $d0 ]	[exit: i4 r14 r1 i8 $d1 $d2 $d3 ]
$d4 = $d2 * $d3.........................	[entry: i4 r14 r1 i8 $d1 $d2 $d3 ]	[exit: i4 r14 r1 i8 $d1 $d4 ]
$d5 = $d1 + $d4.........................	[entry: i4 r14 r1 i8 $d1 $d4 ]	[exit: i4 r14 r1 i8 $d5 ]
i7 = (int) $d5..........................	[entry: i4 r14 r1 i8 $d5 ]	[exit: i4 r14 r1 i7 i8 ]
i8 = i8 + 1.............................	[entry: i4 r14 r1 i7 i8 ]	[exit: i4 r14 r1 i7 i8 ]
goto [?= (branch)]......................	[entry: i4 r14 r1 i7 i8 ]	[exit: i4 r14 r1 i7 i8 ]
$r2 = new java.lang.StringBuilder.......	[entry: i4 r14 r1 i7 ]	[exit: i4 r14 r1 i7 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: i4 r14 r1 i7 $r2 ]	[exit: i4 r14 $r2 r1 i7 ]
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)	[entry: i4 r14 $r2 r1 i7 ]	[exit: i4 r14 $r2 $r3 r1 ]
$r4 = virtualinvoke r1.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r3)	[entry: i4 r14 $r2 $r3 r1 ]	[exit: r1 i4 r14 $r2 $r4 ]
$r5 = (java.lang.String) $r4............	[entry: r1 i4 r14 $r2 $r4 ]	[exit: r1 i4 r14 $r5 $r2 ]
$r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)	[entry: r1 i4 r14 $r5 $r2 ]	[exit: r1 i4 r14 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14)	[entry: r1 i4 r14 $r6 ]	[exit: r1 i4 $r7 ]
r14 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i4 $r7 ]	[exit: r14 r1 i4 ]
goto [?= (branch)]......................	[entry: r14 r1 i4 ]	[exit: r14 r1 i4 ]
return r14..............................	[entry: r14 ]	[exit: ]
********************
Class Name: Conversions.BinaryToHexadecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter binary number:")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
r4 = staticinvoke <Conversions.BinaryToHexadecimal: java.lang.String binToHex(int)>(i0)	[entry: r2 i0 ]	[exit: r2 r4 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 ]	[exit: r2 $r6 r4 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 r4 ]	[exit: r2 $r6 r4 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 r4 $r5 ]	[exit: r2 $r6 r4 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Hexadecimal Code:")	[entry: r2 $r6 r4 $r5 ]	[exit: r2 $r6 r4 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: r2 $r6 r4 $r7 ]	[exit: r2 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r6 $r8 ]	[exit: r2 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 $r9 $r6 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.HexaDecimalToDecimal, Method Name: getHexaToDec, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
r0 = "0123456789ABCDEF".................	[entry: r1 ]	[exit: r0 r1 ]
r2 = virtualinvoke r1.<java.lang.String: java.lang.String toUpperCase()>()	[entry: r0 r1 ]	[exit: r0 r2 ]
i4 = 0..................................	[entry: r0 r2 ]	[exit: i4 r0 r2 ]
i5 = 0..................................	[entry: i4 r0 r2 ]	[exit: i4 r0 i5 r2 ]
$i0 = virtualinvoke r2.<java.lang.String: int length()>()	[entry: i4 r0 i5 r2 ]	[exit: i4 r0 r2 i5 $i0 ]
if i5 >= $i0 goto return i4.............	[entry: i4 r0 r2 i5 $i0 ]	[exit: i4 r0 i5 r2 ]
$c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(i5)	[entry: i4 r0 i5 r2 ]	[exit: r2 i5 i4 $c1 r0 ]
i2 = virtualinvoke r0.<java.lang.String: int indexOf(int)>($c1)	[entry: r2 i5 i4 $c1 r0 ]	[exit: r0 r2 i5 i2 i4 ]
$i3 = 16 * i4...........................	[entry: r0 r2 i5 i2 i4 ]	[exit: r0 r2 i5 $i3 i2 ]
i4 = $i3 + i2...........................	[entry: r0 r2 i5 $i3 i2 ]	[exit: i4 r0 r2 i5 ]
i5 = i5 + 1.............................	[entry: i4 r0 r2 i5 ]	[exit: i4 r0 i5 r2 ]
goto [?= $i0 = virtualinvoke r2.<java.lang.String: int length()>()]	[entry: i4 r0 i5 r2 ]	[exit: i4 r0 i5 r2 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: Conversions.HexaDecimalToDecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter Hexadecimal Number : ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r4 ]
i0 = staticinvoke <Conversions.HexaDecimalToDecimal: int getHexaToDec(java.lang.String)>(r4)	[entry: r2 r4 ]	[exit: r2 i0 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r6 i0 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 i0 ]	[exit: r2 $r6 i0 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 i0 $r5 ]	[exit: r2 $r6 i0 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number in Decimal: ")	[entry: r2 $r6 i0 $r5 ]	[exit: r2 $r6 i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r6 i0 $r7 ]	[exit: r2 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r6 $r8 ]	[exit: r2 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 $r9 $r6 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.BinaryToOctal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Input the binary number: ")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r5 i0 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i0 ]	[exit: r2 $r5 i0 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Octal equivalent: ")	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 $r6 i0 ]
$r7 = staticinvoke <Conversions.BinaryToOctal: java.lang.String convertBinaryToOctal(int)>(i0)	[entry: r2 $r5 $r6 i0 ]	[exit: r2 $r5 $r7 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)	[entry: r2 $r5 $r7 $r6 ]	[exit: r2 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r5 $r8 ]	[exit: r2 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 $r9 $r5 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.BinaryToOctal, Method Name: convertBinaryToOctal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
r3 = "".................................	[entry: i1 ]	[exit: r3 i1 ]
z0 = 0..................................	[entry: r3 i1 ]	[exit: r3 i1 ]
i2 = 1..................................	[entry: r3 i1 ]	[exit: r3 i2 i1 ]
if i1 == 0 goto return r3...............	[entry: r3 i2 i1 ]	[exit: r3 i1 i2 ]
i3 = 0..................................	[entry: i1 r3 i2 ]	[exit: i1 r3 i3 i2 ]
i4 = 0..................................	[entry: i1 r3 i3 i2 ]	[exit: i1 r3 i3 i2 i4 ]
if i4 >= 3 goto $r0 = new java.lang.StringBuilder	[entry: i1 r3 i3 i2 i4 ]	[exit: i1 r3 i3 i4 i2 ]
i5 = i1 % 10............................	[entry: r3 i4 i3 i2 i1 ]	[exit: r3 i4 i3 i5 i2 i1 ]
i1 = i1 / 10............................	[entry: r3 i4 i3 i5 i2 i1 ]	[exit: i1 r3 i4 i3 i5 i2 ]
$i0 = i5 * i2...........................	[entry: i1 r3 i4 i3 i5 i2 ]	[exit: i1 r3 i4 i2 i3 $i0 ]
i3 = i3 + $i0...........................	[entry: i1 r3 i4 i2 i3 $i0 ]	[exit: i1 r3 i3 i4 i2 ]
i2 = i2 * 2.............................	[entry: i1 r3 i3 i4 i2 ]	[exit: i1 r3 i3 i2 i4 ]
i4 = i4 + 1.............................	[entry: i1 r3 i3 i2 i4 ]	[exit: i1 r3 i3 i2 i4 ]
goto [?= (branch)]......................	[entry: i1 r3 i3 i2 i4 ]	[exit: i1 r3 i3 i2 i4 ]
$r0 = new java.lang.StringBuilder.......	[entry: i1 r3 i3 ]	[exit: i1 r3 i3 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i1 r3 i3 $r0 ]	[exit: i1 r3 i3 $r0 ]
$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)	[entry: i1 r3 i3 $r0 ]	[exit: i1 r3 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)	[entry: i1 r3 $r1 ]	[exit: i1 $r2 ]
r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i1 $r2 ]	[exit: r3 i1 ]
i2 = 1..................................	[entry: r3 i1 ]	[exit: r3 i2 i1 ]
goto [?= (branch)]......................	[entry: r3 i2 i1 ]	[exit: r3 i2 i1 ]
return r3...............................	[entry: r3 ]	[exit: ]
********************
Class Name: Conversions.DecimalToBinary, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Conversions.DecimalToBinary: void conventionalConversion()>()	[entry: ]	[exit: ]
staticinvoke <Conversions.DecimalToBinary: void bitwiseConversion()>()	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.DecimalToBinary, Method Name: conventionalConversion, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i4 = 0..................................	[entry: ]	[exit: i4 ]
i5 = 0..................................	[entry: i4 ]	[exit: i4 i5 ]
$r0 = new java.util.Scanner.............	[entry: i4 i5 ]	[exit: i4 i5 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: i4 i5 $r0 ]	[exit: i4 i5 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: i4 i5 $r1 $r0 ]	[exit: i4 i5 $r0 ]
r2 = $r0................................	[entry: i4 i5 $r0 ]	[exit: i4 i5 r2 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i4 i5 r2 ]	[exit: i4 i5 r2 $r4 ]
$r3 = newarray (java.lang.Object)[0]....	[entry: i4 i5 r2 $r4 ]	[exit: i4 i5 r2 $r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Conventional conversion.%n Enter the decimal number: ", $r3)	[entry: i4 i5 r2 $r3 $r4 ]	[exit: i4 i5 r2 ]
i6 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i4 i5 r2 ]	[exit: r2 i4 i5 i6 ]
if i6 == 0 goto $r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
i0 = i6 % 2.............................	[entry: r2 i4 i5 i6 ]	[exit: r2 i6 i4 i0 i5 ]
$i1 = i5................................	[entry: r2 i6 i4 i0 i5 ]	[exit: r2 i6 i4 i0 $i1 i5 ]
i5 = i5 + 1.............................	[entry: r2 i6 i4 i0 $i1 i5 ]	[exit: r2 i5 i6 i4 i0 $i1 ]
$d0 = (double) $i1......................	[entry: r2 i5 i6 i4 i0 $i1 ]	[exit: r2 i5 i6 i4 i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0)	[entry: r2 i5 i6 i4 i0 $d0 ]	[exit: r2 i5 i6 i4 i0 $d1 ]
$i2 = (int) $d1.........................	[entry: r2 i5 i6 i4 i0 $d1 ]	[exit: r2 i5 i6 i4 i0 $i2 ]
$i3 = i0 * $i2..........................	[entry: r2 i5 i6 i4 i0 $i2 ]	[exit: r2 i5 i6 i4 $i3 ]
i4 = i4 + $i3...........................	[entry: r2 i5 i6 i4 $i3 ]	[exit: r2 i4 i5 i6 ]
i6 = i6 / 2.............................	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
goto [?= (branch)]......................	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i4 ]	[exit: r2 $r7 i4 ]
$r6 = new java.lang.StringBuilder.......	[entry: r2 $r7 i4 ]	[exit: r2 $r7 i4 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r7 i4 $r6 ]	[exit: r2 $r7 i4 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tBinary number: ")	[entry: r2 $r7 i4 $r6 ]	[exit: r2 $r7 i4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: r2 $r7 i4 $r8 ]	[exit: r2 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r7 $r9 ]	[exit: r2 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r2 $r10 $r7 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.DecimalToBinary, Method Name: bitwiseConversion, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i4 = 0..................................	[entry: ]	[exit: i4 ]
i5 = 0..................................	[entry: i4 ]	[exit: i4 i5 ]
$r0 = new java.util.Scanner.............	[entry: i4 i5 ]	[exit: i4 i5 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: i4 i5 $r0 ]	[exit: i4 i5 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: i4 i5 $r1 $r0 ]	[exit: i4 i5 $r0 ]
r2 = $r0................................	[entry: i4 i5 $r0 ]	[exit: i4 i5 r2 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i4 i5 r2 ]	[exit: i4 i5 r2 $r4 ]
$r3 = newarray (java.lang.Object)[0]....	[entry: i4 i5 r2 $r4 ]	[exit: i4 i5 r2 $r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("Bitwise conversion.%n Enter the decimal number: ", $r3)	[entry: i4 i5 r2 $r3 $r4 ]	[exit: i4 i5 r2 ]
i6 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i4 i5 r2 ]	[exit: r2 i4 i5 i6 ]
if i6 == 0 goto $r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
i0 = i6 & 1.............................	[entry: r2 i4 i5 i6 ]	[exit: r2 i6 i4 i0 i5 ]
$i1 = i5................................	[entry: r2 i6 i4 i0 i5 ]	[exit: r2 i6 i4 i0 $i1 i5 ]
i5 = i5 + 1.............................	[entry: r2 i6 i4 i0 $i1 i5 ]	[exit: r2 i5 i6 i4 i0 $i1 ]
$d0 = (double) $i1......................	[entry: r2 i5 i6 i4 i0 $i1 ]	[exit: r2 i5 i6 i4 i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d0)	[entry: r2 i5 i6 i4 i0 $d0 ]	[exit: r2 i5 i6 i4 i0 $d1 ]
$i2 = (int) $d1.........................	[entry: r2 i5 i6 i4 i0 $d1 ]	[exit: r2 i5 i6 i4 i0 $i2 ]
$i3 = i0 * $i2..........................	[entry: r2 i5 i6 i4 i0 $i2 ]	[exit: r2 i5 i6 i4 $i3 ]
i4 = i4 + $i3...........................	[entry: r2 i5 i6 i4 $i3 ]	[exit: r2 i4 i5 i6 ]
i6 = i6 >> 1............................	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
goto [?= (branch)]......................	[entry: r2 i4 i5 i6 ]	[exit: r2 i4 i5 i6 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i4 ]	[exit: r2 $r7 i4 ]
$r6 = new java.lang.StringBuilder.......	[entry: r2 $r7 i4 ]	[exit: r2 $r7 i4 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r7 i4 $r6 ]	[exit: r2 $r7 i4 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\tBinary number: ")	[entry: r2 $r7 i4 $r6 ]	[exit: r2 $r7 i4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: r2 $r7 i4 $r8 ]	[exit: r2 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r7 $r9 ]	[exit: r2 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r2 $r10 $r7 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.HexaDecimalToBinary, Method Name: convert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @this: Conversions.HexaDecimalToBinary	[entry: ]	[exit: r6 ]
r0 := @parameter0: java.lang.String.....	[entry: r6 ]	[exit: r6 r0 ]
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>(r0, 16)	[entry: r6 r0 ]	[exit: r6 r0 i0 ]
r1 = staticinvoke <java.lang.Integer: java.lang.String toBinaryString(int)>(i0)	[entry: r6 r0 i0 ]	[exit: r1 r6 r0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r6 r0 ]	[exit: $r3 r1 r6 r0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 r1 r6 r0 ]	[exit: $r3 r1 r6 r0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 r1 r6 r0 $r2 ]	[exit: $r3 r1 r6 r0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: $r3 r1 r6 r0 $r2 ]	[exit: $r3 r1 r6 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ")	[entry: $r3 r1 r6 $r4 ]	[exit: $r3 $r5 r1 r6 ]
$r7 = virtualinvoke r6.<Conversions.HexaDecimalToBinary: java.lang.String completeDigits(java.lang.String)>(r1)	[entry: $r3 $r5 r1 r6 ]	[exit: $r3 $r7 $r5 ]
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)	[entry: $r3 $r7 $r5 ]	[exit: $r3 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 $r8 ]	[exit: $r9 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: $r9 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.HexaDecimalToBinary, Method Name: completeDigits, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: Conversions.HexaDecimalToBinary	[entry: ]	[exit: ]
r4 := @parameter0: java.lang.String.....	[entry: ]	[exit: r4 ]
i0 = virtualinvoke r4.<java.lang.String: int length()>()	[entry: r4 ]	[exit: r4 i0 ]
if i0 >= 8 goto return r4...............	[entry: r4 i0 ]	[exit: r4 i0 ]
$r0 = new java.lang.StringBuilder.......	[entry: i0 r4 ]	[exit: i0 r4 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i0 r4 $r0 ]	[exit: i0 r4 $r0 ]
$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("0")	[entry: i0 r4 $r0 ]	[exit: i0 r4 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: i0 r4 $r1 ]	[exit: i0 $r2 ]
r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i0 $r2 ]	[exit: r4 i0 ]
i0 = i0 + 1.............................	[entry: r4 i0 ]	[exit: r4 i0 ]
goto [?= (branch)]......................	[entry: r4 i0 ]	[exit: r4 i0 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: Conversions.HexaDecimalToBinary, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (java.lang.String)[11]...	[entry: ]	[exit: $r0 ]
$r0[0] = "1"............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = "A1"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = "ef"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = "BA"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = "AA"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = "BB"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = "19"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = "01"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = "02"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[9] = "03"...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[10] = "04"..........................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new Conversions.HexaDecimalToBinary	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<Conversions.HexaDecimalToBinary: void <init>()>()	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r3 r1 ]
r4 = r1.................................	[entry: r3 r1 ]	[exit: r3 r4 ]
i0 = lengthof r4........................	[entry: r3 r4 ]	[exit: r3 r4 i0 ]
i1 = 0..................................	[entry: r3 r4 i0 ]	[exit: r3 r4 i1 i0 ]
if i1 >= i0 goto return.................	[entry: r3 r4 i1 i0 ]	[exit: i0 r3 r4 i1 ]
r5 = r4[i1].............................	[entry: i0 r3 r4 i1 ]	[exit: r4 i0 i1 r5 r3 ]
virtualinvoke r3.<Conversions.HexaDecimalToBinary: void convert(java.lang.String)>(r5)	[entry: r4 i0 i1 r5 r3 ]	[exit: r3 r4 i0 i1 ]
i1 = i1 + 1.............................	[entry: r3 r4 i0 i1 ]	[exit: r3 r4 i1 i0 ]
goto [?= (branch)]......................	[entry: r3 r4 i1 i0 ]	[exit: r3 r4 i1 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.DecimalToAnyBase, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r25 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.io.BufferedReader........	[entry: ]	[exit: $r0 ]
$r1 = new java.io.InputStreamReader.....	[entry: $r0 ]	[exit: $r0 $r1 ]
$r2 = <java.lang.System: java.io.InputStream in>	[entry: $r0 $r1 ]	[exit: $r0 $r2 $r1 ]
specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2)	[entry: $r0 $r2 $r1 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r3 = $r0................................	[entry: $r0 ]	[exit: r3 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r3 ]	[exit: r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Enter the decimal input below: ")	[entry: r3 $r4 ]	[exit: r3 ]
$r5 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r3 ]	[exit: r3 $r5 ]
i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r5)	[entry: r3 $r5 ]	[exit: i0 r3 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r3 ]	[exit: i0 r3 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println()>()	[entry: i0 r3 $r6 ]	[exit: i0 r3 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r3 ]	[exit: i0 r3 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Enter the base below: ")	[entry: i0 r3 $r7 ]	[exit: i0 r3 ]
$r8 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: i0 r3 ]	[exit: r3 i0 $r8 ]
i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8)	[entry: r3 i0 $r8 ]	[exit: r3 i1 i0 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i1 i0 ]	[exit: r3 i1 i0 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println()>()	[entry: r3 i1 i0 $r9 ]	[exit: r3 i1 i0 ]
$r11 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i1 i0 ]	[exit: r3 i1 $r11 i0 ]
$r10 = new java.lang.StringBuilder......	[entry: r3 i1 $r11 i0 ]	[exit: r3 i1 $r11 i0 $r10 ]
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()	[entry: r3 i1 $r11 i0 $r10 ]	[exit: r3 i1 $r11 i0 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decimal Input is: ")	[entry: r3 i1 $r11 i0 $r10 ]	[exit: r3 i1 $r11 i0 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r3 i1 $r11 i0 $r12 ]	[exit: r3 i1 i0 $r11 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 i1 i0 $r11 $r13 ]	[exit: r3 i1 i0 $r14 $r11 ]
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14)	[entry: r3 i1 i0 $r14 $r11 ]	[exit: r3 i1 i0 ]
$r16 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i1 i0 ]	[exit: r3 $r16 i1 i0 ]
$r15 = new java.lang.StringBuilder......	[entry: r3 $r16 i1 i0 ]	[exit: r3 $r16 i1 i0 $r15 ]
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r16 i1 i0 $r15 ]	[exit: r3 $r16 i1 i0 $r15 ]
$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Value of ")	[entry: r3 $r16 i1 i0 $r15 ]	[exit: r3 $r16 i1 i0 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r3 $r16 i1 i0 $r17 ]	[exit: r3 $r16 i0 i1 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in base ")	[entry: r3 $r16 i0 i1 $r18 ]	[exit: r3 $r16 i0 i1 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: r3 $r16 i0 i1 $r19 ]	[exit: r3 $r16 i0 i1 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is: ")	[entry: r3 $r16 i0 i1 $r20 ]	[exit: r3 $r16 $r21 i0 i1 ]
$r22 = staticinvoke <Conversions.DecimalToAnyBase: java.lang.String convertToAnyBase(int,int)>(i0, i1)	[entry: r3 $r16 $r21 i0 i1 ]	[exit: r3 $r16 $r22 $r21 ]
$r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)	[entry: r3 $r16 $r22 $r21 ]	[exit: r3 $r16 $r23 ]
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 $r16 $r23 ]	[exit: r3 $r24 $r16 ]
virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r24)	[entry: r3 $r24 $r16 ]	[exit: r3 ]
virtualinvoke r3.<java.io.BufferedReader: void close()>()	[entry: r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.DecimalToAnyBase, Method Name: convertToAnyBase, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i4 := @parameter0: int..................	[entry: ]	[exit: i4 ]
i1 := @parameter1: int..................	[entry: i4 ]	[exit: i1 i4 ]
$r0 = new java.util.ArrayList...........	[entry: i1 i4 ]	[exit: i1 i4 $r0 ]
specialinvoke $r0.<java.util.ArrayList: void <init>()>()	[entry: i1 i4 $r0 ]	[exit: i1 i4 $r0 ]
r1 = $r0................................	[entry: i1 i4 $r0 ]	[exit: r1 i1 i4 ]
if i4 <= 0 goto $r2 = new java.lang.StringBuilder	[entry: r1 i1 i4 ]	[exit: r1 i4 i1 ]
$i2 = i4 % i1...........................	[entry: r1 i4 i1 ]	[exit: i4 i1 r1 $i2 ]
$c3 = staticinvoke <Conversions.DecimalToAnyBase: char reVal(int)>($i2)	[entry: i4 i1 r1 $i2 ]	[exit: i4 i1 r1 $c3 ]
$r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)	[entry: i4 i1 r1 $c3 ]	[exit: i4 i1 $r10 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r10)	[entry: i4 i1 $r10 r1 ]	[exit: r1 i4 i1 ]
i4 = i4 / i1............................	[entry: r1 i4 i1 ]	[exit: r1 i1 i4 ]
goto [?= (branch)]......................	[entry: r1 i1 i4 ]	[exit: r1 i1 i4 ]
$r2 = new java.lang.StringBuilder.......	[entry: r1 ]	[exit: $r2 r1 ]
$i0 = virtualinvoke r1.<java.util.ArrayList: int size()>()	[entry: $r2 r1 ]	[exit: r1 $i0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>($i0)	[entry: r1 $i0 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r3 r1 ]
r4 = virtualinvoke r1.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r3 r1 ]	[exit: r3 r4 ]
$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()	[entry: r3 r4 ]	[exit: r3 r4 $z0 ]
if $z0 == 0 goto $r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r3 r4 $z0 ]	[exit: r3 r4 ]
$r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()	[entry: r3 r4 ]	[exit: r4 r3 $r7 ]
r8 = (java.lang.Character) $r7..........	[entry: r4 r3 $r7 ]	[exit: r4 r8 r3 ]
virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8)	[entry: r4 r8 r3 ]	[exit: r3 r4 ]
goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]	[entry: r3 r4 ]	[exit: r3 r4 ]
$r5 = virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder reverse()>()	[entry: r3 ]	[exit: $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r5 ]	[exit: $r6 ]
return $r6..............................	[entry: $r6 ]	[exit: ]
********************
Class Name: Conversions.DecimalToAnyBase, Method Name: reVal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 < 0 goto $i1 = i0 - 10............	[entry: i0 ]	[exit: i0 ]
if i0 > 9 goto $i1 = i0 - 10............	[entry: i0 ]	[exit: i0 ]
$i4 = i0 + 48...........................	[entry: i0 ]	[exit: $i4 ]
$c5 = (char) $i4........................	[entry: $i4 ]	[exit: $c5 ]
return $c5..............................	[entry: $c5 ]	[exit: ]
$i1 = i0 - 10...........................	[entry: i0 ]	[exit: $i1 ]
$i2 = $i1 + 65..........................	[entry: $i1 ]	[exit: $i2 ]
$c3 = (char) $i2........................	[entry: $i2 ]	[exit: $c3 ]
return $c3..............................	[entry: $c3 ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToDecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$z0 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i8 = staticinvoke <Conversions.AnyBaseToDecimal: int convertToDecimal(java.lang.String,int)>("1010", 2)	[entry: ]	[exit: $i8 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>("1010", 2)	[entry: $i8 ]	[exit: $i8 $r8 ]
$i9 = virtualinvoke $r8.<java.lang.Integer: int intValue()>()	[entry: $i8 $r8 ]	[exit: $i8 $i9 ]
if $i8 == $i9 goto $z1 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $i8 $i9 ]	[exit: ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z1 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i6 = staticinvoke <Conversions.AnyBaseToDecimal: int convertToDecimal(java.lang.String,int)>("777", 8)	[entry: ]	[exit: $i6 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>("777", 8)	[entry: $i6 ]	[exit: $i6 $r6 ]
$i7 = virtualinvoke $r6.<java.lang.Integer: int intValue()>()	[entry: $i6 $r6 ]	[exit: $i6 $i7 ]
if $i6 == $i7 goto $z2 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $i6 $i7 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z2 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$i4 = staticinvoke <Conversions.AnyBaseToDecimal: int convertToDecimal(java.lang.String,int)>("999", 10)	[entry: ]	[exit: $i4 ]
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>("999", 10)	[entry: $i4 ]	[exit: $i4 $r4 ]
$i5 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()	[entry: $i4 $r4 ]	[exit: $i4 $i5 ]
if $i4 == $i5 goto $z3 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $i4 $i5 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z3 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$i2 = staticinvoke <Conversions.AnyBaseToDecimal: int convertToDecimal(java.lang.String,int)>("ABCDEF", 16)	[entry: ]	[exit: $i2 ]
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>("ABCDEF", 16)	[entry: $i2 ]	[exit: $i2 $r2 ]
$i3 = virtualinvoke $r2.<java.lang.Integer: int intValue()>()	[entry: $i2 $r2 ]	[exit: $i2 $i3 ]
if $i2 == $i3 goto $z4 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: $i2 $i3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z4 = <Conversions.AnyBaseToDecimal: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$i0 = staticinvoke <Conversions.AnyBaseToDecimal: int convertToDecimal(java.lang.String,int)>("XYZ", 36)	[entry: ]	[exit: $i0 ]
$r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)>("XYZ", 36)	[entry: $i0 ]	[exit: $i0 $r0 ]
$i1 = virtualinvoke $r0.<java.lang.Integer: int intValue()>()	[entry: $i0 $r0 ]	[exit: $i0 $i1 ]
if $i0 == $i1 goto return...............	[entry: $i0 $i1 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToDecimal, Method Name: convertToDecimal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i3 := @parameter1: int..................	[entry: r0 ]	[exit: i3 r0 ]
i7 = 0..................................	[entry: i3 r0 ]	[exit: i7 i3 r0 ]
i8 = 1..................................	[entry: i7 i3 r0 ]	[exit: i7 i8 i3 r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i7 i8 i3 r0 ]	[exit: i7 i8 i3 r0 $i0 ]
i9 = $i0 - 1............................	[entry: i7 i8 i3 r0 $i0 ]	[exit: i7 i8 i3 r0 i9 ]
if i9 < 0 goto return i7................	[entry: i7 i8 i3 r0 i9 ]	[exit: i7 i8 i3 i9 r0 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)	[entry: i7 i8 i3 i9 r0 ]	[exit: r0 i7 i8 i9 i3 $c1 ]
i2 = staticinvoke <Conversions.AnyBaseToDecimal: int valOfChar(char)>($c1)	[entry: r0 i7 i8 i9 i3 $c1 ]	[exit: r0 i7 i8 i9 i2 i3 ]
if i2 < i3 goto $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)	[entry: r0 i7 i8 i9 i2 i3 ]	[exit: r0 i3 i7 i8 i9 ]
$r1 = new java.lang.NumberFormatException	[entry: r0 ]	[exit: $r1 r0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r1 r0 ]	[exit: $r1 r0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r1 r0 $r2 ]	[exit: $r1 r0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("For input string ")	[entry: $r1 r0 $r2 ]	[exit: $r1 r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: $r1 r0 $r3 ]	[exit: $r1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r1 $r4 ]	[exit: $r5 $r1 ]
specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r5)	[entry: $r5 $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9)	[entry: i3 i7 i8 i9 r0 ]	[exit: r0 i9 i3 i7 i8 $c4 ]
$i5 = staticinvoke <Conversions.AnyBaseToDecimal: int valOfChar(char)>($c4)	[entry: r0 i9 i3 i7 i8 $c4 ]	[exit: r0 i9 i3 i7 $i5 i8 ]
$i6 = $i5 * i8..........................	[entry: r0 i9 i3 i7 $i5 i8 ]	[exit: r0 i9 i8 i3 i7 $i6 ]
i7 = i7 + $i6...........................	[entry: r0 i9 i8 i3 i7 $i6 ]	[exit: r0 i7 i9 i8 i3 ]
i8 = i8 * i3............................	[entry: r0 i7 i9 i8 i3 ]	[exit: i7 i8 i3 r0 i9 ]
i9 = i9 + -1............................	[entry: i7 i8 i3 r0 i9 ]	[exit: i7 i8 i3 r0 i9 ]
goto [?= (branch)]......................	[entry: i7 i8 i3 r0 i9 ]	[exit: i7 i8 i3 r0 i9 ]
return i7...............................	[entry: i7 ]	[exit: ]
********************
Class Name: Conversions.AnyBaseToDecimal, Method Name: valOfChar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
c0 := @parameter0: char.................	[entry: ]	[exit: c0 ]
$z0 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(c0)	[entry: c0 ]	[exit: c0 $z0 ]
if $z0 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)	[entry: c0 $z0 ]	[exit: c0 ]
$z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)	[entry: c0 ]	[exit: c0 $z2 ]
if $z2 != 0 goto $z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)	[entry: c0 $z2 ]	[exit: c0 ]
$r0 = new java.lang.NumberFormatException	[entry: c0 ]	[exit: $r0 c0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r0 c0 ]	[exit: $r0 c0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r0 c0 $r1 ]	[exit: $r0 c0 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid character :")	[entry: $r0 c0 $r1 ]	[exit: $r0 c0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)	[entry: $r0 c0 $r2 ]	[exit: $r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r0 $r3 ]	[exit: $r4 $r0 ]
specialinvoke $r0.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r4)	[entry: $r4 $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
$z1 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c0)	[entry: c0 ]	[exit: c0 $z1 ]
if $z1 == 0 goto $i1 = c0 - 65..........	[entry: c0 $z1 ]	[exit: c0 ]
$i2 = c0 - 48...........................	[entry: c0 ]	[exit: $i2 ]
goto [?= return $i2]....................	[entry: $i2 ]	[exit: $i2 ]
$i1 = c0 - 65...........................	[entry: c0 ]	[exit: $i1 ]
$i2 = $i1 + 10..........................	[entry: $i1 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: Conversions.DecimalToHexaDecimal, Method Name: decToHex, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i2 := @parameter0: int..................	[entry: ]	[exit: i2 ]
$r0 = new java.lang.StringBuilder.......	[entry: i2 ]	[exit: i2 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(8)	[entry: i2 $r0 ]	[exit: i2 $r0 ]
r1 = $r0................................	[entry: i2 $r0 ]	[exit: i2 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: void setLength(int)>(8)	[entry: i2 r1 ]	[exit: r1 i2 ]
i3 = 7..................................	[entry: r1 i2 ]	[exit: r1 i2 i3 ]
if i3 < 0 goto $r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i2 i3 ]	[exit: r1 i3 i2 ]
i0 = i2 & 15............................	[entry: i3 r1 i2 ]	[exit: i2 i3 r1 i0 ]
$r4 = <Conversions.DecimalToHexaDecimal: char[] hexDigits>	[entry: i2 i3 r1 i0 ]	[exit: i2 i3 r1 $r4 i0 ]
$c1 = $r4[i0]...........................	[entry: i2 i3 r1 $r4 i0 ]	[exit: i2 i3 $c1 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: void setCharAt(int,char)>(i3, $c1)	[entry: i2 i3 $c1 r1 ]	[exit: r1 i3 i2 ]
i2 = i2 >> 4............................	[entry: r1 i3 i2 ]	[exit: r1 i2 i3 ]
i3 = i3 + -1............................	[entry: r1 i2 i3 ]	[exit: r1 i2 i3 ]
goto [?= (branch)]......................	[entry: r1 i2 i3 ]	[exit: r1 i2 i3 ]
$r2 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 ]	[exit: $r2 ]
$r3 = virtualinvoke $r2.<java.lang.String: java.lang.String toLowerCase()>()	[entry: $r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Conversions.DecimalToHexaDecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r13 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Test...")	[entry: $r0 ]	[exit: ]
i0 = 305445566..........................	[entry: ]	[exit: i0 ]
r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(i0)	[entry: i0 ]	[exit: r1 i0 ]
r2 = staticinvoke <Conversions.DecimalToHexaDecimal: java.lang.String decToHex(int)>(i0)	[entry: r1 i0 ]	[exit: r2 r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r1 ]	[exit: r2 $r4 r1 ]
$r3 = new java.lang.StringBuilder.......	[entry: r2 $r4 r1 ]	[exit: r2 $r4 r1 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r4 r1 $r3 ]	[exit: r2 $r4 r1 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result from the library : ")	[entry: r2 $r4 r1 $r3 ]	[exit: r2 $r4 r1 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)	[entry: r2 $r4 r1 $r5 ]	[exit: r2 $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r4 $r6 ]	[exit: r2 $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: r2 $r7 $r4 ]	[exit: r2 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: $r9 r2 ]
$r8 = new java.lang.StringBuilder.......	[entry: $r9 r2 ]	[exit: $r9 r2 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: $r9 r2 $r8 ]	[exit: $r9 r2 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Result decToHex method : ")	[entry: $r9 r2 $r8 ]	[exit: $r9 r2 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)	[entry: $r9 r2 $r10 ]	[exit: $r9 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r9 $r11 ]	[exit: $r12 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)	[entry: $r12 $r9 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.AnytoAny, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i6 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i6 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i6 r2 ]	[exit: i0 i6 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 i6 r2 ]	[exit: r2 i1 i0 i6 ]
i7 = 1..................................	[entry: r2 i1 i0 i6 ]	[exit: r2 i1 i0 i7 i6 ]
i8 = 0..................................	[entry: r2 i1 i0 i7 i6 ]	[exit: r2 i1 i8 i0 i7 i6 ]
i9 = 0..................................	[entry: r2 i1 i8 i0 i7 i6 ]	[exit: r2 i9 i1 i8 i0 i7 i6 ]
if i6 == 0 goto i10 = 1.................	[entry: r2 i9 i1 i8 i0 i7 i6 ]	[exit: r2 i9 i1 i8 i0 i7 i6 ]
$i4 = i6 % 10...........................	[entry: r2 i9 i1 i0 i8 i7 i6 ]	[exit: r2 i9 i1 i6 i0 i8 $i4 i7 ]
$i5 = $i4 * i7..........................	[entry: r2 i9 i1 i6 i0 i8 $i4 i7 ]	[exit: r2 i9 i1 i6 i7 i0 i8 $i5 ]
i8 = i8 + $i5...........................	[entry: r2 i9 i1 i6 i7 i0 i8 $i5 ]	[exit: r2 i9 i1 i8 i6 i7 i0 ]
i7 = i7 * i0............................	[entry: r2 i9 i1 i8 i6 i7 i0 ]	[exit: r2 i9 i1 i8 i0 i7 i6 ]
i6 = i6 / 10............................	[entry: r2 i9 i1 i8 i0 i7 i6 ]	[exit: r2 i9 i1 i8 i0 i7 i6 ]
goto [?= (branch)]......................	[entry: r2 i9 i1 i8 i0 i7 i6 ]	[exit: r2 i9 i1 i8 i0 i7 i6 ]
i10 = 1.................................	[entry: r2 i9 i1 i8 ]	[exit: r2 i9 i10 i1 i8 ]
if i8 == 0 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i9 i10 i1 i8 ]	[exit: r2 i9 i10 i8 i1 ]
$i2 = i8 % i1...........................	[entry: r2 i9 i10 i8 i1 ]	[exit: r2 i8 i1 i9 $i2 i10 ]
$i3 = $i2 * i10.........................	[entry: r2 i8 i1 i9 $i2 i10 ]	[exit: r2 i8 i1 i10 i9 $i3 ]
i9 = i9 + $i3...........................	[entry: r2 i8 i1 i10 i9 $i3 ]	[exit: r2 i9 i8 i1 i10 ]
i10 = i10 * 10..........................	[entry: r2 i9 i8 i1 i10 ]	[exit: r2 i9 i10 i8 i1 ]
i8 = i8 / i1............................	[entry: r2 i9 i10 i8 i1 ]	[exit: r2 i9 i10 i1 i8 ]
goto [?= (branch)]......................	[entry: r2 i9 i10 i1 i8 ]	[exit: r2 i9 i10 i1 i8 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i9 ]	[exit: r2 i9 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(int)>(i9)	[entry: r2 i9 $r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Conversions.BinaryToDecimal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i5 = 0..................................	[entry: r2 ]	[exit: i5 r2 ]
i6 = 0..................................	[entry: i5 r2 ]	[exit: i5 i6 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i5 i6 r2 ]	[exit: i5 i6 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Binary number: ")	[entry: i5 i6 r2 $r3 ]	[exit: i5 i6 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i5 i6 r2 ]	[exit: r2 i5 i6 i0 ]
i7 = i0.................................	[entry: r2 i5 i6 i0 ]	[exit: r2 i5 i6 i7 ]
if i7 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
i1 = i7 % 10............................	[entry: r2 i5 i6 i7 ]	[exit: r2 i7 i5 i1 i6 ]
$i2 = i6................................	[entry: r2 i7 i5 i1 i6 ]	[exit: r2 i7 i5 i1 $i2 i6 ]
i6 = i6 + 1.............................	[entry: r2 i7 i5 i1 $i2 i6 ]	[exit: r2 i6 i7 i5 i1 $i2 ]
$d0 = (double) $i2......................	[entry: r2 i6 i7 i5 i1 $i2 ]	[exit: r2 i6 i7 i5 i1 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0)	[entry: r2 i6 i7 i5 i1 $d0 ]	[exit: r2 i6 i7 i5 i1 $d1 ]
$i3 = (int) $d1.........................	[entry: r2 i6 i7 i5 i1 $d1 ]	[exit: r2 i6 i7 i5 i1 $i3 ]
$i4 = i1 * $i3..........................	[entry: r2 i6 i7 i5 i1 $i3 ]	[exit: r2 i6 i7 i5 $i4 ]
i5 = i5 + $i4...........................	[entry: r2 i6 i7 i5 $i4 ]	[exit: r2 i5 i6 i7 ]
i7 = i7 / 10............................	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
goto [?= (branch)]......................	[entry: r2 i5 i6 i7 ]	[exit: r2 i5 i6 i7 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i5 ]	[exit: r2 $r5 i5 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i5 ]	[exit: r2 $r5 i5 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i5 $r4 ]	[exit: r2 $r5 i5 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Decimal equivalent:")	[entry: r2 $r5 i5 $r4 ]	[exit: r2 $r5 i5 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)	[entry: r2 $r5 i5 $r6 ]	[exit: r2 $r5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r5 $r7 ]	[exit: r2 $r8 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r2 $r8 $r5 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: setMinNum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
<divideconquer.ClosestPair: double minNum> = d0	[entry: d0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: setSecondCount, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
<divideconquer.ClosestPair: int secondCount> = i0	[entry: i0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: buildLocation, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
d1 := @parameter1: double...............	[entry: d0 ]	[exit: d0 d1 ]
$r0 = new divideconquer.ClosestPair$Location	[entry: d0 d1 ]	[exit: d0 d1 $r0 ]
specialinvoke $r0.<divideconquer.ClosestPair$Location: void <init>(double,double)>(d0, d1)	[entry: d0 d1 $r0 ]	[exit: $r0 ]
return $r0..............................	[entry: $r0 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: xPartition, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: i1 r0 ]
i0 := @parameter2: int..................	[entry: i1 r0 ]	[exit: i1 r0 i0 ]
r1 = r0[i0].............................	[entry: i1 r0 i0 ]	[exit: r0 r1 i0 i1 ]
i4 = i1 - 1.............................	[entry: r0 r1 i0 i1 ]	[exit: r0 i4 r1 i0 i1 ]
i5 = i1.................................	[entry: r0 i4 r1 i0 i1 ]	[exit: r0 i4 r1 i5 i0 ]
$i2 = i0 - 1............................	[entry: r0 i4 r1 i5 i0 ]	[exit: i0 r0 i4 r1 i5 $i2 ]
if i5 > $i2 goto i6 = i4 + 1............	[entry: i0 r0 i4 r1 i5 $i2 ]	[exit: i0 r0 i4 r1 i5 ]
$r3 = r0[i5]............................	[entry: i4 i0 r1 r0 i5 ]	[exit: r0 i4 i0 i5 r1 $r3 ]
$d1 = $r3.<divideconquer.ClosestPair$Location: double x>	[entry: r0 i4 i0 i5 r1 $r3 ]	[exit: r0 i4 i0 i5 $d1 r1 ]
$d0 = r1.<divideconquer.ClosestPair$Location: double x>	[entry: r0 i4 i0 i5 $d1 r1 ]	[exit: r0 i4 r1 i0 i5 $d1 $d0 ]
$b3 = $d1 cmpg $d0......................	[entry: r0 i4 r1 i0 i5 $d1 $d0 ]	[exit: r0 i4 r1 i0 i5 $b3 ]
if $b3 > 0 goto i5 = i5 + 1.............	[entry: r0 i4 r1 i0 i5 $b3 ]	[exit: r0 i4 r1 i0 i5 ]
i4 = i4 + 1.............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 i5 r0 i4 ]
r6 = r0[i4].............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 r6 i4 r0 i5 ]
$r4 = r0[i5]............................	[entry: r1 i0 r6 i4 r0 i5 ]	[exit: r1 i0 i5 r6 r0 i4 $r4 ]
r0[i4] = $r4............................	[entry: r1 i0 i5 r6 r0 i4 $r4 ]	[exit: i4 r1 i0 r0 i5 r6 ]
r0[i5] = r6.............................	[entry: i4 r1 i0 r0 i5 r6 ]	[exit: r0 i4 r1 i0 i5 ]
i5 = i5 + 1.............................	[entry: r0 i4 r1 i0 i5 ]	[exit: r0 i4 r1 i5 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r0 i4 r1 i5 i0 ]	[exit: r0 i4 r1 i5 i0 ]
i6 = i4 + 1.............................	[entry: i0 r0 i4 ]	[exit: i0 r0 i6 ]
r7 = r0[i6].............................	[entry: i0 r0 i6 ]	[exit: r7 i6 r0 i0 ]
$r2 = r0[i0]............................	[entry: r7 i6 r0 i0 ]	[exit: i0 r7 r0 i6 $r2 ]
r0[i6] = $r2............................	[entry: i0 r7 r0 i6 $r2 ]	[exit: i6 r0 i0 r7 ]
r0[i0] = r7.............................	[entry: i6 r0 i0 r7 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: yPartition, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: i1 r0 ]
i0 := @parameter2: int..................	[entry: i1 r0 ]	[exit: i1 r0 i0 ]
r1 = r0[i0].............................	[entry: i1 r0 i0 ]	[exit: r0 r1 i0 i1 ]
i4 = i1 - 1.............................	[entry: r0 r1 i0 i1 ]	[exit: r0 i4 r1 i0 i1 ]
i5 = i1.................................	[entry: r0 i4 r1 i0 i1 ]	[exit: r0 i4 r1 i5 i0 ]
$i2 = i0 - 1............................	[entry: r0 i4 r1 i5 i0 ]	[exit: i0 r0 i4 r1 i5 $i2 ]
if i5 > $i2 goto i6 = i4 + 1............	[entry: i0 r0 i4 r1 i5 $i2 ]	[exit: i0 r0 i4 r1 i5 ]
$r3 = r0[i5]............................	[entry: i4 i0 r1 r0 i5 ]	[exit: r0 i4 i0 i5 r1 $r3 ]
$d1 = $r3.<divideconquer.ClosestPair$Location: double y>	[entry: r0 i4 i0 i5 r1 $r3 ]	[exit: r0 i4 i0 i5 $d1 r1 ]
$d0 = r1.<divideconquer.ClosestPair$Location: double y>	[entry: r0 i4 i0 i5 $d1 r1 ]	[exit: r0 i4 r1 i0 i5 $d1 $d0 ]
$b3 = $d1 cmpg $d0......................	[entry: r0 i4 r1 i0 i5 $d1 $d0 ]	[exit: r0 i4 r1 i0 i5 $b3 ]
if $b3 > 0 goto i5 = i5 + 1.............	[entry: r0 i4 r1 i0 i5 $b3 ]	[exit: r0 i4 r1 i0 i5 ]
i4 = i4 + 1.............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 i5 r0 i4 ]
r6 = r0[i4].............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 r6 i4 r0 i5 ]
$r4 = r0[i5]............................	[entry: r1 i0 r6 i4 r0 i5 ]	[exit: r1 i0 i5 r6 r0 i4 $r4 ]
r0[i4] = $r4............................	[entry: r1 i0 i5 r6 r0 i4 $r4 ]	[exit: i4 r1 i0 r0 i5 r6 ]
r0[i5] = r6.............................	[entry: i4 r1 i0 r0 i5 r6 ]	[exit: r0 i4 r1 i0 i5 ]
i5 = i5 + 1.............................	[entry: r0 i4 r1 i0 i5 ]	[exit: r0 i4 r1 i5 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r0 i4 r1 i5 i0 ]	[exit: r0 i4 r1 i5 i0 ]
i6 = i4 + 1.............................	[entry: i0 r0 i4 ]	[exit: i0 r0 i6 ]
r7 = r0[i6].............................	[entry: i0 r0 i6 ]	[exit: r7 i6 r0 i0 ]
$r2 = r0[i0]............................	[entry: r7 i6 r0 i0 ]	[exit: i0 r7 r0 i6 $r2 ]
r0[i6] = $r2............................	[entry: i0 r7 r0 i6 $r2 ]	[exit: i6 r0 i0 r7 ]
r0[i0] = r7.............................	[entry: i6 r0 i0 r7 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: xQuickSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r0 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r0 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
i1 := @parameter2: int..................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 i1 ]
if i0 >= i1 goto return.................	[entry: r1 r0 i0 i1 ]	[exit: r1 i0 i1 r0 ]
i2 = virtualinvoke r0.<divideconquer.ClosestPair: int xPartition(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, i1)	[entry: r1 i0 i1 r0 ]	[exit: i1 r1 i0 r0 i2 ]
$i3 = i2 - 1............................	[entry: i1 r1 i0 r0 i2 ]	[exit: i1 i2 r1 i0 $i3 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3)	[entry: i1 i2 r1 i0 $i3 r0 ]	[exit: r1 i1 r0 i2 ]
$i4 = i2 + 1............................	[entry: r1 i1 r0 i2 ]	[exit: r1 $i4 i1 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1)	[entry: r1 $i4 i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: yQuickSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r0 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r0 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
i1 := @parameter2: int..................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 i1 ]
if i0 >= i1 goto return.................	[entry: r1 r0 i0 i1 ]	[exit: r1 i0 i1 r0 ]
i2 = virtualinvoke r0.<divideconquer.ClosestPair: int yPartition(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, i1)	[entry: r1 i0 i1 r0 ]	[exit: i1 r1 i0 r0 i2 ]
$i3 = i2 - 1............................	[entry: i1 r1 i0 r0 i2 ]	[exit: i1 i2 r1 i0 $i3 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3)	[entry: i1 i2 r1 i0 $i3 r0 ]	[exit: r1 i1 r0 i2 ]
$i4 = i2 + 1............................	[entry: r1 i1 r0 i2 ]	[exit: r1 $i4 i1 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1)	[entry: r1 $i4 i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: closestPair, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r4 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r4 ]	[exit: r4 r1 ]
i0 := @parameter1: int..................	[entry: r4 r1 ]	[exit: r4 r1 i0 ]
r0 = newarray (divideconquer.ClosestPair$Location)[i0]	[entry: r4 r1 i0 ]	[exit: r4 r1 r0 i0 ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)	[entry: r4 r1 r0 i0 ]	[exit: r0 r4 i0 ]
i1 = i0 / 2.............................	[entry: r0 r4 i0 ]	[exit: r0 r4 i0 i1 ]
r2 = newarray (divideconquer.ClosestPair$Location)[i1]	[entry: r0 r4 i0 i1 ]	[exit: r0 r4 r2 i0 i1 ]
$i2 = i0 - i1...........................	[entry: r0 r4 r2 i0 i1 ]	[exit: r0 r4 r2 i1 i0 $i2 ]
r3 = newarray (divideconquer.ClosestPair$Location)[$i2]	[entry: r0 r4 r2 i1 i0 $i2 ]	[exit: r0 r4 r3 r2 i1 i0 ]
if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)	[entry: r0 r4 r3 r2 i1 i0 ]	[exit: r0 r4 r3 i0 r2 i1 ]
$d23 = virtualinvoke r4.<divideconquer.ClosestPair: double bruteForce(divideconquer.ClosestPair$Location[])>(r0)	[entry: r0 r4 ]	[exit: $d23 ]
return $d23.............................	[entry: $d23 ]	[exit: ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)	[entry: r4 r3 i0 r0 r2 i1 ]	[exit: r2 r4 r0 r3 i0 i1 ]
$i3 = i0 - i1...........................	[entry: r2 r4 r0 r3 i0 i1 ]	[exit: i0 r2 r4 r0 i1 r3 $i3 ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, r3, 0, $i3)	[entry: i0 r2 r4 r0 i1 r3 $i3 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d24 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d25 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d26 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d27 = virtualinvoke r4.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>(r2, i1)	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 d27 r3 r4 i0 i1 ]
$i4 = i0 - i1...........................	[entry: r0 d27 r3 r4 i0 i1 ]	[exit: r0 i1 i0 d27 r3 $i4 r4 ]
d28 = virtualinvoke r4.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>(r3, $i4)	[entry: r0 i1 i0 d27 r3 $i4 r4 ]	[exit: r4 r0 i1 i0 d27 d28 ]
d29 = staticinvoke <java.lang.Math: double min(double,double)>(d27, d28)	[entry: r4 r0 i1 i0 d27 d28 ]	[exit: d29 r4 r0 i1 i0 ]
i18 = 0.................................	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i18 i0 ]
if i18 >= i0 goto $i5 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i18 i0 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$r16 = r0[i1]...........................	[entry: r4 i0 d29 i18 r0 i1 ]	[exit: r4 i1 i0 d29 r0 i18 $r16 ]
$d19 = $r16.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i1 i0 d29 r0 i18 $r16 ]	[exit: r4 i1 i0 d29 $d19 r0 i18 ]
$r17 = r0[i18]..........................	[entry: r4 i1 i0 d29 $d19 r0 i18 ]	[exit: r4 r0 i1 i0 i18 d29 $d19 $r17 ]
$d18 = $r17.<divideconquer.ClosestPair$Location: double x>	[entry: r4 r0 i1 i0 i18 d29 $d19 $r17 ]	[exit: r4 r0 i1 i0 i18 d29 $d19 $d18 ]
$d20 = $d19 - $d18......................	[entry: r4 r0 i1 i0 i18 d29 $d19 $d18 ]	[exit: r4 r0 i1 i0 i18 d29 $d20 ]
d30 = staticinvoke <java.lang.Math: double abs(double)>($d20)	[entry: r4 r0 i1 i0 i18 d29 $d20 ]	[exit: r4 r0 i1 i0 i18 d30 d29 ]
$b14 = d30 cmpg d29.....................	[entry: r4 r0 i1 i0 i18 d30 d29 ]	[exit: d29 r4 r0 i1 i0 i18 $b14 ]
if $b14 >= 0 goto $r18 = r0[i18]........	[entry: d29 r4 r0 i1 i0 i18 $b14 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$i16 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i0 i18 $i16 ]
$i17 = $i16 + 1.........................	[entry: d29 r4 r0 i1 i0 i18 $i16 ]	[exit: d29 r4 r0 i1 i0 i18 $i17 ]
staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>($i17)	[entry: d29 r4 r0 i1 i0 i18 $i17 ]	[exit: d29 r4 r0 i1 i0 i18 ]
goto [?= i18 = i18 + 1].................	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$r18 = r0[i18]..........................	[entry: d29 r4 i0 i1 r0 i18 ]	[exit: d29 r4 i0 i18 r0 i1 $r18 ]
$d22 = $r18.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r4 i0 i18 r0 i1 $r18 ]	[exit: d29 r4 i0 i18 $d22 r0 i1 ]
$r19 = r0[i1]...........................	[entry: d29 r4 i0 i18 $d22 r0 i1 ]	[exit: d29 r4 r0 i1 i0 i18 $d22 $r19 ]
$d21 = $r19.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r4 r0 i1 i0 i18 $d22 $r19 ]	[exit: d29 r4 r0 i1 i0 i18 $d22 $d21 ]
$b15 = $d22 cmpl $d21...................	[entry: d29 r4 r0 i1 i0 i18 $d22 $d21 ]	[exit: d29 r4 r0 i1 i0 i18 $b15 ]
if $b15 <= 0 goto i18 = i18 + 1.........	[entry: d29 r4 r0 i1 i0 i18 $b15 ]	[exit: d29 r4 r0 i1 i0 i18 ]
goto [?= $i5 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i0 ]
i18 = i18 + 1...........................	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i18 i0 ]
goto [?= (branch)]......................	[entry: d29 r4 r0 i1 i18 i0 ]	[exit: d29 r4 r0 i1 i18 i0 ]
$i5 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i0 $i5 ]
r20 = newarray (divideconquer.ClosestPair$Location)[$i5]	[entry: d29 r4 r0 i1 i0 $i5 ]	[exit: d29 r20 r4 r0 i1 i0 ]
i19 = 0.................................	[entry: d29 r20 r4 r0 i1 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i0 ]
i20 = 0.................................	[entry: d29 r20 r4 i19 r0 i1 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
if i20 >= i0 goto $i6 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r20 r4 i19 r0 i1 i20 i0 ]	[exit: d29 r20 r4 i0 i19 i20 r0 i1 ]
$r11 = r0[i1]...........................	[entry: r4 i0 r20 i19 d29 i20 r0 i1 ]	[exit: r4 i0 r20 i19 i1 d29 r0 i20 $r11 ]
$d13 = $r11.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i0 r20 i19 i1 d29 r0 i20 $r11 ]	[exit: r4 i0 r20 i19 i1 d29 $d13 r0 i20 ]
$r12 = r0[i20]..........................	[entry: r4 i0 r20 i19 i1 d29 $d13 r0 i20 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $r12 ]
$d12 = $r12.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $r12 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $d12 ]
$d14 = $d13 - $d12......................	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $d12 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d14 ]
d15 = staticinvoke <java.lang.Math: double abs(double)>($d14)	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d14 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d15 d29 ]
$b12 = d15 cmpg d29.....................	[entry: r4 i0 r20 i19 r0 i20 i1 d15 d29 ]	[exit: d29 r4 i0 r20 i19 r0 i20 i1 $b12 ]
if $b12 >= 0 goto $r13 = r0[i20]........	[entry: d29 r4 i0 r20 i19 r0 i20 i1 $b12 ]	[exit: d29 r4 i1 i0 r20 i19 r0 i20 ]
$r15 = r0[i20]..........................	[entry: d29 r4 i1 i0 r20 i19 r0 i20 ]	[exit: d29 r4 r0 i1 i0 i20 r20 i19 $r15 ]
r20[i19] = $r15.........................	[entry: d29 r4 r0 i1 i0 i20 r20 i19 $r15 ]	[exit: d29 r20 r4 r0 i1 i0 i20 i19 ]
i19 = i19 + 1...........................	[entry: d29 r20 r4 r0 i1 i0 i20 i19 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
goto [?= i20 = i20 + 1].................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
$r13 = r0[i20]..........................	[entry: d29 r20 r4 i19 i0 i1 r0 i20 ]	[exit: d29 r20 r4 i19 i0 i20 r0 i1 $r13 ]
$d17 = $r13.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r20 r4 i19 i0 i20 r0 i1 $r13 ]	[exit: d29 r20 r4 i19 i0 i20 $d17 r0 i1 ]
$r14 = r0[i1]...........................	[entry: d29 r20 r4 i19 i0 i20 $d17 r0 i1 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $r14 ]
$d16 = $r14.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $r14 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $d16 ]
$b13 = $d17 cmpl $d16...................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $d16 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $b13 ]
if $b13 <= 0 goto i20 = i20 + 1.........	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $b13 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
goto [?= $i6 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r20 r4 ]	[exit: d29 r20 r4 ]
i20 = i20 + 1...........................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
goto [?= (branch)]......................	[entry: d29 r20 r4 i19 r0 i1 i20 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
$i6 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r20 r4 ]	[exit: d29 r20 r4 $i6 ]
$i7 = $i6 - 1...........................	[entry: d29 r20 r4 $i6 ]	[exit: d29 r20 $i7 r4 ]
virtualinvoke r4.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r20, 0, $i7)	[entry: d29 r20 $i7 r4 ]	[exit: d29 r4 r20 ]
d31 = 0.0...............................	[entry: d29 r4 r20 ]	[exit: d29 r4 r20 ]
i21 = 0.................................	[entry: d29 r4 r20 ]	[exit: d29 r4 r20 i21 ]
$i22 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 $i22 ]
$i23 = $i22 - 1.........................	[entry: d29 r4 r20 i21 $i22 ]	[exit: d29 r4 r20 i21 $i23 ]
if i21 >= $i23 goto staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>(0)	[entry: d29 r4 r20 i21 $i23 ]	[exit: d29 r4 r20 i21 ]
i24 = i21 + 1...........................	[entry: d29 r4 r20 i21 ]	[exit: d29 i21 r4 r20 i24 ]
$i8 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 $i8 ]
if i24 >= $i8 goto i21 = i21 + 1........	[entry: d29 i21 r4 r20 i24 $i8 ]	[exit: d29 r4 r20 i21 i24 ]
$r5 = r20[i21]..........................	[entry: r4 d29 i24 r20 i21 ]	[exit: r4 d29 i21 r20 i24 $r5 ]
$d1 = $r5.<divideconquer.ClosestPair$Location: double x>	[entry: r4 d29 i21 r20 i24 $r5 ]	[exit: r4 d29 i21 $d1 r20 i24 ]
$r6 = r20[i24]..........................	[entry: r4 d29 i21 $d1 r20 i24 ]	[exit: r4 d29 i24 r20 i21 $d1 $r6 ]
$d0 = $r6.<divideconquer.ClosestPair$Location: double x>	[entry: r4 d29 i24 r20 i21 $d1 $r6 ]	[exit: r4 d29 i24 r20 i21 $d1 $d0 ]
$d2 = $d1 - $d0.........................	[entry: r4 d29 i24 r20 i21 $d1 $d0 ]	[exit: r4 d29 i24 r20 i21 $d2 ]
d3 = staticinvoke <java.lang.Math: double abs(double)>($d2)	[entry: r4 d29 i24 r20 i21 $d2 ]	[exit: r4 d3 d29 i24 r20 i21 ]
$r7 = r20[i21]..........................	[entry: r4 d3 d29 i24 r20 i21 ]	[exit: i21 r4 d3 d29 r20 i24 $r7 ]
$d5 = $r7.<divideconquer.ClosestPair$Location: double y>	[entry: i21 r4 d3 d29 r20 i24 $r7 ]	[exit: i21 r4 d3 d29 $d5 r20 i24 ]
$r8 = r20[i24]..........................	[entry: i21 r4 d3 d29 $d5 r20 i24 ]	[exit: i21 i24 r4 r20 d3 d29 $d5 $r8 ]
$d4 = $r8.<divideconquer.ClosestPair$Location: double y>	[entry: i21 i24 r4 r20 d3 d29 $d5 $r8 ]	[exit: i21 i24 r4 r20 d3 d29 $d5 $d4 ]
$d6 = $d5 - $d4.........................	[entry: i21 i24 r4 r20 d3 d29 $d5 $d4 ]	[exit: i21 i24 r4 r20 d3 d29 $d6 ]
d7 = staticinvoke <java.lang.Math: double abs(double)>($d6)	[entry: i21 i24 r4 r20 d3 d29 $d6 ]	[exit: i21 i24 r4 r20 d3 d7 d29 ]
$b9 = d7 cmpg d29.......................	[entry: i21 i24 r4 r20 d3 d7 d29 ]	[exit: d29 i21 i24 r4 r20 d7 d3 $b9 ]
if $b9 >= 0 goto i21 = i21 + 1..........	[entry: d29 i21 i24 r4 r20 d7 d3 $b9 ]	[exit: d29 r4 r20 i21 i24 d7 d3 ]
$d8 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, 2.0)	[entry: i21 i24 r4 r20 d29 d7 d3 ]	[exit: i21 i24 r4 r20 d29 $d8 d7 ]
$d9 = staticinvoke <java.lang.Math: double pow(double,double)>(d7, 2.0)	[entry: i21 i24 r4 r20 d29 $d8 d7 ]	[exit: i21 i24 r4 r20 d29 $d8 $d9 ]
$d10 = $d8 + $d9........................	[entry: i21 i24 r4 r20 d29 $d8 $d9 ]	[exit: i21 i24 r4 r20 d29 $d10 ]
d32 = staticinvoke <java.lang.Math: double sqrt(double)>($d10)	[entry: i21 i24 r4 r20 d29 $d10 ]	[exit: i21 i24 r4 r20 d32 d29 ]
$b10 = d32 cmpg d29.....................	[entry: i21 i24 r4 r20 d32 d29 ]	[exit: d29 i21 i24 r4 r20 d32 $b10 ]
if $b10 >= 0 goto i24 = i24 + 1.........	[entry: d29 i21 i24 r4 r20 d32 $b10 ]	[exit: d29 i21 r4 r20 i24 d32 ]
d29 = d32...............................	[entry: i21 i24 r4 r20 d32 ]	[exit: d29 i21 i24 r4 r20 d32 ]
$d11 = <divideconquer.ClosestPair: double minNum>	[entry: d29 i21 i24 r4 r20 d32 ]	[exit: d29 i21 i24 r4 r20 d32 $d11 ]
$b11 = d32 cmpg $d11....................	[entry: d29 i21 i24 r4 r20 d32 $d11 ]	[exit: d29 i21 i24 r4 r20 d32 $b11 ]
if $b11 >= 0 goto i24 = i24 + 1.........	[entry: d29 i21 i24 r4 r20 d32 $b11 ]	[exit: d29 i21 r4 r20 i24 d32 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d32)	[entry: d29 i24 r4 r20 i21 d32 ]	[exit: d29 i24 r4 r20 i21 ]
$r9 = r20[i21]..........................	[entry: d29 i24 r4 r20 i21 ]	[exit: d29 i21 r20 i24 r4 $r9 ]
r4.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r9	[entry: d29 i21 r20 i24 r4 $r9 ]	[exit: d29 i21 r4 r20 i24 ]
$r10 = r20[i24].........................	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r20 i24 r4 $r10 ]
r4.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r10	[entry: d29 i21 r20 i24 r4 $r10 ]	[exit: d29 i21 r4 r20 i24 ]
i24 = i24 + 1...........................	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 ]
goto [?= $i8 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 ]
i21 = i21 + 1...........................	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 ]
goto [?= $i22 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 ]
staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>(0)	[entry: d29 ]	[exit: d29 ]
return d29..............................	[entry: d29 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: bruteForce, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r5 ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r5 ]	[exit: r5 r0 ]
d16 = 1.7976931348623157E308............	[entry: r5 r0 ]	[exit: d16 r5 r0 ]
d17 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d18 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d19 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d20 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d20 d16 r5 r0 ]
$i0 = lengthof r0.......................	[entry: d20 d16 r5 r0 ]	[exit: d20 d16 r5 r0 $i0 ]
if $i0 != 2 goto $i7 = lengthof r0......	[entry: d20 d16 r5 r0 $i0 ]	[exit: d20 d16 r5 r0 ]
$r8 = r0[0].............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 $r8 ]
$d9 = $r8.<divideconquer.ClosestPair$Location: double x>	[entry: d16 r5 r0 $r8 ]	[exit: d16 r5 $d9 r0 ]
$r9 = r0[1].............................	[entry: d16 r5 $d9 r0 ]	[exit: d16 r5 r0 $d9 $r9 ]
$d8 = $r9.<divideconquer.ClosestPair$Location: double x>	[entry: d16 r5 r0 $d9 $r9 ]	[exit: d16 r5 r0 $d9 $d8 ]
d21 = $d9 - $d8.........................	[entry: d16 r5 r0 $d9 $d8 ]	[exit: d16 r5 d21 r0 ]
$r10 = r0[0]............................	[entry: d16 r5 d21 r0 ]	[exit: d16 r5 d21 r0 $r10 ]
$d11 = $r10.<divideconquer.ClosestPair$Location: double y>	[entry: d16 r5 d21 r0 $r10 ]	[exit: d16 r5 d21 $d11 r0 ]
$r11 = r0[1]............................	[entry: d16 r5 d21 $d11 r0 ]	[exit: d16 r5 r0 d21 $d11 $r11 ]
$d10 = $r11.<divideconquer.ClosestPair$Location: double y>	[entry: d16 r5 r0 d21 $d11 $r11 ]	[exit: d16 r5 r0 d21 $d11 $d10 ]
d22 = $d11 - $d10.......................	[entry: d16 r5 r0 d21 $d11 $d10 ]	[exit: d16 r5 r0 d22 d21 ]
$d12 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 2.0)	[entry: d16 r5 r0 d22 d21 ]	[exit: d16 r5 r0 $d12 d22 ]
$d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d22, 2.0)	[entry: d16 r5 r0 $d12 d22 ]	[exit: d16 r5 r0 $d12 $d13 ]
$d14 = $d12 + $d13......................	[entry: d16 r5 r0 $d12 $d13 ]	[exit: d16 r5 r0 $d14 ]
d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d14)	[entry: d16 r5 r0 $d14 ]	[exit: d16 r5 r0 d23 ]
$d15 = <divideconquer.ClosestPair: double minNum>	[entry: d16 r5 r0 d23 ]	[exit: d16 r5 r0 d23 $d15 ]
$b6 = d23 cmpg $d15.....................	[entry: d16 r5 r0 d23 $d15 ]	[exit: d16 d23 r5 r0 $b6 ]
if $b6 >= 0 goto $r12 = r0[0]...........	[entry: d16 d23 r5 r0 $b6 ]	[exit: d16 d23 r5 r0 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d23)	[entry: d16 r5 r0 d23 ]	[exit: d16 d23 r5 r0 ]
$r12 = r0[0]............................	[entry: d16 d23 r5 r0 ]	[exit: d16 d23 r0 r5 $r12 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r12	[entry: d16 d23 r0 r5 $r12 ]	[exit: d16 d23 r5 r0 ]
$r13 = r0[1]............................	[entry: d16 d23 r5 r0 ]	[exit: d16 r0 d23 r5 $r13 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r13	[entry: d16 r0 d23 r5 $r13 ]	[exit: d16 r5 r0 d23 ]
d20 = d23...............................	[entry: d16 r5 r0 d23 ]	[exit: d20 d16 r5 r0 ]
$i7 = lengthof r0.......................	[entry: d20 d16 r5 r0 ]	[exit: d20 d16 r5 r0 $i7 ]
if $i7 != 3 goto return d20.............	[entry: d20 d16 r5 r0 $i7 ]	[exit: d20 d16 r5 r0 ]
i8 = 0..................................	[entry: d16 r5 r0 ]	[exit: d16 r5 i8 r0 ]
$i1 = lengthof r0.......................	[entry: d16 r5 i8 r0 ]	[exit: d16 r5 r0 i8 $i1 ]
$i2 = $i1 - 1...........................	[entry: d16 r5 r0 i8 $i1 ]	[exit: d16 r5 r0 i8 $i2 ]
if i8 >= $i2 goto d20 = d16.............	[entry: d16 r5 r0 i8 $i2 ]	[exit: d16 r5 r0 i8 ]
i9 = i8 + 1.............................	[entry: d16 r5 r0 i8 ]	[exit: d16 i8 r5 i9 r0 ]
$i3 = lengthof r0.......................	[entry: d16 i8 r5 i9 r0 ]	[exit: d16 r0 i8 r5 i9 $i3 ]
if i9 >= $i3 goto i8 = i8 + 1...........	[entry: d16 r0 i8 r5 i9 $i3 ]	[exit: d16 r5 r0 i8 i9 ]
$r1 = r0[i8]............................	[entry: r5 d16 i9 r0 i8 ]	[exit: r5 d16 i8 r0 i9 $r1 ]
$d1 = $r1.<divideconquer.ClosestPair$Location: double x>	[entry: r5 d16 i8 r0 i9 $r1 ]	[exit: r5 d16 i8 $d1 r0 i9 ]
$r2 = r0[i9]............................	[entry: r5 d16 i8 $d1 r0 i9 ]	[exit: r5 d16 i9 r0 i8 $d1 $r2 ]
$d0 = $r2.<divideconquer.ClosestPair$Location: double x>	[entry: r5 d16 i9 r0 i8 $d1 $r2 ]	[exit: r5 d16 i9 r0 i8 $d1 $d0 ]
d24 = $d1 - $d0.........................	[entry: r5 d16 i9 r0 i8 $d1 $d0 ]	[exit: r5 d16 d24 i9 r0 i8 ]
$r3 = r0[i8]............................	[entry: r5 d16 d24 i9 r0 i8 ]	[exit: i8 r5 d16 d24 r0 i9 $r3 ]
$d3 = $r3.<divideconquer.ClosestPair$Location: double y>	[entry: i8 r5 d16 d24 r0 i9 $r3 ]	[exit: i8 r5 d16 d24 $d3 r0 i9 ]
$r4 = r0[i9]............................	[entry: i8 r5 d16 d24 $d3 r0 i9 ]	[exit: i8 r0 i9 r5 d16 d24 $d3 $r4 ]
$d2 = $r4.<divideconquer.ClosestPair$Location: double y>	[entry: i8 r0 i9 r5 d16 d24 $d3 $r4 ]	[exit: i8 r0 i9 r5 d16 d24 $d3 $d2 ]
d25 = $d3 - $d2.........................	[entry: i8 r0 i9 r5 d16 d24 $d3 $d2 ]	[exit: i8 r0 i9 r5 d16 d25 d24 ]
$d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d24, 2.0)	[entry: i8 r0 i9 r5 d16 d25 d24 ]	[exit: i8 r0 i9 r5 d16 $d4 d25 ]
$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d25, 2.0)	[entry: i8 r0 i9 r5 d16 $d4 d25 ]	[exit: i8 r0 i9 r5 d16 $d4 $d5 ]
$d6 = $d4 + $d5.........................	[entry: i8 r0 i9 r5 d16 $d4 $d5 ]	[exit: i8 r0 i9 r5 d16 $d6 ]
d26 = staticinvoke <java.lang.Math: double sqrt(double)>($d6)	[entry: i8 r0 i9 r5 d16 $d6 ]	[exit: i8 r0 i9 r5 d26 d16 ]
$b4 = d26 cmpg d16......................	[entry: i8 r0 i9 r5 d26 d16 ]	[exit: d16 i8 r0 i9 r5 d26 $b4 ]
if $b4 >= 0 goto i9 = i9 + 1............	[entry: d16 i8 r0 i9 r5 d26 $b4 ]	[exit: d16 i8 r5 r0 i9 d26 ]
d16 = d26...............................	[entry: i8 r0 i9 r5 d26 ]	[exit: d16 i8 r0 i9 r5 d26 ]
$d7 = <divideconquer.ClosestPair: double minNum>	[entry: d16 i8 r0 i9 r5 d26 ]	[exit: d16 i8 r0 i9 r5 d26 $d7 ]
$b5 = d26 cmpg $d7......................	[entry: d16 i8 r0 i9 r5 d26 $d7 ]	[exit: d16 i8 r0 i9 r5 d26 $b5 ]
if $b5 >= 0 goto i9 = i9 + 1............	[entry: d16 i8 r0 i9 r5 d26 $b5 ]	[exit: d16 i8 r5 r0 i9 d26 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d26)	[entry: d16 i9 r5 r0 i8 d26 ]	[exit: d16 i9 r5 r0 i8 ]
$r6 = r0[i8]............................	[entry: d16 i9 r5 r0 i8 ]	[exit: d16 i8 r0 i9 r5 $r6 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r6	[entry: d16 i8 r0 i9 r5 $r6 ]	[exit: d16 i8 r5 r0 i9 ]
$r7 = r0[i9]............................	[entry: d16 i8 r5 r0 i9 ]	[exit: d16 i8 r0 i9 r5 $r7 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r7	[entry: d16 i8 r0 i9 r5 $r7 ]	[exit: d16 i8 r5 r0 i9 ]
i9 = i9 + 1.............................	[entry: d16 i8 r5 r0 i9 ]	[exit: d16 i8 r5 i9 r0 ]
goto [?= $i3 = lengthof r0].............	[entry: d16 i8 r5 i9 r0 ]	[exit: d16 i8 r5 i9 r0 ]
i8 = i8 + 1.............................	[entry: d16 r5 r0 i8 ]	[exit: d16 r5 i8 r0 ]
goto [?= $i1 = lengthof r0].............	[entry: d16 r5 i8 r0 ]	[exit: d16 r5 i8 r0 ]
d20 = d16...............................	[entry: d16 ]	[exit: d20 ]
return d20..............................	[entry: d20 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r75 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new divideconquer.ClosestPair.....	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<divideconquer.ClosestPair: void <init>(int)>(12)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 3.0)	[entry: $r2 r1 ]	[exit: r1 $r2 $r3 ]
$r2[0] = $r3............................	[entry: r1 $r2 $r3 ]	[exit: r1 ]
$r4 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r4 r1 ]
$r5 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 16.0)	[entry: $r4 r1 ]	[exit: r1 $r4 $r5 ]
$r4[1] = $r5............................	[entry: r1 $r4 $r5 ]	[exit: r1 ]
$r6 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r6 r1 ]
$r7 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(3.0, 9.0)	[entry: $r6 r1 ]	[exit: r1 $r6 $r7 ]
$r6[2] = $r7............................	[entry: r1 $r6 $r7 ]	[exit: r1 ]
$r8 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r8 r1 ]
$r9 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(6.0, 3.0)	[entry: $r8 r1 ]	[exit: r1 $r8 $r9 ]
$r8[3] = $r9............................	[entry: r1 $r8 $r9 ]	[exit: r1 ]
$r10 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r10 r1 ]
$r11 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(7.0, 7.0)	[entry: $r10 r1 ]	[exit: r1 $r10 $r11 ]
$r10[4] = $r11..........................	[entry: r1 $r10 $r11 ]	[exit: r1 ]
$r12 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(19.0, 4.0)	[entry: $r12 r1 ]	[exit: r1 $r12 $r13 ]
$r12[5] = $r13..........................	[entry: r1 $r12 $r13 ]	[exit: r1 ]
$r14 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r14 r1 ]
$r15 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(10.0, 11.0)	[entry: $r14 r1 ]	[exit: r1 $r14 $r15 ]
$r14[6] = $r15..........................	[entry: r1 $r14 $r15 ]	[exit: r1 ]
$r16 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r16 r1 ]
$r17 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 2.0)	[entry: $r16 r1 ]	[exit: r1 $r16 $r17 ]
$r16[7] = $r17..........................	[entry: r1 $r16 $r17 ]	[exit: r1 ]
$r18 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r18 r1 ]
$r19 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 19.0)	[entry: $r18 r1 ]	[exit: r1 $r18 $r19 ]
$r18[8] = $r19..........................	[entry: r1 $r18 $r19 ]	[exit: r1 ]
$r20 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r20 r1 ]
$r21 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(16.0, 11.0)	[entry: $r20 r1 ]	[exit: r1 $r20 $r21 ]
$r20[9] = $r21..........................	[entry: r1 $r20 $r21 ]	[exit: r1 ]
$r22 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r22 r1 ]
$r23 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(17.0, 13.0)	[entry: $r22 r1 ]	[exit: r1 $r22 $r23 ]
$r22[10] = $r23.........................	[entry: r1 $r22 $r23 ]	[exit: r1 ]
$r24 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r24 r1 ]
$r25 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(9.0, 12.0)	[entry: $r24 r1 ]	[exit: r1 $r24 $r25 ]
$r24[11] = $r25.........................	[entry: r1 $r24 $r25 ]	[exit: r1 ]
$r26 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r26 ]
virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("Input data")	[entry: r1 $r26 ]	[exit: r1 ]
$r28 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r28 r1 ]
$r27 = new java.lang.StringBuilder......	[entry: $r28 r1 ]	[exit: $r28 r1 $r27 ]
specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()	[entry: $r28 r1 $r27 ]	[exit: $r28 r1 $r27 ]
$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of points: ")	[entry: $r28 r1 $r27 ]	[exit: $r28 $r29 r1 ]
$r30 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r28 $r29 r1 ]	[exit: r1 $r28 $r29 $r30 ]
$i0 = lengthof $r30.....................	[entry: r1 $r28 $r29 $r30 ]	[exit: r1 $r28 $i0 $r29 ]
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r28 $i0 $r29 ]	[exit: r1 $r28 $r31 ]
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r28 $r31 ]	[exit: r1 $r32 $r28 ]
virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r32)	[entry: r1 $r32 $r28 ]	[exit: r1 ]
i5 = 0..................................	[entry: r1 ]	[exit: i5 r1 ]
$r33 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: i5 r1 ]	[exit: r1 i5 $r33 ]
$i1 = lengthof $r33.....................	[entry: r1 i5 $r33 ]	[exit: r1 i5 $i1 ]
if i5 >= $i1 goto $r35 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 i5 $i1 ]	[exit: r1 i5 ]
$r65 = <java.lang.System: java.io.PrintStream out>	[entry: i5 r1 ]	[exit: $r65 i5 r1 ]
$r64 = new java.lang.StringBuilder......	[entry: $r65 i5 r1 ]	[exit: $r65 i5 r1 $r64 ]
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()	[entry: $r65 i5 r1 $r64 ]	[exit: $r65 i5 r1 $r64 ]
$r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x: ")	[entry: $r65 i5 r1 $r64 ]	[exit: $r65 $r66 i5 r1 ]
$r67 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r65 $r66 i5 r1 ]	[exit: $r65 r1 $r66 $r67 i5 ]
$r68 = $r67[i5].........................	[entry: $r65 r1 $r66 $r67 i5 ]	[exit: $r65 i5 r1 $r66 $r68 ]
$d4 = $r68.<divideconquer.ClosestPair$Location: double x>	[entry: $r65 i5 r1 $r66 $r68 ]	[exit: $r65 i5 r1 $d4 $r66 ]
$r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4)	[entry: $r65 i5 r1 $d4 $r66 ]	[exit: $r65 i5 r1 $r69 ]
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y: ")	[entry: $r65 i5 r1 $r69 ]	[exit: $r65 $r70 i5 r1 ]
$r71 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r65 $r70 i5 r1 ]	[exit: r1 $r65 $r70 $r71 i5 ]
$r72 = $r71[i5].........................	[entry: r1 $r65 $r70 $r71 i5 ]	[exit: r1 i5 $r65 $r70 $r72 ]
$d5 = $r72.<divideconquer.ClosestPair$Location: double y>	[entry: r1 i5 $r65 $r70 $r72 ]	[exit: r1 i5 $r65 $d5 $r70 ]
$r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5)	[entry: r1 i5 $r65 $d5 $r70 ]	[exit: r1 i5 $r65 $r73 ]
$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i5 $r65 $r73 ]	[exit: r1 i5 $r74 $r65 ]
virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r74)	[entry: r1 i5 $r74 $r65 ]	[exit: r1 i5 ]
i5 = i5 + 1.............................	[entry: r1 i5 ]	[exit: i5 r1 ]
goto [?= $r33 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>]	[entry: i5 r1 ]	[exit: i5 r1 ]
$r35 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r35 r1 ]
$r34 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r35 r1 ]	[exit: $r35 r1 $r34 ]
$i2 = lengthof $r34.....................	[entry: $r35 r1 $r34 ]	[exit: $r35 r1 $i2 ]
$i3 = $i2 - 1...........................	[entry: $r35 r1 $i2 ]	[exit: $r35 $i3 r1 ]
virtualinvoke r1.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>($r35, 0, $i3)	[entry: $r35 $i3 r1 ]	[exit: r1 ]
$r37 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r37 r1 ]
$r36 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r37 r1 ]	[exit: $r37 r1 $r36 ]
$i4 = lengthof $r36.....................	[entry: $r37 r1 $r36 ]	[exit: $r37 $i4 r1 ]
d6 = virtualinvoke r1.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>($r37, $i4)	[entry: $r37 $i4 r1 ]	[exit: d6 r1 ]
$r38 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 r1 $r38 ]
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>("Output Data")	[entry: d6 r1 $r38 ]	[exit: d6 r1 ]
$r40 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 $r40 r1 ]
$r39 = new java.lang.StringBuilder......	[entry: d6 $r40 r1 ]	[exit: d6 $r40 r1 $r39 ]
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()	[entry: d6 $r40 r1 $r39 ]	[exit: d6 $r40 r1 $r39 ]
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(")	[entry: d6 $r40 r1 $r39 ]	[exit: d6 $r40 $r41 r1 ]
$r42 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1>	[entry: d6 $r40 $r41 r1 ]	[exit: d6 $r40 r1 $r41 $r42 ]
$d0 = $r42.<divideconquer.ClosestPair$Location: double x>	[entry: d6 $r40 r1 $r41 $r42 ]	[exit: d6 $r40 r1 $d0 $r41 ]
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0)	[entry: d6 $r40 r1 $d0 $r41 ]	[exit: d6 $r40 r1 $r43 ]
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: d6 $r40 r1 $r43 ]	[exit: d6 $r40 $r44 r1 ]
$r45 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1>	[entry: d6 $r40 $r44 r1 ]	[exit: d6 r1 $r40 $r44 $r45 ]
$d1 = $r45.<divideconquer.ClosestPair$Location: double y>	[entry: d6 r1 $r40 $r44 $r45 ]	[exit: d6 r1 $r40 $d1 $r44 ]
$r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1)	[entry: d6 r1 $r40 $d1 $r44 ]	[exit: d6 r1 $r40 $r46 ]
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")")	[entry: d6 r1 $r40 $r46 ]	[exit: d6 r1 $r40 $r47 ]
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: d6 r1 $r40 $r47 ]	[exit: d6 r1 $r48 $r40 ]
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r48)	[entry: d6 r1 $r48 $r40 ]	[exit: d6 r1 ]
$r50 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 $r50 r1 ]
$r49 = new java.lang.StringBuilder......	[entry: d6 $r50 r1 ]	[exit: d6 $r50 r1 $r49 ]
specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()	[entry: d6 $r50 r1 $r49 ]	[exit: d6 $r50 r1 $r49 ]
$r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(")	[entry: d6 $r50 r1 $r49 ]	[exit: d6 $r50 $r51 r1 ]
$r52 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2>	[entry: d6 $r50 $r51 r1 ]	[exit: d6 $r50 r1 $r51 $r52 ]
$d2 = $r52.<divideconquer.ClosestPair$Location: double x>	[entry: d6 $r50 r1 $r51 $r52 ]	[exit: d6 $r50 r1 $d2 $r51 ]
$r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2)	[entry: d6 $r50 r1 $d2 $r51 ]	[exit: d6 $r50 r1 $r53 ]
$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: d6 $r50 r1 $r53 ]	[exit: d6 $r50 $r54 r1 ]
$r55 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2>	[entry: d6 $r50 $r54 r1 ]	[exit: d6 $r50 $r54 $r55 ]
$d3 = $r55.<divideconquer.ClosestPair$Location: double y>	[entry: d6 $r50 $r54 $r55 ]	[exit: d6 $r50 $d3 $r54 ]
$r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3)	[entry: d6 $r50 $d3 $r54 ]	[exit: d6 $r50 $r56 ]
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")")	[entry: d6 $r50 $r56 ]	[exit: d6 $r50 $r57 ]
$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: d6 $r50 $r57 ]	[exit: d6 $r58 $r50 ]
virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r58)	[entry: d6 $r58 $r50 ]	[exit: d6 ]
$r60 = <java.lang.System: java.io.PrintStream out>	[entry: d6 ]	[exit: $r60 d6 ]
$r59 = new java.lang.StringBuilder......	[entry: $r60 d6 ]	[exit: $r60 d6 $r59 ]
specialinvoke $r59.<java.lang.StringBuilder: void <init>()>()	[entry: $r60 d6 $r59 ]	[exit: $r60 d6 $r59 ]
$r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minimum Distance : ")	[entry: $r60 d6 $r59 ]	[exit: $r60 d6 $r61 ]
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d6)	[entry: $r60 d6 $r61 ]	[exit: $r60 $r62 ]
$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r60 $r62 ]	[exit: $r63 $r60 ]
virtualinvoke $r60.<java.io.PrintStream: void println(java.lang.String)>($r63)	[entry: $r63 $r60 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: setMinNum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
<divideconquer.ClosestPair: double minNum> = d0	[entry: d0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: setSecondCount, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
<divideconquer.ClosestPair: int secondCount> = i0	[entry: i0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: buildLocation, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
d1 := @parameter1: double...............	[entry: d0 ]	[exit: d0 d1 ]
$r0 = new divideconquer.ClosestPair$Location	[entry: d0 d1 ]	[exit: d0 d1 $r0 ]
specialinvoke $r0.<divideconquer.ClosestPair$Location: void <init>(double,double)>(d0, d1)	[entry: d0 d1 $r0 ]	[exit: $r0 ]
return $r0..............................	[entry: $r0 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: xPartition, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: i1 r0 ]
i0 := @parameter2: int..................	[entry: i1 r0 ]	[exit: i1 r0 i0 ]
r1 = r0[i0].............................	[entry: i1 r0 i0 ]	[exit: r0 r1 i0 i1 ]
i4 = i1 - 1.............................	[entry: r0 r1 i0 i1 ]	[exit: r0 i4 r1 i0 i1 ]
i5 = i1.................................	[entry: r0 i4 r1 i0 i1 ]	[exit: r0 i4 r1 i5 i0 ]
$i2 = i0 - 1............................	[entry: r0 i4 r1 i5 i0 ]	[exit: i0 r0 i4 r1 i5 $i2 ]
if i5 > $i2 goto i6 = i4 + 1............	[entry: i0 r0 i4 r1 i5 $i2 ]	[exit: i0 r0 i4 r1 i5 ]
$r3 = r0[i5]............................	[entry: i4 i0 r1 r0 i5 ]	[exit: r0 i4 i0 i5 r1 $r3 ]
$d1 = $r3.<divideconquer.ClosestPair$Location: double x>	[entry: r0 i4 i0 i5 r1 $r3 ]	[exit: r0 i4 i0 i5 $d1 r1 ]
$d0 = r1.<divideconquer.ClosestPair$Location: double x>	[entry: r0 i4 i0 i5 $d1 r1 ]	[exit: r0 i4 r1 i0 i5 $d1 $d0 ]
$b3 = $d1 cmpg $d0......................	[entry: r0 i4 r1 i0 i5 $d1 $d0 ]	[exit: r0 i4 r1 i0 i5 $b3 ]
if $b3 > 0 goto i5 = i5 + 1.............	[entry: r0 i4 r1 i0 i5 $b3 ]	[exit: r0 i4 r1 i0 i5 ]
i4 = i4 + 1.............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 i5 r0 i4 ]
r6 = r0[i4].............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 r6 i4 r0 i5 ]
$r4 = r0[i5]............................	[entry: r1 i0 r6 i4 r0 i5 ]	[exit: r1 i0 i5 r6 r0 i4 $r4 ]
r0[i4] = $r4............................	[entry: r1 i0 i5 r6 r0 i4 $r4 ]	[exit: i4 r1 i0 r0 i5 r6 ]
r0[i5] = r6.............................	[entry: i4 r1 i0 r0 i5 r6 ]	[exit: r0 i4 r1 i0 i5 ]
i5 = i5 + 1.............................	[entry: r0 i4 r1 i0 i5 ]	[exit: r0 i4 r1 i5 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r0 i4 r1 i5 i0 ]	[exit: r0 i4 r1 i5 i0 ]
i6 = i4 + 1.............................	[entry: i0 r0 i4 ]	[exit: i0 r0 i6 ]
r7 = r0[i6].............................	[entry: i0 r0 i6 ]	[exit: r7 i6 r0 i0 ]
$r2 = r0[i0]............................	[entry: r7 i6 r0 i0 ]	[exit: i0 r7 r0 i6 $r2 ]
r0[i6] = $r2............................	[entry: i0 r7 r0 i6 $r2 ]	[exit: i6 r0 i0 r7 ]
r0[i0] = r7.............................	[entry: i6 r0 i0 r7 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: yPartition, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: i1 r0 ]
i0 := @parameter2: int..................	[entry: i1 r0 ]	[exit: i1 r0 i0 ]
r1 = r0[i0].............................	[entry: i1 r0 i0 ]	[exit: r0 r1 i0 i1 ]
i4 = i1 - 1.............................	[entry: r0 r1 i0 i1 ]	[exit: r0 i4 r1 i0 i1 ]
i5 = i1.................................	[entry: r0 i4 r1 i0 i1 ]	[exit: r0 i4 r1 i5 i0 ]
$i2 = i0 - 1............................	[entry: r0 i4 r1 i5 i0 ]	[exit: i0 r0 i4 r1 i5 $i2 ]
if i5 > $i2 goto i6 = i4 + 1............	[entry: i0 r0 i4 r1 i5 $i2 ]	[exit: i0 r0 i4 r1 i5 ]
$r3 = r0[i5]............................	[entry: i4 i0 r1 r0 i5 ]	[exit: r0 i4 i0 i5 r1 $r3 ]
$d1 = $r3.<divideconquer.ClosestPair$Location: double y>	[entry: r0 i4 i0 i5 r1 $r3 ]	[exit: r0 i4 i0 i5 $d1 r1 ]
$d0 = r1.<divideconquer.ClosestPair$Location: double y>	[entry: r0 i4 i0 i5 $d1 r1 ]	[exit: r0 i4 r1 i0 i5 $d1 $d0 ]
$b3 = $d1 cmpg $d0......................	[entry: r0 i4 r1 i0 i5 $d1 $d0 ]	[exit: r0 i4 r1 i0 i5 $b3 ]
if $b3 > 0 goto i5 = i5 + 1.............	[entry: r0 i4 r1 i0 i5 $b3 ]	[exit: r0 i4 r1 i0 i5 ]
i4 = i4 + 1.............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 i5 r0 i4 ]
r6 = r0[i4].............................	[entry: r1 i0 i5 r0 i4 ]	[exit: r1 i0 r6 i4 r0 i5 ]
$r4 = r0[i5]............................	[entry: r1 i0 r6 i4 r0 i5 ]	[exit: r1 i0 i5 r6 r0 i4 $r4 ]
r0[i4] = $r4............................	[entry: r1 i0 i5 r6 r0 i4 $r4 ]	[exit: i4 r1 i0 r0 i5 r6 ]
r0[i5] = r6.............................	[entry: i4 r1 i0 r0 i5 r6 ]	[exit: r0 i4 r1 i0 i5 ]
i5 = i5 + 1.............................	[entry: r0 i4 r1 i0 i5 ]	[exit: r0 i4 r1 i5 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r0 i4 r1 i5 i0 ]	[exit: r0 i4 r1 i5 i0 ]
i6 = i4 + 1.............................	[entry: i0 r0 i4 ]	[exit: i0 r0 i6 ]
r7 = r0[i6].............................	[entry: i0 r0 i6 ]	[exit: r7 i6 r0 i0 ]
$r2 = r0[i0]............................	[entry: r7 i6 r0 i0 ]	[exit: i0 r7 r0 i6 $r2 ]
r0[i6] = $r2............................	[entry: i0 r7 r0 i6 $r2 ]	[exit: i6 r0 i0 r7 ]
r0[i0] = r7.............................	[entry: i6 r0 i0 r7 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: xQuickSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r0 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r0 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
i1 := @parameter2: int..................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 i1 ]
if i0 >= i1 goto return.................	[entry: r1 r0 i0 i1 ]	[exit: r1 i0 i1 r0 ]
i2 = virtualinvoke r0.<divideconquer.ClosestPair: int xPartition(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, i1)	[entry: r1 i0 i1 r0 ]	[exit: i1 r1 i0 r0 i2 ]
$i3 = i2 - 1............................	[entry: i1 r1 i0 r0 i2 ]	[exit: i1 i2 r1 i0 $i3 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3)	[entry: i1 i2 r1 i0 $i3 r0 ]	[exit: r1 i1 r0 i2 ]
$i4 = i2 + 1............................	[entry: r1 i1 r0 i2 ]	[exit: r1 $i4 i1 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1)	[entry: r1 $i4 i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: yQuickSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r0 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r0 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
i1 := @parameter2: int..................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 i1 ]
if i0 >= i1 goto return.................	[entry: r1 r0 i0 i1 ]	[exit: r1 i0 i1 r0 ]
i2 = virtualinvoke r0.<divideconquer.ClosestPair: int yPartition(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, i1)	[entry: r1 i0 i1 r0 ]	[exit: i1 r1 i0 r0 i2 ]
$i3 = i2 - 1............................	[entry: i1 r1 i0 r0 i2 ]	[exit: i1 i2 r1 i0 $i3 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, i0, $i3)	[entry: i1 i2 r1 i0 $i3 r0 ]	[exit: r1 i1 r0 i2 ]
$i4 = i2 + 1............................	[entry: r1 i1 r0 i2 ]	[exit: r1 $i4 i1 r0 ]
virtualinvoke r0.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r1, $i4, i1)	[entry: r1 $i4 i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: closestPair, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r4 ]
r1 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r4 ]	[exit: r4 r1 ]
i0 := @parameter1: int..................	[entry: r4 r1 ]	[exit: r4 r1 i0 ]
r0 = newarray (divideconquer.ClosestPair$Location)[i0]	[entry: r4 r1 i0 ]	[exit: r4 r1 r0 i0 ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r0, 0, i0)	[entry: r4 r1 r0 i0 ]	[exit: r0 r4 i0 ]
i1 = i0 / 2.............................	[entry: r0 r4 i0 ]	[exit: r0 r4 i0 i1 ]
r2 = newarray (divideconquer.ClosestPair$Location)[i1]	[entry: r0 r4 i0 i1 ]	[exit: r0 r4 r2 i0 i1 ]
$i2 = i0 - i1...........................	[entry: r0 r4 r2 i0 i1 ]	[exit: r0 r4 r2 i1 i0 $i2 ]
r3 = newarray (divideconquer.ClosestPair$Location)[$i2]	[entry: r0 r4 r2 i1 i0 $i2 ]	[exit: r0 r4 r3 r2 i1 i0 ]
if i0 > 3 goto staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)	[entry: r0 r4 r3 r2 i1 i0 ]	[exit: r0 r4 r3 i0 r2 i1 ]
$d23 = virtualinvoke r4.<divideconquer.ClosestPair: double bruteForce(divideconquer.ClosestPair$Location[])>(r0)	[entry: r0 r4 ]	[exit: $d23 ]
return $d23.............................	[entry: $d23 ]	[exit: ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, 0, r2, 0, i1)	[entry: r4 r3 i0 r0 r2 i1 ]	[exit: r2 r4 r0 r3 i0 i1 ]
$i3 = i0 - i1...........................	[entry: r2 r4 r0 r3 i0 i1 ]	[exit: i0 r2 r4 r0 i1 r3 $i3 ]
staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i1, r3, 0, $i3)	[entry: i0 r2 r4 r0 i1 r3 $i3 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d24 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d25 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d26 = 0.0...............................	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 r3 i0 r2 i1 r4 ]
d27 = virtualinvoke r4.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>(r2, i1)	[entry: r0 r3 i0 r2 i1 r4 ]	[exit: r0 d27 r3 r4 i0 i1 ]
$i4 = i0 - i1...........................	[entry: r0 d27 r3 r4 i0 i1 ]	[exit: r0 i1 i0 d27 r3 $i4 r4 ]
d28 = virtualinvoke r4.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>(r3, $i4)	[entry: r0 i1 i0 d27 r3 $i4 r4 ]	[exit: r4 r0 i1 i0 d27 d28 ]
d29 = staticinvoke <java.lang.Math: double min(double,double)>(d27, d28)	[entry: r4 r0 i1 i0 d27 d28 ]	[exit: d29 r4 r0 i1 i0 ]
i18 = 0.................................	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i18 i0 ]
if i18 >= i0 goto $i5 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i18 i0 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$r16 = r0[i1]...........................	[entry: r4 i0 d29 i18 r0 i1 ]	[exit: r4 i1 i0 d29 r0 i18 $r16 ]
$d19 = $r16.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i1 i0 d29 r0 i18 $r16 ]	[exit: r4 i1 i0 d29 $d19 r0 i18 ]
$r17 = r0[i18]..........................	[entry: r4 i1 i0 d29 $d19 r0 i18 ]	[exit: r4 r0 i1 i0 i18 d29 $d19 $r17 ]
$d18 = $r17.<divideconquer.ClosestPair$Location: double x>	[entry: r4 r0 i1 i0 i18 d29 $d19 $r17 ]	[exit: r4 r0 i1 i0 i18 d29 $d19 $d18 ]
$d20 = $d19 - $d18......................	[entry: r4 r0 i1 i0 i18 d29 $d19 $d18 ]	[exit: r4 r0 i1 i0 i18 d29 $d20 ]
d30 = staticinvoke <java.lang.Math: double abs(double)>($d20)	[entry: r4 r0 i1 i0 i18 d29 $d20 ]	[exit: r4 r0 i1 i0 i18 d30 d29 ]
$b14 = d30 cmpg d29.....................	[entry: r4 r0 i1 i0 i18 d30 d29 ]	[exit: d29 r4 r0 i1 i0 i18 $b14 ]
if $b14 >= 0 goto $r18 = r0[i18]........	[entry: d29 r4 r0 i1 i0 i18 $b14 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$i16 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i0 i18 $i16 ]
$i17 = $i16 + 1.........................	[entry: d29 r4 r0 i1 i0 i18 $i16 ]	[exit: d29 r4 r0 i1 i0 i18 $i17 ]
staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>($i17)	[entry: d29 r4 r0 i1 i0 i18 $i17 ]	[exit: d29 r4 r0 i1 i0 i18 ]
goto [?= i18 = i18 + 1].................	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i0 i18 ]
$r18 = r0[i18]..........................	[entry: d29 r4 i0 i1 r0 i18 ]	[exit: d29 r4 i0 i18 r0 i1 $r18 ]
$d22 = $r18.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r4 i0 i18 r0 i1 $r18 ]	[exit: d29 r4 i0 i18 $d22 r0 i1 ]
$r19 = r0[i1]...........................	[entry: d29 r4 i0 i18 $d22 r0 i1 ]	[exit: d29 r4 r0 i1 i0 i18 $d22 $r19 ]
$d21 = $r19.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r4 r0 i1 i0 i18 $d22 $r19 ]	[exit: d29 r4 r0 i1 i0 i18 $d22 $d21 ]
$b15 = $d22 cmpl $d21...................	[entry: d29 r4 r0 i1 i0 i18 $d22 $d21 ]	[exit: d29 r4 r0 i1 i0 i18 $b15 ]
if $b15 <= 0 goto i18 = i18 + 1.........	[entry: d29 r4 r0 i1 i0 i18 $b15 ]	[exit: d29 r4 r0 i1 i0 i18 ]
goto [?= $i5 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i0 ]
i18 = i18 + 1...........................	[entry: d29 r4 r0 i1 i0 i18 ]	[exit: d29 r4 r0 i1 i18 i0 ]
goto [?= (branch)]......................	[entry: d29 r4 r0 i1 i18 i0 ]	[exit: d29 r4 r0 i1 i18 i0 ]
$i5 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r0 i1 i0 ]	[exit: d29 r4 r0 i1 i0 $i5 ]
r20 = newarray (divideconquer.ClosestPair$Location)[$i5]	[entry: d29 r4 r0 i1 i0 $i5 ]	[exit: d29 r20 r4 r0 i1 i0 ]
i19 = 0.................................	[entry: d29 r20 r4 r0 i1 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i0 ]
i20 = 0.................................	[entry: d29 r20 r4 i19 r0 i1 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
if i20 >= i0 goto $i6 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r20 r4 i19 r0 i1 i20 i0 ]	[exit: d29 r20 r4 i0 i19 i20 r0 i1 ]
$r11 = r0[i1]...........................	[entry: r4 i0 r20 i19 d29 i20 r0 i1 ]	[exit: r4 i0 r20 i19 i1 d29 r0 i20 $r11 ]
$d13 = $r11.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i0 r20 i19 i1 d29 r0 i20 $r11 ]	[exit: r4 i0 r20 i19 i1 d29 $d13 r0 i20 ]
$r12 = r0[i20]..........................	[entry: r4 i0 r20 i19 i1 d29 $d13 r0 i20 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $r12 ]
$d12 = $r12.<divideconquer.ClosestPair$Location: double x>	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $r12 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $d12 ]
$d14 = $d13 - $d12......................	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d13 $d12 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d29 $d14 ]
d15 = staticinvoke <java.lang.Math: double abs(double)>($d14)	[entry: r4 i0 r20 i19 r0 i20 i1 d29 $d14 ]	[exit: r4 i0 r20 i19 r0 i20 i1 d15 d29 ]
$b12 = d15 cmpg d29.....................	[entry: r4 i0 r20 i19 r0 i20 i1 d15 d29 ]	[exit: d29 r4 i0 r20 i19 r0 i20 i1 $b12 ]
if $b12 >= 0 goto $r13 = r0[i20]........	[entry: d29 r4 i0 r20 i19 r0 i20 i1 $b12 ]	[exit: d29 r4 i1 i0 r20 i19 r0 i20 ]
$r15 = r0[i20]..........................	[entry: d29 r4 i1 i0 r20 i19 r0 i20 ]	[exit: d29 r4 r0 i1 i0 i20 r20 i19 $r15 ]
r20[i19] = $r15.........................	[entry: d29 r4 r0 i1 i0 i20 r20 i19 $r15 ]	[exit: d29 r20 r4 r0 i1 i0 i20 i19 ]
i19 = i19 + 1...........................	[entry: d29 r20 r4 r0 i1 i0 i20 i19 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
goto [?= i20 = i20 + 1].................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
$r13 = r0[i20]..........................	[entry: d29 r20 r4 i19 i0 i1 r0 i20 ]	[exit: d29 r20 r4 i19 i0 i20 r0 i1 $r13 ]
$d17 = $r13.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r20 r4 i19 i0 i20 r0 i1 $r13 ]	[exit: d29 r20 r4 i19 i0 i20 $d17 r0 i1 ]
$r14 = r0[i1]...........................	[entry: d29 r20 r4 i19 i0 i20 $d17 r0 i1 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $r14 ]
$d16 = $r14.<divideconquer.ClosestPair$Location: double x>	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $r14 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $d16 ]
$b13 = $d17 cmpl $d16...................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $d17 $d16 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 $b13 ]
if $b13 <= 0 goto i20 = i20 + 1.........	[entry: d29 r20 r4 i19 r0 i1 i0 i20 $b13 ]	[exit: d29 r20 r4 i19 r0 i1 i0 i20 ]
goto [?= $i6 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r20 r4 ]	[exit: d29 r20 r4 ]
i20 = i20 + 1...........................	[entry: d29 r20 r4 i19 r0 i1 i0 i20 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
goto [?= (branch)]......................	[entry: d29 r20 r4 i19 r0 i1 i20 i0 ]	[exit: d29 r20 r4 i19 r0 i1 i20 i0 ]
$i6 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r20 r4 ]	[exit: d29 r20 r4 $i6 ]
$i7 = $i6 - 1...........................	[entry: d29 r20 r4 $i6 ]	[exit: d29 r20 $i7 r4 ]
virtualinvoke r4.<divideconquer.ClosestPair: void yQuickSort(divideconquer.ClosestPair$Location[],int,int)>(r20, 0, $i7)	[entry: d29 r20 $i7 r4 ]	[exit: d29 r4 r20 ]
d31 = 0.0...............................	[entry: d29 r4 r20 ]	[exit: d29 r4 r20 ]
i21 = 0.................................	[entry: d29 r4 r20 ]	[exit: d29 r4 r20 i21 ]
$i22 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 $i22 ]
$i23 = $i22 - 1.........................	[entry: d29 r4 r20 i21 $i22 ]	[exit: d29 r4 r20 i21 $i23 ]
if i21 >= $i23 goto staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>(0)	[entry: d29 r4 r20 i21 $i23 ]	[exit: d29 r4 r20 i21 ]
i24 = i21 + 1...........................	[entry: d29 r4 r20 i21 ]	[exit: d29 i21 r4 r20 i24 ]
$i8 = <divideconquer.ClosestPair: int secondCount>	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 $i8 ]
if i24 >= $i8 goto i21 = i21 + 1........	[entry: d29 i21 r4 r20 i24 $i8 ]	[exit: d29 r4 r20 i21 i24 ]
$r5 = r20[i21]..........................	[entry: r4 d29 i24 r20 i21 ]	[exit: r4 d29 i21 r20 i24 $r5 ]
$d1 = $r5.<divideconquer.ClosestPair$Location: double x>	[entry: r4 d29 i21 r20 i24 $r5 ]	[exit: r4 d29 i21 $d1 r20 i24 ]
$r6 = r20[i24]..........................	[entry: r4 d29 i21 $d1 r20 i24 ]	[exit: r4 d29 i24 r20 i21 $d1 $r6 ]
$d0 = $r6.<divideconquer.ClosestPair$Location: double x>	[entry: r4 d29 i24 r20 i21 $d1 $r6 ]	[exit: r4 d29 i24 r20 i21 $d1 $d0 ]
$d2 = $d1 - $d0.........................	[entry: r4 d29 i24 r20 i21 $d1 $d0 ]	[exit: r4 d29 i24 r20 i21 $d2 ]
d3 = staticinvoke <java.lang.Math: double abs(double)>($d2)	[entry: r4 d29 i24 r20 i21 $d2 ]	[exit: r4 d3 d29 i24 r20 i21 ]
$r7 = r20[i21]..........................	[entry: r4 d3 d29 i24 r20 i21 ]	[exit: i21 r4 d3 d29 r20 i24 $r7 ]
$d5 = $r7.<divideconquer.ClosestPair$Location: double y>	[entry: i21 r4 d3 d29 r20 i24 $r7 ]	[exit: i21 r4 d3 d29 $d5 r20 i24 ]
$r8 = r20[i24]..........................	[entry: i21 r4 d3 d29 $d5 r20 i24 ]	[exit: i21 i24 r4 r20 d3 d29 $d5 $r8 ]
$d4 = $r8.<divideconquer.ClosestPair$Location: double y>	[entry: i21 i24 r4 r20 d3 d29 $d5 $r8 ]	[exit: i21 i24 r4 r20 d3 d29 $d5 $d4 ]
$d6 = $d5 - $d4.........................	[entry: i21 i24 r4 r20 d3 d29 $d5 $d4 ]	[exit: i21 i24 r4 r20 d3 d29 $d6 ]
d7 = staticinvoke <java.lang.Math: double abs(double)>($d6)	[entry: i21 i24 r4 r20 d3 d29 $d6 ]	[exit: i21 i24 r4 r20 d3 d7 d29 ]
$b9 = d7 cmpg d29.......................	[entry: i21 i24 r4 r20 d3 d7 d29 ]	[exit: d29 i21 i24 r4 r20 d7 d3 $b9 ]
if $b9 >= 0 goto i21 = i21 + 1..........	[entry: d29 i21 i24 r4 r20 d7 d3 $b9 ]	[exit: d29 r4 r20 i21 i24 d7 d3 ]
$d8 = staticinvoke <java.lang.Math: double pow(double,double)>(d3, 2.0)	[entry: i21 i24 r4 r20 d29 d7 d3 ]	[exit: i21 i24 r4 r20 d29 $d8 d7 ]
$d9 = staticinvoke <java.lang.Math: double pow(double,double)>(d7, 2.0)	[entry: i21 i24 r4 r20 d29 $d8 d7 ]	[exit: i21 i24 r4 r20 d29 $d8 $d9 ]
$d10 = $d8 + $d9........................	[entry: i21 i24 r4 r20 d29 $d8 $d9 ]	[exit: i21 i24 r4 r20 d29 $d10 ]
d32 = staticinvoke <java.lang.Math: double sqrt(double)>($d10)	[entry: i21 i24 r4 r20 d29 $d10 ]	[exit: i21 i24 r4 r20 d32 d29 ]
$b10 = d32 cmpg d29.....................	[entry: i21 i24 r4 r20 d32 d29 ]	[exit: d29 i21 i24 r4 r20 d32 $b10 ]
if $b10 >= 0 goto i24 = i24 + 1.........	[entry: d29 i21 i24 r4 r20 d32 $b10 ]	[exit: d29 i21 r4 r20 i24 d32 ]
d29 = d32...............................	[entry: i21 i24 r4 r20 d32 ]	[exit: d29 i21 i24 r4 r20 d32 ]
$d11 = <divideconquer.ClosestPair: double minNum>	[entry: d29 i21 i24 r4 r20 d32 ]	[exit: d29 i21 i24 r4 r20 d32 $d11 ]
$b11 = d32 cmpg $d11....................	[entry: d29 i21 i24 r4 r20 d32 $d11 ]	[exit: d29 i21 i24 r4 r20 d32 $b11 ]
if $b11 >= 0 goto i24 = i24 + 1.........	[entry: d29 i21 i24 r4 r20 d32 $b11 ]	[exit: d29 i21 r4 r20 i24 d32 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d32)	[entry: d29 i24 r4 r20 i21 d32 ]	[exit: d29 i24 r4 r20 i21 ]
$r9 = r20[i21]..........................	[entry: d29 i24 r4 r20 i21 ]	[exit: d29 i21 r20 i24 r4 $r9 ]
r4.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r9	[entry: d29 i21 r20 i24 r4 $r9 ]	[exit: d29 i21 r4 r20 i24 ]
$r10 = r20[i24].........................	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r20 i24 r4 $r10 ]
r4.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r10	[entry: d29 i21 r20 i24 r4 $r10 ]	[exit: d29 i21 r4 r20 i24 ]
i24 = i24 + 1...........................	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 ]
goto [?= $i8 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 i21 r4 r20 i24 ]	[exit: d29 i21 r4 r20 i24 ]
i21 = i21 + 1...........................	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 ]
goto [?= $i22 = <divideconquer.ClosestPair: int secondCount>]	[entry: d29 r4 r20 i21 ]	[exit: d29 r4 r20 i21 ]
staticinvoke <divideconquer.ClosestPair: void setSecondCount(int)>(0)	[entry: d29 ]	[exit: d29 ]
return d29..............................	[entry: d29 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: bruteForce, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: divideconquer.ClosestPair..	[entry: ]	[exit: r5 ]
r0 := @parameter0: divideconquer.ClosestPair$Location[]	[entry: r5 ]	[exit: r5 r0 ]
d16 = 1.7976931348623157E308............	[entry: r5 r0 ]	[exit: d16 r5 r0 ]
d17 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d18 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d19 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 ]
d20 = 0.0...............................	[entry: d16 r5 r0 ]	[exit: d20 d16 r5 r0 ]
$i0 = lengthof r0.......................	[entry: d20 d16 r5 r0 ]	[exit: d20 d16 r5 r0 $i0 ]
if $i0 != 2 goto $i7 = lengthof r0......	[entry: d20 d16 r5 r0 $i0 ]	[exit: d20 d16 r5 r0 ]
$r8 = r0[0].............................	[entry: d16 r5 r0 ]	[exit: d16 r5 r0 $r8 ]
$d9 = $r8.<divideconquer.ClosestPair$Location: double x>	[entry: d16 r5 r0 $r8 ]	[exit: d16 r5 $d9 r0 ]
$r9 = r0[1].............................	[entry: d16 r5 $d9 r0 ]	[exit: d16 r5 r0 $d9 $r9 ]
$d8 = $r9.<divideconquer.ClosestPair$Location: double x>	[entry: d16 r5 r0 $d9 $r9 ]	[exit: d16 r5 r0 $d9 $d8 ]
d21 = $d9 - $d8.........................	[entry: d16 r5 r0 $d9 $d8 ]	[exit: d16 r5 d21 r0 ]
$r10 = r0[0]............................	[entry: d16 r5 d21 r0 ]	[exit: d16 r5 d21 r0 $r10 ]
$d11 = $r10.<divideconquer.ClosestPair$Location: double y>	[entry: d16 r5 d21 r0 $r10 ]	[exit: d16 r5 d21 $d11 r0 ]
$r11 = r0[1]............................	[entry: d16 r5 d21 $d11 r0 ]	[exit: d16 r5 r0 d21 $d11 $r11 ]
$d10 = $r11.<divideconquer.ClosestPair$Location: double y>	[entry: d16 r5 r0 d21 $d11 $r11 ]	[exit: d16 r5 r0 d21 $d11 $d10 ]
d22 = $d11 - $d10.......................	[entry: d16 r5 r0 d21 $d11 $d10 ]	[exit: d16 r5 r0 d22 d21 ]
$d12 = staticinvoke <java.lang.Math: double pow(double,double)>(d21, 2.0)	[entry: d16 r5 r0 d22 d21 ]	[exit: d16 r5 r0 $d12 d22 ]
$d13 = staticinvoke <java.lang.Math: double pow(double,double)>(d22, 2.0)	[entry: d16 r5 r0 $d12 d22 ]	[exit: d16 r5 r0 $d12 $d13 ]
$d14 = $d12 + $d13......................	[entry: d16 r5 r0 $d12 $d13 ]	[exit: d16 r5 r0 $d14 ]
d23 = staticinvoke <java.lang.Math: double sqrt(double)>($d14)	[entry: d16 r5 r0 $d14 ]	[exit: d16 r5 r0 d23 ]
$d15 = <divideconquer.ClosestPair: double minNum>	[entry: d16 r5 r0 d23 ]	[exit: d16 r5 r0 d23 $d15 ]
$b6 = d23 cmpg $d15.....................	[entry: d16 r5 r0 d23 $d15 ]	[exit: d16 d23 r5 r0 $b6 ]
if $b6 >= 0 goto $r12 = r0[0]...........	[entry: d16 d23 r5 r0 $b6 ]	[exit: d16 d23 r5 r0 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d23)	[entry: d16 r5 r0 d23 ]	[exit: d16 d23 r5 r0 ]
$r12 = r0[0]............................	[entry: d16 d23 r5 r0 ]	[exit: d16 d23 r0 r5 $r12 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r12	[entry: d16 d23 r0 r5 $r12 ]	[exit: d16 d23 r5 r0 ]
$r13 = r0[1]............................	[entry: d16 d23 r5 r0 ]	[exit: d16 r0 d23 r5 $r13 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r13	[entry: d16 r0 d23 r5 $r13 ]	[exit: d16 r5 r0 d23 ]
d20 = d23...............................	[entry: d16 r5 r0 d23 ]	[exit: d20 d16 r5 r0 ]
$i7 = lengthof r0.......................	[entry: d20 d16 r5 r0 ]	[exit: d20 d16 r5 r0 $i7 ]
if $i7 != 3 goto return d20.............	[entry: d20 d16 r5 r0 $i7 ]	[exit: d20 d16 r5 r0 ]
i8 = 0..................................	[entry: d16 r5 r0 ]	[exit: d16 r5 i8 r0 ]
$i1 = lengthof r0.......................	[entry: d16 r5 i8 r0 ]	[exit: d16 r5 r0 i8 $i1 ]
$i2 = $i1 - 1...........................	[entry: d16 r5 r0 i8 $i1 ]	[exit: d16 r5 r0 i8 $i2 ]
if i8 >= $i2 goto d20 = d16.............	[entry: d16 r5 r0 i8 $i2 ]	[exit: d16 r5 r0 i8 ]
i9 = i8 + 1.............................	[entry: d16 r5 r0 i8 ]	[exit: d16 i8 r5 i9 r0 ]
$i3 = lengthof r0.......................	[entry: d16 i8 r5 i9 r0 ]	[exit: d16 r0 i8 r5 i9 $i3 ]
if i9 >= $i3 goto i8 = i8 + 1...........	[entry: d16 r0 i8 r5 i9 $i3 ]	[exit: d16 r5 r0 i8 i9 ]
$r1 = r0[i8]............................	[entry: r5 d16 i9 r0 i8 ]	[exit: r5 d16 i8 r0 i9 $r1 ]
$d1 = $r1.<divideconquer.ClosestPair$Location: double x>	[entry: r5 d16 i8 r0 i9 $r1 ]	[exit: r5 d16 i8 $d1 r0 i9 ]
$r2 = r0[i9]............................	[entry: r5 d16 i8 $d1 r0 i9 ]	[exit: r5 d16 i9 r0 i8 $d1 $r2 ]
$d0 = $r2.<divideconquer.ClosestPair$Location: double x>	[entry: r5 d16 i9 r0 i8 $d1 $r2 ]	[exit: r5 d16 i9 r0 i8 $d1 $d0 ]
d24 = $d1 - $d0.........................	[entry: r5 d16 i9 r0 i8 $d1 $d0 ]	[exit: r5 d16 d24 i9 r0 i8 ]
$r3 = r0[i8]............................	[entry: r5 d16 d24 i9 r0 i8 ]	[exit: i8 r5 d16 d24 r0 i9 $r3 ]
$d3 = $r3.<divideconquer.ClosestPair$Location: double y>	[entry: i8 r5 d16 d24 r0 i9 $r3 ]	[exit: i8 r5 d16 d24 $d3 r0 i9 ]
$r4 = r0[i9]............................	[entry: i8 r5 d16 d24 $d3 r0 i9 ]	[exit: i8 r0 i9 r5 d16 d24 $d3 $r4 ]
$d2 = $r4.<divideconquer.ClosestPair$Location: double y>	[entry: i8 r0 i9 r5 d16 d24 $d3 $r4 ]	[exit: i8 r0 i9 r5 d16 d24 $d3 $d2 ]
d25 = $d3 - $d2.........................	[entry: i8 r0 i9 r5 d16 d24 $d3 $d2 ]	[exit: i8 r0 i9 r5 d16 d25 d24 ]
$d4 = staticinvoke <java.lang.Math: double pow(double,double)>(d24, 2.0)	[entry: i8 r0 i9 r5 d16 d25 d24 ]	[exit: i8 r0 i9 r5 d16 $d4 d25 ]
$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(d25, 2.0)	[entry: i8 r0 i9 r5 d16 $d4 d25 ]	[exit: i8 r0 i9 r5 d16 $d4 $d5 ]
$d6 = $d4 + $d5.........................	[entry: i8 r0 i9 r5 d16 $d4 $d5 ]	[exit: i8 r0 i9 r5 d16 $d6 ]
d26 = staticinvoke <java.lang.Math: double sqrt(double)>($d6)	[entry: i8 r0 i9 r5 d16 $d6 ]	[exit: i8 r0 i9 r5 d26 d16 ]
$b4 = d26 cmpg d16......................	[entry: i8 r0 i9 r5 d26 d16 ]	[exit: d16 i8 r0 i9 r5 d26 $b4 ]
if $b4 >= 0 goto i9 = i9 + 1............	[entry: d16 i8 r0 i9 r5 d26 $b4 ]	[exit: d16 i8 r5 r0 i9 d26 ]
d16 = d26...............................	[entry: i8 r0 i9 r5 d26 ]	[exit: d16 i8 r0 i9 r5 d26 ]
$d7 = <divideconquer.ClosestPair: double minNum>	[entry: d16 i8 r0 i9 r5 d26 ]	[exit: d16 i8 r0 i9 r5 d26 $d7 ]
$b5 = d26 cmpg $d7......................	[entry: d16 i8 r0 i9 r5 d26 $d7 ]	[exit: d16 i8 r0 i9 r5 d26 $b5 ]
if $b5 >= 0 goto i9 = i9 + 1............	[entry: d16 i8 r0 i9 r5 d26 $b5 ]	[exit: d16 i8 r5 r0 i9 d26 ]
staticinvoke <divideconquer.ClosestPair: void setMinNum(double)>(d26)	[entry: d16 i9 r5 r0 i8 d26 ]	[exit: d16 i9 r5 r0 i8 ]
$r6 = r0[i8]............................	[entry: d16 i9 r5 r0 i8 ]	[exit: d16 i8 r0 i9 r5 $r6 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1> = $r6	[entry: d16 i8 r0 i9 r5 $r6 ]	[exit: d16 i8 r5 r0 i9 ]
$r7 = r0[i9]............................	[entry: d16 i8 r5 r0 i9 ]	[exit: d16 i8 r0 i9 r5 $r7 ]
r5.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2> = $r7	[entry: d16 i8 r0 i9 r5 $r7 ]	[exit: d16 i8 r5 r0 i9 ]
i9 = i9 + 1.............................	[entry: d16 i8 r5 r0 i9 ]	[exit: d16 i8 r5 i9 r0 ]
goto [?= $i3 = lengthof r0].............	[entry: d16 i8 r5 i9 r0 ]	[exit: d16 i8 r5 i9 r0 ]
i8 = i8 + 1.............................	[entry: d16 r5 r0 i8 ]	[exit: d16 r5 i8 r0 ]
goto [?= $i1 = lengthof r0].............	[entry: d16 r5 i8 r0 ]	[exit: d16 r5 i8 r0 ]
d20 = d16...............................	[entry: d16 ]	[exit: d20 ]
return d20..............................	[entry: d20 ]	[exit: ]
********************
Class Name: divideconquer.ClosestPair, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r75 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new divideconquer.ClosestPair.....	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<divideconquer.ClosestPair: void <init>(int)>(12)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 3.0)	[entry: $r2 r1 ]	[exit: r1 $r2 $r3 ]
$r2[0] = $r3............................	[entry: r1 $r2 $r3 ]	[exit: r1 ]
$r4 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r4 r1 ]
$r5 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(2.0, 16.0)	[entry: $r4 r1 ]	[exit: r1 $r4 $r5 ]
$r4[1] = $r5............................	[entry: r1 $r4 $r5 ]	[exit: r1 ]
$r6 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r6 r1 ]
$r7 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(3.0, 9.0)	[entry: $r6 r1 ]	[exit: r1 $r6 $r7 ]
$r6[2] = $r7............................	[entry: r1 $r6 $r7 ]	[exit: r1 ]
$r8 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r8 r1 ]
$r9 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(6.0, 3.0)	[entry: $r8 r1 ]	[exit: r1 $r8 $r9 ]
$r8[3] = $r9............................	[entry: r1 $r8 $r9 ]	[exit: r1 ]
$r10 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r10 r1 ]
$r11 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(7.0, 7.0)	[entry: $r10 r1 ]	[exit: r1 $r10 $r11 ]
$r10[4] = $r11..........................	[entry: r1 $r10 $r11 ]	[exit: r1 ]
$r12 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(19.0, 4.0)	[entry: $r12 r1 ]	[exit: r1 $r12 $r13 ]
$r12[5] = $r13..........................	[entry: r1 $r12 $r13 ]	[exit: r1 ]
$r14 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r14 r1 ]
$r15 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(10.0, 11.0)	[entry: $r14 r1 ]	[exit: r1 $r14 $r15 ]
$r14[6] = $r15..........................	[entry: r1 $r14 $r15 ]	[exit: r1 ]
$r16 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r16 r1 ]
$r17 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 2.0)	[entry: $r16 r1 ]	[exit: r1 $r16 $r17 ]
$r16[7] = $r17..........................	[entry: r1 $r16 $r17 ]	[exit: r1 ]
$r18 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r18 r1 ]
$r19 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(15.0, 19.0)	[entry: $r18 r1 ]	[exit: r1 $r18 $r19 ]
$r18[8] = $r19..........................	[entry: r1 $r18 $r19 ]	[exit: r1 ]
$r20 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r20 r1 ]
$r21 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(16.0, 11.0)	[entry: $r20 r1 ]	[exit: r1 $r20 $r21 ]
$r20[9] = $r21..........................	[entry: r1 $r20 $r21 ]	[exit: r1 ]
$r22 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r22 r1 ]
$r23 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(17.0, 13.0)	[entry: $r22 r1 ]	[exit: r1 $r22 $r23 ]
$r22[10] = $r23.........................	[entry: r1 $r22 $r23 ]	[exit: r1 ]
$r24 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r24 r1 ]
$r25 = virtualinvoke r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location buildLocation(double,double)>(9.0, 12.0)	[entry: $r24 r1 ]	[exit: r1 $r24 $r25 ]
$r24[11] = $r25.........................	[entry: r1 $r24 $r25 ]	[exit: r1 ]
$r26 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r26 ]
virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.String)>("Input data")	[entry: r1 $r26 ]	[exit: r1 ]
$r28 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r28 r1 ]
$r27 = new java.lang.StringBuilder......	[entry: $r28 r1 ]	[exit: $r28 r1 $r27 ]
specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()	[entry: $r28 r1 $r27 ]	[exit: $r28 r1 $r27 ]
$r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Number of points: ")	[entry: $r28 r1 $r27 ]	[exit: $r28 $r29 r1 ]
$r30 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r28 $r29 r1 ]	[exit: r1 $r28 $r29 $r30 ]
$i0 = lengthof $r30.....................	[entry: r1 $r28 $r29 $r30 ]	[exit: r1 $r28 $i0 $r29 ]
$r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r28 $i0 $r29 ]	[exit: r1 $r28 $r31 ]
$r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r28 $r31 ]	[exit: r1 $r32 $r28 ]
virtualinvoke $r28.<java.io.PrintStream: void println(java.lang.String)>($r32)	[entry: r1 $r32 $r28 ]	[exit: r1 ]
i5 = 0..................................	[entry: r1 ]	[exit: i5 r1 ]
$r33 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: i5 r1 ]	[exit: r1 i5 $r33 ]
$i1 = lengthof $r33.....................	[entry: r1 i5 $r33 ]	[exit: r1 i5 $i1 ]
if i5 >= $i1 goto $r35 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 i5 $i1 ]	[exit: r1 i5 ]
$r65 = <java.lang.System: java.io.PrintStream out>	[entry: i5 r1 ]	[exit: $r65 i5 r1 ]
$r64 = new java.lang.StringBuilder......	[entry: $r65 i5 r1 ]	[exit: $r65 i5 r1 $r64 ]
specialinvoke $r64.<java.lang.StringBuilder: void <init>()>()	[entry: $r65 i5 r1 $r64 ]	[exit: $r65 i5 r1 $r64 ]
$r66 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("x: ")	[entry: $r65 i5 r1 $r64 ]	[exit: $r65 $r66 i5 r1 ]
$r67 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r65 $r66 i5 r1 ]	[exit: $r65 r1 $r66 $r67 i5 ]
$r68 = $r67[i5].........................	[entry: $r65 r1 $r66 $r67 i5 ]	[exit: $r65 i5 r1 $r66 $r68 ]
$d4 = $r68.<divideconquer.ClosestPair$Location: double x>	[entry: $r65 i5 r1 $r66 $r68 ]	[exit: $r65 i5 r1 $d4 $r66 ]
$r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d4)	[entry: $r65 i5 r1 $d4 $r66 ]	[exit: $r65 i5 r1 $r69 ]
$r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", y: ")	[entry: $r65 i5 r1 $r69 ]	[exit: $r65 $r70 i5 r1 ]
$r71 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r65 $r70 i5 r1 ]	[exit: r1 $r65 $r70 $r71 i5 ]
$r72 = $r71[i5].........................	[entry: r1 $r65 $r70 $r71 i5 ]	[exit: r1 i5 $r65 $r70 $r72 ]
$d5 = $r72.<divideconquer.ClosestPair$Location: double y>	[entry: r1 i5 $r65 $r70 $r72 ]	[exit: r1 i5 $r65 $d5 $r70 ]
$r73 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d5)	[entry: r1 i5 $r65 $d5 $r70 ]	[exit: r1 i5 $r65 $r73 ]
$r74 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i5 $r65 $r73 ]	[exit: r1 i5 $r74 $r65 ]
virtualinvoke $r65.<java.io.PrintStream: void println(java.lang.String)>($r74)	[entry: r1 i5 $r74 $r65 ]	[exit: r1 i5 ]
i5 = i5 + 1.............................	[entry: r1 i5 ]	[exit: i5 r1 ]
goto [?= $r33 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>]	[entry: i5 r1 ]	[exit: i5 r1 ]
$r35 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r35 r1 ]
$r34 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r35 r1 ]	[exit: $r35 r1 $r34 ]
$i2 = lengthof $r34.....................	[entry: $r35 r1 $r34 ]	[exit: $r35 r1 $i2 ]
$i3 = $i2 - 1...........................	[entry: $r35 r1 $i2 ]	[exit: $r35 $i3 r1 ]
virtualinvoke r1.<divideconquer.ClosestPair: void xQuickSort(divideconquer.ClosestPair$Location[],int,int)>($r35, 0, $i3)	[entry: $r35 $i3 r1 ]	[exit: r1 ]
$r37 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: r1 ]	[exit: $r37 r1 ]
$r36 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location[] array>	[entry: $r37 r1 ]	[exit: $r37 r1 $r36 ]
$i4 = lengthof $r36.....................	[entry: $r37 r1 $r36 ]	[exit: $r37 $i4 r1 ]
d6 = virtualinvoke r1.<divideconquer.ClosestPair: double closestPair(divideconquer.ClosestPair$Location[],int)>($r37, $i4)	[entry: $r37 $i4 r1 ]	[exit: d6 r1 ]
$r38 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 r1 $r38 ]
virtualinvoke $r38.<java.io.PrintStream: void println(java.lang.String)>("Output Data")	[entry: d6 r1 $r38 ]	[exit: d6 r1 ]
$r40 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 $r40 r1 ]
$r39 = new java.lang.StringBuilder......	[entry: d6 $r40 r1 ]	[exit: d6 $r40 r1 $r39 ]
specialinvoke $r39.<java.lang.StringBuilder: void <init>()>()	[entry: d6 $r40 r1 $r39 ]	[exit: d6 $r40 r1 $r39 ]
$r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(")	[entry: d6 $r40 r1 $r39 ]	[exit: d6 $r40 $r41 r1 ]
$r42 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1>	[entry: d6 $r40 $r41 r1 ]	[exit: d6 $r40 r1 $r41 $r42 ]
$d0 = $r42.<divideconquer.ClosestPair$Location: double x>	[entry: d6 $r40 r1 $r41 $r42 ]	[exit: d6 $r40 r1 $d0 $r41 ]
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d0)	[entry: d6 $r40 r1 $d0 $r41 ]	[exit: d6 $r40 r1 $r43 ]
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: d6 $r40 r1 $r43 ]	[exit: d6 $r40 $r44 r1 ]
$r45 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point1>	[entry: d6 $r40 $r44 r1 ]	[exit: d6 r1 $r40 $r44 $r45 ]
$d1 = $r45.<divideconquer.ClosestPair$Location: double y>	[entry: d6 r1 $r40 $r44 $r45 ]	[exit: d6 r1 $r40 $d1 $r44 ]
$r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d1)	[entry: d6 r1 $r40 $d1 $r44 ]	[exit: d6 r1 $r40 $r46 ]
$r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")")	[entry: d6 r1 $r40 $r46 ]	[exit: d6 r1 $r40 $r47 ]
$r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: d6 r1 $r40 $r47 ]	[exit: d6 r1 $r48 $r40 ]
virtualinvoke $r40.<java.io.PrintStream: void println(java.lang.String)>($r48)	[entry: d6 r1 $r48 $r40 ]	[exit: d6 r1 ]
$r50 = <java.lang.System: java.io.PrintStream out>	[entry: d6 r1 ]	[exit: d6 $r50 r1 ]
$r49 = new java.lang.StringBuilder......	[entry: d6 $r50 r1 ]	[exit: d6 $r50 r1 $r49 ]
specialinvoke $r49.<java.lang.StringBuilder: void <init>()>()	[entry: d6 $r50 r1 $r49 ]	[exit: d6 $r50 r1 $r49 ]
$r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(")	[entry: d6 $r50 r1 $r49 ]	[exit: d6 $r50 $r51 r1 ]
$r52 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2>	[entry: d6 $r50 $r51 r1 ]	[exit: d6 $r50 r1 $r51 $r52 ]
$d2 = $r52.<divideconquer.ClosestPair$Location: double x>	[entry: d6 $r50 r1 $r51 $r52 ]	[exit: d6 $r50 r1 $d2 $r51 ]
$r53 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d2)	[entry: d6 $r50 r1 $d2 $r51 ]	[exit: d6 $r50 r1 $r53 ]
$r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: d6 $r50 r1 $r53 ]	[exit: d6 $r50 $r54 r1 ]
$r55 = r1.<divideconquer.ClosestPair: divideconquer.ClosestPair$Location point2>	[entry: d6 $r50 $r54 r1 ]	[exit: d6 $r50 $r54 $r55 ]
$d3 = $r55.<divideconquer.ClosestPair$Location: double y>	[entry: d6 $r50 $r54 $r55 ]	[exit: d6 $r50 $d3 $r54 ]
$r56 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>($d3)	[entry: d6 $r50 $d3 $r54 ]	[exit: d6 $r50 $r56 ]
$r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")")	[entry: d6 $r50 $r56 ]	[exit: d6 $r50 $r57 ]
$r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: d6 $r50 $r57 ]	[exit: d6 $r58 $r50 ]
virtualinvoke $r50.<java.io.PrintStream: void println(java.lang.String)>($r58)	[entry: d6 $r58 $r50 ]	[exit: d6 ]
$r60 = <java.lang.System: java.io.PrintStream out>	[entry: d6 ]	[exit: $r60 d6 ]
$r59 = new java.lang.StringBuilder......	[entry: $r60 d6 ]	[exit: $r60 d6 $r59 ]
specialinvoke $r59.<java.lang.StringBuilder: void <init>()>()	[entry: $r60 d6 $r59 ]	[exit: $r60 d6 $r59 ]
$r61 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Minimum Distance : ")	[entry: $r60 d6 $r59 ]	[exit: $r60 d6 $r61 ]
$r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(double)>(d6)	[entry: $r60 d6 $r61 ]	[exit: $r60 $r62 ]
$r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r60 $r62 ]	[exit: $r63 $r60 ]
virtualinvoke $r60.<java.io.PrintStream: void println(java.lang.String)>($r63)	[entry: $r63 $r60 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new BSTIterative..................	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<BSTIterative: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z0 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<BSTIterative: boolean find(int)>(4)	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 == 0 goto $z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("4 is not yet present in BST")	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z1 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 $z1 ]	[exit: r1 ]
$z8 = virtualinvoke r1.<BSTIterative: boolean find(int)>(2)	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 $z8 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("2 should be present in BST")	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(2)	[entry: r1 ]	[exit: r1 ]
$z2 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z2 ]	[exit: r1 ]
$z7 = virtualinvoke r1.<BSTIterative: boolean find(int)>(2)	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 == 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z7 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("2 was just deleted from BST")	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 ]	[exit: r1 ]
$z3 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 $z3 ]	[exit: r1 ]
$z6 = virtualinvoke r1.<BSTIterative: boolean find(int)>(1)	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 == 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 $z6 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Since 1 was not present so find deleting would do no change")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void add(int)>(30)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(40)	[entry: r1 ]	[exit: r1 ]
$z4 = <BSTIterative: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z4 ]	[exit: r1 ]
$z5 = virtualinvoke r1.<BSTIterative: boolean find(int)>(40)	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z5 ]	[exit: r1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("40 was inserted but not found")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: add, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
r8 = null...............................	[entry: i0 r0 ]	[exit: i0 r8 r0 ]
r9 = r0.<BSTIterative: BSTIterative$Node root>	[entry: i0 r8 r0 ]	[exit: i0 r0 r8 r9 ]
b3 = -1.................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
if r9 == null goto $r1 = new BSTIterative$Node	[entry: i0 r0 b3 r8 r9 ]	[exit: r0 i0 r9 b3 r8 ]
$i1 = r9.<BSTIterative$Node: int data>..	[entry: r0 i0 r9 ]	[exit: r0 r9 $i1 i0 ]
if $i1 <= i0 goto $i2 = r9.<BSTIterative$Node: int data>	[entry: r0 r9 $i1 i0 ]	[exit: r0 i0 r9 ]
r8 = r9.................................	[entry: i0 r0 r9 ]	[exit: i0 r0 r8 ]
r9 = r8.<BSTIterative$Node: BSTIterative$Node left>	[entry: i0 r0 r8 ]	[exit: i0 r0 r8 r9 ]
b3 = 0..................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
goto [?= (branch)]......................	[entry: i0 r0 b3 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
$i2 = r9.<BSTIterative$Node: int data>..	[entry: r0 i0 r9 ]	[exit: r0 r9 $i2 i0 ]
if $i2 >= i0 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r9 $i2 i0 ]	[exit: i0 r0 r9 ]
r8 = r9.................................	[entry: i0 r0 r9 ]	[exit: i0 r0 r8 ]
r9 = r8.<BSTIterative$Node: BSTIterative$Node right>	[entry: i0 r0 r8 ]	[exit: i0 r0 r8 r9 ]
b3 = 1..................................	[entry: i0 r0 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
goto [?= (branch)]......................	[entry: i0 r0 b3 r8 r9 ]	[exit: i0 r0 b3 r8 r9 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r4 i0 ]
$r3 = new java.lang.StringBuilder.......	[entry: $r4 i0 ]	[exit: $r4 i0 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: $r4 i0 $r3 ]	[exit: $r4 i0 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r4 i0 $r3 ]	[exit: $r4 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already present in BST.")	[entry: $r4 $r5 ]	[exit: $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r4 $r6 ]	[exit: $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: $r7 $r4 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
$r1 = new BSTIterative$Node.............	[entry: r0 b3 r8 i0 ]	[exit: r0 b3 r8 i0 $r1 ]
specialinvoke $r1.<BSTIterative$Node: void <init>(int)>(i0)	[entry: r0 b3 r8 i0 $r1 ]	[exit: r0 b3 r8 $r1 ]
r2 = $r1................................	[entry: r0 b3 r8 $r1 ]	[exit: r0 r2 b3 r8 ]
if r8 != null goto (branch).............	[entry: r0 r2 b3 r8 ]	[exit: r0 r2 r8 b3 ]
r0.<BSTIterative: BSTIterative$Node root> = r2	[entry: r0 r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
if b3 != 0 goto r8.<BSTIterative$Node: BSTIterative$Node right> = r2	[entry: r8 r2 b3 ]	[exit: r8 r2 ]
r8.<BSTIterative$Node: BSTIterative$Node left> = r2	[entry: r8 r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
r8.<BSTIterative$Node: BSTIterative$Node right> = r2	[entry: r8 r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: remove, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
r13 = null..............................	[entry: i2 r0 ]	[exit: r13 i2 r0 ]
r14 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r13 i2 r0 ]	[exit: r0 r13 i2 r14 ]
b5 = -1.................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
if r14 == null goto (branch)............	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 r14 i2 ]
$i3 = r14.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 r14 b5 r13 $i3 i2 ]
if $i3 != i2 goto $i4 = r14.<BSTIterative$Node: int data>	[entry: r0 r14 b5 r13 $i3 i2 ]	[exit: r0 i2 r14 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 ]
$i4 = r14.<BSTIterative$Node: int data>.	[entry: r0 i2 r14 ]	[exit: r0 r14 $i4 i2 ]
if $i4 <= i2 goto r13 = r14.............	[entry: r0 r14 $i4 i2 ]	[exit: r0 i2 r14 ]
r13 = r14...............................	[entry: r0 i2 r14 ]	[exit: r0 i2 r13 ]
r14 = r13.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 i2 r13 ]	[exit: r0 r13 i2 r14 ]
b5 = 0..................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
r13 = r14...............................	[entry: r0 i2 r14 ]	[exit: r0 i2 r13 ]
r14 = r13.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 i2 r13 ]	[exit: r0 r13 i2 r14 ]
b5 = 1..................................	[entry: r0 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
goto [?= (branch)]......................	[entry: r0 b5 r13 i2 r14 ]	[exit: r0 b5 r13 i2 r14 ]
if r14 == null goto return..............	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 ]
$r1 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r1 ]
if $r1 != null goto $r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r1 ]	[exit: r0 b5 r13 r14 ]
$r12 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r12 ]
if $r12 != null goto $r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r12 ]	[exit: r0 b5 r13 r14 ]
r15 = null..............................	[entry: r0 b5 r13 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r2 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r2 ]
if $r2 != null goto $r3 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 $r2 ]	[exit: r0 b5 r13 r14 ]
r15 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
r14.<BSTIterative$Node: BSTIterative$Node left> = null	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r3 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r3 ]
if $r3 != null goto $r4 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r3 ]	[exit: r0 b5 r13 r14 ]
r15 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
r14.<BSTIterative$Node: BSTIterative$Node right> = null	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
$r4 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r4 ]
$r5 = $r4.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 $r4 ]	[exit: r0 b5 r13 r14 $r5 ]
if $r5 != null goto r16 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 $r5 ]	[exit: r0 b5 r13 r14 ]
$r9 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r14 $r9 ]
$i1 = $r9.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 r14 $r9 ]	[exit: r0 b5 r13 r14 $i1 ]
r14.<BSTIterative$Node: int data> = $i1.	[entry: r0 b5 r13 r14 $i1 ]	[exit: r0 b5 r13 r14 ]
r15 = r14...............................	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 ]
$r10 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 r15 b5 r13 r14 ]	[exit: r0 r15 b5 r13 r14 $r10 ]
$r11 = $r10.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 r15 b5 r13 r14 $r10 ]	[exit: r0 r15 b5 r13 r14 $r11 ]
r14.<BSTIterative$Node: BSTIterative$Node right> = $r11	[entry: r0 r15 b5 r13 r14 $r11 ]	[exit: r0 r15 b5 r13 ]
goto [?= (branch)]......................	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 b5 r13 ]
r16 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 ]	[exit: r0 b5 r13 r16 r14 ]
$r6 = r14.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r16 r14 ]	[exit: r0 b5 r13 r16 r14 $r6 ]
r17 = $r6.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r16 r14 $r6 ]	[exit: r0 b5 r13 r16 r14 r17 ]
$r7 = r17.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r14 r17 $r7 ]
if $r7 == null goto $i0 = r17.<BSTIterative$Node: int data>	[entry: r0 b5 r13 r16 r14 r17 $r7 ]	[exit: r0 b5 r13 r16 r14 r17 ]
r16 = r17...............................	[entry: r0 b5 r13 r14 r17 ]	[exit: r0 b5 r13 r14 r16 ]
r17 = r16.<BSTIterative$Node: BSTIterative$Node left>	[entry: r0 b5 r13 r14 r16 ]	[exit: r0 b5 r13 r16 r14 r17 ]
goto [?= $r7 = r17.<BSTIterative$Node: BSTIterative$Node left>]	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r14 r17 ]
$i0 = r17.<BSTIterative$Node: int data>.	[entry: r0 b5 r13 r16 r14 r17 ]	[exit: r0 b5 r13 r16 r17 r14 $i0 ]
r14.<BSTIterative$Node: int data> = $i0.	[entry: r0 b5 r13 r16 r17 r14 $i0 ]	[exit: r0 b5 r13 r14 r16 r17 ]
$r8 = r17.<BSTIterative$Node: BSTIterative$Node right>	[entry: r0 b5 r13 r14 r16 r17 ]	[exit: r0 b5 r13 r14 r16 $r8 ]
r16.<BSTIterative$Node: BSTIterative$Node left> = $r8	[entry: r0 b5 r13 r14 r16 $r8 ]	[exit: r0 b5 r13 r14 ]
r15 = r14...............................	[entry: r0 b5 r13 r14 ]	[exit: r0 r15 b5 r13 ]
if r13 != null goto (branch)............	[entry: r0 r15 b5 r13 ]	[exit: r0 r15 r13 b5 ]
r0.<BSTIterative: BSTIterative$Node root> = r15	[entry: r0 r15 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
if b5 != 0 goto r13.<BSTIterative$Node: BSTIterative$Node right> = r15	[entry: r13 r15 b5 ]	[exit: r13 r15 ]
r13.<BSTIterative$Node: BSTIterative$Node left> = r15	[entry: r13 r15 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
r13.<BSTIterative$Node: BSTIterative$Node right> = r15	[entry: r13 r15 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: inorder, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
$r1 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r0 ]	[exit: r0 $r1 ]
if $r1 != null goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 $r1 ]	[exit: r0 ]
$r13 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r13 ]
virtualinvoke $r13.<java.io.PrintStream: void println(java.lang.String)>("This BST is empty.")	[entry: $r13 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Inorder traversal of this tree is:")	[entry: r0 $r2 ]	[exit: r0 ]
$r3 = new java.util.Stack...............	[entry: r0 ]	[exit: r0 $r3 ]
specialinvoke $r3.<java.util.Stack: void <init>()>()	[entry: r0 $r3 ]	[exit: r0 $r3 ]
r4 = $r3................................	[entry: r0 $r3 ]	[exit: r4 r0 ]
r14 = r0.<BSTIterative: BSTIterative$Node root>	[entry: r4 r0 ]	[exit: r4 r14 ]
if r14 != null goto (branch)............	[entry: r4 r14 ]	[exit: r14 r4 ]
$z0 = virtualinvoke r4.<java.util.Stack: boolean empty()>()	[entry: r14 r4 ]	[exit: r4 r14 $z0 ]
if $z0 != 0 goto $r12 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r14 $z0 ]	[exit: r4 r14 ]
if r14 == null goto $r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object pop()>()	[entry: r4 r14 ]	[exit: r4 r14 ]
virtualinvoke r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r14)	[entry: r14 r4 ]	[exit: r4 r14 ]
r14 = r14.<BSTIterative$Node: BSTIterative$Node left>	[entry: r4 r14 ]	[exit: r4 r14 ]
goto [?= (branch)]......................	[entry: r4 r14 ]	[exit: r4 r14 ]
$r5 = virtualinvoke r4.<java.util.Stack: java.lang.Object pop()>()	[entry: r4 ]	[exit: r4 $r5 ]
r15 = (BSTIterative$Node) $r5...........	[entry: r4 $r5 ]	[exit: r4 r15 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r15 ]	[exit: r4 $r7 r15 ]
$r6 = new java.lang.StringBuilder.......	[entry: r4 $r7 r15 ]	[exit: r4 $r7 r15 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r4 $r7 r15 $r6 ]	[exit: r4 $r7 $r6 r15 ]
$i0 = r15.<BSTIterative$Node: int data>.	[entry: r4 $r7 $r6 r15 ]	[exit: r4 r15 $r7 $i0 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r4 r15 $r7 $i0 $r6 ]	[exit: r4 r15 $r7 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r4 r15 $r7 $r8 ]	[exit: r4 r15 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r4 r15 $r7 $r9 ]	[exit: r4 r15 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void print(java.lang.String)>($r10)	[entry: r4 r15 $r10 $r7 ]	[exit: r4 r15 ]
r14 = r15.<BSTIterative$Node: BSTIterative$Node right>	[entry: r4 r15 ]	[exit: r4 r14 ]
goto [?= (branch)]......................	[entry: r4 r14 ]	[exit: r4 r14 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println()>()	[entry: $r12 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTIterative, Method Name: find, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: BSTIterative...............	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
r11 = r0.<BSTIterative: BSTIterative$Node root>	[entry: i0 r0 ]	[exit: i0 r11 ]
if r11 == null goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r11 ]	[exit: i0 r11 ]
$i1 = r11.<BSTIterative$Node: int data>.	[entry: i0 r11 ]	[exit: r11 $i1 i0 ]
if $i1 <= i0 goto $i2 = r11.<BSTIterative$Node: int data>	[entry: r11 $i1 i0 ]	[exit: i0 r11 ]
r11 = r11.<BSTIterative$Node: BSTIterative$Node left>	[entry: i0 r11 ]	[exit: i0 r11 ]
goto [?= (branch)]......................	[entry: i0 r11 ]	[exit: i0 r11 ]
$i2 = r11.<BSTIterative$Node: int data>.	[entry: i0 r11 ]	[exit: r11 $i2 i0 ]
if $i2 >= i0 goto $r7 = <java.lang.System: java.io.PrintStream out>	[entry: r11 $i2 i0 ]	[exit: i0 r11 ]
r11 = r11.<BSTIterative$Node: BSTIterative$Node right>	[entry: i0 r11 ]	[exit: i0 r11 ]
goto [?= (branch)]......................	[entry: i0 r11 ]	[exit: i0 r11 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r7 i0 ]
$r6 = new java.lang.StringBuilder.......	[entry: $r7 i0 ]	[exit: $r7 i0 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: $r7 i0 $r6 ]	[exit: $r7 i0 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r7 i0 $r6 ]	[exit: $r7 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is present in the BST.")	[entry: $r7 $r8 ]	[exit: $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r7 $r9 ]	[exit: $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: $r10 $r7 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r2 i0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r2 i0 ]	[exit: $r2 i0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r2 i0 $r1 ]	[exit: $r2 i0 $r1 ]
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r2 i0 $r1 ]	[exit: $r2 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found.")	[entry: $r2 $r3 ]	[exit: $r2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 $r4 ]	[exit: $r5 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r5)	[entry: $r5 $r2 ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: Others.EulersFunction, Method Name: getEuler, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i5 := @parameter0: int..................	[entry: ]	[exit: i5 ]
i6 = i5.................................	[entry: i5 ]	[exit: i6 i5 ]
i7 = 2..................................	[entry: i6 i5 ]	[exit: i6 i5 i7 ]
$i0 = i7 * i7...........................	[entry: i6 i5 i7 ]	[exit: i6 i7 $i0 i5 ]
if $i0 > i5 goto (branch)...............	[entry: i6 i7 $i0 i5 ]	[exit: i6 i5 i7 ]
$i2 = i5 % i7...........................	[entry: i6 i5 i7 ]	[exit: i6 i5 i7 $i2 ]
if $i2 != 0 goto i7 = i7 + 1............	[entry: i6 i5 i7 $i2 ]	[exit: i6 i5 i7 ]
$i3 = i5 % i7...........................	[entry: i6 i5 i7 ]	[exit: i5 i6 i7 $i3 ]
if $i3 != 0 goto $i4 = i6 / i7..........	[entry: i5 i6 i7 $i3 ]	[exit: i5 i6 i7 ]
i5 = i5 / i7............................	[entry: i6 i5 i7 ]	[exit: i6 i5 i7 ]
goto [?= $i3 = i5 % i7].................	[entry: i6 i5 i7 ]	[exit: i6 i5 i7 ]
$i4 = i6 / i7...........................	[entry: i5 i6 i7 ]	[exit: i5 i7 i6 $i4 ]
i6 = i6 - $i4...........................	[entry: i5 i7 i6 $i4 ]	[exit: i6 i5 i7 ]
i7 = i7 + 1.............................	[entry: i6 i5 i7 ]	[exit: i6 i5 i7 ]
goto [?= $i0 = i7 * i7].................	[entry: i6 i5 i7 ]	[exit: i6 i5 i7 ]
if i5 <= 1 goto return i6...............	[entry: i6 i5 ]	[exit: i6 i5 ]
$i1 = i6 / i5...........................	[entry: i6 i5 ]	[exit: i6 $i1 ]
i6 = i6 - $i1...........................	[entry: i6 $i1 ]	[exit: i6 ]
return i6...............................	[entry: i6 ]	[exit: ]
********************
Class Name: Others.EulersFunction, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
i1 = 1..................................	[entry: ]	[exit: i1 ]
if i1 >= 100 goto return................	[entry: i1 ]	[exit: i1 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i1 ]	[exit: $r0 i1 ]
$i0 = staticinvoke <Others.EulersFunction: int getEuler(int)>(i1)	[entry: $r0 i1 ]	[exit: i1 $i0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i0)	[entry: i1 $i0 $r0 ]	[exit: i1 ]
i1 = i1 + 1.............................	[entry: i1 ]	[exit: i1 ]
goto [?= (branch)]......................	[entry: i1 ]	[exit: i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.GuassLegendre, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
i0 = 1..................................	[entry: ]	[exit: i0 ]
if i0 > 3 goto return...................	[entry: i0 ]	[exit: i0 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r0 i0 ]
$d0 = staticinvoke <Others.GuassLegendre: double pi(int)>(i0)	[entry: $r0 i0 ]	[exit: i0 $d0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(double)>($d0)	[entry: i0 $d0 $r0 ]	[exit: i0 ]
i0 = i0 + 1.............................	[entry: i0 ]	[exit: i0 ]
goto [?= (branch)]......................	[entry: i0 ]	[exit: i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.GuassLegendre, Method Name: pi, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
d4 = 1.0................................	[entry: i0 ]	[exit: d4 i0 ]
d5 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, -0.5)	[entry: d4 i0 ]	[exit: d4 d5 i0 ]
d6 = 0.25...............................	[entry: d4 d5 i0 ]	[exit: d6 d4 d5 i0 ]
d7 = 1.0................................	[entry: d6 d4 d5 i0 ]	[exit: d6 d4 d5 d7 i0 ]
i1 = 0..................................	[entry: d6 d4 d5 d7 i0 ]	[exit: d6 d4 d5 d7 i1 i0 ]
if i1 >= i0 goto $d0 = d4 + d5..........	[entry: d6 d4 d5 d7 i1 i0 ]	[exit: d6 d4 d5 i0 i1 d7 ]
r0 = staticinvoke <Others.GuassLegendre: double[] update(double,double,double,double)>(d4, d5, d6, d7)	[entry: i0 i1 d4 d5 d6 d7 ]	[exit: i0 i1 r0 ]
d4 = r0[0]..............................	[entry: i0 i1 r0 ]	[exit: d4 i0 i1 r0 ]
d5 = r0[1]..............................	[entry: d4 i0 i1 r0 ]	[exit: d4 d5 i0 i1 r0 ]
d6 = r0[2]..............................	[entry: d4 d5 i0 i1 r0 ]	[exit: d6 d4 d5 i0 i1 r0 ]
d7 = r0[3]..............................	[entry: d6 d4 d5 i0 i1 r0 ]	[exit: d6 d4 d5 d7 i0 i1 ]
i1 = i1 + 1.............................	[entry: d6 d4 d5 d7 i0 i1 ]	[exit: d6 d4 d5 d7 i1 i0 ]
goto [?= (branch)]......................	[entry: d6 d4 d5 d7 i1 i0 ]	[exit: d6 d4 d5 d7 i1 i0 ]
$d0 = d4 + d5...........................	[entry: d6 d4 d5 ]	[exit: d6 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 2.0)	[entry: d6 $d0 ]	[exit: $d1 d6 ]
$d2 = 4.0 * d6..........................	[entry: $d1 d6 ]	[exit: $d1 $d2 ]
$d3 = $d1 / $d2.........................	[entry: $d1 $d2 ]	[exit: $d3 ]
return $d3..............................	[entry: $d3 ]	[exit: ]
********************
Class Name: Others.GuassLegendre, Method Name: update, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
d1 := @parameter1: double...............	[entry: d0 ]	[exit: d0 d1 ]
d6 := @parameter2: double...............	[entry: d0 d1 ]	[exit: d6 d0 d1 ]
d7 := @parameter3: double...............	[entry: d6 d0 d1 ]	[exit: d6 d7 d0 d1 ]
r0 = newarray (double)[4]...............	[entry: d6 d7 d0 d1 ]	[exit: d6 d7 r0 d0 d1 ]
$d2 = d0 + d1...........................	[entry: d6 d7 r0 d0 d1 ]	[exit: d6 d7 d0 d1 r0 $d2 ]
$d3 = $d2 / 2.0.........................	[entry: d6 d7 d0 d1 r0 $d2 ]	[exit: d6 d7 d0 d1 r0 $d3 ]
r0[0] = $d3.............................	[entry: d6 d7 d0 d1 r0 $d3 ]	[exit: d6 d7 r0 d0 d1 ]
$d4 = d0 * d1...........................	[entry: d6 d7 r0 d0 d1 ]	[exit: d6 d7 d0 r0 $d4 ]
$d5 = staticinvoke <java.lang.Math: double sqrt(double)>($d4)	[entry: d6 d7 d0 r0 $d4 ]	[exit: d6 d7 d0 r0 $d5 ]
r0[1] = $d5.............................	[entry: d6 d7 d0 r0 $d5 ]	[exit: d6 d7 d0 r0 ]
$d8 = r0[0].............................	[entry: d6 d7 d0 r0 ]	[exit: r0 d6 d7 d0 $d8 ]
$d9 = d0 - $d8..........................	[entry: r0 d6 d7 d0 $d8 ]	[exit: r0 d6 d7 $d9 ]
$d10 = staticinvoke <java.lang.Math: double pow(double,double)>($d9, 2.0)	[entry: r0 d6 d7 $d9 ]	[exit: r0 d6 d7 $d10 ]
$d11 = d7 * $d10........................	[entry: r0 d6 d7 $d10 ]	[exit: d7 r0 d6 $d11 ]
$d12 = d6 - $d11........................	[entry: d7 r0 d6 $d11 ]	[exit: d7 r0 $d12 ]
r0[2] = $d12............................	[entry: d7 r0 $d12 ]	[exit: r0 d7 ]
$d13 = 2.0 * d7.........................	[entry: r0 d7 ]	[exit: r0 $d13 ]
r0[3] = $d13............................	[entry: r0 $d13 ]	[exit: r0 ]
return r0...............................	[entry: r0 ]	[exit: ]
********************
Class Name: Others.InsertDeleteInArray, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r12 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter the size of the array")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
r4 = newarray (int)[i0].................	[entry: r2 i0 ]	[exit: r4 r2 i0 ]
i15 = 0.................................	[entry: r4 r2 i0 ]	[exit: r4 r2 i15 i0 ]
if i15 >= i0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r4 r2 i15 i0 ]	[exit: r4 i0 r2 i15 ]
$r11 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r4 i15 r2 ]	[exit: i0 r4 i15 r2 $r11 ]
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>("Enter the element")	[entry: i0 r4 i15 r2 $r11 ]	[exit: i0 r4 i15 r2 ]
$i14 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r4 i15 r2 ]	[exit: r2 i0 r4 i15 $i14 ]
r4[i15] = $i14..........................	[entry: r2 i0 r4 i15 $i14 ]	[exit: r4 r2 i0 i15 ]
i15 = i15 + 1...........................	[entry: r4 r2 i0 i15 ]	[exit: r4 r2 i15 i0 ]
goto [?= (branch)]......................	[entry: r4 r2 i15 i0 ]	[exit: r4 r2 i15 i0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r4 i0 r2 ]	[exit: r4 i0 r2 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Enter the index at which the element should be inserted")	[entry: r4 i0 r2 $r5 ]	[exit: r4 i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r4 i0 r2 ]	[exit: i1 r4 i0 r2 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: i1 r4 i0 r2 ]	[exit: i1 r4 i0 r2 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Enter the element to be inserted")	[entry: i1 r4 i0 r2 $r6 ]	[exit: i1 r4 i0 r2 ]
i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i1 r4 i0 r2 ]	[exit: r2 i1 i2 r4 i0 ]
i3 = i0 + 1.............................	[entry: r2 i1 i2 r4 i0 ]	[exit: r2 i1 i2 r4 i3 ]
r7 = newarray (int)[i3].................	[entry: r2 i1 i2 r4 i3 ]	[exit: r2 r7 i1 i2 r4 i3 ]
i16 = 0.................................	[entry: r2 r7 i1 i2 r4 i3 ]	[exit: r2 r7 i1 i2 r4 i16 i3 ]
if i16 >= i3 goto r7[i1] = i2...........	[entry: r2 r7 i1 i2 r4 i16 i3 ]	[exit: r2 i3 r7 i1 i2 r4 i16 ]
if i16 > i1 goto $i11 = i16 - 1.........	[entry: r2 i2 i3 r7 r4 i16 i1 ]	[exit: r2 i1 i2 i3 r7 r4 i16 ]
$i13 = r4[i16]..........................	[entry: r2 i1 i2 i3 r7 r4 i16 ]	[exit: r2 i1 i2 r4 i3 r7 i16 $i13 ]
r7[i16] = $i13..........................	[entry: r2 i1 i2 r4 i3 r7 i16 $i13 ]	[exit: r2 r7 i1 i2 r4 i3 i16 ]
goto [?= i16 = i16 + 1].................	[entry: r2 r7 i1 i2 r4 i3 i16 ]	[exit: r2 r7 i1 i2 r4 i3 i16 ]
$i11 = i16 - 1..........................	[entry: r2 i1 i2 i3 r7 r4 i16 ]	[exit: r2 i1 i2 i3 r7 i16 r4 $i11 ]
$i12 = r4[$i11].........................	[entry: r2 i1 i2 i3 r7 i16 r4 $i11 ]	[exit: r2 i1 i2 r4 i3 r7 i16 $i12 ]
r7[i16] = $i12..........................	[entry: r2 i1 i2 r4 i3 r7 i16 $i12 ]	[exit: r2 r7 i1 i2 r4 i3 i16 ]
i16 = i16 + 1...........................	[entry: r2 r7 i1 i2 r4 i3 i16 ]	[exit: r2 r7 i1 i2 r4 i16 i3 ]
goto [?= (branch)]......................	[entry: r2 r7 i1 i2 r4 i16 i3 ]	[exit: r2 r7 i1 i2 r4 i16 i3 ]
r7[i1] = i2.............................	[entry: r2 i3 r7 i1 i2 ]	[exit: r7 r2 i3 ]
i17 = 0.................................	[entry: r7 r2 i3 ]	[exit: r7 r2 i17 i3 ]
if i17 >= i3 goto $r8 = <java.lang.System: java.io.PrintStream out>	[entry: r7 r2 i17 i3 ]	[exit: r7 i3 r2 i17 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i3 r7 i17 ]	[exit: r2 i3 $r10 r7 i17 ]
$i10 = r7[i17]..........................	[entry: r2 i3 $r10 r7 i17 ]	[exit: r7 r2 i3 i17 $i10 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(int)>($i10)	[entry: r7 r2 i3 i17 $i10 $r10 ]	[exit: r7 r2 i3 i17 ]
i17 = i17 + 1...........................	[entry: r7 r2 i3 i17 ]	[exit: r7 r2 i17 i3 ]
goto [?= (branch)]......................	[entry: r7 r2 i17 i3 ]	[exit: r7 r2 i17 i3 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r7 i3 r2 ]	[exit: r7 i3 r2 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Enter the index at which element is to be deleted")	[entry: r7 i3 r2 $r8 ]	[exit: r7 i3 r2 ]
i4 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r7 i3 r2 ]	[exit: r2 r7 i3 i4 ]
i18 = i4................................	[entry: r2 r7 i3 i4 ]	[exit: r2 r7 i18 i3 ]
$i5 = i3 - 1............................	[entry: r2 r7 i18 i3 ]	[exit: r2 r7 i3 i18 $i5 ]
if i18 >= $i5 goto i19 = 0..............	[entry: r2 r7 i3 i18 $i5 ]	[exit: r2 r7 i3 i18 ]
$i8 = i18 + 1...........................	[entry: r2 i3 r7 i18 ]	[exit: r2 i3 i18 r7 $i8 ]
$i9 = r7[$i8]...........................	[entry: r2 i3 i18 r7 $i8 ]	[exit: r2 i3 r7 i18 $i9 ]
r7[i18] = $i9...........................	[entry: r2 i3 r7 i18 $i9 ]	[exit: r2 r7 i3 i18 ]
i18 = i18 + 1...........................	[entry: r2 r7 i3 i18 ]	[exit: r2 r7 i18 i3 ]
goto [?= $i5 = i3 - 1]..................	[entry: r2 r7 i18 i3 ]	[exit: r2 r7 i18 i3 ]
i19 = 0.................................	[entry: r2 r7 i3 ]	[exit: r2 r7 i19 i3 ]
$i6 = i3 - 1............................	[entry: r2 r7 i19 i3 ]	[exit: r2 i3 r7 i19 $i6 ]
if i19 >= $i6 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 i3 r7 i19 $i6 ]	[exit: r2 i3 r7 i19 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i3 r7 i19 ]	[exit: r2 i3 $r9 r7 i19 ]
$i7 = r7[i19]...........................	[entry: r2 i3 $r9 r7 i19 ]	[exit: r2 r7 i3 i19 $i7 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(int)>($i7)	[entry: r2 r7 i3 i19 $i7 $r9 ]	[exit: r2 r7 i3 i19 ]
i19 = i19 + 1...........................	[entry: r2 r7 i3 i19 ]	[exit: r2 r7 i19 i3 ]
goto [?= $i6 = i3 - 1]..................	[entry: r2 r7 i19 i3 ]	[exit: r2 r7 i19 i3 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.ReverseStackUsingRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
i0 = 0..................................	[entry: ]	[exit: i0 ]
if i0 >= 10 goto $r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: i0 ]
$r8 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>	[entry: i0 ]	[exit: $r8 i0 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: $r8 i0 ]	[exit: i0 $r9 $r8 ]
virtualinvoke $r8.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r9)	[entry: i0 $r9 $r8 ]	[exit: i0 ]
i0 = i0 + 1.............................	[entry: i0 ]	[exit: i0 ]
goto [?= (branch)]......................	[entry: i0 ]	[exit: i0 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("STACK")	[entry: $r0 ]	[exit: ]
i1 = 9..................................	[entry: ]	[exit: i1 ]
if i1 < 0 goto $r1 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>	[entry: i1 ]	[exit: i1 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: i1 ]	[exit: i1 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(int)>(i1)	[entry: i1 $r7 ]	[exit: i1 ]
i1 = i1 + -1............................	[entry: i1 ]	[exit: i1 ]
goto [?= (branch)]......................	[entry: i1 ]	[exit: i1 ]
$r1 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>	[entry: ]	[exit: $r1 ]
staticinvoke <Others.ReverseStackUsingRecursion: void reverseUsingRecursion(java.util.Stack)>($r1)	[entry: $r1 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("REVERSED STACK : ")	[entry: $r2 ]	[exit: ]
$r3 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>	[entry: ]	[exit: $r3 ]
$z0 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>()	[entry: $r3 ]	[exit: $z0 ]
if $z0 != 0 goto return.................	[entry: $z0 ]	[exit: ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r5 ]
$r4 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>	[entry: $r5 ]	[exit: $r5 $r4 ]
$r6 = virtualinvoke $r4.<java.util.Stack: java.lang.Object pop()>()	[entry: $r5 $r4 ]	[exit: $r6 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.Object)>($r6)	[entry: $r6 $r5 ]	[exit: ]
goto [?= $r3 = <Others.ReverseStackUsingRecursion: java.util.Stack stack>]	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.TopKWords, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new Others.TopKWords$CountWords...	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.TopKWords$CountWords: void <init>(java.lang.String)>("/Users/lisanaaa/Desktop/words.txt")	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r2 = virtualinvoke r1.<Others.TopKWords$CountWords: java.util.Map getDictionary()>()	[entry: r1 ]	[exit: r2 ]
$r3 = new java.util.ArrayList...........	[entry: r2 ]	[exit: $r3 r2 ]
$r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()	[entry: $r3 r2 ]	[exit: $r4 $r3 ]
specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4)	[entry: $r4 $r3 ]	[exit: $r3 ]
r5 = $r3................................	[entry: $r3 ]	[exit: r5 ]
$r6 = staticinvoke <Others.TopKWords$lambda_main_0__1: java.util.function.Function bootstrap$()>()	[entry: r5 ]	[exit: r5 $r6 ]
$r7 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r6)	[entry: r5 $r6 ]	[exit: $r7 r5 ]
interfaceinvoke r5.<java.util.List: void sort(java.util.Comparator)>($r7)	[entry: $r7 r5 ]	[exit: r5 ]
$r8 = new java.util.Scanner.............	[entry: r5 ]	[exit: r5 $r8 ]
$r9 = <java.lang.System: java.io.InputStream in>	[entry: r5 $r8 ]	[exit: r5 $r9 $r8 ]
specialinvoke $r8.<java.util.Scanner: void <init>(java.io.InputStream)>($r9)	[entry: r5 $r9 $r8 ]	[exit: r5 $r8 ]
r16 = $r8...............................	[entry: r5 $r8 ]	[exit: r5 r16 ]
i4 = virtualinvoke r16.<java.util.Scanner: int nextInt()>()	[entry: r5 r16 ]	[exit: r16 i4 r5 ]
$i0 = interfaceinvoke r5.<java.util.List: int size()>()	[entry: r16 i4 r5 ]	[exit: r16 r5 i4 $i0 ]
if i4 <= $i0 goto i5 = 0................	[entry: r16 r5 i4 $i0 ]	[exit: r16 r5 i4 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r5 ]	[exit: r5 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Retype a number, your number is too large")	[entry: r5 $r12 ]	[exit: r5 ]
$r13 = new java.util.Scanner............	[entry: r5 ]	[exit: r5 $r13 ]
$r14 = <java.lang.System: java.io.InputStream in>	[entry: r5 $r13 ]	[exit: r5 $r14 $r13 ]
specialinvoke $r13.<java.util.Scanner: void <init>(java.io.InputStream)>($r14)	[entry: r5 $r14 $r13 ]	[exit: r5 $r13 ]
r16 = $r13..............................	[entry: r5 $r13 ]	[exit: r5 r16 ]
i4 = virtualinvoke r16.<java.util.Scanner: int nextInt()>()	[entry: r5 r16 ]	[exit: r16 i4 r5 ]
goto [?= $i0 = interfaceinvoke r5.<java.util.List: int size()>()]	[entry: r16 i4 r5 ]	[exit: r16 i4 r5 ]
i5 = 0..................................	[entry: r16 r5 i4 ]	[exit: r16 r5 i5 i4 ]
if i5 >= i4 goto virtualinvoke r16.<java.util.Scanner: void close()>()	[entry: r16 r5 i5 i4 ]	[exit: r16 i4 i5 r5 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r16 i4 i5 r5 ]	[exit: r16 i4 $r10 i5 r5 ]
$i1 = interfaceinvoke r5.<java.util.List: int size()>()	[entry: r16 i4 $r10 i5 r5 ]	[exit: r16 i4 $r10 r5 $i1 i5 ]
$i2 = $i1 - i5..........................	[entry: r16 i4 $r10 r5 $i1 i5 ]	[exit: r16 i4 i5 $r10 r5 $i2 ]
$i3 = $i2 - 1...........................	[entry: r16 i4 i5 $r10 r5 $i2 ]	[exit: r16 i4 i5 $r10 $i3 r5 ]
$r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i3)	[entry: r16 i4 i5 $r10 $i3 r5 ]	[exit: r16 r5 i4 i5 $r11 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.Object)>($r11)	[entry: r16 r5 i4 i5 $r11 $r10 ]	[exit: r16 r5 i4 i5 ]
i5 = i5 + 1.............................	[entry: r16 r5 i4 i5 ]	[exit: r16 r5 i5 i4 ]
goto [?= (branch)]......................	[entry: r16 r5 i5 i4 ]	[exit: r16 r5 i5 i4 ]
virtualinvoke r16.<java.util.Scanner: void close()>()	[entry: r16 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.CountChar, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter your text: ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r4 r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r4 r2 ]	[exit: r4 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r4 ]	[exit: $r6 r4 ]
$r5 = new java.lang.StringBuilder.......	[entry: $r6 r4 ]	[exit: $r6 r4 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: $r6 r4 $r5 ]	[exit: $r6 r4 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There are ")	[entry: $r6 r4 $r5 ]	[exit: $r6 $r7 r4 ]
$i0 = staticinvoke <Others.CountChar: int CountCharacters(java.lang.String)>(r4)	[entry: $r6 $r7 r4 ]	[exit: $r6 $i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r6 $i0 $r7 ]	[exit: $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" characters.")	[entry: $r6 $r8 ]	[exit: $r6 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r6 $r9 ]	[exit: $r10 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: $r10 $r6 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.CRC32, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
$i0 = staticinvoke <Others.CRC32: int crc32(java.lang.String)>("Hello World")	[entry: $r0 ]	[exit: $r0 $i0 ]
$r1 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>($i0)	[entry: $r0 $i0 ]	[exit: $r1 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>($r1)	[entry: $r1 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: run, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: Others.SkylineProblem......	[entry: ]	[exit: r3 ]
$r0 = new java.util.Scanner.............	[entry: r3 ]	[exit: r3 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: r3 $r0 ]	[exit: r3 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: r3 $r1 $r0 ]	[exit: r3 $r0 ]
r2 = $r0................................	[entry: r3 $r0 ]	[exit: r3 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 r2 ]	[exit: r2 r3 i0 ]
$r4 = newarray (Others.SkylineProblem$Building)[i0]	[entry: r2 r3 i0 ]	[exit: r2 i0 r3 $r4 ]
r3.<Others.SkylineProblem: Others.SkylineProblem$Building[] building> = $r4	[entry: r2 i0 r3 $r4 ]	[exit: r2 r3 i0 ]
i5 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i5 i0 ]
if i5 >= i0 goto $i1 = i0 - 1...........	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i0 i5 ]
r6 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: i0 i5 r3 r2 ]	[exit: r2 i0 i5 r3 r6 ]
r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")	[entry: r2 i0 i5 r3 r6 ]	[exit: r2 i0 i5 r3 r7 ]
$r8 = r7[0].............................	[entry: r2 i0 i5 r3 r7 ]	[exit: r2 i0 i5 r3 r7 $r8 ]
$i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8)	[entry: r2 i0 i5 r3 r7 $r8 ]	[exit: r2 i0 i5 $i2 r3 r7 ]
$r9 = r7[1].............................	[entry: r2 i0 i5 $i2 r3 r7 ]	[exit: r2 i0 i5 $i2 r3 r7 $r9 ]
$i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9)	[entry: r2 i0 i5 $i2 r3 r7 $r9 ]	[exit: r2 i0 i5 $i2 $i3 r3 r7 ]
$r10 = r7[2]............................	[entry: r2 i0 i5 $i2 $i3 r3 r7 ]	[exit: r2 i0 i5 $i2 $i3 r3 $r10 ]
$i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10)	[entry: r2 i0 i5 $i2 $i3 r3 $r10 ]	[exit: r2 i0 i5 $i2 $i3 $i4 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void add(int,int,int)>($i2, $i3, $i4)	[entry: r2 i0 i5 $i2 $i3 $i4 r3 ]	[exit: r2 r3 i0 i5 ]
i5 = i5 + 1.............................	[entry: r2 r3 i0 i5 ]	[exit: r2 r3 i5 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i5 i0 ]
$i1 = i0 - 1............................	[entry: r2 r3 i0 ]	[exit: r2 $i1 r3 ]
$r5 = virtualinvoke r3.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(0, $i1)	[entry: r2 $i1 r3 ]	[exit: r2 $r5 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void print(java.util.ArrayList)>($r5)	[entry: r2 $r5 r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: add, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
i3 := @parameter1: int..................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
i4 := @parameter2: int..................	[entry: i2 i3 r0 ]	[exit: i2 i3 i4 r0 ]
$r1 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 ]
$i0 = r0.<Others.SkylineProblem: int count>	[entry: $r1 i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 $i0 ]
$i1 = $i0 + 1...........................	[entry: $r1 i2 i3 i4 r0 $i0 ]	[exit: $r1 $i0 i2 i3 i4 r0 $i1 ]
r0.<Others.SkylineProblem: int count> = $i1	[entry: $r1 $i0 i2 i3 i4 r0 $i1 ]	[exit: $r1 $i0 r0 i2 i3 i4 ]
$r2 = new Others.SkylineProblem$Building	[entry: $r1 $i0 r0 i2 i3 i4 ]	[exit: $r1 $i0 r0 i2 i3 i4 $r2 ]
specialinvoke $r2.<Others.SkylineProblem$Building: void <init>(Others.SkylineProblem,int,int,int)>(r0, i2, i3, i4)	[entry: $r1 $i0 r0 i2 i3 i4 $r2 ]	[exit: $r1 $i0 $r2 ]
$r1[$i0] = $r2..........................	[entry: $r1 $i0 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: print, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @this: Others.SkylineProblem.....	[entry: ]	[exit: ]
r0 := @parameter0: java.util.ArrayList..	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r0 ]	[exit: r1 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 == 0 goto return.................	[entry: r1 $z0 ]	[exit: r1 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()	[entry: r1 ]	[exit: r1 $r2 ]
r3 = (Others.SkylineProblem$Skyline) $r2	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r3 ]	[exit: r1 $r5 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 $r5 r3 ]	[exit: r1 $r5 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 $r5 r3 $r4 ]	[exit: r1 $r5 $r4 r3 ]
$i0 = r3.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 $r5 $r4 r3 ]	[exit: r1 $r5 r3 $i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r5 r3 $i0 $r4 ]	[exit: r1 $r5 r3 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")	[entry: r1 $r5 r3 $r6 ]	[exit: r1 $r5 $r7 r3 ]
$i1 = r3.<Others.SkylineProblem$Skyline: int height>	[entry: r1 $r5 $r7 r3 ]	[exit: r1 $r5 $i1 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r1 $r5 $i1 $r7 ]	[exit: r1 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r5 $r8 ]	[exit: r1 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r9)	[entry: r1 $r9 $r5 ]	[exit: r1 ]
$z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 == 0 goto (branch)...............	[entry: r1 $z1 ]	[exit: r1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>(",")	[entry: r1 $r10 ]	[exit: r1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]	[entry: r1 ]	[exit: r1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: findSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: r0 i0 ]
i1 := @parameter1: int..................	[entry: r0 i0 ]	[exit: r0 i0 i1 ]
if i0 != i1 goto $i2 = i0 + i1..........	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 ]
$r4 = new java.util.ArrayList...........	[entry: i1 i0 r0 ]	[exit: i1 i0 r0 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>()>()	[entry: i1 i0 r0 $r4 ]	[exit: i1 i0 r0 $r4 ]
r13 = $r4...............................	[entry: i1 i0 r0 $r4 ]	[exit: i1 r13 i0 r0 ]
$r5 = new Others.SkylineProblem$Skyline.	[entry: i1 r13 i0 r0 ]	[exit: i1 r13 $r5 i0 r0 ]
$r6 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $r5 i0 r0 ]	[exit: i1 r13 $r5 r0 $r6 i0 ]
$r7 = $r6[i0]...........................	[entry: i1 r13 $r5 r0 $r6 i0 ]	[exit: i1 r13 $r5 i0 r0 $r7 ]
$i5 = $r7.<Others.SkylineProblem$Building: int left>	[entry: i1 r13 $r5 i0 r0 $r7 ]	[exit: i1 r13 $i5 $r5 i0 r0 ]
$r8 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $i5 $r5 i0 r0 ]	[exit: i1 r13 r0 $i5 $r5 $r8 i0 ]
$r9 = $r8[i0]...........................	[entry: i1 r13 r0 $i5 $r5 $r8 i0 ]	[exit: i1 r13 r0 $i5 $r5 $r9 ]
$i4 = $r9.<Others.SkylineProblem$Building: int height>	[entry: i1 r13 r0 $i5 $r5 $r9 ]	[exit: i1 r13 r0 $i5 $i4 $r5 ]
specialinvoke $r5.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i5, $i4)	[entry: i1 r13 r0 $i5 $i4 $r5 ]	[exit: i1 r0 $r5 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r5)	[entry: i1 r0 $r5 r13 ]	[exit: r13 i1 r0 ]
$r10 = new Others.SkylineProblem$Skyline	[entry: r13 i1 r0 ]	[exit: r13 $r10 i1 r0 ]
$r11 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: r13 $r10 i1 r0 ]	[exit: r13 r0 $r10 $r11 i1 ]
$r12 = $r11[i1].........................	[entry: r13 r0 $r10 $r11 i1 ]	[exit: r13 r0 $r10 $r12 ]
$i6 = $r12.<Others.SkylineProblem$Building: int right>	[entry: r13 r0 $r10 $r12 ]	[exit: r13 r0 $i6 $r10 ]
specialinvoke $r10.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i6, 0)	[entry: r13 r0 $i6 $r10 ]	[exit: $r10 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r10)	[entry: $r10 r13 ]	[exit: r13 ]
return r13..............................	[entry: r13 ]	[exit: ]
$i2 = i0 + i1...........................	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 $i2 ]
i7 = $i2 / 2............................	[entry: i1 i0 r0 $i2 ]	[exit: i1 i0 i7 r0 ]
r1 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(i0, i7)	[entry: i1 i0 i7 r0 ]	[exit: r1 i1 r0 i7 ]
$i3 = i7 + 1............................	[entry: r1 i1 r0 i7 ]	[exit: r1 $i3 i1 r0 ]
r2 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>($i3, i1)	[entry: r1 $i3 i1 r0 ]	[exit: r1 r2 r0 ]
$r3 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList mergeSkyline(java.util.ArrayList,java.util.ArrayList)>(r1, r2)	[entry: r1 r2 r0 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: mergeSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r18 := @this: Others.SkylineProblem.....	[entry: ]	[exit: r18 ]
r2 := @parameter0: java.util.ArrayList..	[entry: r18 ]	[exit: r18 r2 ]
r3 := @parameter1: java.util.ArrayList..	[entry: r18 r2 ]	[exit: r3 r18 r2 ]
i2 = 0..................................	[entry: r3 r18 r2 ]	[exit: r3 r18 i2 r2 ]
i3 = 0..................................	[entry: r3 r18 i2 r2 ]	[exit: r3 r18 i3 i2 r2 ]
$r0 = new java.util.ArrayList...........	[entry: r3 r18 i3 i2 r2 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
specialinvoke $r0.<java.util.ArrayList: void <init>()>()	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
r1 = $r0................................	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r1 r3 r18 i3 i2 r2 ]
i4 = 0..................................	[entry: r1 r3 r18 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z8 ]
if $z8 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z8 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$z3 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r2 r18 i4 i3 i2 r3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z3 ]
if $z3 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 i2 r3 r2 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r8 ]
$r9 = (Others.SkylineProblem$Skyline) $r8	[entry: r1 r18 i4 i3 r2 i2 r3 $r8 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r9 ]
$i0 = $r9.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r18 i4 i3 r2 i2 r3 $r9 ]	[exit: r1 r18 i4 i3 r2 i2 $i0 r3 ]
$r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 r2 i2 $i0 r3 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]
$r11 = (Others.SkylineProblem$Skyline) $r10	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]
$i1 = $r11.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]
if $i0 >= $i1 goto $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]	[exit: r1 r3 r18 i4 i3 r2 i2 ]
$r21 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 ]	[exit: r1 r3 r18 i4 i3 r2 $r21 ]
$r22 = (Others.SkylineProblem$Skyline) $r21	[entry: r1 r3 r18 i4 i3 r2 $r21 ]	[exit: r1 r3 r18 i4 i3 r2 $r22 ]
i5 = $r22.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 $r22 ]	[exit: r1 r3 r18 i5 i4 i3 r2 ]
$r23 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r23 ]
$r24 = (Others.SkylineProblem$Skyline) $r23	[entry: r1 r3 r18 i5 i4 r2 i3 $r23 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r24 ]
i2 = $r24.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r3 r18 i5 i4 r2 i3 $r24 ]	[exit: r1 r3 r18 i5 i4 r2 i2 i3 ]
if i2 >= i3 goto i4 = i2................	[entry: r1 r3 r18 i5 i4 r2 i2 i3 ]	[exit: r1 r3 r18 i2 i5 i4 i3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r18 i2 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i2 r2 i5 i4 i3 ]
if i4 == i3 goto (branch)...............	[entry: r1 r3 r18 i2 r2 i5 i4 i3 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i5 ]
$r28 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i5 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]
specialinvoke $r28.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i3)	[entry: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]	[exit: r3 r18 i4 i3 i2 r2 $r28 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r28)	[entry: r3 r18 i4 i3 i2 r2 $r28 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i2.................................	[entry: r3 i3 r1 r18 i5 r2 i2 ]	[exit: r3 i4 i3 r1 r18 i5 i2 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r3 i4 i3 r1 r18 i5 i2 r2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 ]
$r26 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i5 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]
specialinvoke $r26.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i2)	[entry: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]	[exit: r3 r18 i4 i3 i2 r2 $r26 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r26)	[entry: r3 r18 i4 i3 i2 r2 $r26 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i4 i2 r3 ]	[exit: r1 r2 r18 i4 i2 r3 $r12 ]
$r13 = (Others.SkylineProblem$Skyline) $r12	[entry: r1 r2 r18 i4 i2 r3 $r12 ]	[exit: r1 r2 r18 i4 i2 r3 $r13 ]
i6 = $r13.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r2 r18 i4 i2 r3 $r13 ]	[exit: r1 r2 r18 i6 i4 i2 r3 ]
$r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i6 i4 i2 r3 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r14 ]
$r15 = (Others.SkylineProblem$Skyline) $r14	[entry: r1 r2 r18 i6 i4 r3 i2 $r14 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r15 ]
i3 = $r15.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r2 r18 i6 i4 r3 i2 $r15 ]	[exit: r1 r2 r18 i6 i4 r3 i3 i2 ]
if i3 >= i2 goto i4 = i3................	[entry: r1 r2 r18 i6 i4 r3 i3 i2 ]	[exit: r1 r18 i3 r2 i6 i4 i2 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r18 i3 r2 i6 i4 i2 r3 ]	[exit: r1 r3 r18 i3 r2 i6 i4 i2 ]
if i4 == i2 goto (branch)...............	[entry: r1 r3 r18 i3 r2 i6 i4 i2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i6 ]
$r20 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i6 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]
specialinvoke $r20.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i2)	[entry: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]	[exit: r3 r18 i4 i3 i2 r2 $r20 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r20)	[entry: r3 r18 i4 i3 i2 r2 $r20 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i3.................................	[entry: i2 r2 r1 r18 i6 r3 i3 ]	[exit: i4 i2 r2 r1 r18 i6 i3 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: i4 i2 r2 r1 r18 i6 i3 r3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 ]
$r17 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i6 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]
specialinvoke $r17.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i3)	[entry: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]	[exit: r3 r18 i4 i3 i2 r2 $r17 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r17)	[entry: r3 r18 i4 i3 i2 r2 $r17 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 $z9 ]
if $z9 != 0 goto $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 $z9 ]	[exit: r1 r3 r2 ]
$r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r3 r1 r2 ]	[exit: r3 r2 $r6 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6)	[entry: r3 r2 $r6 r1 ]	[exit: r1 r3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
goto [?= $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
$z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 ]	[exit: r1 r3 $z0 ]
if $z0 != 0 goto return r1..............	[entry: r1 r3 $z0 ]	[exit: r1 r3 ]
$r4 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 ]	[exit: r3 $r4 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)	[entry: r3 $r4 r1 ]	[exit: r1 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 ]	[exit: r1 r3 ]
goto [?= $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 ]	[exit: r1 r3 ]
return r1...............................	[entry: r1 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.SkylineProblem.........	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.SkylineProblem: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<Others.SkylineProblem: void run()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.QueueUsingTwoStacks, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r33 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new Others.QueueWithStack.........	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.QueueWithStack: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 ]	[exit: $r2 r1 ]
virtualinvoke r1.<Others.QueueWithStack: void insert(java.lang.Object)>($r2)	[entry: $r2 r1 ]	[exit: r1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r3 r1 ]
$r4 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekBack()>()	[entry: $r3 r1 ]	[exit: r1 $r4 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>($r4)	[entry: r1 $r4 $r3 ]	[exit: r1 ]
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 ]	[exit: $r5 r1 ]
virtualinvoke r1.<Others.QueueWithStack: void insert(java.lang.Object)>($r5)	[entry: $r5 r1 ]	[exit: r1 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r6 r1 ]
$r7 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekBack()>()	[entry: $r6 r1 ]	[exit: r1 $r7 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>($r7)	[entry: r1 $r7 $r6 ]	[exit: r1 ]
$r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 ]	[exit: $r8 r1 ]
virtualinvoke r1.<Others.QueueWithStack: void insert(java.lang.Object)>($r8)	[entry: $r8 r1 ]	[exit: r1 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r9 r1 ]
$r10 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekBack()>()	[entry: $r9 r1 ]	[exit: r1 $r10 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.Object)>($r10)	[entry: r1 $r10 $r9 ]	[exit: r1 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 ]	[exit: $r11 r1 ]
virtualinvoke r1.<Others.QueueWithStack: void insert(java.lang.Object)>($r11)	[entry: $r11 r1 ]	[exit: r1 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekBack()>()	[entry: $r12 r1 ]	[exit: r1 $r13 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.Object)>($r13)	[entry: r1 $r13 $r12 ]	[exit: r1 ]
$r14 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r14 r1 ]
$z0 = virtualinvoke r1.<Others.QueueWithStack: boolean isEmpty()>()	[entry: $r14 r1 ]	[exit: r1 $z0 $r14 ]
virtualinvoke $r14.<java.io.PrintStream: void println(boolean)>($z0)	[entry: r1 $z0 $r14 ]	[exit: r1 ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r15 r1 ]
$r16 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object remove()>()	[entry: $r15 r1 ]	[exit: r1 $r16 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.Object)>($r16)	[entry: r1 $r16 $r15 ]	[exit: r1 ]
$r17 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r17 r1 ]
$r18 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekBack()>()	[entry: $r17 r1 ]	[exit: r1 $r18 $r17 ]
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.Object)>($r18)	[entry: r1 $r18 $r17 ]	[exit: r1 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 ]	[exit: $r19 r1 ]
virtualinvoke r1.<Others.QueueWithStack: void insert(java.lang.Object)>($r19)	[entry: $r19 r1 ]	[exit: r1 ]
$r20 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r20 r1 ]
$r21 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekFront()>()	[entry: $r20 r1 ]	[exit: r1 $r21 $r20 ]
virtualinvoke $r20.<java.io.PrintStream: void println(java.lang.Object)>($r21)	[entry: r1 $r21 $r20 ]	[exit: r1 ]
virtualinvoke r1.<Others.QueueWithStack: java.lang.Object remove()>()	[entry: r1 ]	[exit: r1 ]
$r23 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r23 r1 ]
$r24 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekFront()>()	[entry: $r23 r1 ]	[exit: r1 $r24 $r23 ]
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.Object)>($r24)	[entry: r1 $r24 $r23 ]	[exit: r1 ]
virtualinvoke r1.<Others.QueueWithStack: java.lang.Object remove()>()	[entry: r1 ]	[exit: r1 ]
$r26 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r26 r1 ]
$r27 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekFront()>()	[entry: $r26 r1 ]	[exit: r1 $r27 $r26 ]
virtualinvoke $r26.<java.io.PrintStream: void println(java.lang.Object)>($r27)	[entry: r1 $r27 $r26 ]	[exit: r1 ]
virtualinvoke r1.<Others.QueueWithStack: java.lang.Object remove()>()	[entry: r1 ]	[exit: r1 ]
$r29 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r29 r1 ]
$r30 = virtualinvoke r1.<Others.QueueWithStack: java.lang.Object peekFront()>()	[entry: $r29 r1 ]	[exit: r1 $r30 $r29 ]
virtualinvoke $r29.<java.io.PrintStream: void println(java.lang.Object)>($r30)	[entry: r1 $r30 $r29 ]	[exit: r1 ]
virtualinvoke r1.<Others.QueueWithStack: java.lang.Object remove()>()	[entry: r1 ]	[exit: r1 ]
$r32 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r32 r1 ]
$z1 = virtualinvoke r1.<Others.QueueWithStack: boolean isEmpty()>()	[entry: $r32 r1 ]	[exit: $z1 $r32 ]
virtualinvoke $r32.<java.io.PrintStream: void println(boolean)>($z1)	[entry: $z1 $r32 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.FibToN, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i0 r2 ]
i2 = 0..................................	[entry: i0 r2 ]	[exit: i2 i0 r2 ]
i3 = 1..................................	[entry: i2 i0 r2 ]	[exit: i3 i2 i0 r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: i3 i2 i0 r2 ]	[exit: i3 i2 i0 ]
if i2 > i0 goto return..................	[entry: i3 i2 i0 ]	[exit: i0 i3 i2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i3 i2 ]	[exit: i0 i3 i2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(int)>(i2)	[entry: i0 i3 i2 $r3 ]	[exit: i0 i2 i3 ]
i1 = i2 + i3............................	[entry: i0 i2 i3 ]	[exit: i0 i1 i3 ]
i2 = i3.................................	[entry: i0 i1 i3 ]	[exit: i2 i0 i1 ]
i3 = i1.................................	[entry: i2 i0 i1 ]	[exit: i3 i2 i0 ]
goto [?= (branch)]......................	[entry: i3 i2 i0 ]	[exit: i3 i2 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.LowestBasePalindrome, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r17 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
z0 = 0..................................	[entry: r2 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter number: ")	[entry: r2 $r3 ]	[exit: r2 ]
i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i2 ]
goto [?= $r5 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 i2 ]	[exit: r2 i2 ]
$r13 := @caughtexception................	[entry: r2 ]	[exit: r2 $r13 ]
r14 = $r13..............................	[entry: r2 $r13 ]	[exit: r2 ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("Invalid input!")	[entry: r2 $r15 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: r2 ]	[exit: r2 ]
goto [?= $r3 = <java.lang.System: java.io.PrintStream out>]	[entry: r2 ]	[exit: r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i2 ]	[exit: r2 $r5 i2 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i2 ]	[exit: r2 $r5 i2 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i2 $r4 ]	[exit: r2 $r5 i2 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)	[entry: r2 $r5 i2 $r4 ]	[exit: r2 $r5 i2 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a palindrome in base ")	[entry: r2 $r5 i2 $r6 ]	[exit: r2 $r5 $r7 i2 ]
$i0 = staticinvoke <Others.LowestBasePalindrome: int lowestBasePalindrome(int)>(i2)	[entry: r2 $r5 $r7 i2 ]	[exit: r2 i2 $r5 $i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r2 i2 $r5 $i0 $r7 ]	[exit: r2 i2 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 i2 $r5 $r8 ]	[exit: r2 i2 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r2 i2 $r9 $r5 ]	[exit: r2 i2 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i2 ]	[exit: r2 $r10 i2 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i2)	[entry: r2 $r10 i2 ]	[exit: r2 $r10 $r11 i2 ]
$i1 = staticinvoke <Others.LowestBasePalindrome: int lowestBasePalindrome(int)>(i2)	[entry: r2 $r10 $r11 i2 ]	[exit: r2 $r10 $r11 $i1 ]
$r12 = staticinvoke <Others.LowestBasePalindrome: java.lang.String base2base(java.lang.String,int,int)>($r11, 10, $i1)	[entry: r2 $r10 $r11 $i1 ]	[exit: r2 $r12 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r12)	[entry: r2 $r12 $r10 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.LowestBasePalindrome, Method Name: lowestBasePalindrome, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i6 := @parameter0: int..................	[entry: ]	[exit: i6 ]
i0 = i6.................................	[entry: i6 ]	[exit: i6 i0 ]
z1 = 0..................................	[entry: i6 i0 ]	[exit: i6 i0 z1 ]
r8 = "".................................	[entry: i6 i0 z1 ]	[exit: i6 i0 z1 ]
r0 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"	[entry: i6 i0 z1 ]	[exit: r0 i6 i0 z1 ]
if z1 != 0 goto $i1 = i6 - 1............	[entry: r0 i6 i0 z1 ]	[exit: r0 i6 z1 i0 ]
i7 = 2..................................	[entry: r0 i6 z1 i0 ]	[exit: r0 i6 z1 i7 i0 ]
if i7 >= i0 goto (branch)...............	[entry: r0 i6 z1 i7 i0 ]	[exit: i7 r0 z1 i0 i6 ]
r9 = "".................................	[entry: i7 r0 z1 i0 i6 ]	[exit: i7 r0 z1 r9 i0 i6 ]
if i6 <= 0 goto i6 = i0.................	[entry: i7 r0 z1 r9 i0 i6 ]	[exit: i7 r0 z1 r9 i0 i6 ]
i2 = i6 % i7............................	[entry: z1 i0 r9 r0 i6 i7 ]	[exit: z1 i0 r9 i2 r0 i6 i7 ]
i6 = i6 / i7............................	[entry: z1 i0 r9 i2 r0 i6 i7 ]	[exit: i7 z1 i0 i6 r9 i2 r0 ]
$i3 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i7 z1 i0 i6 r9 i2 r0 ]	[exit: i7 r0 z1 i0 i6 r9 i2 $i3 ]
if i2 < $i3 goto $r2 = new java.lang.StringBuilder	[entry: i7 r0 z1 i0 i6 r9 i2 $i3 ]	[exit: i7 r0 z1 i0 i6 r9 i2 ]
c5 = (char) i2..........................	[entry: i7 r0 z1 i0 i6 r9 i2 ]	[exit: i7 r0 z1 i0 i6 c5 r9 ]
$r5 = new java.lang.StringBuilder.......	[entry: i7 r0 z1 i0 i6 c5 r9 ]	[exit: i7 r0 z1 i0 i6 c5 r9 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: i7 r0 z1 i0 i6 c5 r9 $r5 ]	[exit: i7 r0 z1 i0 i6 c5 r9 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9)	[entry: i7 r0 z1 i0 i6 c5 r9 $r5 ]	[exit: i7 r0 z1 i0 i6 c5 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c5)	[entry: i7 r0 z1 i0 i6 c5 $r6 ]	[exit: i7 r0 z1 i0 i6 $r7 ]
r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 r0 z1 i0 i6 $r7 ]	[exit: i7 r0 z1 r9 i0 i6 ]
goto [?= (branch)]......................	[entry: i7 r0 z1 r9 i0 i6 ]	[exit: i7 r0 z1 r9 i0 i6 ]
$r2 = new java.lang.StringBuilder.......	[entry: i7 z1 i0 i6 i2 r0 r9 ]	[exit: i7 z1 i0 i6 i2 r0 r9 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: i7 z1 i0 i6 i2 r0 r9 $r2 ]	[exit: i7 z1 i0 i6 i2 r0 r9 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9)	[entry: i7 z1 i0 i6 i2 r0 r9 $r2 ]	[exit: i7 z1 i0 i6 $r3 i2 r0 ]
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2)	[entry: i7 z1 i0 i6 $r3 i2 r0 ]	[exit: i7 r0 z1 i0 i6 $c4 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)	[entry: i7 r0 z1 i0 i6 $c4 $r3 ]	[exit: i7 r0 z1 i0 i6 $r4 ]
r9 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i7 r0 z1 i0 i6 $r4 ]	[exit: i7 r0 z1 r9 i0 i6 ]
goto [?= (branch)]......................	[entry: i7 r0 z1 r9 i0 i6 ]	[exit: i7 r0 z1 r9 i0 i6 ]
i6 = i0.................................	[entry: i7 r0 z1 r9 i0 ]	[exit: i7 r0 i6 z1 i0 r9 ]
r1 = staticinvoke <Others.LowestBasePalindrome: java.lang.String reverse(java.lang.String)>(r9)	[entry: i7 r0 i6 z1 i0 r9 ]	[exit: i7 r0 i6 z1 i0 r9 r1 ]
$z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>(r9)	[entry: i7 r0 i6 z1 i0 r9 r1 ]	[exit: i7 r0 i6 z1 i0 $z0 ]
if $z0 == 0 goto i7 = i7 + 1............	[entry: i7 r0 i6 z1 i0 $z0 ]	[exit: i7 r0 i6 z1 i0 ]
z2 = 1..................................	[entry: i7 ]	[exit: i7 ]
return i7...............................	[entry: i7 ]	[exit: ]
i7 = i7 + 1.............................	[entry: r0 i6 z1 i0 i7 ]	[exit: r0 i6 z1 i7 i0 ]
goto [?= (branch)]......................	[entry: r0 i6 z1 i7 i0 ]	[exit: r0 i6 z1 i7 i0 ]
$i1 = i6 - 1............................	[entry: i6 ]	[exit: $i1 ]
return $i1..............................	[entry: $i1 ]	[exit: ]
********************
Class Name: Others.SieveOfEratosthenes, Method Name: findPrimesTillN, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
$i1 = i0 + 1............................	[entry: i0 ]	[exit: i0 $i1 ]
r0 = newarray (int)[$i1]................	[entry: i0 $i1 ]	[exit: r0 i0 ]
i8 = 0..................................	[entry: r0 i0 ]	[exit: r0 i8 i0 ]
if i8 > i0 goto r0[1] = 0...............	[entry: r0 i8 i0 ]	[exit: i0 r0 i8 ]
r0[i8] = 1..............................	[entry: i0 r0 i8 ]	[exit: r0 i0 i8 ]
i8 = i8 + 1.............................	[entry: r0 i0 i8 ]	[exit: r0 i8 i0 ]
goto [?= (branch)]......................	[entry: r0 i8 i0 ]	[exit: r0 i8 i0 ]
r0[1] = 0...............................	[entry: i0 r0 ]	[exit: i0 r0 ]
r0[0] = 0...............................	[entry: i0 r0 ]	[exit: r0 i0 ]
i9 = 2..................................	[entry: r0 i0 ]	[exit: r0 i0 i9 ]
$d1 = (double) i9.......................	[entry: r0 i0 i9 ]	[exit: r0 i9 $d1 i0 ]
$d0 = (double) i0.......................	[entry: r0 i9 $d1 i0 ]	[exit: r0 i0 i9 $d1 $d0 ]
$d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: r0 i0 i9 $d1 $d0 ]	[exit: r0 i0 i9 $d1 $d2 ]
$b2 = $d1 cmpg $d2......................	[entry: r0 i0 i9 $d1 $d2 ]	[exit: r0 i0 i9 $b2 ]
if $b2 > 0 goto i11 = 0.................	[entry: r0 i0 i9 $b2 ]	[exit: r0 i0 i9 ]
$i5 = r0[i9]............................	[entry: i0 r0 i9 ]	[exit: r0 i0 i9 $i5 ]
if $i5 != 1 goto i9 = i9 + 1............	[entry: r0 i0 i9 $i5 ]	[exit: r0 i0 i9 ]
i10 = 2.................................	[entry: r0 i0 i9 ]	[exit: r0 i0 i9 i10 ]
$i6 = i9 * i10..........................	[entry: r0 i0 i9 i10 ]	[exit: r0 i9 i10 $i6 i0 ]
if $i6 > i0 goto i9 = i9 + 1............	[entry: r0 i9 i10 $i6 i0 ]	[exit: r0 i0 i9 i10 ]
$i7 = i9 * i10..........................	[entry: i0 r0 i9 i10 ]	[exit: i0 i9 i10 r0 $i7 ]
r0[$i7] = 0.............................	[entry: i0 i9 i10 r0 $i7 ]	[exit: r0 i0 i9 i10 ]
i10 = i10 + 1...........................	[entry: r0 i0 i9 i10 ]	[exit: r0 i0 i9 i10 ]
goto [?= $i6 = i9 * i10]................	[entry: r0 i0 i9 i10 ]	[exit: r0 i0 i9 i10 ]
i9 = i9 + 1.............................	[entry: r0 i0 i9 ]	[exit: r0 i0 i9 ]
goto [?= $d1 = (double) i9].............	[entry: r0 i0 i9 ]	[exit: r0 i0 i9 ]
i11 = 0.................................	[entry: r0 i0 ]	[exit: r0 i11 i0 ]
$i3 = i0 + 1............................	[entry: r0 i11 i0 ]	[exit: i0 r0 i11 $i3 ]
if i11 >= $i3 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r0 i11 $i3 ]	[exit: i0 r0 i11 ]
$i4 = r0[i11]...........................	[entry: i0 r0 i11 ]	[exit: r0 i0 i11 $i4 ]
if $i4 != 1 goto i11 = i11 + 1..........	[entry: r0 i0 i11 $i4 ]	[exit: r0 i0 i11 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i0 i11 ]	[exit: r0 i0 $r3 i11 ]
$r2 = new java.lang.StringBuilder.......	[entry: r0 i0 $r3 i11 ]	[exit: r0 i0 $r3 i11 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i0 $r3 i11 $r2 ]	[exit: r0 i0 $r3 i11 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i11)	[entry: r0 i0 $r3 i11 $r2 ]	[exit: r0 i0 i11 $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r0 i0 i11 $r3 $r4 ]	[exit: r0 i0 i11 $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i0 i11 $r3 $r5 ]	[exit: r0 i0 i11 $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: r0 i0 i11 $r6 $r3 ]	[exit: r0 i0 i11 ]
i11 = i11 + 1...........................	[entry: r0 i0 i11 ]	[exit: r0 i11 i0 ]
goto [?= $i3 = i0 + 1]..................	[entry: r0 i11 i0 ]	[exit: r0 i11 i0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println()>()	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SieveOfEratosthenes, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
b0 = 100................................	[entry: ]	[exit: b0 ]
staticinvoke <Others.SieveOfEratosthenes: void findPrimesTillN(int)>(b0)	[entry: b0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.Krishnamurthy, Method Name: fact, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 = 1..................................	[entry: i0 ]	[exit: i1 i0 ]
i2 = i0.................................	[entry: i1 i0 ]	[exit: i1 i2 ]
if i2 < 1 goto return i1................	[entry: i1 i2 ]	[exit: i1 i2 ]
i1 = i1 * i2............................	[entry: i1 i2 ]	[exit: i1 i2 ]
i2 = i2 + -1............................	[entry: i1 i2 ]	[exit: i1 i2 ]
goto [?= (branch)]......................	[entry: i1 i2 ]	[exit: i1 i2 ]
return i1...............................	[entry: i1 ]	[exit: ]
********************
Class Name: Others.Krishnamurthy, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r14 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i3 = 0..................................	[entry: r2 ]	[exit: i3 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i3 r2 ]	[exit: i3 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter the number : ")	[entry: i3 r2 $r3 ]	[exit: i3 r2 ]
i4 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i3 r2 ]	[exit: r2 i3 i4 ]
i0 = i4.................................	[entry: r2 i3 i4 ]	[exit: r2 i3 i0 i4 ]
if i4 <= 0 goto (branch)................	[entry: r2 i3 i0 i4 ]	[exit: r2 i3 i0 i4 ]
i1 = i4 % 10............................	[entry: r2 i0 i3 i4 ]	[exit: r2 i0 i4 i3 i1 ]
$i2 = staticinvoke <Others.Krishnamurthy: int fact(int)>(i1)	[entry: r2 i0 i4 i3 i1 ]	[exit: r2 i0 i4 i3 $i2 ]
i3 = i3 + $i2...........................	[entry: r2 i0 i4 i3 $i2 ]	[exit: r2 i3 i0 i4 ]
i4 = i4 / 10............................	[entry: r2 i3 i0 i4 ]	[exit: r2 i3 i0 i4 ]
goto [?= (branch)]......................	[entry: r2 i3 i0 i4 ]	[exit: r2 i3 i0 i4 ]
if i3 != i0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i3 i0 ]	[exit: r2 i0 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r10 i0 ]
$r9 = new java.lang.StringBuilder.......	[entry: r2 $r10 i0 ]	[exit: r2 $r10 i0 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r10 i0 $r9 ]	[exit: r2 $r10 i0 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r10 i0 $r9 ]	[exit: r2 $r10 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a krishnamurthy number")	[entry: r2 $r10 $r11 ]	[exit: r2 $r10 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r10 $r12 ]	[exit: r2 $r13 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>($r13)	[entry: r2 $r13 $r10 ]	[exit: r2 ]
goto [?= virtualinvoke r2.<java.util.Scanner: void close()>()]	[entry: r2 ]	[exit: r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r5 i0 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i0 ]	[exit: r2 $r5 i0 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a krishnamurthy number")	[entry: r2 $r5 $r6 ]	[exit: r2 $r5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r5 $r7 ]	[exit: r2 $r8 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r8)	[entry: r2 $r8 $r5 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.RootPrecision, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r2 ]	[exit: r2 i0 i1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 i1 ]	[exit: r2 $r3 i0 i1 ]
$d0 = staticinvoke <Others.RootPrecision: double squareRoot(int,int)>(i0, i1)	[entry: r2 $r3 i0 i1 ]	[exit: r2 $d0 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(double)>($d0)	[entry: r2 $d0 $r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.RootPrecision, Method Name: squareRoot, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
$d0 = (double) i0.......................	[entry: i1 i0 ]	[exit: i1 $d0 ]
d7 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 0.5)	[entry: i1 $d0 ]	[exit: d7 i1 ]
$d1 = (double) i1.......................	[entry: d7 i1 ]	[exit: d7 $d1 ]
$d2 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, $d1)	[entry: d7 $d1 ]	[exit: d7 $d2 ]
i2 = (int) $d2..........................	[entry: d7 $d2 ]	[exit: d7 i2 ]
$d3 = (double) i2.......................	[entry: d7 i2 ]	[exit: i2 d7 $d3 ]
d8 = d7 * $d3...........................	[entry: i2 d7 $d3 ]	[exit: i2 d8 ]
$i3 = (int) d8..........................	[entry: i2 d8 ]	[exit: i2 $i3 ]
d4 = (double) $i3.......................	[entry: i2 $i3 ]	[exit: d4 i2 ]
$d5 = (double) i2.......................	[entry: d4 i2 ]	[exit: d4 $d5 ]
$d6 = d4 / $d5..........................	[entry: d4 $d5 ]	[exit: $d6 ]
return $d6..............................	[entry: $d6 ]	[exit: ]
********************
Class Name: Others.FloydTriangle, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter the number of rows which you want in your Floyd Triangle: ")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i0 r2 ]
i1 = 0..................................	[entry: i0 r2 ]	[exit: i1 i0 r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: i1 i0 r2 ]	[exit: i1 i0 ]
i2 = 0..................................	[entry: i1 i0 ]	[exit: i1 i2 i0 ]
if i2 >= i0 goto return.................	[entry: i1 i2 i0 ]	[exit: i0 i1 i2 ]
i3 = 0..................................	[entry: i0 i1 i2 ]	[exit: i0 i1 i3 i2 ]
if i3 > i2 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i1 i3 i2 ]	[exit: i1 i0 i2 i3 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i2 i3 i1 ]	[exit: i0 i2 i3 $r6 i1 ]
$r5 = new java.lang.StringBuilder.......	[entry: i0 i2 i3 $r6 i1 ]	[exit: i0 i2 i3 $r6 i1 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: i0 i2 i3 $r6 i1 $r5 ]	[exit: i0 i2 i3 $r6 $r5 i1 ]
i1 = i1 + 1.............................	[entry: i0 i2 i3 $r6 $r5 i1 ]	[exit: i0 i2 i3 $r6 i1 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: i0 i2 i3 $r6 i1 $r5 ]	[exit: i0 i1 i2 i3 $r6 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: i0 i1 i2 i3 $r6 $r7 ]	[exit: i0 i1 i2 i3 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i0 i1 i2 i3 $r6 $r8 ]	[exit: i0 i1 i2 i3 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>($r9)	[entry: i0 i1 i2 i3 $r9 $r6 ]	[exit: i0 i1 i2 i3 ]
i3 = i3 + 1.............................	[entry: i0 i1 i2 i3 ]	[exit: i0 i1 i3 i2 ]
goto [?= (branch)]......................	[entry: i0 i1 i3 i2 ]	[exit: i0 i1 i3 i2 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i1 i0 i2 ]	[exit: i1 i0 i2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println()>()	[entry: i1 i0 i2 $r4 ]	[exit: i1 i0 i2 ]
i2 = i2 + 1.............................	[entry: i1 i0 i2 ]	[exit: i1 i2 i0 ]
goto [?= (branch)]......................	[entry: i1 i2 i0 ]	[exit: i1 i2 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.CountWords, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r17 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter your text: ")	[entry: r2 $r3 ]	[exit: r2 ]
r4 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r4 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 ]	[exit: r2 $r6 r4 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 r4 ]	[exit: r2 $r6 r4 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 r4 $r5 ]	[exit: r2 $r6 r4 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Your text has ")	[entry: r2 $r6 r4 $r5 ]	[exit: r2 $r6 $r7 r4 ]
$i0 = staticinvoke <Others.CountWords: int wordCount(java.lang.String)>(r4)	[entry: r2 $r6 $r7 r4 ]	[exit: r2 r4 $r6 $i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r2 r4 $r6 $i0 $r7 ]	[exit: r2 r4 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" word(s)")	[entry: r2 r4 $r6 $r8 ]	[exit: r2 r4 $r6 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 r4 $r6 $r9 ]	[exit: r2 r4 $r10 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r2 r4 $r10 $r6 ]	[exit: r2 r4 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 ]	[exit: r2 $r12 r4 ]
$r11 = new java.lang.StringBuilder......	[entry: r2 $r12 r4 ]	[exit: r2 $r12 r4 $r11 ]
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r12 r4 $r11 ]	[exit: r2 $r12 r4 $r11 ]
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Your text has ")	[entry: r2 $r12 r4 $r11 ]	[exit: r2 $r12 $r13 r4 ]
$i1 = staticinvoke <Others.CountWords: int secondaryWordCount(java.lang.String)>(r4)	[entry: r2 $r12 $r13 r4 ]	[exit: r2 $r12 $i1 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r2 $r12 $i1 $r13 ]	[exit: r2 $r12 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" word(s)")	[entry: r2 $r12 $r14 ]	[exit: r2 $r12 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r12 $r15 ]	[exit: r2 $r16 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r16)	[entry: r2 $r16 $r12 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.StackPostfixNotation, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
r3 = virtualinvoke r2.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r2 ]	[exit: r2 r3 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r3 ]	[exit: r2 $r4 r3 ]
$i0 = staticinvoke <Others.StackPostfixNotation: int postfixEvaluate(java.lang.String)>(r3)	[entry: r2 $r4 r3 ]	[exit: r2 $i0 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i0)	[entry: r2 $i0 $r4 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.StackPostfixNotation, Method Name: postfixEvaluate, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String.....	[entry: ]	[exit: r3 ]
$r0 = new java.util.Stack...............	[entry: r3 ]	[exit: r3 $r0 ]
specialinvoke $r0.<java.util.Stack: void <init>()>()	[entry: r3 $r0 ]	[exit: r3 $r0 ]
r1 = $r0................................	[entry: r3 $r0 ]	[exit: r1 r3 ]
$r2 = new java.util.Scanner.............	[entry: r1 r3 ]	[exit: r1 r3 $r2 ]
specialinvoke $r2.<java.util.Scanner: void <init>(java.lang.String)>(r3)	[entry: r1 r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r4 ]
$z4 = virtualinvoke r4.<java.util.Scanner: boolean hasNext()>()	[entry: r1 r4 ]	[exit: r1 r4 $z4 ]
if $z4 == 0 goto virtualinvoke r4.<java.util.Scanner: void close()>()	[entry: r1 r4 $z4 ]	[exit: r1 r4 ]
$z0 = virtualinvoke r4.<java.util.Scanner: boolean hasNextInt()>()	[entry: r1 r4 ]	[exit: r1 r4 $z0 ]
if $z0 == 0 goto $r7 = virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()	[entry: r1 r4 $z0 ]	[exit: r1 r4 ]
$i7 = virtualinvoke r4.<java.util.Scanner: int nextInt()>()	[entry: r1 r4 ]	[exit: r4 r1 $i7 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)	[entry: r4 r1 $i7 ]	[exit: r4 $r20 r1 ]
virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r20)	[entry: r4 $r20 r1 ]	[exit: r1 r4 ]
goto [?= $z4 = virtualinvoke r4.<java.util.Scanner: boolean hasNext()>()]	[entry: r1 r4 ]	[exit: r1 r4 ]
$r7 = virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()	[entry: r4 r1 ]	[exit: r4 r1 $r7 ]
$r8 = (java.lang.Integer) $r7...........	[entry: r4 r1 $r7 ]	[exit: r4 r1 $r8 ]
i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>()	[entry: r4 r1 $r8 ]	[exit: i1 r4 r1 ]
$r9 = virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()	[entry: i1 r4 r1 ]	[exit: r1 i1 r4 $r9 ]
$r10 = (java.lang.Integer) $r9..........	[entry: r1 i1 r4 $r9 ]	[exit: r1 i1 r4 $r10 ]
i2 = virtualinvoke $r10.<java.lang.Integer: int intValue()>()	[entry: r1 i1 r4 $r10 ]	[exit: r1 i2 i1 r4 ]
r11 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 i2 i1 r4 ]	[exit: r4 r1 i2 i1 r11 ]
$z1 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("+")	[entry: r4 r1 i2 i1 r11 ]	[exit: r4 r1 i2 i1 r11 $z1 ]
if $z1 == 0 goto $z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("-")	[entry: r4 r1 i2 i1 r11 $z1 ]	[exit: r4 r1 i2 i1 r11 ]
$i6 = i2 + i1...........................	[entry: r4 r1 i2 i1 ]	[exit: r4 r1 $i6 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: r4 r1 $i6 ]	[exit: r4 $r18 r1 ]
virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r18)	[entry: r4 $r18 r1 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
$z2 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("-")	[entry: r4 r1 i2 i1 r11 ]	[exit: r4 r1 i2 i1 r11 $z2 ]
if $z2 == 0 goto $z3 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("*")	[entry: r4 r1 i2 i1 r11 $z2 ]	[exit: r4 r1 i2 i1 r11 ]
$i5 = i2 - i1...........................	[entry: r4 r1 i2 i1 ]	[exit: r4 r1 $i5 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: r4 r1 $i5 ]	[exit: r4 $r16 r1 ]
virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r16)	[entry: r4 $r16 r1 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
$z3 = virtualinvoke r11.<java.lang.String: boolean equals(java.lang.Object)>("*")	[entry: r4 r1 i2 i1 r11 ]	[exit: r4 r1 i2 i1 $z3 ]
if $z3 == 0 goto $i3 = i2 / i1..........	[entry: r4 r1 i2 i1 $z3 ]	[exit: r4 r1 i2 i1 ]
$i4 = i2 * i1...........................	[entry: r4 r1 i2 i1 ]	[exit: r4 r1 $i4 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4)	[entry: r4 r1 $i4 ]	[exit: r4 $r14 r1 ]
virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r14)	[entry: r4 $r14 r1 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
$i3 = i2 / i1...........................	[entry: r4 r1 i2 i1 ]	[exit: r4 r1 $i3 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)	[entry: r4 r1 $i3 ]	[exit: r4 $r12 r1 ]
virtualinvoke r1.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r12)	[entry: r4 $r12 r1 ]	[exit: r1 r4 ]
goto [?= $z4 = virtualinvoke r4.<java.util.Scanner: boolean hasNext()>()]	[entry: r1 r4 ]	[exit: r1 r4 ]
virtualinvoke r4.<java.util.Scanner: void close()>()	[entry: r1 r4 ]	[exit: r1 ]
$r5 = virtualinvoke r1.<java.util.Stack: java.lang.Object pop()>()	[entry: r1 ]	[exit: $r5 ]
$r6 = (java.lang.Integer) $r5...........	[entry: $r5 ]	[exit: $r6 ]
$i0 = virtualinvoke $r6.<java.lang.Integer: int intValue()>()	[entry: $r6 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: Others.TopKWords, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new Others.TopKWords$CountWords...	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.TopKWords$CountWords: void <init>(java.lang.String)>("/Users/lisanaaa/Desktop/words.txt")	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
r2 = virtualinvoke r1.<Others.TopKWords$CountWords: java.util.Map getDictionary()>()	[entry: r1 ]	[exit: r2 ]
$r3 = new java.util.ArrayList...........	[entry: r2 ]	[exit: $r3 r2 ]
$r4 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>()	[entry: $r3 r2 ]	[exit: $r4 $r3 ]
specialinvoke $r3.<java.util.ArrayList: void <init>(java.util.Collection)>($r4)	[entry: $r4 $r3 ]	[exit: $r3 ]
r5 = $r3................................	[entry: $r3 ]	[exit: r5 ]
$r6 = staticinvoke <Others.TopKWords$lambda_main_0__1: java.util.function.Function bootstrap$()>()	[entry: r5 ]	[exit: r5 $r6 ]
$r7 = staticinvoke <java.util.Comparator: java.util.Comparator comparing(java.util.function.Function)>($r6)	[entry: r5 $r6 ]	[exit: $r7 r5 ]
interfaceinvoke r5.<java.util.List: void sort(java.util.Comparator)>($r7)	[entry: $r7 r5 ]	[exit: r5 ]
$r8 = new java.util.Scanner.............	[entry: r5 ]	[exit: r5 $r8 ]
$r9 = <java.lang.System: java.io.InputStream in>	[entry: r5 $r8 ]	[exit: r5 $r9 $r8 ]
specialinvoke $r8.<java.util.Scanner: void <init>(java.io.InputStream)>($r9)	[entry: r5 $r9 $r8 ]	[exit: r5 $r8 ]
r16 = $r8...............................	[entry: r5 $r8 ]	[exit: r5 r16 ]
i4 = virtualinvoke r16.<java.util.Scanner: int nextInt()>()	[entry: r5 r16 ]	[exit: r16 i4 r5 ]
$i0 = interfaceinvoke r5.<java.util.List: int size()>()	[entry: r16 i4 r5 ]	[exit: r16 r5 i4 $i0 ]
if i4 <= $i0 goto i5 = 0................	[entry: r16 r5 i4 $i0 ]	[exit: r16 r5 i4 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r5 ]	[exit: r5 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>("Retype a number, your number is too large")	[entry: r5 $r12 ]	[exit: r5 ]
$r13 = new java.util.Scanner............	[entry: r5 ]	[exit: r5 $r13 ]
$r14 = <java.lang.System: java.io.InputStream in>	[entry: r5 $r13 ]	[exit: r5 $r14 $r13 ]
specialinvoke $r13.<java.util.Scanner: void <init>(java.io.InputStream)>($r14)	[entry: r5 $r14 $r13 ]	[exit: r5 $r13 ]
r16 = $r13..............................	[entry: r5 $r13 ]	[exit: r5 r16 ]
i4 = virtualinvoke r16.<java.util.Scanner: int nextInt()>()	[entry: r5 r16 ]	[exit: r16 i4 r5 ]
goto [?= $i0 = interfaceinvoke r5.<java.util.List: int size()>()]	[entry: r16 i4 r5 ]	[exit: r16 i4 r5 ]
i5 = 0..................................	[entry: r16 r5 i4 ]	[exit: r16 r5 i5 i4 ]
if i5 >= i4 goto virtualinvoke r16.<java.util.Scanner: void close()>()	[entry: r16 r5 i5 i4 ]	[exit: r16 i4 i5 r5 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r16 i4 i5 r5 ]	[exit: r16 i4 $r10 i5 r5 ]
$i1 = interfaceinvoke r5.<java.util.List: int size()>()	[entry: r16 i4 $r10 i5 r5 ]	[exit: r16 i4 $r10 r5 $i1 i5 ]
$i2 = $i1 - i5..........................	[entry: r16 i4 $r10 r5 $i1 i5 ]	[exit: r16 i4 i5 $r10 r5 $i2 ]
$i3 = $i2 - 1...........................	[entry: r16 i4 i5 $r10 r5 $i2 ]	[exit: r16 i4 i5 $r10 $i3 r5 ]
$r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>($i3)	[entry: r16 i4 i5 $r10 $i3 r5 ]	[exit: r16 r5 i4 i5 $r11 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.Object)>($r11)	[entry: r16 r5 i4 i5 $r11 $r10 ]	[exit: r16 r5 i4 i5 ]
i5 = i5 + 1.............................	[entry: r16 r5 i4 i5 ]	[exit: r16 r5 i5 i4 ]
goto [?= (branch)]......................	[entry: r16 r5 i5 i4 ]	[exit: r16 r5 i5 i4 ]
virtualinvoke r16.<java.util.Scanner: void close()>()	[entry: r16 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.KMP, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Others.KMP: void KMPmatcher(java.lang.String,java.lang.String)>("AAAAABAAABA", "AAAA")	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.KMP, Method Name: KMPmatcher, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
r1 := @parameter1: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r1 r0 ]	[exit: r0 i0 r1 ]
i1 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r0 i0 r1 ]	[exit: i1 r0 i0 r1 ]
r2 = staticinvoke <Others.KMP: int[] computePrefixFunction(java.lang.String)>(r1)	[entry: i1 r0 i0 r1 ]	[exit: r2 i1 r1 r0 i0 ]
i10 = 0.................................	[entry: r2 i1 r1 r0 i0 ]	[exit: r2 i1 r1 r0 i10 i0 ]
i11 = 0.................................	[entry: r2 i1 r1 r0 i10 i0 ]	[exit: r2 i1 r1 r0 i10 i11 i0 ]
if i11 >= i0 goto return................	[entry: r2 i1 r1 r0 i10 i11 i0 ]	[exit: i0 r2 i1 r1 i11 r0 i10 ]
if i10 <= 0 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11)	[entry: i0 r2 i1 r1 i11 r0 i10 ]	[exit: i0 r2 i1 i10 r1 i11 r0 ]
$c7 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11)	[entry: i0 r2 i1 i10 r1 i11 r0 ]	[exit: i0 r2 i1 i11 r0 $c7 i10 r1 ]
$c8 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10)	[entry: i0 r2 i1 i11 r0 $c7 i10 r1 ]	[exit: i0 r2 i1 i10 r1 i11 r0 $c7 $c8 ]
if $c7 == $c8 goto $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11)	[entry: i0 r2 i1 i10 r1 i11 r0 $c7 $c8 ]	[exit: i0 r2 i1 i10 r1 i11 r0 ]
$i9 = i10 - 1...........................	[entry: i0 i1 r1 i11 r0 r2 i10 ]	[exit: i0 i1 r1 i11 r0 r2 $i9 ]
i10 = r2[$i9]...........................	[entry: i0 i1 r1 i11 r0 r2 $i9 ]	[exit: i0 r2 i1 r1 i11 r0 i10 ]
goto [?= (branch)]......................	[entry: i0 r2 i1 r1 i11 r0 i10 ]	[exit: i0 r2 i1 r1 i11 r0 i10 ]
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i11)	[entry: i0 r2 i1 i10 r1 i11 r0 ]	[exit: r2 r0 i0 i11 i1 $c2 i10 r1 ]
$c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i10)	[entry: r2 r0 i0 i11 i1 $c2 i10 r1 ]	[exit: r2 r1 r0 i0 i11 i10 i1 $c2 $c3 ]
if $c2 != $c3 goto (branch).............	[entry: r2 r1 r0 i0 i11 i10 i1 $c2 $c3 ]	[exit: r2 r1 r0 i0 i11 i10 i1 ]
i10 = i10 + 1...........................	[entry: r2 r1 r0 i0 i11 i1 i10 ]	[exit: r2 r1 r0 i0 i11 i10 i1 ]
if i10 != i1 goto i11 = i11 + 1.........	[entry: r2 r1 r0 i0 i11 i10 i1 ]	[exit: r2 i1 r1 r0 i10 i0 i11 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r0 i0 r2 i10 i1 i11 ]	[exit: r1 r0 i0 r2 i10 $r4 i1 i11 ]
$r3 = new java.lang.StringBuilder.......	[entry: r1 r0 i0 r2 i10 $r4 i1 i11 ]	[exit: r1 r0 i0 r2 i10 $r4 i1 i11 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: r1 r0 i0 r2 i10 $r4 i1 i11 $r3 ]	[exit: r1 r0 i0 r2 i10 $r4 i1 i11 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern starts: ")	[entry: r1 r0 i0 r2 i10 $r4 i1 i11 $r3 ]	[exit: r1 r0 i0 r2 i10 $r4 $r5 i1 i11 ]
$i4 = i11 + 1...........................	[entry: r1 r0 i0 r2 i10 $r4 $r5 i1 i11 ]	[exit: r1 r0 i0 i11 r2 i10 $r4 $r5 $i4 i1 ]
$i5 = $i4 - i1..........................	[entry: r1 r0 i0 i11 r2 i10 $r4 $r5 $i4 i1 ]	[exit: i1 r1 r0 i0 i11 r2 i10 $r4 $i5 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: i1 r1 r0 i0 i11 r2 i10 $r4 $i5 $r5 ]	[exit: i1 r1 r0 i0 i11 r2 i10 $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i1 r1 r0 i0 i11 r2 i10 $r4 $r6 ]	[exit: i1 r1 r0 i0 i11 r2 i10 $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: i1 r1 r0 i0 i11 r2 i10 $r7 $r4 ]	[exit: i1 r1 r0 i0 i11 r2 i10 ]
$i6 = i10 - 1...........................	[entry: i1 r1 r0 i0 i11 r2 i10 ]	[exit: i1 r1 r0 i0 i11 r2 $i6 ]
i10 = r2[$i6]...........................	[entry: i1 r1 r0 i0 i11 r2 $i6 ]	[exit: r2 i1 r1 r0 i10 i0 i11 ]
i11 = i11 + 1...........................	[entry: r2 i1 r1 r0 i10 i0 i11 ]	[exit: r2 i1 r1 r0 i10 i11 i0 ]
goto [?= (branch)]......................	[entry: r2 i1 r1 r0 i10 i11 i0 ]	[exit: r2 i1 r1 r0 i10 i11 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.TowerOfHanoi, Method Name: shift, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
r0 := @parameter1: java.lang.String.....	[entry: i0 ]	[exit: r0 i0 ]
r2 := @parameter2: java.lang.String.....	[entry: r0 i0 ]	[exit: r0 r2 i0 ]
r1 := @parameter3: java.lang.String.....	[entry: r0 r2 i0 ]	[exit: r0 r1 r2 i0 ]
if i0 == 0 goto return..................	[entry: r0 r1 r2 i0 ]	[exit: r0 r1 r2 i0 ]
$i1 = i0 - 1............................	[entry: r0 r1 r2 i0 ]	[exit: i0 $i1 r0 r1 r2 ]
staticinvoke <Others.TowerOfHanoi: void shift(int,java.lang.String,java.lang.String,java.lang.String)>($i1, r0, r1, r2)	[entry: i0 $i1 r0 r1 r2 ]	[exit: r2 r1 r0 i0 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r1 r0 i0 ]	[exit: r2 $r4 r1 r0 i0 ]
$r3 = newarray (java.lang.Object)[3]....	[entry: r2 $r4 r1 r0 i0 ]	[exit: r2 $r4 r1 r0 $r3 i0 ]
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: r2 $r4 r1 r0 $r3 i0 ]	[exit: r2 i0 $r4 r1 r0 $r3 $r5 ]
$r3[0] = $r5............................	[entry: r2 i0 $r4 r1 r0 $r3 $r5 ]	[exit: r2 i0 $r4 r1 $r3 r0 ]
$r3[1] = r0.............................	[entry: r2 i0 $r4 r1 $r3 r0 ]	[exit: r2 r0 i0 $r4 $r3 r1 ]
$r3[2] = r1.............................	[entry: r2 r0 i0 $r4 $r3 r1 ]	[exit: r2 r0 r1 i0 $r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])>("Move %d from %s to %s\n", $r3)	[entry: r2 r0 r1 i0 $r3 $r4 ]	[exit: r2 r0 r1 i0 ]
$i2 = i0 - 1............................	[entry: r2 r0 r1 i0 ]	[exit: $i2 r2 r0 r1 ]
staticinvoke <Others.TowerOfHanoi: void shift(int,java.lang.String,java.lang.String,java.lang.String)>($i2, r2, r0, r1)	[entry: $i2 r2 r0 r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.TowerOfHanoi, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("Enter number of discs on Pole 1: ")	[entry: $r0 ]	[exit: ]
$r1 = new java.util.Scanner.............	[entry: ]	[exit: $r1 ]
$r2 = <java.lang.System: java.io.InputStream in>	[entry: $r1 ]	[exit: $r2 $r1 ]
specialinvoke $r1.<java.util.Scanner: void <init>(java.io.InputStream)>($r2)	[entry: $r2 $r1 ]	[exit: $r1 ]
r3 = $r1................................	[entry: $r1 ]	[exit: r3 ]
i0 = virtualinvoke r3.<java.util.Scanner: int nextInt()>()	[entry: r3 ]	[exit: r3 i0 ]
staticinvoke <Others.TowerOfHanoi: void shift(int,java.lang.String,java.lang.String,java.lang.String)>(i0, "Pole1", "Pole2", "Pole3")	[entry: r3 i0 ]	[exit: r3 ]
virtualinvoke r3.<java.util.Scanner: void close()>()	[entry: r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.ReturnSubsequence, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Enter String: ")	[entry: $r0 ]	[exit: ]
$r1 = new java.util.Scanner.............	[entry: ]	[exit: $r1 ]
$r2 = <java.lang.System: java.io.InputStream in>	[entry: $r1 ]	[exit: $r2 $r1 ]
specialinvoke $r1.<java.util.Scanner: void <init>(java.io.InputStream)>($r2)	[entry: $r2 $r1 ]	[exit: $r1 ]
r3 = $r1................................	[entry: $r1 ]	[exit: r3 ]
r4 = virtualinvoke r3.<java.util.Scanner: java.lang.String next()>()	[entry: r3 ]	[exit: r3 r4 ]
r5 = staticinvoke <Others.ReturnSubsequence: java.lang.String[] returnSubsequence(java.lang.String)>(r4)	[entry: r3 r4 ]	[exit: r3 r5 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r5 ]	[exit: r3 r5 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Subsequences : ")	[entry: r3 r5 $r6 ]	[exit: r3 r5 ]
i1 = 0..................................	[entry: r3 r5 ]	[exit: r3 i1 r5 ]
$i0 = lengthof r5.......................	[entry: r3 i1 r5 ]	[exit: r3 r5 i1 $i0 ]
if i1 >= $i0 goto virtualinvoke r3.<java.util.Scanner: void close()>()	[entry: r3 r5 i1 $i0 ]	[exit: r3 r5 i1 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r5 i1 ]	[exit: r3 $r8 r5 i1 ]
$r7 = r5[i1]............................	[entry: r3 $r8 r5 i1 ]	[exit: r3 r5 i1 $r7 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: r3 r5 i1 $r7 $r8 ]	[exit: r3 r5 i1 ]
i1 = i1 + 1.............................	[entry: r3 r5 i1 ]	[exit: r3 i1 r5 ]
goto [?= $i0 = lengthof r5].............	[entry: r3 i1 r5 ]	[exit: r3 i1 r5 ]
virtualinvoke r3.<java.util.Scanner: void close()>()	[entry: r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.RemoveDuplicateFromString, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.io.BufferedReader........	[entry: ]	[exit: $r0 ]
$r1 = new java.io.InputStreamReader.....	[entry: $r0 ]	[exit: $r0 $r1 ]
$r2 = <java.lang.System: java.io.InputStream in>	[entry: $r0 $r1 ]	[exit: $r0 $r2 $r1 ]
specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r2)	[entry: $r0 $r2 $r1 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r3 = $r0................................	[entry: $r0 ]	[exit: r3 ]
r4 = virtualinvoke r3.<java.io.BufferedReader: java.lang.String readLine()>()	[entry: r3 ]	[exit: r3 r4 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r4 ]	[exit: r3 $r6 r4 ]
$r5 = new java.lang.StringBuilder.......	[entry: r3 $r6 r4 ]	[exit: r3 $r6 r4 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r6 r4 $r5 ]	[exit: r3 $r6 r4 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Actual string is: ")	[entry: r3 $r6 r4 $r5 ]	[exit: r3 $r6 r4 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: r3 $r6 r4 $r7 ]	[exit: r3 r4 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 r4 $r6 $r8 ]	[exit: r3 r4 $r9 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r9)	[entry: r3 r4 $r9 $r6 ]	[exit: r3 r4 ]
$r11 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r4 ]	[exit: r3 $r11 r4 ]
$r10 = new java.lang.StringBuilder......	[entry: r3 $r11 r4 ]	[exit: r3 $r11 r4 $r10 ]
specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r11 r4 $r10 ]	[exit: r3 $r11 r4 $r10 ]
$r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("String after removing duplicates: ")	[entry: r3 $r11 r4 $r10 ]	[exit: r3 $r11 $r12 r4 ]
$r13 = staticinvoke <Others.RemoveDuplicateFromString: java.lang.String removeDuplicate(java.lang.String)>(r4)	[entry: r3 $r11 $r12 r4 ]	[exit: r3 $r11 $r13 $r12 ]
$r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)	[entry: r3 $r11 $r13 $r12 ]	[exit: r3 $r11 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 $r11 $r14 ]	[exit: r3 $r15 $r11 ]
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r3 $r15 $r11 ]	[exit: r3 ]
virtualinvoke r3.<java.io.BufferedReader: void close()>()	[entry: r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.RemoveDuplicateFromString, Method Name: removeDuplicate, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto return r0............	[entry: r0 ]	[exit: r0 ]
$z0 = virtualinvoke r0.<java.lang.String: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 $z0 ]	[exit: r0 ]
return r0...............................	[entry: r0 ]	[exit: ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r2 r0 ]	[exit: r2 r0 i0 ]
i4 = 0..................................	[entry: r2 r0 i0 ]	[exit: r2 r0 i4 i0 ]
if i4 >= i0 goto $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 r0 i4 i0 ]	[exit: r2 i0 i4 r0 ]
$r4 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i0 i4 r0 r2 ]	[exit: r2 i0 $r4 i4 r0 ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4)	[entry: r2 i0 $r4 i4 r0 ]	[exit: r2 i0 i4 r0 $c1 $r4 ]
$i2 = virtualinvoke $r4.<java.lang.String: int indexOf(int)>($c1)	[entry: r2 i0 i4 r0 $c1 $r4 ]	[exit: r2 i0 i4 r0 $i2 ]
if $i2 != -1 goto i4 = i4 + 1...........	[entry: r2 i0 i4 r0 $i2 ]	[exit: r2 r0 i0 i4 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i4)	[entry: i0 r2 i4 r0 ]	[exit: r0 i0 i4 r2 $c3 ]
$r5 = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($c3)	[entry: r0 i0 i4 r2 $c3 ]	[exit: r0 i0 i4 $r5 r2 ]
virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)	[entry: r0 i0 i4 $r5 r2 ]	[exit: r2 r0 i0 i4 ]
i4 = i4 + 1.............................	[entry: r2 r0 i0 i4 ]	[exit: r2 r0 i4 i0 ]
goto [?= (branch)]......................	[entry: r2 r0 i4 i0 ]	[exit: r2 r0 i4 i0 ]
$r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: run, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: Others.SkylineProblem......	[entry: ]	[exit: r3 ]
$r0 = new java.util.Scanner.............	[entry: r3 ]	[exit: r3 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: r3 $r0 ]	[exit: r3 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: r3 $r1 $r0 ]	[exit: r3 $r0 ]
r2 = $r0................................	[entry: r3 $r0 ]	[exit: r3 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 r2 ]	[exit: r2 r3 i0 ]
$r4 = newarray (Others.SkylineProblem$Building)[i0]	[entry: r2 r3 i0 ]	[exit: r2 i0 r3 $r4 ]
r3.<Others.SkylineProblem: Others.SkylineProblem$Building[] building> = $r4	[entry: r2 i0 r3 $r4 ]	[exit: r2 r3 i0 ]
i5 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i5 i0 ]
if i5 >= i0 goto $i1 = i0 - 1...........	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i0 i5 ]
r6 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: i0 i5 r3 r2 ]	[exit: r2 i0 i5 r3 r6 ]
r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")	[entry: r2 i0 i5 r3 r6 ]	[exit: r2 i0 i5 r3 r7 ]
$r8 = r7[0].............................	[entry: r2 i0 i5 r3 r7 ]	[exit: r2 i0 i5 r3 r7 $r8 ]
$i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8)	[entry: r2 i0 i5 r3 r7 $r8 ]	[exit: r2 i0 i5 $i2 r3 r7 ]
$r9 = r7[1].............................	[entry: r2 i0 i5 $i2 r3 r7 ]	[exit: r2 i0 i5 $i2 r3 r7 $r9 ]
$i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9)	[entry: r2 i0 i5 $i2 r3 r7 $r9 ]	[exit: r2 i0 i5 $i2 $i3 r3 r7 ]
$r10 = r7[2]............................	[entry: r2 i0 i5 $i2 $i3 r3 r7 ]	[exit: r2 i0 i5 $i2 $i3 r3 $r10 ]
$i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10)	[entry: r2 i0 i5 $i2 $i3 r3 $r10 ]	[exit: r2 i0 i5 $i2 $i3 $i4 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void add(int,int,int)>($i2, $i3, $i4)	[entry: r2 i0 i5 $i2 $i3 $i4 r3 ]	[exit: r2 r3 i0 i5 ]
i5 = i5 + 1.............................	[entry: r2 r3 i0 i5 ]	[exit: r2 r3 i5 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i5 i0 ]
$i1 = i0 - 1............................	[entry: r2 r3 i0 ]	[exit: r2 $i1 r3 ]
$r5 = virtualinvoke r3.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(0, $i1)	[entry: r2 $i1 r3 ]	[exit: r2 $r5 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void print(java.util.ArrayList)>($r5)	[entry: r2 $r5 r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: add, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
i3 := @parameter1: int..................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
i4 := @parameter2: int..................	[entry: i2 i3 r0 ]	[exit: i2 i3 i4 r0 ]
$r1 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 ]
$i0 = r0.<Others.SkylineProblem: int count>	[entry: $r1 i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 $i0 ]
$i1 = $i0 + 1...........................	[entry: $r1 i2 i3 i4 r0 $i0 ]	[exit: $r1 $i0 i2 i3 i4 r0 $i1 ]
r0.<Others.SkylineProblem: int count> = $i1	[entry: $r1 $i0 i2 i3 i4 r0 $i1 ]	[exit: $r1 $i0 r0 i2 i3 i4 ]
$r2 = new Others.SkylineProblem$Building	[entry: $r1 $i0 r0 i2 i3 i4 ]	[exit: $r1 $i0 r0 i2 i3 i4 $r2 ]
specialinvoke $r2.<Others.SkylineProblem$Building: void <init>(Others.SkylineProblem,int,int,int)>(r0, i2, i3, i4)	[entry: $r1 $i0 r0 i2 i3 i4 $r2 ]	[exit: $r1 $i0 $r2 ]
$r1[$i0] = $r2..........................	[entry: $r1 $i0 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: print, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @this: Others.SkylineProblem.....	[entry: ]	[exit: ]
r0 := @parameter0: java.util.ArrayList..	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r0 ]	[exit: r1 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 == 0 goto return.................	[entry: r1 $z0 ]	[exit: r1 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()	[entry: r1 ]	[exit: r1 $r2 ]
r3 = (Others.SkylineProblem$Skyline) $r2	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r3 ]	[exit: r1 $r5 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 $r5 r3 ]	[exit: r1 $r5 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 $r5 r3 $r4 ]	[exit: r1 $r5 $r4 r3 ]
$i0 = r3.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 $r5 $r4 r3 ]	[exit: r1 $r5 r3 $i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r5 r3 $i0 $r4 ]	[exit: r1 $r5 r3 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")	[entry: r1 $r5 r3 $r6 ]	[exit: r1 $r5 $r7 r3 ]
$i1 = r3.<Others.SkylineProblem$Skyline: int height>	[entry: r1 $r5 $r7 r3 ]	[exit: r1 $r5 $i1 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r1 $r5 $i1 $r7 ]	[exit: r1 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r5 $r8 ]	[exit: r1 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r9)	[entry: r1 $r9 $r5 ]	[exit: r1 ]
$z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 == 0 goto (branch)...............	[entry: r1 $z1 ]	[exit: r1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>(",")	[entry: r1 $r10 ]	[exit: r1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]	[entry: r1 ]	[exit: r1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: findSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: r0 i0 ]
i1 := @parameter1: int..................	[entry: r0 i0 ]	[exit: r0 i0 i1 ]
if i0 != i1 goto $i2 = i0 + i1..........	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 ]
$r4 = new java.util.ArrayList...........	[entry: i1 i0 r0 ]	[exit: i1 i0 r0 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>()>()	[entry: i1 i0 r0 $r4 ]	[exit: i1 i0 r0 $r4 ]
r13 = $r4...............................	[entry: i1 i0 r0 $r4 ]	[exit: i1 r13 i0 r0 ]
$r5 = new Others.SkylineProblem$Skyline.	[entry: i1 r13 i0 r0 ]	[exit: i1 r13 $r5 i0 r0 ]
$r6 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $r5 i0 r0 ]	[exit: i1 r13 $r5 r0 $r6 i0 ]
$r7 = $r6[i0]...........................	[entry: i1 r13 $r5 r0 $r6 i0 ]	[exit: i1 r13 $r5 i0 r0 $r7 ]
$i5 = $r7.<Others.SkylineProblem$Building: int left>	[entry: i1 r13 $r5 i0 r0 $r7 ]	[exit: i1 r13 $i5 $r5 i0 r0 ]
$r8 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $i5 $r5 i0 r0 ]	[exit: i1 r13 r0 $i5 $r5 $r8 i0 ]
$r9 = $r8[i0]...........................	[entry: i1 r13 r0 $i5 $r5 $r8 i0 ]	[exit: i1 r13 r0 $i5 $r5 $r9 ]
$i4 = $r9.<Others.SkylineProblem$Building: int height>	[entry: i1 r13 r0 $i5 $r5 $r9 ]	[exit: i1 r13 r0 $i5 $i4 $r5 ]
specialinvoke $r5.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i5, $i4)	[entry: i1 r13 r0 $i5 $i4 $r5 ]	[exit: i1 r0 $r5 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r5)	[entry: i1 r0 $r5 r13 ]	[exit: r13 i1 r0 ]
$r10 = new Others.SkylineProblem$Skyline	[entry: r13 i1 r0 ]	[exit: r13 $r10 i1 r0 ]
$r11 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: r13 $r10 i1 r0 ]	[exit: r13 r0 $r10 $r11 i1 ]
$r12 = $r11[i1].........................	[entry: r13 r0 $r10 $r11 i1 ]	[exit: r13 r0 $r10 $r12 ]
$i6 = $r12.<Others.SkylineProblem$Building: int right>	[entry: r13 r0 $r10 $r12 ]	[exit: r13 r0 $i6 $r10 ]
specialinvoke $r10.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i6, 0)	[entry: r13 r0 $i6 $r10 ]	[exit: $r10 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r10)	[entry: $r10 r13 ]	[exit: r13 ]
return r13..............................	[entry: r13 ]	[exit: ]
$i2 = i0 + i1...........................	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 $i2 ]
i7 = $i2 / 2............................	[entry: i1 i0 r0 $i2 ]	[exit: i1 i0 i7 r0 ]
r1 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(i0, i7)	[entry: i1 i0 i7 r0 ]	[exit: r1 i1 r0 i7 ]
$i3 = i7 + 1............................	[entry: r1 i1 r0 i7 ]	[exit: r1 $i3 i1 r0 ]
r2 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>($i3, i1)	[entry: r1 $i3 i1 r0 ]	[exit: r1 r2 r0 ]
$r3 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList mergeSkyline(java.util.ArrayList,java.util.ArrayList)>(r1, r2)	[entry: r1 r2 r0 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: mergeSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r18 := @this: Others.SkylineProblem.....	[entry: ]	[exit: r18 ]
r2 := @parameter0: java.util.ArrayList..	[entry: r18 ]	[exit: r18 r2 ]
r3 := @parameter1: java.util.ArrayList..	[entry: r18 r2 ]	[exit: r3 r18 r2 ]
i2 = 0..................................	[entry: r3 r18 r2 ]	[exit: r3 r18 i2 r2 ]
i3 = 0..................................	[entry: r3 r18 i2 r2 ]	[exit: r3 r18 i3 i2 r2 ]
$r0 = new java.util.ArrayList...........	[entry: r3 r18 i3 i2 r2 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
specialinvoke $r0.<java.util.ArrayList: void <init>()>()	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
r1 = $r0................................	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r1 r3 r18 i3 i2 r2 ]
i4 = 0..................................	[entry: r1 r3 r18 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z8 ]
if $z8 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z8 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$z3 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r2 r18 i4 i3 i2 r3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z3 ]
if $z3 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 i2 r3 r2 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r8 ]
$r9 = (Others.SkylineProblem$Skyline) $r8	[entry: r1 r18 i4 i3 r2 i2 r3 $r8 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r9 ]
$i0 = $r9.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r18 i4 i3 r2 i2 r3 $r9 ]	[exit: r1 r18 i4 i3 r2 i2 $i0 r3 ]
$r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 r2 i2 $i0 r3 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]
$r11 = (Others.SkylineProblem$Skyline) $r10	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]
$i1 = $r11.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]
if $i0 >= $i1 goto $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]	[exit: r1 r3 r18 i4 i3 r2 i2 ]
$r21 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 ]	[exit: r1 r3 r18 i4 i3 r2 $r21 ]
$r22 = (Others.SkylineProblem$Skyline) $r21	[entry: r1 r3 r18 i4 i3 r2 $r21 ]	[exit: r1 r3 r18 i4 i3 r2 $r22 ]
i5 = $r22.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 $r22 ]	[exit: r1 r3 r18 i5 i4 i3 r2 ]
$r23 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r23 ]
$r24 = (Others.SkylineProblem$Skyline) $r23	[entry: r1 r3 r18 i5 i4 r2 i3 $r23 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r24 ]
i2 = $r24.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r3 r18 i5 i4 r2 i3 $r24 ]	[exit: r1 r3 r18 i5 i4 r2 i2 i3 ]
if i2 >= i3 goto i4 = i2................	[entry: r1 r3 r18 i5 i4 r2 i2 i3 ]	[exit: r1 r3 r18 i2 i5 i4 i3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r18 i2 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i2 r2 i5 i4 i3 ]
if i4 == i3 goto (branch)...............	[entry: r1 r3 r18 i2 r2 i5 i4 i3 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i5 ]
$r28 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i5 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]
specialinvoke $r28.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i3)	[entry: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]	[exit: r3 r18 i4 i3 i2 r2 $r28 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r28)	[entry: r3 r18 i4 i3 i2 r2 $r28 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i2.................................	[entry: r3 i3 r1 r18 i5 r2 i2 ]	[exit: r3 i4 i3 r1 r18 i5 i2 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r3 i4 i3 r1 r18 i5 i2 r2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 ]
$r26 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i5 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]
specialinvoke $r26.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i2)	[entry: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]	[exit: r3 r18 i4 i3 i2 r2 $r26 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r26)	[entry: r3 r18 i4 i3 i2 r2 $r26 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i4 i2 r3 ]	[exit: r1 r2 r18 i4 i2 r3 $r12 ]
$r13 = (Others.SkylineProblem$Skyline) $r12	[entry: r1 r2 r18 i4 i2 r3 $r12 ]	[exit: r1 r2 r18 i4 i2 r3 $r13 ]
i6 = $r13.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r2 r18 i4 i2 r3 $r13 ]	[exit: r1 r2 r18 i6 i4 i2 r3 ]
$r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i6 i4 i2 r3 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r14 ]
$r15 = (Others.SkylineProblem$Skyline) $r14	[entry: r1 r2 r18 i6 i4 r3 i2 $r14 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r15 ]
i3 = $r15.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r2 r18 i6 i4 r3 i2 $r15 ]	[exit: r1 r2 r18 i6 i4 r3 i3 i2 ]
if i3 >= i2 goto i4 = i3................	[entry: r1 r2 r18 i6 i4 r3 i3 i2 ]	[exit: r1 r18 i3 r2 i6 i4 i2 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r18 i3 r2 i6 i4 i2 r3 ]	[exit: r1 r3 r18 i3 r2 i6 i4 i2 ]
if i4 == i2 goto (branch)...............	[entry: r1 r3 r18 i3 r2 i6 i4 i2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i6 ]
$r20 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i6 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]
specialinvoke $r20.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i2)	[entry: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]	[exit: r3 r18 i4 i3 i2 r2 $r20 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r20)	[entry: r3 r18 i4 i3 i2 r2 $r20 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i3.................................	[entry: i2 r2 r1 r18 i6 r3 i3 ]	[exit: i4 i2 r2 r1 r18 i6 i3 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: i4 i2 r2 r1 r18 i6 i3 r3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 ]
$r17 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i6 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]
specialinvoke $r17.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i3)	[entry: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]	[exit: r3 r18 i4 i3 i2 r2 $r17 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r17)	[entry: r3 r18 i4 i3 i2 r2 $r17 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 $z9 ]
if $z9 != 0 goto $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 $z9 ]	[exit: r1 r3 r2 ]
$r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r3 r1 r2 ]	[exit: r3 r2 $r6 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6)	[entry: r3 r2 $r6 r1 ]	[exit: r1 r3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
goto [?= $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
$z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 ]	[exit: r1 r3 $z0 ]
if $z0 != 0 goto return r1..............	[entry: r1 r3 $z0 ]	[exit: r1 r3 ]
$r4 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 ]	[exit: r3 $r4 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)	[entry: r3 $r4 r1 ]	[exit: r1 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 ]	[exit: r1 r3 ]
goto [?= $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 ]	[exit: r1 r3 ]
return r1...............................	[entry: r1 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.SkylineProblem.........	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.SkylineProblem: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<Others.SkylineProblem: void run()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SJF, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.Schedule...............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.Schedule: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<Others.Schedule: void startScheduling()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<Others.Schedule: void solve()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.TwoPointers, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[6].................	[entry: ]	[exit: $r0 ]
$r0[0] = 10.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 20.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 35.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 50.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 75.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 80.............................	[entry: $r0 ]	[exit: $r0 ]
r6 = $r0................................	[entry: $r0 ]	[exit: r6 ]
b0 = 70.................................	[entry: r6 ]	[exit: r6 b0 ]
$z0 = <Others.TwoPointers: boolean $assertionsDisabled>	[entry: r6 b0 ]	[exit: r6 b0 $z0 ]
if $z0 != 0 goto $r1 = newarray (int)[7]	[entry: r6 b0 $z0 ]	[exit: r6 b0 ]
$z5 = staticinvoke <Others.TwoPointers: boolean isPairedSum(int[],int)>(r6, b0)	[entry: r6 b0 ]	[exit: $z5 ]
if $z5 != 0 goto $r1 = newarray (int)[7]	[entry: $z5 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$r1 = newarray (int)[7].................	[entry: ]	[exit: $r1 ]
$r1[0] = 1..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[1] = 2..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[2] = 3..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[3] = 4..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[4] = 5..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[5] = 6..............................	[entry: $r1 ]	[exit: $r1 ]
$r1[6] = 7..............................	[entry: $r1 ]	[exit: $r1 ]
r7 = $r1................................	[entry: $r1 ]	[exit: r7 ]
b1 = 13.................................	[entry: r7 ]	[exit: r7 b1 ]
$z1 = <Others.TwoPointers: boolean $assertionsDisabled>	[entry: r7 b1 ]	[exit: r7 b1 $z1 ]
if $z1 != 0 goto b2 = 14................	[entry: r7 b1 $z1 ]	[exit: r7 b1 ]
$z4 = staticinvoke <Others.TwoPointers: boolean isPairedSum(int[],int)>(r7, b1)	[entry: r7 b1 ]	[exit: r7 $z4 ]
if $z4 != 0 goto b2 = 14................	[entry: r7 $z4 ]	[exit: r7 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
b2 = 14.................................	[entry: r7 ]	[exit: r7 b2 ]
$z2 = <Others.TwoPointers: boolean $assertionsDisabled>	[entry: r7 b2 ]	[exit: r7 b2 $z2 ]
if $z2 != 0 goto return.................	[entry: r7 b2 $z2 ]	[exit: r7 b2 ]
$z3 = staticinvoke <Others.TwoPointers: boolean isPairedSum(int[],int)>(r7, b2)	[entry: r7 b2 ]	[exit: $z3 ]
if $z3 == 0 goto return.................	[entry: $z3 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: run, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: Others.SkylineProblem......	[entry: ]	[exit: r3 ]
$r0 = new java.util.Scanner.............	[entry: r3 ]	[exit: r3 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: r3 $r0 ]	[exit: r3 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: r3 $r1 $r0 ]	[exit: r3 $r0 ]
r2 = $r0................................	[entry: r3 $r0 ]	[exit: r3 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 r2 ]	[exit: r2 r3 i0 ]
$r4 = newarray (Others.SkylineProblem$Building)[i0]	[entry: r2 r3 i0 ]	[exit: r2 i0 r3 $r4 ]
r3.<Others.SkylineProblem: Others.SkylineProblem$Building[] building> = $r4	[entry: r2 i0 r3 $r4 ]	[exit: r2 r3 i0 ]
i5 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i5 i0 ]
if i5 >= i0 goto $i1 = i0 - 1...........	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i0 i5 ]
r6 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: i0 i5 r3 r2 ]	[exit: r2 i0 i5 r3 r6 ]
r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>(",")	[entry: r2 i0 i5 r3 r6 ]	[exit: r2 i0 i5 r3 r7 ]
$r8 = r7[0].............................	[entry: r2 i0 i5 r3 r7 ]	[exit: r2 i0 i5 r3 r7 $r8 ]
$i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r8)	[entry: r2 i0 i5 r3 r7 $r8 ]	[exit: r2 i0 i5 $i2 r3 r7 ]
$r9 = r7[1].............................	[entry: r2 i0 i5 $i2 r3 r7 ]	[exit: r2 i0 i5 $i2 r3 r7 $r9 ]
$i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r9)	[entry: r2 i0 i5 $i2 r3 r7 $r9 ]	[exit: r2 i0 i5 $i2 $i3 r3 r7 ]
$r10 = r7[2]............................	[entry: r2 i0 i5 $i2 $i3 r3 r7 ]	[exit: r2 i0 i5 $i2 $i3 r3 $r10 ]
$i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r10)	[entry: r2 i0 i5 $i2 $i3 r3 $r10 ]	[exit: r2 i0 i5 $i2 $i3 $i4 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void add(int,int,int)>($i2, $i3, $i4)	[entry: r2 i0 i5 $i2 $i3 $i4 r3 ]	[exit: r2 r3 i0 i5 ]
i5 = i5 + 1.............................	[entry: r2 r3 i0 i5 ]	[exit: r2 r3 i5 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i5 i0 ]	[exit: r2 r3 i5 i0 ]
$i1 = i0 - 1............................	[entry: r2 r3 i0 ]	[exit: r2 $i1 r3 ]
$r5 = virtualinvoke r3.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(0, $i1)	[entry: r2 $i1 r3 ]	[exit: r2 $r5 r3 ]
virtualinvoke r3.<Others.SkylineProblem: void print(java.util.ArrayList)>($r5)	[entry: r2 $r5 r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: add, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
i3 := @parameter1: int..................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
i4 := @parameter2: int..................	[entry: i2 i3 r0 ]	[exit: i2 i3 i4 r0 ]
$r1 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 ]
$i0 = r0.<Others.SkylineProblem: int count>	[entry: $r1 i2 i3 i4 r0 ]	[exit: $r1 i2 i3 i4 r0 $i0 ]
$i1 = $i0 + 1...........................	[entry: $r1 i2 i3 i4 r0 $i0 ]	[exit: $r1 $i0 i2 i3 i4 r0 $i1 ]
r0.<Others.SkylineProblem: int count> = $i1	[entry: $r1 $i0 i2 i3 i4 r0 $i1 ]	[exit: $r1 $i0 r0 i2 i3 i4 ]
$r2 = new Others.SkylineProblem$Building	[entry: $r1 $i0 r0 i2 i3 i4 ]	[exit: $r1 $i0 r0 i2 i3 i4 $r2 ]
specialinvoke $r2.<Others.SkylineProblem$Building: void <init>(Others.SkylineProblem,int,int,int)>(r0, i2, i3, i4)	[entry: $r1 $i0 r0 i2 i3 i4 $r2 ]	[exit: $r1 $i0 $r2 ]
$r1[$i0] = $r2..........................	[entry: $r1 $i0 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: print, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @this: Others.SkylineProblem.....	[entry: ]	[exit: ]
r0 := @parameter0: java.util.ArrayList..	[entry: ]	[exit: r0 ]
r1 = virtualinvoke r0.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r0 ]	[exit: r1 ]
$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 == 0 goto return.................	[entry: r1 $z0 ]	[exit: r1 ]
$r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()	[entry: r1 ]	[exit: r1 $r2 ]
r3 = (Others.SkylineProblem$Skyline) $r2	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r1 r3 ]	[exit: r1 $r5 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: r1 $r5 r3 ]	[exit: r1 $r5 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r1 $r5 r3 $r4 ]	[exit: r1 $r5 $r4 r3 ]
$i0 = r3.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 $r5 $r4 r3 ]	[exit: r1 $r5 r3 $i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r5 r3 $i0 $r4 ]	[exit: r1 $r5 r3 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")	[entry: r1 $r5 r3 $r6 ]	[exit: r1 $r5 $r7 r3 ]
$i1 = r3.<Others.SkylineProblem$Skyline: int height>	[entry: r1 $r5 $r7 r3 ]	[exit: r1 $r5 $i1 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r1 $r5 $i1 $r7 ]	[exit: r1 $r5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r5 $r8 ]	[exit: r1 $r9 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void print(java.lang.String)>($r9)	[entry: r1 $r9 $r5 ]	[exit: r1 ]
$z1 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 == 0 goto (branch)...............	[entry: r1 $z1 ]	[exit: r1 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>(",")	[entry: r1 $r10 ]	[exit: r1 ]
goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]	[entry: r1 ]	[exit: r1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: findSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.SkylineProblem......	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: r0 i0 ]
i1 := @parameter1: int..................	[entry: r0 i0 ]	[exit: r0 i0 i1 ]
if i0 != i1 goto $i2 = i0 + i1..........	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 ]
$r4 = new java.util.ArrayList...........	[entry: i1 i0 r0 ]	[exit: i1 i0 r0 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>()>()	[entry: i1 i0 r0 $r4 ]	[exit: i1 i0 r0 $r4 ]
r13 = $r4...............................	[entry: i1 i0 r0 $r4 ]	[exit: i1 r13 i0 r0 ]
$r5 = new Others.SkylineProblem$Skyline.	[entry: i1 r13 i0 r0 ]	[exit: i1 r13 $r5 i0 r0 ]
$r6 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $r5 i0 r0 ]	[exit: i1 r13 $r5 r0 $r6 i0 ]
$r7 = $r6[i0]...........................	[entry: i1 r13 $r5 r0 $r6 i0 ]	[exit: i1 r13 $r5 i0 r0 $r7 ]
$i5 = $r7.<Others.SkylineProblem$Building: int left>	[entry: i1 r13 $r5 i0 r0 $r7 ]	[exit: i1 r13 $i5 $r5 i0 r0 ]
$r8 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: i1 r13 $i5 $r5 i0 r0 ]	[exit: i1 r13 r0 $i5 $r5 $r8 i0 ]
$r9 = $r8[i0]...........................	[entry: i1 r13 r0 $i5 $r5 $r8 i0 ]	[exit: i1 r13 r0 $i5 $r5 $r9 ]
$i4 = $r9.<Others.SkylineProblem$Building: int height>	[entry: i1 r13 r0 $i5 $r5 $r9 ]	[exit: i1 r13 r0 $i5 $i4 $r5 ]
specialinvoke $r5.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i5, $i4)	[entry: i1 r13 r0 $i5 $i4 $r5 ]	[exit: i1 r0 $r5 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r5)	[entry: i1 r0 $r5 r13 ]	[exit: r13 i1 r0 ]
$r10 = new Others.SkylineProblem$Skyline	[entry: r13 i1 r0 ]	[exit: r13 $r10 i1 r0 ]
$r11 = r0.<Others.SkylineProblem: Others.SkylineProblem$Building[] building>	[entry: r13 $r10 i1 r0 ]	[exit: r13 r0 $r10 $r11 i1 ]
$r12 = $r11[i1].........................	[entry: r13 r0 $r10 $r11 i1 ]	[exit: r13 r0 $r10 $r12 ]
$i6 = $r12.<Others.SkylineProblem$Building: int right>	[entry: r13 r0 $r10 $r12 ]	[exit: r13 r0 $i6 $r10 ]
specialinvoke $r10.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r0, $i6, 0)	[entry: r13 r0 $i6 $r10 ]	[exit: $r10 r13 ]
virtualinvoke r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r10)	[entry: $r10 r13 ]	[exit: r13 ]
return r13..............................	[entry: r13 ]	[exit: ]
$i2 = i0 + i1...........................	[entry: r0 i0 i1 ]	[exit: i1 i0 r0 $i2 ]
i7 = $i2 / 2............................	[entry: i1 i0 r0 $i2 ]	[exit: i1 i0 i7 r0 ]
r1 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>(i0, i7)	[entry: i1 i0 i7 r0 ]	[exit: r1 i1 r0 i7 ]
$i3 = i7 + 1............................	[entry: r1 i1 r0 i7 ]	[exit: r1 $i3 i1 r0 ]
r2 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList findSkyline(int,int)>($i3, i1)	[entry: r1 $i3 i1 r0 ]	[exit: r1 r2 r0 ]
$r3 = virtualinvoke r0.<Others.SkylineProblem: java.util.ArrayList mergeSkyline(java.util.ArrayList,java.util.ArrayList)>(r1, r2)	[entry: r1 r2 r0 ]	[exit: $r3 ]
return $r3..............................	[entry: $r3 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: mergeSkyline, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r18 := @this: Others.SkylineProblem.....	[entry: ]	[exit: r18 ]
r2 := @parameter0: java.util.ArrayList..	[entry: r18 ]	[exit: r18 r2 ]
r3 := @parameter1: java.util.ArrayList..	[entry: r18 r2 ]	[exit: r3 r18 r2 ]
i2 = 0..................................	[entry: r3 r18 r2 ]	[exit: r3 r18 i2 r2 ]
i3 = 0..................................	[entry: r3 r18 i2 r2 ]	[exit: r3 r18 i3 i2 r2 ]
$r0 = new java.util.ArrayList...........	[entry: r3 r18 i3 i2 r2 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
specialinvoke $r0.<java.util.ArrayList: void <init>()>()	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r3 r18 i3 i2 r2 $r0 ]
r1 = $r0................................	[entry: r3 r18 i3 i2 r2 $r0 ]	[exit: r1 r3 r18 i3 i2 r2 ]
i4 = 0..................................	[entry: r1 r3 r18 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z8 ]
if $z8 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z8 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$z3 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r2 r18 i4 i3 i2 r3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 $z3 ]
if $z3 != 0 goto $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 r18 i4 i3 i2 $z3 ]	[exit: r1 r3 r2 r18 i4 i3 i2 ]
$r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 i2 r3 r2 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r8 ]
$r9 = (Others.SkylineProblem$Skyline) $r8	[entry: r1 r18 i4 i3 r2 i2 r3 $r8 ]	[exit: r1 r18 i4 i3 r2 i2 r3 $r9 ]
$i0 = $r9.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r18 i4 i3 r2 i2 r3 $r9 ]	[exit: r1 r18 i4 i3 r2 i2 $i0 r3 ]
$r10 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r18 i4 i3 r2 i2 $i0 r3 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]
$r11 = (Others.SkylineProblem$Skyline) $r10	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r10 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]
$i1 = $r11.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $r11 ]	[exit: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]
if $i0 >= $i1 goto $r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 i2 $i0 $i1 ]	[exit: r1 r3 r18 i4 i3 r2 i2 ]
$r21 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i4 i3 r2 ]	[exit: r1 r3 r18 i4 i3 r2 $r21 ]
$r22 = (Others.SkylineProblem$Skyline) $r21	[entry: r1 r3 r18 i4 i3 r2 $r21 ]	[exit: r1 r3 r18 i4 i3 r2 $r22 ]
i5 = $r22.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r3 r18 i4 i3 r2 $r22 ]	[exit: r1 r3 r18 i5 i4 i3 r2 ]
$r23 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 r18 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r23 ]
$r24 = (Others.SkylineProblem$Skyline) $r23	[entry: r1 r3 r18 i5 i4 r2 i3 $r23 ]	[exit: r1 r3 r18 i5 i4 r2 i3 $r24 ]
i2 = $r24.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r3 r18 i5 i4 r2 i3 $r24 ]	[exit: r1 r3 r18 i5 i4 r2 i2 i3 ]
if i2 >= i3 goto i4 = i2................	[entry: r1 r3 r18 i5 i4 r2 i2 i3 ]	[exit: r1 r3 r18 i2 i5 i4 i3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r18 i2 i5 i4 i3 r2 ]	[exit: r1 r3 r18 i2 r2 i5 i4 i3 ]
if i4 == i3 goto (branch)...............	[entry: r1 r3 r18 i2 r2 i5 i4 i3 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i5 ]
$r28 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i5 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]
specialinvoke $r28.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i3)	[entry: r3 i4 i2 r2 r1 r18 i5 i3 $r28 ]	[exit: r3 r18 i4 i3 i2 r2 $r28 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r28)	[entry: r3 r18 i4 i3 i2 r2 $r28 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i2.................................	[entry: r3 i3 r1 r18 i5 r2 i2 ]	[exit: r3 i4 i3 r1 r18 i5 i2 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r3 i4 i3 r1 r18 i5 i2 r2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 ]
$r26 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i5 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]
specialinvoke $r26.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i5, i2)	[entry: r3 i4 i3 r2 r1 r18 i5 i2 $r26 ]	[exit: r3 r18 i4 i3 i2 r2 $r26 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r26)	[entry: r3 r18 i4 i3 i2 r2 $r26 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$r12 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i4 i2 r3 ]	[exit: r1 r2 r18 i4 i2 r3 $r12 ]
$r13 = (Others.SkylineProblem$Skyline) $r12	[entry: r1 r2 r18 i4 i2 r3 $r12 ]	[exit: r1 r2 r18 i4 i2 r3 $r13 ]
i6 = $r13.<Others.SkylineProblem$Skyline: int coordinates>	[entry: r1 r2 r18 i4 i2 r3 $r13 ]	[exit: r1 r2 r18 i6 i4 i2 r3 ]
$r14 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r2 r18 i6 i4 i2 r3 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r14 ]
$r15 = (Others.SkylineProblem$Skyline) $r14	[entry: r1 r2 r18 i6 i4 r3 i2 $r14 ]	[exit: r1 r2 r18 i6 i4 r3 i2 $r15 ]
i3 = $r15.<Others.SkylineProblem$Skyline: int height>	[entry: r1 r2 r18 i6 i4 r3 i2 $r15 ]	[exit: r1 r2 r18 i6 i4 r3 i3 i2 ]
if i3 >= i2 goto i4 = i3................	[entry: r1 r2 r18 i6 i4 r3 i3 i2 ]	[exit: r1 r18 i3 r2 i6 i4 i2 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r18 i3 r2 i6 i4 i2 r3 ]	[exit: r1 r3 r18 i3 r2 i6 i4 i2 ]
if i4 == i2 goto (branch)...............	[entry: r1 r3 r18 i3 r2 i6 i4 i2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 i6 ]
$r20 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i3 r2 r1 r18 i6 i2 ]	[exit: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]
specialinvoke $r20.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i2)	[entry: r3 i4 i3 r2 r1 r18 i6 i2 $r20 ]	[exit: r3 r18 i4 i3 i2 r2 $r20 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r20)	[entry: r3 r18 i4 i3 i2 r2 $r20 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= (branch)]......................	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
i4 = i3.................................	[entry: i2 r2 r1 r18 i6 r3 i3 ]	[exit: i4 i2 r2 r1 r18 i6 i3 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: i4 i2 r2 r1 r18 i6 i3 r3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 ]
$r17 = new Others.SkylineProblem$Skyline	[entry: r3 i4 i2 r2 r1 r18 i6 i3 ]	[exit: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]
specialinvoke $r17.<Others.SkylineProblem$Skyline: void <init>(Others.SkylineProblem,int,int)>(r18, i6, i3)	[entry: r3 i4 i2 r2 r1 r18 i6 i3 $r17 ]	[exit: r3 r18 i4 i3 i2 r2 $r17 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r17)	[entry: r3 r18 i4 i3 i2 r2 $r17 r1 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
goto [?= $z8 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r18 i4 i3 i2 r2 ]	[exit: r1 r3 r18 i4 i3 i2 r2 ]
$z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 $z9 ]
if $z9 != 0 goto $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 r2 $z9 ]	[exit: r1 r3 r2 ]
$r6 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r3 r1 r2 ]	[exit: r3 r2 $r6 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r6)	[entry: r3 r2 $r6 r1 ]	[exit: r1 r3 r2 ]
virtualinvoke r2.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
goto [?= $z9 = virtualinvoke r2.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 r2 ]	[exit: r1 r3 r2 ]
$z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()	[entry: r1 r3 ]	[exit: r1 r3 $z0 ]
if $z0 != 0 goto return r1..............	[entry: r1 r3 $z0 ]	[exit: r1 r3 ]
$r4 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(0)	[entry: r1 r3 ]	[exit: r3 $r4 r1 ]
virtualinvoke r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r4)	[entry: r3 $r4 r1 ]	[exit: r1 r3 ]
virtualinvoke r3.<java.util.ArrayList: java.lang.Object remove(int)>(0)	[entry: r1 r3 ]	[exit: r1 r3 ]
goto [?= $z0 = virtualinvoke r3.<java.util.ArrayList: boolean isEmpty()>()]	[entry: r1 r3 ]	[exit: r1 r3 ]
return r1...............................	[entry: r1 ]	[exit: ]
********************
Class Name: Others.SkylineProblem, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.SkylineProblem.........	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Others.SkylineProblem: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<Others.SkylineProblem: void run()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.LinearCongruentialGenerator, Method Name: nextNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Others.LinearCongruentialGenerator	[entry: ]	[exit: r0 ]
$d1 = r0.<Others.LinearCongruentialGenerator: double a>	[entry: r0 ]	[exit: $d1 r0 ]
$d0 = r0.<Others.LinearCongruentialGenerator: double previousValue>	[entry: $d1 r0 ]	[exit: r0 $d1 $d0 ]
$d3 = $d1 * $d0.........................	[entry: r0 $d1 $d0 ]	[exit: $d3 r0 ]
$d2 = r0.<Others.LinearCongruentialGenerator: double c>	[entry: $d3 r0 ]	[exit: r0 $d3 $d2 ]
$d5 = $d3 + $d2.........................	[entry: r0 $d3 $d2 ]	[exit: $d5 r0 ]
$d4 = r0.<Others.LinearCongruentialGenerator: double m>	[entry: $d5 r0 ]	[exit: r0 $d5 $d4 ]
$d6 = $d5 % $d4.........................	[entry: r0 $d5 $d4 ]	[exit: r0 $d6 ]
r0.<Others.LinearCongruentialGenerator: double previousValue> = $d6	[entry: r0 $d6 ]	[exit: r0 ]
$d7 = r0.<Others.LinearCongruentialGenerator: double previousValue>	[entry: r0 ]	[exit: $d7 ]
return $d7..............................	[entry: $d7 ]	[exit: ]
********************
Class Name: Others.LinearCongruentialGenerator, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.LinearCongruentialGenerator	[entry: ]	[exit: $r0 ]
$d0 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 32.0)	[entry: $r0 ]	[exit: $d0 $r0 ]
specialinvoke $r0.<Others.LinearCongruentialGenerator: void <init>(double,double,double)>(1664525.0, 1.013904223E9, $d0)	[entry: $d0 $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i0 = 0..................................	[entry: r1 ]	[exit: r1 i0 ]
if i0 >= 512 goto return................	[entry: r1 i0 ]	[exit: i0 r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r1 ]	[exit: i0 $r2 r1 ]
$d1 = virtualinvoke r1.<Others.LinearCongruentialGenerator: double nextNumber()>()	[entry: i0 $r2 r1 ]	[exit: r1 i0 $d1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(double)>($d1)	[entry: r1 i0 $d1 $r2 ]	[exit: r1 i0 ]
i0 = i0 + 1.............................	[entry: r1 i0 ]	[exit: r1 i0 ]
goto [?= (branch)]......................	[entry: r1 i0 ]	[exit: r1 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.ThreeSum, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r13 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
r3 = newarray (int)[i0].................	[entry: r2 i0 ]	[exit: r3 r2 i0 ]
i15 = 0.................................	[entry: r3 r2 i0 ]	[exit: r3 r2 i15 i0 ]
if i15 >= i0 goto $r4 = <java.lang.System: java.io.PrintStream out>	[entry: r3 r2 i15 i0 ]	[exit: i0 r3 r2 i15 ]
$i14 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r3 i15 r2 ]	[exit: r2 i0 r3 i15 $i14 ]
r3[i15] = $i14..........................	[entry: r2 i0 r3 i15 $i14 ]	[exit: r3 r2 i0 i15 ]
i15 = i15 + 1...........................	[entry: r3 r2 i0 i15 ]	[exit: r3 r2 i15 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 i15 i0 ]	[exit: r3 r2 i15 i0 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r3 r2 ]	[exit: i0 r3 r2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Target")	[entry: i0 r3 r2 $r4 ]	[exit: i0 r3 r2 ]
i16 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r3 r2 ]	[exit: r2 i16 i0 r3 ]
staticinvoke <java.util.Arrays: void sort(int[])>(r3)	[entry: r2 i16 i0 r3 ]	[exit: r2 i16 r3 i0 ]
i17 = 0.................................	[entry: r2 i16 r3 i0 ]	[exit: r2 i16 r3 i17 i0 ]
if i17 >= i0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 i16 r3 i17 i0 ]	[exit: r2 i16 r3 i0 i17 ]
i18 = i17 + 1...........................	[entry: r2 i16 r3 i0 i17 ]	[exit: r2 i17 i16 r3 i18 i0 ]
i19 = i0 - 1............................	[entry: r2 i17 i16 r3 i18 i0 ]	[exit: r2 i0 i17 i16 r3 i18 i19 ]
if i18 >= i19 goto i17 = i17 + 1........	[entry: r2 i0 i17 i16 r3 i18 i19 ]	[exit: r2 i16 r3 i0 i17 i19 i18 ]
$i2 = r3[i17]...........................	[entry: r2 i0 i16 i19 i18 r3 i17 ]	[exit: r2 i0 i17 i16 i19 $i2 r3 i18 ]
$i1 = r3[i18]...........................	[entry: r2 i0 i17 i16 i19 $i2 r3 i18 ]	[exit: r2 i0 i18 i17 i16 r3 i19 $i2 $i1 ]
$i4 = $i2 + $i1.........................	[entry: r2 i0 i18 i17 i16 r3 i19 $i2 $i1 ]	[exit: r2 i0 i18 i17 i16 $i4 r3 i19 ]
$i3 = r3[i19]...........................	[entry: r2 i0 i18 i17 i16 $i4 r3 i19 ]	[exit: r2 i0 i19 i18 r3 i17 i16 $i4 $i3 ]
$i5 = $i4 + $i3.........................	[entry: r2 i0 i19 i18 r3 i17 i16 $i4 $i3 ]	[exit: r2 i0 i19 i18 r3 i17 $i5 i16 ]
if $i5 != i16 goto $i7 = r3[i17]........	[entry: r2 i0 i19 i18 r3 i17 $i5 i16 ]	[exit: r2 i0 i16 i19 i18 r3 i17 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i16 i0 i19 i18 r3 i17 ]	[exit: r2 i16 i0 $r6 i19 i18 r3 i17 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 i16 i0 $r6 i19 i18 r3 i17 ]	[exit: r2 i16 i0 $r6 i19 i18 r3 i17 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 i16 i0 $r6 i19 i18 r3 i17 $r5 ]	[exit: r2 i16 i0 $r6 i19 i18 $r5 r3 i17 ]
$i11 = r3[i17]..........................	[entry: r2 i16 i0 $r6 i19 i18 $r5 r3 i17 ]	[exit: r2 i16 i0 i17 $r6 i19 r3 i18 $i11 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i11)	[entry: r2 i16 i0 i17 $r6 i19 r3 i18 $i11 $r5 ]	[exit: r2 i16 i0 i17 $r6 i19 r3 i18 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 i16 i0 i17 $r6 i19 r3 i18 $r7 ]	[exit: r2 i16 i0 i17 $r6 i19 $r8 r3 i18 ]
$i12 = r3[i18]..........................	[entry: r2 i16 i0 i17 $r6 i19 $r8 r3 i18 ]	[exit: r2 i16 i0 i17 $r6 r3 i19 $i12 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i12)	[entry: r2 i16 i0 i17 $r6 r3 i19 $i12 $r8 ]	[exit: r2 i16 i0 i17 $r6 r3 i19 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 i16 i0 i17 $r6 r3 i19 $r9 ]	[exit: r2 i16 i0 i17 $r6 $r10 r3 i19 ]
$i13 = r3[i19]..........................	[entry: r2 i16 i0 i17 $r6 $r10 r3 i19 ]	[exit: r2 i16 r3 i0 i17 $r6 $i13 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i13)	[entry: r2 i16 r3 i0 i17 $r6 $i13 $r10 ]	[exit: r2 i16 r3 i0 i17 $r6 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 i16 r3 i0 i17 $r6 $r11 ]	[exit: r2 i16 r3 i0 i17 $r12 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r12)	[entry: r2 i16 r3 i0 i17 $r12 $r6 ]	[exit: r2 i16 r3 i0 i17 ]
goto [?= i17 = i17 + 1].................	[entry: r2 i16 r3 i0 i17 ]	[exit: r2 i16 r3 i0 i17 ]
$i7 = r3[i17]...........................	[entry: r2 i0 i16 i19 i18 r3 i17 ]	[exit: r2 i0 i17 i16 i19 $i7 r3 i18 ]
$i6 = r3[i18]...........................	[entry: r2 i0 i17 i16 i19 $i7 r3 i18 ]	[exit: r2 i0 i17 i18 i16 r3 i19 $i7 $i6 ]
$i9 = $i7 + $i6.........................	[entry: r2 i0 i17 i18 i16 r3 i19 $i7 $i6 ]	[exit: r2 i0 i17 i18 i16 $i9 r3 i19 ]
$i8 = r3[i19]...........................	[entry: r2 i0 i17 i18 i16 $i9 r3 i19 ]	[exit: r2 i0 i17 r3 i19 i18 i16 $i9 $i8 ]
$i10 = $i9 + $i8........................	[entry: r2 i0 i17 r3 i19 i18 i16 $i9 $i8 ]	[exit: r2 i0 i17 r3 i19 i18 $i10 i16 ]
if $i10 >= i16 goto i19 = i19 + -1......	[entry: r2 i0 i17 r3 i19 i18 $i10 i16 ]	[exit: r2 i0 i17 i16 r3 i19 i18 ]
i18 = i18 + 1...........................	[entry: r2 i0 i17 i16 r3 i19 i18 ]	[exit: r2 i0 i17 i16 r3 i18 i19 ]
goto [?= (branch)]......................	[entry: r2 i0 i17 i16 r3 i18 i19 ]	[exit: r2 i0 i17 i16 r3 i18 i19 ]
i19 = i19 + -1..........................	[entry: r2 i0 i17 i16 r3 i18 i19 ]	[exit: r2 i0 i17 i16 r3 i18 i19 ]
goto [?= (branch)]......................	[entry: r2 i0 i17 i16 r3 i18 i19 ]	[exit: r2 i0 i17 i16 r3 i18 i19 ]
i17 = i17 + 1...........................	[entry: r2 i16 r3 i0 i17 ]	[exit: r2 i16 r3 i17 i0 ]
goto [?= (branch)]......................	[entry: r2 i16 r3 i17 i0 ]	[exit: r2 i16 r3 i17 i0 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.PerlinNoise, Method Name: generatePerlinNoise, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i0 i1 ]
i2 := @parameter2: int..................	[entry: i0 i1 ]	[exit: i2 i0 i1 ]
f2 := @parameter3: float................	[entry: i2 i0 i1 ]	[exit: f2 i2 i0 i1 ]
l3 := @parameter4: long.................	[entry: f2 i2 i0 i1 ]	[exit: f2 l3 i2 i0 i1 ]
r0 = newmultiarray (float)[i0][i1]......	[entry: f2 l3 i2 i0 i1 ]	[exit: f2 r0 l3 i2 i0 i1 ]
r1 = newmultiarray (float)[i0][i1]......	[entry: f2 r0 l3 i2 i0 i1 ]	[exit: r1 i1 f2 r0 i0 l3 i2 ]
r2 = newarray (float[][])[i2]...........	[entry: r1 i1 f2 r0 i0 l3 i2 ]	[exit: r1 i1 r2 f2 r0 i2 i0 l3 ]
$r3 = new java.util.Random..............	[entry: r1 i1 r2 f2 r0 i2 i0 l3 ]	[exit: r1 i1 r2 f2 r0 i2 i0 l3 $r3 ]
specialinvoke $r3.<java.util.Random: void <init>(long)>(l3)	[entry: r1 i1 r2 f2 r0 i2 i0 l3 $r3 ]	[exit: r1 i1 r2 f2 r0 i2 i0 $r3 ]
r4 = $r3................................	[entry: r1 i1 r2 f2 r0 i2 i0 $r3 ]	[exit: r1 i1 r2 f2 r0 i2 r4 i0 ]
i4 = 0..................................	[entry: r1 i1 r2 f2 r0 i2 r4 i0 ]	[exit: r1 i1 r2 f2 r0 i2 r4 i4 i0 ]
if i4 >= i0 goto i6 = 0.................	[entry: r1 i1 r2 f2 r0 i2 r4 i4 i0 ]	[exit: r1 i1 i0 r2 f2 r0 i2 i4 r4 ]
i5 = 0..................................	[entry: r1 r2 f2 r0 i2 i0 i4 r4 i1 ]	[exit: r1 r2 f2 r0 i2 i0 i4 r4 i5 i1 ]
if i5 >= i1 goto i4 = i4 + 1............	[entry: r1 r2 f2 r0 i2 i0 i4 r4 i5 i1 ]	[exit: r1 i1 r2 f2 r0 i2 r4 i0 i4 i5 ]
$r10 = r0[i4]...........................	[entry: r1 r2 f2 i2 i0 i1 i5 r4 r0 i4 ]	[exit: r1 r2 f2 r0 i2 i0 i4 i1 $r10 i5 r4 ]
$f7 = virtualinvoke r4.<java.util.Random: float nextFloat()>()	[entry: r1 r2 f2 r0 i2 i0 i4 i1 $r10 i5 r4 ]	[exit: r1 r2 f2 r0 i2 i0 i4 r4 i1 $r10 i5 $f7 ]
$r10[i5] = $f7..........................	[entry: r1 r2 f2 r0 i2 i0 i4 r4 i1 $r10 i5 $f7 ]	[exit: r1 r2 f2 r0 i2 i0 i4 r4 i1 i5 ]
i5 = i5 + 1.............................	[entry: r1 r2 f2 r0 i2 i0 i4 r4 i1 i5 ]	[exit: r1 r2 f2 r0 i2 i0 i4 r4 i5 i1 ]
goto [?= (branch)]......................	[entry: r1 r2 f2 r0 i2 i0 i4 r4 i5 i1 ]	[exit: r1 r2 f2 r0 i2 i0 i4 r4 i5 i1 ]
i4 = i4 + 1.............................	[entry: r1 i1 r2 f2 r0 i2 r4 i0 i4 ]	[exit: r1 i1 r2 f2 r0 i2 r4 i4 i0 ]
goto [?= (branch)]......................	[entry: r1 i1 r2 f2 r0 i2 r4 i4 i0 ]	[exit: r1 i1 r2 f2 r0 i2 r4 i4 i0 ]
i6 = 0..................................	[entry: r1 i1 i0 r2 f2 r0 i2 ]	[exit: r1 i1 i0 r2 f2 r0 i6 i2 ]
if i6 >= i2 goto f8 = 1.0F..............	[entry: r1 i1 i0 r2 f2 r0 i6 i2 ]	[exit: r1 i1 i0 r2 f2 i2 r0 i6 ]
$r9 = staticinvoke <Others.PerlinNoise: float[][] generatePerlinNoiseLayer(float[][],int,int,int)>(r0, i0, i1, i6)	[entry: r1 f2 i2 r2 r0 i0 i1 i6 ]	[exit: r1 i1 i0 f2 r0 i2 r2 i6 $r9 ]
r2[i6] = $r9............................	[entry: r1 i1 i0 f2 r0 i2 r2 i6 $r9 ]	[exit: r1 i1 i0 r2 f2 r0 i2 i6 ]
i6 = i6 + 1.............................	[entry: r1 i1 i0 r2 f2 r0 i2 i6 ]	[exit: r1 i1 i0 r2 f2 r0 i6 i2 ]
goto [?= (branch)]......................	[entry: r1 i1 i0 r2 f2 r0 i6 i2 ]	[exit: r1 i1 i0 r2 f2 r0 i6 i2 ]
f8 = 1.0F...............................	[entry: r1 i1 i0 r2 f2 i2 ]	[exit: r1 i1 i0 r2 f8 f2 i2 ]
f9 = 0.0F...............................	[entry: r1 i1 i0 r2 f8 f2 i2 ]	[exit: r1 f9 i1 i0 r2 f8 f2 i2 ]
i7 = i2 - 1.............................	[entry: r1 f9 i1 i0 r2 f8 f2 i2 ]	[exit: r1 f9 i1 i0 r2 f8 f2 i7 ]
if i7 < 0 goto i10 = 0..................	[entry: r1 f9 i1 i0 r2 f8 f2 i7 ]	[exit: r1 f9 i1 i0 i7 r2 f8 f2 ]
f8 = f8 * f2............................	[entry: r1 i1 i7 r2 i0 f9 f8 f2 ]	[exit: r1 i1 r2 f2 i7 i0 f9 f8 ]
f9 = f9 + f8............................	[entry: r1 i1 r2 f2 i7 i0 f9 f8 ]	[exit: r1 f9 i1 r2 f8 f2 i7 i0 ]
i8 = 0..................................	[entry: r1 f9 i1 r2 f8 f2 i7 i0 ]	[exit: r1 f9 i1 r2 f8 f2 i7 i8 i0 ]
if i8 >= i0 goto i7 = i7 + -1...........	[entry: r1 f9 i1 r2 f8 f2 i7 i8 i0 ]	[exit: r1 f9 i1 i0 r2 f8 f2 i7 i8 ]
i9 = 0..................................	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i1 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i9 i1 ]
if i9 >= i1 goto i8 = i8 + 1............	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i9 i1 ]	[exit: r1 f9 i1 r2 f8 f2 i7 i0 i8 i9 ]
$r6 = r1[i8]............................	[entry: f9 f2 i0 i1 f8 r2 i7 i9 r1 i8 ]	[exit: r1 f9 f2 i0 i1 f8 i8 r2 i7 $r6 i9 ]
$f5 = $r6[i9]...........................	[entry: r1 f9 f2 i0 i1 f8 i8 r2 i7 $r6 i9 ]	[exit: r1 f9 f2 i0 i1 $r6 $f5 f8 i9 i8 r2 i7 ]
$r7 = r2[i7]............................	[entry: r1 f9 f2 i0 i1 $r6 $f5 f8 i9 i8 r2 i7 ]	[exit: r1 f9 r2 f2 i7 i0 i1 $r6 $f5 f8 i9 $r7 i8 ]
$r8 = $r7[i8]...........................	[entry: r1 f9 r2 f2 i7 i0 i1 $r6 $f5 f8 i9 $r7 i8 ]	[exit: r1 f9 r2 f2 i7 i0 i8 i1 $r6 $f5 f8 $r8 i9 ]
$f3 = $r8[i9]...........................	[entry: r1 f9 r2 f2 i7 i0 i8 i1 $r6 $f5 f8 $r8 i9 ]	[exit: r1 f9 r2 f2 i7 i0 i8 i1 $r6 i9 $f5 $f3 f8 ]
$f4 = $f3 * f8..........................	[entry: r1 f9 r2 f2 i7 i0 i8 i1 $r6 i9 $f5 $f3 f8 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i1 $r6 i9 $f5 $f4 ]
$f6 = $f5 + $f4.........................	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i1 $r6 i9 $f5 $f4 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i1 $r6 i9 $f6 ]
$r6[i9] = $f6...........................	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i1 $r6 i9 $f6 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i1 i9 ]
i9 = i9 + 1.............................	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i1 i9 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i9 i1 ]
goto [?= (branch)]......................	[entry: r1 f9 r2 f8 f2 i7 i0 i8 i9 i1 ]	[exit: r1 f9 r2 f8 f2 i7 i0 i8 i9 i1 ]
i8 = i8 + 1.............................	[entry: r1 f9 i1 r2 f8 f2 i7 i0 i8 ]	[exit: r1 f9 i1 r2 f8 f2 i7 i8 i0 ]
goto [?= (branch)]......................	[entry: r1 f9 i1 r2 f8 f2 i7 i8 i0 ]	[exit: r1 f9 i1 r2 f8 f2 i7 i8 i0 ]
i7 = i7 + -1............................	[entry: r1 f9 i1 i0 r2 f8 f2 i7 ]	[exit: r1 f9 i1 i0 r2 f8 f2 i7 ]
goto [?= (branch)]......................	[entry: r1 f9 i1 i0 r2 f8 f2 i7 ]	[exit: r1 f9 i1 i0 r2 f8 f2 i7 ]
i10 = 0.................................	[entry: r1 f9 i1 i0 ]	[exit: r1 f9 i1 i10 i0 ]
if i10 >= i0 goto return r1.............	[entry: r1 f9 i1 i10 i0 ]	[exit: r1 i0 i10 f9 i1 ]
i11 = 0.................................	[entry: r1 i0 i10 f9 i1 ]	[exit: r1 i0 i10 f9 i11 i1 ]
if i11 >= i1 goto i10 = i10 + 1.........	[entry: r1 i0 i10 f9 i11 i1 ]	[exit: r1 f9 i1 i0 i10 i11 ]
$r5 = r1[i10]...........................	[entry: i0 i1 f9 i11 r1 i10 ]	[exit: r1 i0 i10 i1 f9 $r5 i11 ]
$f0 = $r5[i11]..........................	[entry: r1 i0 i10 i1 f9 $r5 i11 ]	[exit: r1 i0 i10 i1 $r5 i11 $f0 f9 ]
$f1 = $f0 / f9..........................	[entry: r1 i0 i10 i1 $r5 i11 $f0 f9 ]	[exit: r1 i0 i10 f9 i1 $r5 i11 $f1 ]
$r5[i11] = $f1..........................	[entry: r1 i0 i10 f9 i1 $r5 i11 $f1 ]	[exit: r1 i0 i10 f9 i1 i11 ]
i11 = i11 + 1...........................	[entry: r1 i0 i10 f9 i1 i11 ]	[exit: r1 i0 i10 f9 i11 i1 ]
goto [?= (branch)]......................	[entry: r1 i0 i10 f9 i11 i1 ]	[exit: r1 i0 i10 f9 i11 i1 ]
i10 = i10 + 1...........................	[entry: r1 f9 i1 i0 i10 ]	[exit: r1 f9 i1 i10 i0 ]
goto [?= (branch)]......................	[entry: r1 f9 i1 i10 i0 ]	[exit: r1 f9 i1 i10 i0 ]
return r1...............................	[entry: r1 ]	[exit: ]
********************
Class Name: Others.PerlinNoise, Method Name: generatePerlinNoiseLayer, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: float[][]............	[entry: ]	[exit: r1 ]
i0 := @parameter1: int..................	[entry: r1 ]	[exit: r1 i0 ]
i1 := @parameter2: int..................	[entry: r1 i0 ]	[exit: r1 i0 i1 ]
i2 := @parameter3: int..................	[entry: r1 i0 i1 ]	[exit: r1 i2 i0 i1 ]
r0 = newmultiarray (float)[i0][i1]......	[entry: r1 i2 i0 i1 ]	[exit: r0 r1 i1 i0 i2 ]
i3 = 1 << i2............................	[entry: r0 r1 i1 i0 i2 ]	[exit: r0 r1 i1 i0 i3 ]
$f0 = (float) i3........................	[entry: r0 r1 i1 i0 i3 ]	[exit: r0 r1 i1 i3 i0 $f0 ]
f1 = 1.0F / $f0.........................	[entry: r0 r1 i1 i3 i0 $f0 ]	[exit: r0 r1 i1 f1 i3 i0 ]
i14 = 0.................................	[entry: r0 r1 i1 f1 i3 i0 ]	[exit: r0 r1 i1 f1 i3 i14 i0 ]
if i14 >= i0 goto return r0.............	[entry: r0 r1 i1 f1 i3 i14 i0 ]	[exit: r0 r1 i1 f1 i0 i14 i3 ]
$i4 = i14 / i3..........................	[entry: r0 r1 i1 f1 i0 i14 i3 ]	[exit: r0 r1 i1 f1 i14 i0 $i4 i3 ]
i5 = $i4 * i3...........................	[entry: r0 r1 i1 f1 i14 i0 $i4 i3 ]	[exit: r0 r1 i1 f1 i14 i0 i5 i3 ]
$i6 = i5 + i3...........................	[entry: r0 r1 i1 f1 i14 i0 i5 i3 ]	[exit: r0 r1 i3 i1 f1 i14 i5 $i6 i0 ]
i7 = $i6 % i0...........................	[entry: r0 r1 i3 i1 f1 i14 i5 $i6 i0 ]	[exit: r0 i0 i7 r1 i3 i1 f1 i14 i5 ]
$i8 = i14 - i5..........................	[entry: r0 i0 i7 r1 i3 i1 f1 i14 i5 ]	[exit: r0 i0 i14 i7 r1 i5 i3 i1 f1 $i8 ]
$f2 = (float) $i8.......................	[entry: r0 i0 i14 i7 r1 i5 i3 i1 f1 $i8 ]	[exit: r0 i0 i14 i7 r1 i5 i3 i1 $f2 f1 ]
f3 = $f2 * f1...........................	[entry: r0 i0 i14 i7 r1 i5 i3 i1 $f2 f1 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 ]
i15 = 0.................................	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i15 i1 ]
if i15 >= i1 goto i14 = i14 + 1.........	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i15 i1 ]	[exit: r0 r1 i1 f1 i3 i0 i14 f3 i7 i5 i15 ]
$i9 = i15 / i3..........................	[entry: i0 r0 i14 f3 i7 r1 i5 f1 i1 i15 i3 ]	[exit: i0 r0 i14 f3 i7 r1 i5 f1 i15 i1 $i9 i3 ]
i10 = $i9 * i3..........................	[entry: i0 r0 i14 f3 i7 r1 i5 f1 i15 i1 $i9 i3 ]	[exit: i0 r0 i14 f3 i7 r1 i5 f1 i15 i1 i10 i3 ]
$i11 = i10 + i3.........................	[entry: i0 r0 i14 f3 i7 r1 i5 f1 i15 i1 i10 i3 ]	[exit: i0 i3 r0 i14 f3 i7 r1 i5 f1 i15 i10 $i11 i1 ]
i12 = $i11 % i1.........................	[entry: i0 i3 r0 i14 f3 i7 r1 i5 f1 i15 i10 $i11 i1 ]	[exit: i0 i3 i1 r0 i14 i12 f3 i7 r1 i5 f1 i15 i10 ]
$i13 = i15 - i10........................	[entry: i0 i3 i1 r0 i14 i12 f3 i7 r1 i5 f1 i15 i10 ]	[exit: i0 i3 i1 i15 r0 i14 i12 f3 i7 i10 r1 i5 f1 $i13 ]
$f4 = (float) $i13......................	[entry: i0 i3 i1 i15 r0 i14 i12 f3 i7 i10 r1 i5 f1 $i13 ]	[exit: i0 i3 i1 i15 r0 i14 i12 f3 i7 i10 r1 i5 $f4 f1 ]
f5 = $f4 * f1...........................	[entry: i0 i3 i1 i15 r0 i14 i12 f3 i7 i10 r1 i5 $f4 f1 ]	[exit: i0 f1 i3 i1 i15 f5 r0 i14 i12 f3 i7 i10 r1 i5 ]
$r2 = r1[i5]............................	[entry: i0 f1 i3 i1 i15 f5 r0 i14 i12 f3 i7 i10 r1 i5 ]	[exit: i0 f1 i3 i1 i15 f5 r0 i14 i12 i5 f3 r1 i7 $r2 i10 ]
$f7 = $r2[i10]..........................	[entry: i0 f1 i3 i1 i15 f5 r0 i14 i12 i5 f3 r1 i7 $r2 i10 ]	[exit: i0 f1 i3 i1 i15 f5 r0 i14 i12 i5 $f7 f3 i10 r1 i7 ]
$r3 = r1[i7]............................	[entry: i0 f1 i3 i1 i15 f5 r0 i14 i12 i5 $f7 f3 i10 r1 i7 ]	[exit: i0 f1 i3 i1 i15 f5 r0 i14 i7 i12 r1 i5 $f7 f3 $r3 i10 ]
$f6 = $r3[i10]..........................	[entry: i0 f1 i3 i1 i15 f5 r0 i14 i7 i12 r1 i5 $f7 f3 $r3 i10 ]	[exit: i0 f1 i3 i1 i15 f5 r0 i14 i7 i12 r1 i5 $f7 $f6 f3 ]
f8 = staticinvoke <Others.PerlinNoise: float interpolate(float,float,float)>($f7, $f6, f3)	[entry: i0 f1 i3 i1 i15 f5 r0 i14 i7 i12 r1 i5 $f7 $f6 f3 ]	[exit: i0 f1 i3 i1 i15 f8 f5 r0 i14 f3 i7 i12 r1 i5 ]
$r4 = r1[i5]............................	[entry: i0 f1 i3 i1 i15 f8 f5 r0 i14 f3 i7 i12 r1 i5 ]	[exit: i0 i5 f1 i3 i1 i15 f8 f5 r0 i14 f3 r1 i7 $r4 i12 ]
$f10 = $r4[i12].........................	[entry: i0 i5 f1 i3 i1 i15 f8 f5 r0 i14 f3 r1 i7 $r4 i12 ]	[exit: i0 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 f3 i12 r1 i7 ]
$r5 = r1[i7]............................	[entry: i0 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 f3 i12 r1 i7 ]	[exit: i0 i7 r1 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 f3 $r5 i12 ]
$f9 = $r5[i12]..........................	[entry: i0 i7 r1 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 f3 $r5 i12 ]	[exit: i0 i7 r1 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 $f9 f3 ]
f11 = staticinvoke <Others.PerlinNoise: float interpolate(float,float,float)>($f10, $f9, f3)	[entry: i0 i7 r1 i5 f1 i3 i1 i15 f8 f5 r0 i14 $f10 $f9 f3 ]	[exit: i0 f3 i7 r1 i5 f1 i3 i1 i15 f8 f11 f5 r0 i14 ]
$r6 = r0[i14]...........................	[entry: i0 f3 i7 r1 i5 f1 i3 i1 i15 f8 f11 f5 r0 i14 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 $r6 i15 f8 f11 f5 ]
$f12 = staticinvoke <Others.PerlinNoise: float interpolate(float,float,float)>(f8, f11, f5)	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 $r6 i15 f8 f11 f5 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 $r6 i15 $f12 ]
$r6[i15] = $f12.........................	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 $r6 i15 $f12 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 i15 ]
i15 = i15 + 1...........................	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i1 i15 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i15 i1 ]
goto [?= (branch)]......................	[entry: r0 i0 i14 f3 i7 r1 i5 f1 i3 i15 i1 ]	[exit: r0 i0 i14 f3 i7 r1 i5 f1 i3 i15 i1 ]
i14 = i14 + 1...........................	[entry: r0 r1 i1 f1 i3 i0 i14 ]	[exit: r0 r1 i1 f1 i3 i14 i0 ]
goto [?= (branch)]......................	[entry: r0 r1 i1 f1 i3 i14 i0 ]	[exit: r0 r1 i1 f1 i3 i14 i0 ]
return r0...............................	[entry: r0 ]	[exit: ]
********************
Class Name: Others.PerlinNoise, Method Name: interpolate, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
f0 := @parameter0: float................	[entry: ]	[exit: f0 ]
f3 := @parameter1: float................	[entry: f0 ]	[exit: f3 f0 ]
f1 := @parameter2: float................	[entry: f3 f0 ]	[exit: f3 f0 f1 ]
$f2 = 1.0F - f1.........................	[entry: f3 f0 f1 ]	[exit: f1 f3 f0 $f2 ]
$f5 = f0 * $f2..........................	[entry: f1 f3 f0 $f2 ]	[exit: $f5 f1 f3 ]
$f4 = f1 * f3...........................	[entry: $f5 f1 f3 ]	[exit: $f5 $f4 ]
$f6 = $f5 + $f4.........................	[entry: $f5 $f4 ]	[exit: $f6 ]
return $f6..............................	[entry: $f6 ]	[exit: ]
********************
Class Name: Others.PerlinNoise, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Width (int): ")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i0 r2 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: i0 r2 ]	[exit: i0 r2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("Height (int): ")	[entry: i0 r2 $r4 ]	[exit: i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r2 ]	[exit: i0 i1 r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i1 r2 ]	[exit: i0 i1 r2 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Octave count (int): ")	[entry: i0 i1 r2 $r5 ]	[exit: i0 i1 r2 ]
i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 i1 r2 ]	[exit: i0 i1 i2 r2 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i1 i2 r2 ]	[exit: i0 i1 i2 r2 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Persistence (float): ")	[entry: i0 i1 i2 r2 $r6 ]	[exit: i0 i1 i2 r2 ]
f0 = virtualinvoke r2.<java.util.Scanner: float nextFloat()>()	[entry: i0 i1 i2 r2 ]	[exit: i0 i1 i2 f0 r2 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i1 i2 f0 r2 ]	[exit: i0 i1 i2 f0 r2 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>("Seed (long): ")	[entry: i0 i1 i2 f0 r2 $r7 ]	[exit: i0 i1 i2 f0 r2 ]
l3 = virtualinvoke r2.<java.util.Scanner: long nextLong()>()	[entry: i0 i1 i2 f0 r2 ]	[exit: i0 i1 i2 f0 l3 r2 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: i0 i1 i2 f0 l3 r2 ]	[exit: i0 i1 i2 f0 l3 r2 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Charset (String): ")	[entry: i0 i1 i2 f0 l3 r2 $r8 ]	[exit: i0 i1 i2 f0 l3 r2 ]
r9 = virtualinvoke r2.<java.util.Scanner: java.lang.String next()>()	[entry: i0 i1 i2 f0 l3 r2 ]	[exit: r2 r9 i0 i1 i2 f0 l3 ]
r10 = staticinvoke <Others.PerlinNoise: float[][] generatePerlinNoise(int,int,int,float,long)>(i0, i1, i2, f0, l3)	[entry: r2 r9 i0 i1 i2 f0 l3 ]	[exit: r2 r10 i1 i0 r9 ]
r11 = virtualinvoke r9.<java.lang.String: char[] toCharArray()>()	[entry: r2 r10 i1 i0 r9 ]	[exit: r2 r10 i1 i0 r11 ]
i4 = lengthof r11.......................	[entry: r2 r10 i1 i0 r11 ]	[exit: r2 r11 r10 i1 i0 i4 ]
$f1 = (float) i4........................	[entry: r2 r11 r10 i1 i0 i4 ]	[exit: r2 r11 r10 i1 i0 $f1 ]
f2 = 1.0F / $f1.........................	[entry: r2 r11 r10 i1 i0 $f1 ]	[exit: r2 r11 r10 f2 i1 i0 ]
i8 = 0..................................	[entry: r2 r11 r10 f2 i1 i0 ]	[exit: r2 r11 r10 f2 i1 i8 i0 ]
if i8 >= i0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r11 r10 f2 i1 i8 i0 ]	[exit: r2 i0 i8 r11 r10 f2 i1 ]
i9 = 0..................................	[entry: r2 i0 i8 r11 r10 f2 i1 ]	[exit: r2 i0 i8 r11 r10 f2 i9 i1 ]
if i9 >= i1 goto $r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 i8 r11 r10 f2 i9 i1 ]	[exit: r2 r11 r10 f2 i1 i0 i8 i9 ]
f4 = f2.................................	[entry: r2 i0 i1 r11 i9 r10 i8 f2 ]	[exit: r2 i0 i1 f2 f4 r11 i9 r10 i8 ]
$r13 = r10[i8]..........................	[entry: r2 i0 i1 f2 f4 r11 i9 r10 i8 ]	[exit: r2 i0 i8 r10 f2 i1 f4 r11 $r13 i9 ]
f3 = $r13[i9]...........................	[entry: r2 i0 i8 r10 f2 i1 f4 r11 $r13 i9 ]	[exit: r2 i0 i8 r10 f2 i1 i9 f3 f4 r11 ]
r14 = r11...............................	[entry: r2 i0 i8 r10 f2 i1 i9 f3 f4 r11 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 ]
i5 = lengthof r14.......................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i5 ]
i10 = 0.................................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i5 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i10 i5 ]
if i10 >= i5 goto i9 = i9 + 1...........	[entry: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i10 i5 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 i5 f3 f4 r14 i10 ]
c6 = r14[i10]...........................	[entry: r2 i0 i8 r11 r10 i1 i9 i5 f2 f3 f4 r14 i10 ]	[exit: r2 i0 i8 r11 r10 i1 i9 r14 i5 i10 f2 c6 f3 f4 ]
$b7 = f3 cmpg f4........................	[entry: r2 i0 i8 r11 r10 i1 i9 r14 i5 i10 f2 c6 f3 f4 ]	[exit: r2 i0 i8 r11 r10 i1 i9 f3 r14 i5 i10 f4 f2 c6 $b7 ]
if $b7 > 0 goto f4 = f4 + f2............	[entry: r2 i0 i8 r11 r10 i1 i9 f3 r14 i5 i10 f4 f2 c6 $b7 ]	[exit: r2 i0 i8 r11 r10 i1 i9 f3 r14 i5 i10 f4 f2 c6 ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 i8 r11 r10 f2 i1 i9 c6 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 c6 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void print(char)>(c6)	[entry: r2 i0 i8 r11 r10 f2 i1 i9 c6 $r15 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 ]
goto [?= i9 = i9 + 1]...................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 ]
f4 = f4 + f2............................	[entry: r2 i0 i8 r11 r10 i1 i9 f3 r14 i5 i10 f4 f2 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i5 i10 ]
i10 = i10 + 1...........................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i5 i10 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i10 i5 ]
goto [?= (branch)]......................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i10 i5 ]	[exit: r2 i0 i8 r11 r10 f2 i1 i9 f3 f4 r14 i10 i5 ]
i9 = i9 + 1.............................	[entry: r2 i0 i8 r11 r10 f2 i1 i9 ]	[exit: r2 i0 i8 r11 r10 f2 i9 i1 ]
goto [?= (branch)]......................	[entry: r2 i0 i8 r11 r10 f2 i9 i1 ]	[exit: r2 i0 i8 r11 r10 f2 i9 i1 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r11 r10 f2 i1 i0 i8 ]	[exit: r2 r11 r10 f2 i1 i0 i8 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println()>()	[entry: r2 r11 r10 f2 i1 i0 i8 $r12 ]	[exit: r2 r11 r10 f2 i1 i0 i8 ]
i8 = i8 + 1.............................	[entry: r2 r11 r10 f2 i1 i0 i8 ]	[exit: r2 r11 r10 f2 i1 i8 i0 ]
goto [?= (branch)]......................	[entry: r2 r11 r10 f2 i1 i8 i0 ]	[exit: r2 r11 r10 f2 i1 i8 i0 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.Dijkstra, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Others.Graph..................	[entry: ]	[exit: $r0 ]
$r1 = <Others.Dijkstra: Others.Graph$Edge[] GRAPH>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<Others.Graph: void <init>(Others.Graph$Edge[])>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
virtualinvoke r2.<Others.Graph: void dijkstra(java.lang.String)>("a")	[entry: r2 ]	[exit: r2 ]
virtualinvoke r2.<Others.Graph: void printPath(java.lang.String)>("e")	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.PasswordGen, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
r0 = staticinvoke <Others.PasswordGen: java.lang.String generatePassword(int,int)>(8, 16)	[entry: ]	[exit: r0 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: $r2 r0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r2 r0 ]	[exit: $r2 r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r2 r0 $r1 ]	[exit: $r2 r0 $r1 ]
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Password: ")	[entry: $r2 r0 $r1 ]	[exit: $r2 r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: $r2 r0 $r3 ]	[exit: $r2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 $r4 ]	[exit: $r5 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r5)	[entry: $r5 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Others.PasswordGen, Method Name: generatePassword, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i0 := @parameter1: int..................	[entry: i1 ]	[exit: i0 i1 ]
$r0 = new java.util.Random..............	[entry: i0 i1 ]	[exit: i0 i1 $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: i0 i1 $r0 ]	[exit: i0 i1 $r0 ]
r1 = $r0................................	[entry: i0 i1 $r0 ]	[exit: r1 i0 i1 ]
r2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".......	[entry: r1 i0 i1 ]	[exit: r1 i0 i1 r2 ]
r3 = "abcdefghijklmnopqrstuvwxyz".......	[entry: r1 i0 i1 r2 ]	[exit: r1 i0 i1 r3 r2 ]
r4 = "0123456789".......................	[entry: r1 i0 i1 r3 r2 ]	[exit: r1 i0 i1 r4 r3 r2 ]
r5 = "!@#$%^&*(){}?"....................	[entry: r1 i0 i1 r4 r3 r2 ]	[exit: r1 i0 i1 r5 r4 r3 r2 ]
$r6 = new java.lang.StringBuilder.......	[entry: r1 i0 i1 r5 r4 r3 r2 ]	[exit: r1 i0 i1 r5 r4 r3 r2 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i0 i1 r5 r4 r3 r2 $r6 ]	[exit: r1 i0 i1 r5 r4 r3 r2 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)	[entry: r1 i0 i1 r5 r4 r3 r2 $r6 ]	[exit: r1 i0 i1 r5 r4 r3 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)	[entry: r1 i0 i1 r5 r4 r3 $r7 ]	[exit: r1 i0 i1 r5 r4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)	[entry: r1 i0 i1 r5 r4 $r8 ]	[exit: r1 i0 i1 r5 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)	[entry: r1 i0 i1 r5 $r9 ]	[exit: r1 i0 i1 $r10 ]
r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i0 i1 $r10 ]	[exit: r1 i0 i1 r11 ]
$r12 = new java.util.ArrayList..........	[entry: r1 i0 i1 r11 ]	[exit: r1 i0 i1 r11 $r12 ]
specialinvoke $r12.<java.util.ArrayList: void <init>()>()	[entry: r1 i0 i1 r11 $r12 ]	[exit: r1 i0 i1 r11 $r12 ]
r13 = $r12..............................	[entry: r1 i0 i1 r11 $r12 ]	[exit: r1 i0 i1 r13 r11 ]
r19 = virtualinvoke r11.<java.lang.String: char[] toCharArray()>()	[entry: r1 i0 i1 r13 r11 ]	[exit: r1 i0 i1 r13 r19 ]
i7 = lengthof r19.......................	[entry: r1 i0 i1 r13 r19 ]	[exit: r1 i0 i1 r13 r19 i7 ]
i8 = 0..................................	[entry: r1 i0 i1 r13 r19 i7 ]	[exit: r1 i0 i1 r13 r19 i8 i7 ]
if i8 >= i7 goto staticinvoke <java.util.Collections: void shuffle(java.util.List)>(r13)	[entry: r1 i0 i1 r13 r19 i8 i7 ]	[exit: r1 i0 i1 r13 i7 r19 i8 ]
c6 = r19[i8]............................	[entry: r1 i0 i1 i7 r13 r19 i8 ]	[exit: r1 i0 i1 r19 i7 i8 r13 c6 ]
$r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c6)	[entry: r1 i0 i1 r19 i7 i8 r13 c6 ]	[exit: r1 i0 i1 r19 i7 i8 $r18 r13 ]
interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r18)	[entry: r1 i0 i1 r19 i7 i8 $r18 r13 ]	[exit: r1 i0 i1 r13 r19 i7 i8 ]
i8 = i8 + 1.............................	[entry: r1 i0 i1 r13 r19 i7 i8 ]	[exit: r1 i0 i1 r13 r19 i8 i7 ]
goto [?= (branch)]......................	[entry: r1 i0 i1 r13 r19 i8 i7 ]	[exit: r1 i0 i1 r13 r19 i8 i7 ]
staticinvoke <java.util.Collections: void shuffle(java.util.List)>(r13)	[entry: r1 i0 i1 r13 ]	[exit: r13 r1 i0 i1 ]
$r14 = new java.lang.StringBuilder......	[entry: r13 r1 i0 i1 ]	[exit: r13 r1 i0 i1 $r14 ]
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()	[entry: r13 r1 i0 i1 $r14 ]	[exit: r13 r1 i0 i1 $r14 ]
r20 = $r14..............................	[entry: r13 r1 i0 i1 $r14 ]	[exit: r20 r13 r1 i0 i1 ]
$i2 = i0 - i1...........................	[entry: r20 r13 r1 i0 i1 ]	[exit: r20 r13 i1 $i2 r1 ]
$i3 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i2)	[entry: r20 r13 i1 $i2 r1 ]	[exit: r20 r1 r13 $i3 i1 ]
i9 = $i3 + i1...........................	[entry: r20 r1 r13 $i3 i1 ]	[exit: r20 r1 r13 i9 ]
if i9 <= 0 goto $r15 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r20 r1 r13 i9 ]	[exit: r20 i9 r1 r13 ]
$i4 = interfaceinvoke r13.<java.util.List: int size()>()	[entry: i9 r20 r1 r13 ]	[exit: i9 r20 r13 $i4 r1 ]
$i5 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i4)	[entry: i9 r20 r13 $i4 r1 ]	[exit: r1 i9 r20 $i5 r13 ]
$r16 = interfaceinvoke r13.<java.util.List: java.lang.Object get(int)>($i5)	[entry: r1 i9 r20 $i5 r13 ]	[exit: r1 r13 i9 $r16 r20 ]
virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16)	[entry: r1 r13 i9 $r16 r20 ]	[exit: r20 r1 r13 i9 ]
i9 = i9 + -1............................	[entry: r20 r1 r13 i9 ]	[exit: r20 r1 r13 i9 ]
goto [?= (branch)]......................	[entry: r20 r1 r13 i9 ]	[exit: r20 r1 r13 i9 ]
$r15 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r20 ]	[exit: $r15 ]
return $r15.............................	[entry: $r15 ]	[exit: ]
********************
Class Name: Others.BrianKernighanAlgorithm, Method Name: countSetBits, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i2 = 0..................................	[entry: i1 ]	[exit: i2 i1 ]
if i1 == 0 goto return i2...............	[entry: i2 i1 ]	[exit: i2 i1 ]
$i0 = i1 - 1............................	[entry: i2 i1 ]	[exit: i2 i1 $i0 ]
i1 = i1 & $i0...........................	[entry: i2 i1 $i0 ]	[exit: i1 i2 ]
i2 = i2 + 1.............................	[entry: i1 i2 ]	[exit: i2 i1 ]
goto [?= (branch)]......................	[entry: i2 i1 ]	[exit: i2 i1 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Others.BrianKernighanAlgorithm, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
i1 = staticinvoke <Others.BrianKernighanAlgorithm: int countSetBits(int)>(i0)	[entry: r2 i0 ]	[exit: r2 i1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i1 ]	[exit: r2 i1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(int)>(i1)	[entry: r2 i1 $r3 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: RabinKarp, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
<RabinKarp: java.util.Scanner scanner> = $r0	[entry: $r0 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Enter String")	[entry: $r2 ]	[exit: ]
$r3 = <RabinKarp: java.util.Scanner scanner>	[entry: ]	[exit: $r3 ]
r4 = virtualinvoke $r3.<java.util.Scanner: java.lang.String nextLine()>()	[entry: $r3 ]	[exit: r4 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r4 ]	[exit: r4 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Enter pattern")	[entry: r4 $r5 ]	[exit: r4 ]
$r6 = <RabinKarp: java.util.Scanner scanner>	[entry: r4 ]	[exit: r4 $r6 ]
r7 = virtualinvoke $r6.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r4 $r6 ]	[exit: r4 r7 ]
b0 = 101................................	[entry: r4 r7 ]	[exit: r4 r7 b0 ]
staticinvoke <RabinKarp: void searchPat(java.lang.String,java.lang.String,int)>(r4, r7, b0)	[entry: r4 r7 b0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: StringMatchFiniteAutomata, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
<StringMatchFiniteAutomata: java.util.Scanner scanner> = $r0	[entry: $r0 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Enter String")	[entry: $r2 ]	[exit: ]
$r3 = <StringMatchFiniteAutomata: java.util.Scanner scanner>	[entry: ]	[exit: $r3 ]
r4 = virtualinvoke $r3.<java.util.Scanner: java.lang.String nextLine()>()	[entry: $r3 ]	[exit: r4 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r4 ]	[exit: r4 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Enter pattern")	[entry: r4 $r5 ]	[exit: r4 ]
$r6 = <StringMatchFiniteAutomata: java.util.Scanner scanner>	[entry: r4 ]	[exit: r4 $r6 ]
r7 = virtualinvoke $r6.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r4 $r6 ]	[exit: r4 r7 ]
staticinvoke <StringMatchFiniteAutomata: void searchPat(java.lang.String,java.lang.String)>(r4, r7)	[entry: r4 r7 ]	[exit: ]
$r8 = <StringMatchFiniteAutomata: java.util.Scanner scanner>	[entry: ]	[exit: $r8 ]
virtualinvoke $r8.<java.util.Scanner: void close()>()	[entry: $r8 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: StringMatchFiniteAutomata, Method Name: searchPat, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
r0 := @parameter1: java.lang.String.....	[entry: r1 ]	[exit: r1 r0 ]
i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r1 r0 ]	[exit: r0 i0 r1 ]
i1 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r0 i0 r1 ]	[exit: r1 i1 r0 i0 ]
$i2 = i0 + 1............................	[entry: r1 i1 r0 i0 ]	[exit: r1 i1 r0 i0 $i2 ]
$r2 = newmultiarray (int)[$i2][256].....	[entry: r1 i1 r0 i0 $i2 ]	[exit: r1 i1 r0 i0 $r2 ]
<StringMatchFiniteAutomata: int[][] FA> = $r2	[entry: r1 i1 r0 i0 $r2 ]	[exit: r1 i1 r0 i0 ]
$r3 = <StringMatchFiniteAutomata: int[][] FA>	[entry: r1 i1 r0 i0 ]	[exit: r1 i1 r0 i0 $r3 ]
staticinvoke <StringMatchFiniteAutomata: void computeFA(java.lang.String,int,int[][])>(r0, i0, $r3)	[entry: r1 i1 r0 i0 $r3 ]	[exit: i0 r1 i1 ]
i6 = 0..................................	[entry: i0 r1 i1 ]	[exit: i0 r1 i6 i1 ]
i7 = 0..................................	[entry: i0 r1 i6 i1 ]	[exit: i0 r1 i6 i7 i1 ]
if i7 >= i1 goto return.................	[entry: i0 r1 i6 i7 i1 ]	[exit: i1 i0 i7 r1 i6 ]
$r4 = <StringMatchFiniteAutomata: int[][] FA>	[entry: i1 i0 i7 r1 i6 ]	[exit: i1 i0 i7 r1 $r4 i6 ]
$r5 = $r4[i6]...........................	[entry: i1 i0 i7 r1 $r4 i6 ]	[exit: i1 i0 $r5 i7 r1 ]
$c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i7)	[entry: i1 i0 $r5 i7 r1 ]	[exit: r1 i1 i7 i0 $r5 $c3 ]
i6 = $r5[$c3]...........................	[entry: r1 i1 i7 i0 $r5 $c3 ]	[exit: r1 i1 i7 i6 i0 ]
if i6 != i0 goto i7 = i7 + 1............	[entry: r1 i1 i7 i6 i0 ]	[exit: i0 r1 i6 i1 i7 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r1 i6 i1 i7 i0 ]	[exit: r1 i6 i1 $r7 i7 i0 ]
$r6 = new java.lang.StringBuilder.......	[entry: r1 i6 i1 $r7 i7 i0 ]	[exit: r1 i6 i1 $r7 i7 i0 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i6 i1 $r7 i7 i0 $r6 ]	[exit: r1 i6 i1 $r7 i7 i0 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Pattern found at index ")	[entry: r1 i6 i1 $r7 i7 i0 $r6 ]	[exit: r1 i6 i1 $r7 $r8 i7 i0 ]
$i4 = i7 - i0...........................	[entry: r1 i6 i1 $r7 $r8 i7 i0 ]	[exit: i0 r1 i6 i1 i7 $r7 $r8 $i4 ]
$i5 = $i4 + 1...........................	[entry: i0 r1 i6 i1 i7 $r7 $r8 $i4 ]	[exit: i0 r1 i6 i1 i7 $r7 $i5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: i0 r1 i6 i1 i7 $r7 $i5 $r8 ]	[exit: i0 r1 i6 i1 i7 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i0 r1 i6 i1 i7 $r7 $r9 ]	[exit: i0 r1 i6 i1 i7 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: i0 r1 i6 i1 i7 $r10 $r7 ]	[exit: i0 r1 i6 i1 i7 ]
i7 = i7 + 1.............................	[entry: i0 r1 i6 i1 i7 ]	[exit: i0 r1 i6 i7 i1 ]
goto [?= (branch)]......................	[entry: i0 r1 i6 i7 i1 ]	[exit: i0 r1 i6 i7 i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: StringMatchFiniteAutomata, Method Name: computeFA, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String.....	[entry: ]	[exit: r1 ]
i0 := @parameter1: int..................	[entry: r1 ]	[exit: r1 i0 ]
r0 := @parameter2: int[][]..............	[entry: r1 i0 ]	[exit: r1 r0 i0 ]
i2 = 0..................................	[entry: r1 r0 i0 ]	[exit: r1 r0 i2 i0 ]
if i2 > i0 goto return..................	[entry: r1 r0 i2 i0 ]	[exit: i0 i2 r1 r0 ]
i3 = 0..................................	[entry: i0 i2 r1 r0 ]	[exit: i0 i2 r1 r0 i3 ]
if i3 >= 256 goto i2 = i2 + 1...........	[entry: i0 i2 r1 r0 i3 ]	[exit: r1 r0 i0 i2 i3 ]
$r2 = r0[i2]............................	[entry: r1 i0 i3 r0 i2 ]	[exit: r0 $r2 r1 i0 i2 i3 ]
$i1 = staticinvoke <StringMatchFiniteAutomata: int getNextState(java.lang.String,int,int,int)>(r1, i0, i2, i3)	[entry: r0 $r2 r1 i0 i2 i3 ]	[exit: i0 i2 r1 r0 $r2 i3 $i1 ]
$r2[i3] = $i1...........................	[entry: i0 i2 r1 r0 $r2 i3 $i1 ]	[exit: i0 i2 r1 r0 i3 ]
i3 = i3 + 1.............................	[entry: i0 i2 r1 r0 i3 ]	[exit: i0 i2 r1 r0 i3 ]
goto [?= (branch)]......................	[entry: i0 i2 r1 r0 i3 ]	[exit: i0 i2 r1 r0 i3 ]
i2 = i2 + 1.............................	[entry: r1 r0 i0 i2 ]	[exit: r1 r0 i2 i0 ]
goto [?= (branch)]......................	[entry: r1 r0 i2 i0 ]	[exit: r1 r0 i2 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: StringMatchFiniteAutomata, Method Name: getNextState, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: r0 i1 ]
i0 := @parameter2: int..................	[entry: r0 i1 ]	[exit: r0 i0 i1 ]
i4 := @parameter3: int..................	[entry: r0 i0 i1 ]	[exit: i4 r0 i0 i1 ]
if i0 >= i1 goto i14 = i0...............	[entry: i4 r0 i0 i1 ]	[exit: i4 i0 r0 ]
$c12 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)	[entry: i4 i0 r0 ]	[exit: i0 r0 i4 $c12 ]
if i4 != $c12 goto i14 = i0.............	[entry: i0 r0 i4 $c12 ]	[exit: i0 i4 r0 ]
$i13 = i0 + 1...........................	[entry: i0 ]	[exit: $i13 ]
return $i13.............................	[entry: $i13 ]	[exit: ]
i14 = i0................................	[entry: i4 r0 i0 ]	[exit: i0 i4 r0 i14 ]
if i14 <= 0 goto return 0...............	[entry: i0 i4 r0 i14 ]	[exit: i0 i4 r0 i14 ]
$i2 = i14 - 1...........................	[entry: i0 i4 r0 i14 ]	[exit: i0 i14 i4 $i2 r0 ]
$c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i2)	[entry: i0 i14 i4 $i2 r0 ]	[exit: i0 r0 i14 $c3 i4 ]
if $c3 != i4 goto i14 = i14 + -1........	[entry: i0 r0 i14 $c3 i4 ]	[exit: i0 r0 i4 i14 ]
i15 = 0.................................	[entry: i0 r0 i4 i14 ]	[exit: i0 r0 i4 i15 i14 ]
$i5 = i14 - 1...........................	[entry: i0 r0 i4 i15 i14 ]	[exit: i0 i14 r0 i4 i15 $i5 ]
if i15 >= $i5 goto i14 = i14 + -1.......	[entry: i0 i14 r0 i4 i15 $i5 ]	[exit: i4 i0 i14 i15 r0 ]
$c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i15)	[entry: i4 i0 i14 i15 r0 ]	[exit: i4 $c6 r0 i15 i0 i14 ]
$i7 = i0 - i14..........................	[entry: i4 $c6 r0 i15 i0 i14 ]	[exit: i0 i4 i14 $c6 r0 $i7 i15 ]
$i8 = $i7 + i15.........................	[entry: i0 i4 i14 $c6 r0 $i7 i15 ]	[exit: i0 i4 i15 i14 $c6 r0 $i8 ]
$i9 = $i8 + 1...........................	[entry: i0 i4 i15 i14 $c6 r0 $i8 ]	[exit: i0 i4 i15 i14 $c6 $i9 r0 ]
$c10 = virtualinvoke r0.<java.lang.String: char charAt(int)>($i9)	[entry: i0 i4 i15 i14 $c6 $i9 r0 ]	[exit: i0 r0 i4 i15 i14 $c6 $c10 ]
if $c6 == $c10 goto $i11 = i14 - 1......	[entry: i0 r0 i4 i15 i14 $c6 $c10 ]	[exit: i0 r0 i4 i15 i14 ]
goto [?= i14 = i14 + -1]................	[entry: i0 i4 r0 i14 ]	[exit: i0 i4 r0 i14 ]
$i11 = i14 - 1..........................	[entry: i0 r0 i4 i15 i14 ]	[exit: i14 i0 r0 i4 i15 $i11 ]
if i15 != $i11 goto i15 = i15 + 1.......	[entry: i14 i0 r0 i4 i15 $i11 ]	[exit: i14 i0 r0 i4 i15 ]
return i14..............................	[entry: i14 ]	[exit: ]
i15 = i15 + 1...........................	[entry: i0 r0 i4 i14 i15 ]	[exit: i0 r0 i4 i15 i14 ]
goto [?= $i5 = i14 - 1].................	[entry: i0 r0 i4 i15 i14 ]	[exit: i0 r0 i4 i15 i14 ]
i14 = i14 + -1..........................	[entry: i0 i4 r0 i14 ]	[exit: i0 i4 r0 i14 ]
goto [?= (branch)]......................	[entry: i0 i4 r0 i14 ]	[exit: i0 i4 r0 i14 ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: Kruskal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r27 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
r0 = newarray (java.util.HashSet)[7]....	[entry: ]	[exit: r0 ]
i7 = 0..................................	[entry: r0 ]	[exit: i7 r0 ]
$i0 = lengthof r0.......................	[entry: i7 r0 ]	[exit: r0 i7 $i0 ]
if i7 >= $i0 goto staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 1, 2)	[entry: r0 i7 $i0 ]	[exit: r0 i7 ]
$r26 = new java.util.HashSet............	[entry: r0 i7 ]	[exit: r0 i7 $r26 ]
specialinvoke $r26.<java.util.HashSet: void <init>()>()	[entry: r0 i7 $r26 ]	[exit: r0 i7 $r26 ]
r0[i7] = $r26...........................	[entry: r0 i7 $r26 ]	[exit: r0 i7 ]
i7 = i7 + 1.............................	[entry: r0 i7 ]	[exit: i7 r0 ]
goto [?= $i0 = lengthof r0].............	[entry: i7 r0 ]	[exit: i7 r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 1, 2)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 2, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 0, 3, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 1, 2, 4)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 2, 3, 5)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 1, 4, 3)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 2, 4, 1)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 3, 5, 7)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 4, 5, 8)	[entry: r0 ]	[exit: r0 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r0, 5, 6, 9)	[entry: r0 ]	[exit: r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("Initial Graph: ")	[entry: r0 $r1 ]	[exit: r0 ]
i8 = 0..................................	[entry: r0 ]	[exit: i8 r0 ]
$i1 = lengthof r0.......................	[entry: i8 r0 ]	[exit: r0 i8 $i1 ]
if i8 >= $i1 goto $r2 = new Kruskal.....	[entry: r0 i8 $i1 ]	[exit: r0 i8 ]
$r16 = r0[i8]...........................	[entry: r0 i8 ]	[exit: r0 i8 $r16 ]
r28 = virtualinvoke $r16.<java.util.HashSet: java.util.Iterator iterator()>()	[entry: r0 i8 $r16 ]	[exit: r0 i8 r28 ]
$z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()	[entry: r0 i8 r28 ]	[exit: r0 i8 r28 $z1 ]
if $z1 == 0 goto i8 = i8 + 1............	[entry: r0 i8 r28 $z1 ]	[exit: r0 i8 r28 ]
$r17 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>()	[entry: r0 i8 r28 ]	[exit: r0 r28 i8 $r17 ]
r29 = (Kruskal$Edge) $r17...............	[entry: r0 r28 i8 $r17 ]	[exit: r0 r28 r29 i8 ]
$r19 = <java.lang.System: java.io.PrintStream out>	[entry: r0 r28 r29 i8 ]	[exit: r0 r28 $r19 r29 i8 ]
$r18 = new java.lang.StringBuilder......	[entry: r0 r28 $r19 r29 i8 ]	[exit: r0 r28 $r19 r29 i8 $r18 ]
specialinvoke $r18.<java.lang.StringBuilder: void <init>()>()	[entry: r0 r28 $r19 r29 i8 $r18 ]	[exit: r0 r28 $r19 r29 i8 $r18 ]
$r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i8)	[entry: r0 r28 $r19 r29 i8 $r18 ]	[exit: r0 i8 r28 $r19 r29 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <-- weight ")	[entry: r0 i8 r28 $r19 r29 $r20 ]	[exit: r0 i8 r28 $r19 $r21 r29 ]
$i5 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r29)	[entry: r0 i8 r28 $r19 $r21 r29 ]	[exit: r0 i8 r28 $r19 r29 $i5 $r21 ]
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: r0 i8 r28 $r19 r29 $i5 $r21 ]	[exit: r0 i8 r28 $r19 r29 $r22 ]
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ")	[entry: r0 i8 r28 $r19 r29 $r22 ]	[exit: r0 i8 r28 $r19 $r23 r29 ]
$i6 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r29)	[entry: r0 i8 r28 $r19 $r23 r29 ]	[exit: r0 i8 r28 $r19 $i6 $r23 ]
$r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6)	[entry: r0 i8 r28 $r19 $i6 $r23 ]	[exit: r0 i8 r28 $r19 $r24 ]
$r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i8 r28 $r19 $r24 ]	[exit: r0 i8 r28 $r25 $r19 ]
virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r25)	[entry: r0 i8 r28 $r25 $r19 ]	[exit: r0 i8 r28 ]
goto [?= $z1 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>()]	[entry: r0 i8 r28 ]	[exit: r0 i8 r28 ]
i8 = i8 + 1.............................	[entry: r0 i8 ]	[exit: i8 r0 ]
goto [?= $i1 = lengthof r0].............	[entry: i8 r0 ]	[exit: i8 r0 ]
$r2 = new Kruskal.......................	[entry: r0 ]	[exit: r0 $r2 ]
specialinvoke $r2.<Kruskal: void <init>()>()	[entry: r0 $r2 ]	[exit: r0 $r2 ]
r30 = $r2...............................	[entry: r0 $r2 ]	[exit: r0 r30 ]
r31 = virtualinvoke r30.<Kruskal: java.util.HashSet[] kruskal(java.util.HashSet[])>(r0)	[entry: r0 r30 ]	[exit: r31 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r31 ]	[exit: r31 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("\nMinimal Graph: ")	[entry: r31 $r3 ]	[exit: r31 ]
i9 = 0..................................	[entry: r31 ]	[exit: i9 r31 ]
$i2 = lengthof r31......................	[entry: i9 r31 ]	[exit: r31 i9 $i2 ]
if i9 >= $i2 goto return................	[entry: r31 i9 $i2 ]	[exit: r31 i9 ]
$r4 = r31[i9]...........................	[entry: r31 i9 ]	[exit: r31 i9 $r4 ]
r5 = virtualinvoke $r4.<java.util.HashSet: java.util.Iterator iterator()>()	[entry: r31 i9 $r4 ]	[exit: r31 i9 r5 ]
$z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()	[entry: r31 i9 r5 ]	[exit: r31 i9 r5 $z0 ]
if $z0 == 0 goto i9 = i9 + 1............	[entry: r31 i9 r5 $z0 ]	[exit: r31 i9 r5 ]
$r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>()	[entry: r31 i9 r5 ]	[exit: r31 r5 i9 $r6 ]
r7 = (Kruskal$Edge) $r6.................	[entry: r31 r5 i9 $r6 ]	[exit: r31 r5 r7 i9 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r31 r5 r7 i9 ]	[exit: r31 r5 $r9 r7 i9 ]
$r8 = new java.lang.StringBuilder.......	[entry: r31 r5 $r9 r7 i9 ]	[exit: r31 r5 $r9 r7 i9 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: r31 r5 $r9 r7 i9 $r8 ]	[exit: r31 r5 $r9 r7 i9 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)	[entry: r31 r5 $r9 r7 i9 $r8 ]	[exit: r31 i9 r5 $r9 r7 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" <-- weight ")	[entry: r31 i9 r5 $r9 r7 $r10 ]	[exit: r31 i9 r5 $r9 $r11 r7 ]
$i3 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r7)	[entry: r31 i9 r5 $r9 $r11 r7 ]	[exit: r31 i9 r5 $r9 r7 $i3 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r31 i9 r5 $r9 r7 $i3 $r11 ]	[exit: r31 i9 r5 $r9 r7 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" --> ")	[entry: r31 i9 r5 $r9 r7 $r12 ]	[exit: r31 i9 r5 $r9 $r13 r7 ]
$i4 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r7)	[entry: r31 i9 r5 $r9 $r13 r7 ]	[exit: r31 i9 r5 $r9 $i4 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)	[entry: r31 i9 r5 $r9 $i4 $r13 ]	[exit: r31 i9 r5 $r9 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r31 i9 r5 $r9 $r14 ]	[exit: r31 i9 r5 $r15 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r31 i9 r5 $r15 $r9 ]	[exit: r31 i9 r5 ]
goto [?= $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()]	[entry: r31 i9 r5 ]	[exit: r31 i9 r5 ]
i9 = i9 + 1.............................	[entry: r31 i9 ]	[exit: i9 r31 ]
goto [?= $i2 = lengthof r31]............	[entry: i9 r31 ]	[exit: i9 r31 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Kruskal, Method Name: kruskal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r24 := @this: Kruskal...................	[entry: ]	[exit: ]
r0 := @parameter0: java.util.HashSet[]..	[entry: ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: r0 i0 ]
r1 = newarray (int)[i0].................	[entry: r0 i0 ]	[exit: r1 r0 i0 ]
r2 = newarray (java.util.HashSet)[i0]...	[entry: r1 r0 i0 ]	[exit: r2 r1 r0 i0 ]
r3 = newarray (java.util.HashSet)[i0]...	[entry: r2 r1 r0 i0 ]	[exit: r3 r2 r1 r0 i0 ]
$r4 = new java.util.PriorityQueue.......	[entry: r3 r2 r1 r0 i0 ]	[exit: r3 r2 r1 r0 i0 $r4 ]
$r5 = staticinvoke <Kruskal$lambda_kruskal_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: r3 r2 r1 r0 i0 $r4 ]	[exit: r3 r2 r1 r0 i0 $r4 $r5 ]
$r6 = staticinvoke <java.util.Comparator: java.util.Comparator comparingInt(java.util.function.ToIntFunction)>($r5)	[entry: r3 r2 r1 r0 i0 $r4 $r5 ]	[exit: r3 r2 r1 r0 i0 $r6 $r4 ]
specialinvoke $r4.<java.util.PriorityQueue: void <init>(java.util.Comparator)>($r6)	[entry: r3 r2 r1 r0 i0 $r6 $r4 ]	[exit: r3 r2 r1 r0 i0 $r4 ]
r7 = $r4................................	[entry: r3 r2 r1 r0 i0 $r4 ]	[exit: r3 r2 r1 r7 r0 i0 ]
i18 = 0.................................	[entry: r3 r2 r1 r7 r0 i0 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
if i18 >= i0 goto i19 = 0...............	[entry: r3 r2 r1 r7 r0 i18 i0 ]	[exit: r3 r2 r1 r7 i0 r0 i18 ]
$r19 = new java.util.HashSet............	[entry: i0 r7 r0 r1 r2 r3 i18 ]	[exit: i0 r7 r0 r1 r2 r3 i18 $r19 ]
specialinvoke $r19.<java.util.HashSet: void <init>()>()	[entry: i0 r7 r0 r1 r2 r3 i18 $r19 ]	[exit: i0 r7 r0 r1 r2 r3 i18 $r19 ]
r3[i18] = $r19..........................	[entry: i0 r7 r0 r1 r2 r3 i18 $r19 ]	[exit: r3 i0 r7 r0 r1 r2 i18 ]
$r20 = new java.util.HashSet............	[entry: r3 i0 r7 r0 r1 r2 i18 ]	[exit: r3 i0 r7 r0 r1 r2 i18 $r20 ]
specialinvoke $r20.<java.util.HashSet: void <init>()>()	[entry: r3 i0 r7 r0 r1 r2 i18 $r20 ]	[exit: r3 i0 r7 r0 r1 r2 i18 $r20 ]
r2[i18] = $r20..........................	[entry: r3 i0 r7 r0 r1 r2 i18 $r20 ]	[exit: r3 i0 r7 r0 r1 r2 i18 ]
$r21 = r2[i18]..........................	[entry: r3 i0 r7 r0 r1 r2 i18 ]	[exit: r3 r2 i0 r7 r0 r1 $r21 i18 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i18)	[entry: r3 r2 i0 r7 r0 r1 $r21 i18 ]	[exit: r3 r2 i0 r7 r0 r1 i18 $r22 $r21 ]
virtualinvoke $r21.<java.util.HashSet: boolean add(java.lang.Object)>($r22)	[entry: r3 r2 i0 r7 r0 r1 i18 $r22 $r21 ]	[exit: r3 r2 i0 r7 r0 r1 i18 ]
r1[i18] = i18...........................	[entry: r3 r2 i0 r7 r0 r1 i18 ]	[exit: r3 r2 r1 i0 r7 r0 i18 ]
$r23 = r0[i18]..........................	[entry: r3 r2 r1 i0 r7 r0 i18 ]	[exit: r3 r2 r1 r0 i0 i18 $r23 r7 ]
virtualinvoke r7.<java.util.PriorityQueue: boolean addAll(java.util.Collection)>($r23)	[entry: r3 r2 r1 r0 i0 i18 $r23 r7 ]	[exit: r3 r2 r1 r7 r0 i0 i18 ]
i18 = i18 + 1...........................	[entry: r3 r2 r1 r7 r0 i0 i18 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 r1 r7 r0 i18 i0 ]	[exit: r3 r2 r1 r7 r0 i18 i0 ]
i19 = 0.................................	[entry: r3 r2 r1 r7 i0 ]	[exit: r3 r2 r1 r7 i19 i0 ]
if i19 == i0 goto return r3.............	[entry: r3 r2 r1 r7 i19 i0 ]	[exit: r3 i19 i0 r2 r1 r7 ]
$z0 = virtualinvoke r7.<java.util.PriorityQueue: boolean isEmpty()>()	[entry: r3 i19 i0 r2 r1 r7 ]	[exit: r3 i19 i0 r2 r1 r7 $z0 ]
if $z0 != 0 goto return r3..............	[entry: r3 i19 i0 r2 r1 r7 $z0 ]	[exit: r3 i19 i0 r2 r1 r7 ]
$r8 = virtualinvoke r7.<java.util.PriorityQueue: java.lang.Object poll()>()	[entry: r3 i19 i0 r2 r1 r7 ]	[exit: r3 r7 i19 i0 r2 r1 $r8 ]
r9 = (Kruskal$Edge) $r8.................	[entry: r3 r7 i19 i0 r2 r1 $r8 ]	[exit: r3 r7 i19 i0 r2 r1 r9 ]
$i1 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r7 i19 i0 r2 r1 r9 ]	[exit: r3 r7 i19 i0 r9 r2 r1 $i1 ]
$i2 = r1[$i1]...........................	[entry: r3 r7 i19 i0 r9 r2 r1 $i1 ]	[exit: r3 r1 r7 i19 i0 r9 r2 $i2 ]
$r10 = r2[$i2]..........................	[entry: r3 r1 r7 i19 i0 r9 r2 $i2 ]	[exit: r3 r2 r1 r7 i19 i0 $r10 r9 ]
$i3 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r3 r2 r1 r7 i19 i0 $r10 r9 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r10 $i3 ]
$r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)	[entry: r3 r2 r1 r7 i19 i0 r9 $r10 $i3 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r11 $r10 ]
$z1 = virtualinvoke $r10.<java.util.HashSet: boolean contains(java.lang.Object)>($r11)	[entry: r3 r2 r1 r7 i19 i0 r9 $r11 $r10 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $z1 ]
if $z1 != 0 goto (branch)...............	[entry: r3 r2 r1 r7 i19 i0 r9 $z1 ]	[exit: r3 r2 r1 r7 i19 i0 r9 ]
$i4 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r3 r7 i19 i0 r2 r1 r9 ]	[exit: r3 r7 i19 i0 r9 r2 r1 $i4 ]
$i5 = r1[$i4]...........................	[entry: r3 r7 i19 i0 r9 r2 r1 $i4 ]	[exit: r3 r1 r7 i19 i0 r9 r2 $i5 ]
$r12 = r2[$i5]..........................	[entry: r3 r1 r7 i19 i0 r9 r2 $i5 ]	[exit: r3 r2 r1 r7 i19 i0 $r12 r9 ]
$i6 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r2 r1 r7 i19 i0 $r12 r9 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r12 $i6 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)	[entry: r3 r2 r1 r7 i19 i0 r9 $r12 $i6 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $r13 $r12 ]
$z2 = virtualinvoke $r12.<java.util.HashSet: boolean contains(java.lang.Object)>($r13)	[entry: r3 r2 r1 r7 i19 i0 r9 $r13 $r12 ]	[exit: r3 r2 r1 r7 i19 i0 r9 $z2 ]
if $z2 != 0 goto (branch)...............	[entry: r3 r2 r1 r7 i19 i0 r9 $z2 ]	[exit: r3 r2 r1 r7 i19 i0 r9 ]
$i7 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 r2 r1 r9 ]	[exit: r7 i0 r3 r9 r2 r1 $i7 ]
$i8 = r1[$i7]...........................	[entry: r7 i0 r3 r9 r2 r1 $i7 ]	[exit: r7 i0 r3 r1 r9 r2 $i8 ]
$r14 = r2[$i8]..........................	[entry: r7 i0 r3 r1 r9 r2 $i8 ]	[exit: r7 i0 r3 $r14 r2 r1 r9 ]
$i9 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 $r14 r2 r1 r9 ]	[exit: r7 i0 r3 r9 $r14 r2 r1 $i9 ]
$i10 = r1[$i9]..........................	[entry: r7 i0 r3 r9 $r14 r2 r1 $i9 ]	[exit: r7 i0 r3 r1 r9 $r14 r2 $i10 ]
$r15 = r2[$i10].........................	[entry: r7 i0 r3 r1 r9 $r14 r2 $i10 ]	[exit: r7 i0 r3 r2 r1 r9 $r15 $r14 ]
virtualinvoke $r14.<java.util.HashSet: boolean addAll(java.util.Collection)>($r15)	[entry: r7 i0 r3 r2 r1 r9 $r15 $r14 ]	[exit: r7 i0 r3 r2 r1 r9 ]
$i11 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r3 r2 r1 r9 ]	[exit: r7 i0 r3 r9 r2 r1 $i11 ]
$i12 = r1[$i11].........................	[entry: r7 i0 r3 r9 r2 r1 $i11 ]	[exit: r7 i0 r3 r1 r9 r2 $i12 ]
$r16 = r2[$i12].........................	[entry: r7 i0 r3 r1 r9 r2 $i12 ]	[exit: r7 i0 r2 r3 $r16 r1 r9 ]
$r17 = staticinvoke <Kruskal$lambda_kruskal_1__2: java.util.function.Consumer bootstrap$(int[],Kruskal$Edge)>(r1, r9)	[entry: r7 i0 r2 r3 $r16 r1 r9 ]	[exit: r7 i0 r2 r1 r3 r9 $r17 $r16 ]
virtualinvoke $r16.<java.util.HashSet: void forEach(java.util.function.Consumer)>($r17)	[entry: r7 i0 r2 r1 r3 r9 $r17 $r16 ]	[exit: r7 i0 r2 r1 r3 r9 ]
$i13 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 r9 ]	[exit: r7 i0 r2 r1 r3 $i13 r9 ]
$i14 = staticinvoke <Kruskal$Edge: int access$100(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 $i13 r9 ]	[exit: r7 i0 r2 r1 r3 $i13 $i14 r9 ]
$i15 = staticinvoke <Kruskal$Edge: int access$000(Kruskal$Edge)>(r9)	[entry: r7 i0 r2 r1 r3 $i13 $i14 r9 ]	[exit: r7 i0 r2 r1 r9 r3 $i13 $i14 $i15 ]
staticinvoke <Kruskal: void addEdge(java.util.HashSet[],int,int,int)>(r3, $i13, $i14, $i15)	[entry: r7 i0 r2 r1 r9 r3 $i13 $i14 $i15 ]	[exit: r3 r7 i0 r2 r1 r9 ]
$i16 = staticinvoke <Kruskal$Edge: int access$200(Kruskal$Edge)>(r9)	[entry: r3 r7 i0 r2 r1 r9 ]	[exit: r3 r7 i0 r2 r1 $i16 ]
$i17 = r1[$i16].........................	[entry: r3 r7 i0 r2 r1 $i16 ]	[exit: r3 r1 r7 i0 r2 $i17 ]
$r18 = r2[$i17].........................	[entry: r3 r1 r7 i0 r2 $i17 ]	[exit: r3 r2 r1 r7 i0 $r18 ]
i19 = virtualinvoke $r18.<java.util.HashSet: int size()>()	[entry: r3 r2 r1 r7 i0 $r18 ]	[exit: r3 r2 r1 r7 i19 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 r1 r7 i19 i0 ]	[exit: r3 r2 r1 r7 i19 i0 ]
return r3...............................	[entry: r3 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.DecimalToAnyUsingStack, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$z0 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r8 = staticinvoke <DataStructures.Stacks.DecimalToAnyUsingStack: java.lang.String convert(int,int)>(0, 2)	[entry: ]	[exit: $r8 ]
$z9 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("0")	[entry: $r8 ]	[exit: $z9 ]
if $z9 != 0 goto $z1 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z1 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$r6 = staticinvoke <DataStructures.Stacks.DecimalToAnyUsingStack: java.lang.String convert(int,int)>(30, 2)	[entry: ]	[exit: $r6 ]
$z8 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("11110")	[entry: $r6 ]	[exit: $z8 ]
if $z8 != 0 goto $z2 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z2 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$r4 = staticinvoke <DataStructures.Stacks.DecimalToAnyUsingStack: java.lang.String convert(int,int)>(30, 8)	[entry: ]	[exit: $r4 ]
$z7 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("36")	[entry: $r4 ]	[exit: $z7 ]
if $z7 != 0 goto $z3 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z3 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r2 = staticinvoke <DataStructures.Stacks.DecimalToAnyUsingStack: java.lang.String convert(int,int)>(30, 10)	[entry: ]	[exit: $r2 ]
$z6 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("30")	[entry: $r2 ]	[exit: $z6 ]
if $z6 != 0 goto $z4 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z4 = <DataStructures.Stacks.DecimalToAnyUsingStack: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$r0 = staticinvoke <DataStructures.Stacks.DecimalToAnyUsingStack: java.lang.String convert(int,int)>(30, 16)	[entry: ]	[exit: $r0 ]
$z5 = virtualinvoke $r0.<java.lang.String: boolean equals(java.lang.Object)>("1E")	[entry: $r0 ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.BalancedBrackets, Method Name: isPaired, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
c1 := @parameter0: char.................	[entry: ]	[exit: c1 ]
c3 := @parameter1: char.................	[entry: c1 ]	[exit: c3 c1 ]
$r0 = newarray (char[])[4]..............	[entry: c3 c1 ]	[exit: c3 c1 $r0 ]
$r1 = newarray (char)[2]................	[entry: c3 c1 $r0 ]	[exit: c3 c1 $r0 $r1 ]
$r1[0] = 40.............................	[entry: c3 c1 $r0 $r1 ]	[exit: c3 c1 $r0 $r1 ]
$r1[1] = 41.............................	[entry: c3 c1 $r0 $r1 ]	[exit: c3 c1 $r0 $r1 ]
$r0[0] = $r1............................	[entry: c3 c1 $r0 $r1 ]	[exit: c3 c1 $r0 ]
$r2 = newarray (char)[2]................	[entry: c3 c1 $r0 ]	[exit: c3 c1 $r0 $r2 ]
$r2[0] = 91.............................	[entry: c3 c1 $r0 $r2 ]	[exit: c3 c1 $r0 $r2 ]
$r2[1] = 93.............................	[entry: c3 c1 $r0 $r2 ]	[exit: c3 c1 $r0 $r2 ]
$r0[1] = $r2............................	[entry: c3 c1 $r0 $r2 ]	[exit: c3 c1 $r0 ]
$r3 = newarray (char)[2]................	[entry: c3 c1 $r0 ]	[exit: c3 c1 $r0 $r3 ]
$r3[0] = 123............................	[entry: c3 c1 $r0 $r3 ]	[exit: c3 c1 $r0 $r3 ]
$r3[1] = 125............................	[entry: c3 c1 $r0 $r3 ]	[exit: c3 c1 $r0 $r3 ]
$r0[2] = $r3............................	[entry: c3 c1 $r0 $r3 ]	[exit: c3 c1 $r0 ]
$r4 = newarray (char)[2]................	[entry: c3 c1 $r0 ]	[exit: c3 c1 $r0 $r4 ]
$r4[0] = 60.............................	[entry: c3 c1 $r0 $r4 ]	[exit: c3 c1 $r0 $r4 ]
$r4[1] = 62.............................	[entry: c3 c1 $r0 $r4 ]	[exit: c3 c1 $r0 $r4 ]
$r0[3] = $r4............................	[entry: c3 c1 $r0 $r4 ]	[exit: c3 c1 $r0 ]
r5 = $r0................................	[entry: c3 c1 $r0 ]	[exit: c3 c1 r5 ]
r6 = r5.................................	[entry: c3 c1 r5 ]	[exit: c3 c1 r6 ]
i0 = lengthof r6........................	[entry: c3 c1 r6 ]	[exit: c3 c1 r6 i0 ]
i5 = 0..................................	[entry: c3 c1 r6 i0 ]	[exit: c3 c1 r6 i5 i0 ]
if i5 >= i0 goto return 0...............	[entry: c3 c1 r6 i5 i0 ]	[exit: i0 c3 c1 r6 i5 ]
r7 = r6[i5].............................	[entry: i0 c3 c1 r6 i5 ]	[exit: r6 i0 i5 c3 c1 r7 ]
$c2 = r7[0].............................	[entry: r6 i0 i5 c3 c1 r7 ]	[exit: r6 i0 i5 c3 r7 $c2 c1 ]
if $c2 != c1 goto i5 = i5 + 1...........	[entry: r6 i0 i5 c3 r7 $c2 c1 ]	[exit: c1 r6 i0 i5 c3 r7 ]
$c4 = r7[1].............................	[entry: c1 r6 i0 i5 c3 r7 ]	[exit: c1 r6 i0 i5 $c4 c3 ]
if $c4 != c3 goto i5 = i5 + 1...........	[entry: c1 r6 i0 i5 $c4 c3 ]	[exit: c3 c1 r6 i0 i5 ]
return 1................................	[entry: ]	[exit: ]
i5 = i5 + 1.............................	[entry: c3 c1 r6 i0 i5 ]	[exit: c3 c1 r6 i5 i0 ]
goto [?= (branch)]......................	[entry: c3 c1 r6 i5 i0 ]	[exit: c3 c1 r6 i5 i0 ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.BalancedBrackets, Method Name: isBalanced, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 != null goto $r1 = new java.util.Stack	[entry: r0 ]	[exit: r0 ]
$r8 = new java.lang.IllegalArgumentException	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("brackets is null")	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$r1 = new java.util.Stack...............	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.util.Stack: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
r3 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()	[entry: r2 r0 ]	[exit: r2 r3 ]
i0 = lengthof r3........................	[entry: r2 r3 ]	[exit: r2 r3 i0 ]
i3 = 0..................................	[entry: r2 r3 i0 ]	[exit: r2 r3 i3 i0 ]
if i3 >= i0 goto $z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()	[entry: r2 r3 i3 i0 ]	[exit: i0 r2 r3 i3 ]
c1 = r3[i3].............................	[entry: i0 r2 r3 i3 ]	[exit: r3 i0 i3 r2 c1 ]
lookupswitch(c1) {     case 40: goto $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);     case 41: goto $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>();     case 91: goto $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);     case 93: goto $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>();     case 123: goto $r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1);     case 125: goto $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>();     default: goto return 0; }	[entry: r3 i0 i3 r2 c1 ]	[exit: r3 i0 i3 c1 r2 ]
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1)	[entry: r3 i0 i3 r2 c1 ]	[exit: r3 i0 i3 $r6 r2 ]
virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6)	[entry: r3 i0 i3 $r6 r2 ]	[exit: r2 r3 i0 i3 ]
goto [?= i3 = i3 + 1]...................	[entry: r2 r3 i0 i3 ]	[exit: r2 r3 i0 i3 ]
$z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()	[entry: r3 i0 i3 c1 r2 ]	[exit: r3 i0 i3 c1 r2 $z1 ]
if $z1 != 0 goto return 0...............	[entry: r3 i0 i3 c1 r2 $z1 ]	[exit: r3 i0 i3 c1 r2 ]
$r4 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()	[entry: r3 i0 i3 c1 r2 ]	[exit: r2 r3 i0 i3 c1 $r4 ]
$r5 = (java.lang.Character) $r4.........	[entry: r2 r3 i0 i3 c1 $r4 ]	[exit: r2 r3 i0 i3 c1 $r5 ]
$c2 = virtualinvoke $r5.<java.lang.Character: char charValue()>()	[entry: r2 r3 i0 i3 c1 $r5 ]	[exit: r2 r3 i0 i3 $c2 c1 ]
$z2 = staticinvoke <DataStructures.Stacks.BalancedBrackets: boolean isPaired(char,char)>($c2, c1)	[entry: r2 r3 i0 i3 $c2 c1 ]	[exit: r2 r3 i0 i3 $z2 ]
if $z2 != 0 goto i3 = i3 + 1............	[entry: r2 r3 i0 i3 $z2 ]	[exit: r2 r3 i0 i3 ]
return 0................................	[entry: ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
i3 = i3 + 1.............................	[entry: r2 r3 i0 i3 ]	[exit: r2 r3 i3 i0 ]
goto [?= (branch)]......................	[entry: r2 r3 i3 i0 ]	[exit: r2 r3 i3 i0 ]
$z0 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()	[entry: r2 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.BalancedBrackets, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <DataStructures.Stacks.BalancedBrackets: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <DataStructures.Stacks.BalancedBrackets: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z3 = staticinvoke <DataStructures.Stacks.BalancedBrackets: boolean isBalanced(java.lang.String)>("[()]{}{[()()]()}")	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z1 = <DataStructures.Stacks.BalancedBrackets: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z1 = <DataStructures.Stacks.BalancedBrackets: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto return.................	[entry: $z1 ]	[exit: ]
$z2 = staticinvoke <DataStructures.Stacks.BalancedBrackets: boolean isBalanced(java.lang.String)>("[(])")	[entry: ]	[exit: $z2 ]
if $z2 == 0 goto return.................	[entry: $z2 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.LinkedListStack, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.LinkedListStack	[entry: ]	[exit: r0 ]
r7 = r0.<DataStructures.Stacks.LinkedListStack: DataStructures.Stacks.Node head>	[entry: r0 ]	[exit: r7 ]
$r1 = new java.lang.StringBuilder.......	[entry: r7 ]	[exit: r7 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r7 $r1 ]	[exit: r7 $r1 ]
r2 = $r1................................	[entry: r7 $r1 ]	[exit: r2 r7 ]
if r7 == null goto $i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 r7 ]	[exit: r2 r7 ]
$i3 = r7.<DataStructures.Stacks.Node: int data>	[entry: r2 r7 ]	[exit: r7 $i3 r2 ]
$r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r7 $i3 r2 ]	[exit: r2 r7 $r5 ]
virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->")	[entry: r2 r7 $r5 ]	[exit: r2 r7 ]
r7 = r7.<DataStructures.Stacks.Node: DataStructures.Stacks.Node next>	[entry: r2 r7 ]	[exit: r2 r7 ]
goto [?= (branch)]......................	[entry: r2 r7 ]	[exit: r2 r7 ]
$i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 ]	[exit: r2 $i0 ]
$i1 = $i0 - 2...........................	[entry: r2 $i0 ]	[exit: $i1 r2 ]
$i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: $i1 r2 ]	[exit: $i1 $i2 r2 ]
$r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i1, $i2, "")	[entry: $i1 $i2 r2 ]	[exit: $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 ]	[exit: $r4 ]
return $r4..............................	[entry: $r4 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackOfLinkedList, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Stacks.LinkedListStack	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Stacks.LinkedListStack: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: boolean push(int)>(1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: boolean push(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: boolean push(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: boolean push(int)>(4)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: boolean push(int)>(5)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r4 r1 ]
$r3 = new java.lang.StringBuilder.......	[entry: $r4 r1 ]	[exit: $r4 r1 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: $r4 r1 $r3 ]	[exit: $r4 r1 $r3 ]
$r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Size of stack currently is: ")	[entry: $r4 r1 $r3 ]	[exit: $r4 $r5 r1 ]
$i0 = virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: int getSize()>()	[entry: $r4 $r5 r1 ]	[exit: r1 $r4 $i0 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 $r4 $i0 $r5 ]	[exit: r1 $r4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r4 $r6 ]	[exit: r1 $r7 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: r1 $r7 $r4 ]	[exit: r1 ]
$z5 = <DataStructures.Stacks.StackOfLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto $z6 = <DataStructures.Stacks.StackOfLinkedList: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: int pop()>()	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 == 5 goto $z6 = <DataStructures.Stacks.StackOfLinkedList: boolean $assertionsDisabled>	[entry: r1 $i3 ]	[exit: r1 ]
$r14 = new java.lang.AssertionError.....	[entry: ]	[exit: $r14 ]
specialinvoke $r14.<java.lang.AssertionError: void <init>()>()	[entry: $r14 ]	[exit: $r14 ]
throw $r14..............................	[entry: $r14 ]	[exit: ]
$z6 = <DataStructures.Stacks.StackOfLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $r9 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z6 ]	[exit: r1 ]
$i2 = virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: int pop()>()	[entry: r1 ]	[exit: r1 $i2 ]
if $i2 == 4 goto $r9 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $i2 ]	[exit: r1 ]
$r13 = new java.lang.AssertionError.....	[entry: ]	[exit: $r13 ]
specialinvoke $r13.<java.lang.AssertionError: void <init>()>()	[entry: $r13 ]	[exit: $r13 ]
throw $r13..............................	[entry: $r13 ]	[exit: ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r9 r1 ]
$r8 = new java.lang.StringBuilder.......	[entry: $r9 r1 ]	[exit: $r9 r1 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: $r9 r1 $r8 ]	[exit: $r9 r1 $r8 ]
$r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Top element of stack currently is: ")	[entry: $r9 r1 $r8 ]	[exit: $r9 $r10 r1 ]
$i1 = virtualinvoke r1.<DataStructures.Stacks.LinkedListStack: int peek()>()	[entry: $r9 $r10 r1 ]	[exit: $r9 $i1 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: $r9 $i1 $r10 ]	[exit: $r9 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r9 $r11 ]	[exit: $r12 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r12)	[entry: $r12 $r9 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Stacks.StackArray	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Stacks.StackArray: void <init>(int)>(4)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z11 = virtualinvoke r1.<DataStructures.Stacks.StackArray: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z11 ]
if $z11 != 0 goto $z1 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z11 ]	[exit: r1 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z1 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(5)	[entry: r1 $z1 ]	[exit: r1 ]
$z10 = virtualinvoke r1.<DataStructures.Stacks.StackArray: boolean isFull()>()	[entry: r1 ]	[exit: r1 $z10 ]
if $z10 == 0 goto virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(5)	[entry: r1 $z10 ]	[exit: r1 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(8)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.StackArray: void push(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z2 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto $z3 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z2 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<DataStructures.Stacks.StackArray: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 == 0 goto $z3 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z3 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto $z4 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z3 ]	[exit: r1 ]
$z8 = virtualinvoke r1.<DataStructures.Stacks.StackArray: boolean isFull()>()	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto $z4 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z8 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z4 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto $z5 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z4 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Stacks.StackArray: int peek()>()	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 == 9 goto $z5 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $i3 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z5 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto $z6 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$i2 = virtualinvoke r1.<DataStructures.Stacks.StackArray: int pop()>()	[entry: r1 ]	[exit: r1 $i2 ]
if $i2 == 9 goto $z6 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $i2 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z6 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z7 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$i1 = virtualinvoke r1.<DataStructures.Stacks.StackArray: int peek()>()	[entry: r1 ]	[exit: r1 $i1 ]
if $i1 == 2 goto $z7 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 $i1 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z7 = <DataStructures.Stacks.StackArray: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto return.................	[entry: r1 $z7 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<DataStructures.Stacks.StackArray: int size()>()	[entry: r1 ]	[exit: $i0 ]
if $i0 == 3 goto return.................	[entry: $i0 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: push, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
$z0 = virtualinvoke r0.<DataStructures.Stacks.StackArray: boolean isFull()>()	[entry: i2 r0 ]	[exit: i2 r0 $z0 ]
if $z0 != 0 goto $i0 = r0.<DataStructures.Stacks.StackArray: int maxSize>	[entry: i2 r0 $z0 ]	[exit: i2 r0 ]
$i3 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: i2 r0 ]	[exit: i2 r0 $i3 ]
$i4 = $i3 + 1...........................	[entry: i2 r0 $i3 ]	[exit: i2 r0 $i4 ]
r0.<DataStructures.Stacks.StackArray: int top> = $i4	[entry: i2 r0 $i4 ]	[exit: i2 r0 ]
$r1 = r0.<DataStructures.Stacks.StackArray: int[] stackArray>	[entry: i2 r0 ]	[exit: $r1 i2 r0 ]
$i5 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: $r1 i2 r0 ]	[exit: $r1 $i5 i2 ]
$r1[$i5] = i2...........................	[entry: $r1 $i5 i2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
$i0 = r0.<DataStructures.Stacks.StackArray: int maxSize>	[entry: i2 r0 ]	[exit: i2 r0 $i0 ]
$i1 = $i0 * 2...........................	[entry: i2 r0 $i0 ]	[exit: i2 $i1 r0 ]
specialinvoke r0.<DataStructures.Stacks.StackArray: void resize(int)>($i1)	[entry: i2 $i1 r0 ]	[exit: i2 r0 ]
virtualinvoke r0.<DataStructures.Stacks.StackArray: void push(int)>(i2)	[entry: i2 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: pop, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Stacks.StackArray: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 != 0 goto $i2 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: r0 $z0 ]	[exit: r0 ]
$r2 = r0.<DataStructures.Stacks.StackArray: int[] stackArray>	[entry: r0 ]	[exit: $r2 r0 ]
$i6 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: $r2 r0 ]	[exit: $r2 r0 $i6 ]
$i7 = $i6 - 1...........................	[entry: $r2 r0 $i6 ]	[exit: $r2 $i6 r0 $i7 ]
r0.<DataStructures.Stacks.StackArray: int top> = $i7	[entry: $r2 $i6 r0 $i7 ]	[exit: $r2 $i6 ]
$i8 = $r2[$i6]..........................	[entry: $r2 $i6 ]	[exit: $i8 ]
return $i8..............................	[entry: $i8 ]	[exit: ]
$i2 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: r0 ]	[exit: $i2 r0 ]
$i0 = r0.<DataStructures.Stacks.StackArray: int maxSize>	[entry: $i2 r0 ]	[exit: r0 $i2 $i0 ]
$i1 = $i0 / 4...........................	[entry: r0 $i2 $i0 ]	[exit: r0 $i2 $i1 ]
if $i2 >= $i1 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 $i2 $i1 ]	[exit: r0 ]
$i3 = r0.<DataStructures.Stacks.StackArray: int maxSize>	[entry: r0 ]	[exit: r0 $i3 ]
$i4 = $i3 / 2...........................	[entry: r0 $i3 ]	[exit: $i4 r0 ]
specialinvoke r0.<DataStructures.Stacks.StackArray: void resize(int)>($i4)	[entry: $i4 r0 ]	[exit: r0 ]
$i5 = virtualinvoke r0.<DataStructures.Stacks.StackArray: int pop()>()	[entry: r0 ]	[exit: $i5 ]
return $i5..............................	[entry: $i5 ]	[exit: ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("The stack is already empty")	[entry: $r1 ]	[exit: ]
return -1...............................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: peek, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Stacks.StackArray: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 != 0 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 $z0 ]	[exit: r0 ]
$r2 = r0.<DataStructures.Stacks.StackArray: int[] stackArray>	[entry: r0 ]	[exit: $r2 r0 ]
$i0 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: $r2 r0 ]	[exit: $r2 $i0 ]
$i1 = $r2[$i0]..........................	[entry: $r2 $i0 ]	[exit: $i1 ]
return $i1..............................	[entry: $i1 ]	[exit: ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("The stack is empty, cant peek")	[entry: $r1 ]	[exit: ]
return -1...............................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: isEmpty, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: r0 ]	[exit: $i0 ]
if $i0 != -1 goto $z0 = 0...............	[entry: $i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: isFull, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: r0 ]	[exit: r0 $i0 ]
$i2 = $i0 + 1...........................	[entry: r0 $i0 ]	[exit: $i2 r0 ]
$i1 = r0.<DataStructures.Stacks.StackArray: int maxSize>	[entry: $i2 r0 ]	[exit: $i2 $i1 ]
if $i2 != $i1 goto $z0 = 0..............	[entry: $i2 $i1 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArray, Method Name: size, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArray	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Stacks.StackArray: int top>	[entry: r0 ]	[exit: $i0 ]
$i1 = $i0 + 1...........................	[entry: $i0 ]	[exit: $i1 ]
return $i1..............................	[entry: $i1 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Stacks.StackArrayList	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Stacks.StackArrayList: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto i7 = 1.................	[entry: r1 $z0 ]	[exit: r1 ]
$z7 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto i7 = 1.................	[entry: r1 $z7 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
i7 = 1..................................	[entry: r1 ]	[exit: r1 i7 ]
if i7 > 5 goto $z1 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 i7 ]	[exit: i7 r1 ]
virtualinvoke r1.<DataStructures.Stacks.StackArrayList: void push(int)>(i7)	[entry: i7 r1 ]	[exit: i7 r1 ]
$z6 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: i7 r1 ]	[exit: i7 r1 $z6 ]
if $z6 != 0 goto i7 = i7 + 1............	[entry: i7 r1 $z6 ]	[exit: i7 r1 ]
$i6 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int size()>()	[entry: i7 r1 ]	[exit: r1 $i6 i7 ]
if $i6 == i7 goto i7 = i7 + 1...........	[entry: r1 $i6 i7 ]	[exit: r1 i7 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
i7 = i7 + 1.............................	[entry: r1 i7 ]	[exit: r1 i7 ]
goto [?= (branch)]......................	[entry: r1 i7 ]	[exit: r1 i7 ]
$z1 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto $z2 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 $z1 ]	[exit: r1 ]
$i5 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int size()>()	[entry: r1 ]	[exit: r1 $i5 ]
if $i5 == 5 goto $z2 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 $i5 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto $z8 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r1 $z2 ]	[exit: r1 ]
$i2 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int peek()>()	[entry: r1 ]	[exit: r1 $i2 ]
if $i2 != 5 goto $r9 = new java.lang.AssertionError	[entry: r1 $i2 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int pop()>()	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 != 5 goto $r9 = new java.lang.AssertionError	[entry: r1 $i3 ]	[exit: r1 ]
$i4 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int peek()>()	[entry: r1 ]	[exit: r1 $i4 ]
if $i4 == 4 goto $z8 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r1 $i4 ]	[exit: r1 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z8 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto $z3 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 $z8 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int pop()>()	[entry: r1 ]	[exit: r1 ]
goto [?= $z8 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()]	[entry: r1 ]	[exit: r1 ]
$z3 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int pop()>()	[entry: r1 $z3 ]	[exit: r1 ]
$z5 = virtualinvoke r1.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int pop()>()	[entry: r1 $z5 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<DataStructures.Stacks.StackArrayList: int pop()>()	[entry: r1 ]	[exit: ]
$z4 = <DataStructures.Stacks.StackArrayList: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto (branch)...............	[entry: $z4 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
$r7 := @caughtexception.................	[entry: ]	[exit: $r7 ]
r10 = $r7...............................	[entry: $r7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: push, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArrayList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
$r1 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: i0 r0 ]	[exit: $r1 i0 ]
$r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)	[entry: $r1 i0 ]	[exit: $r2 $r1 ]
virtualinvoke $r1.<java.util.ArrayList: boolean add(java.lang.Object)>($r2)	[entry: $r2 $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: pop, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArrayList	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r2 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 $z0 ]	[exit: r0 ]
$r5 = new java.util.EmptyStackException.	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.util.EmptyStackException: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$r2 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 ]	[exit: $r2 r0 ]
$r1 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: $r2 r0 ]	[exit: $r2 $r1 ]
$i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()	[entry: $r2 $r1 ]	[exit: $r2 $i0 ]
$i1 = $i0 - 1...........................	[entry: $r2 $i0 ]	[exit: $i1 $r2 ]
$r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object remove(int)>($i1)	[entry: $i1 $r2 ]	[exit: $r3 ]
$r4 = (java.lang.Integer) $r3...........	[entry: $r3 ]	[exit: $r4 ]
$i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()	[entry: $r4 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: isEmpty, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArrayList	[entry: ]	[exit: r0 ]
$r1 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 ]	[exit: $r1 ]
$z0 = virtualinvoke $r1.<java.util.ArrayList: boolean isEmpty()>()	[entry: $r1 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: peek, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArrayList	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Stacks.StackArrayList: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r2 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 $z0 ]	[exit: r0 ]
$r5 = new java.util.EmptyStackException.	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.util.EmptyStackException: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$r2 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 ]	[exit: $r2 r0 ]
$r1 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: $r2 r0 ]	[exit: $r2 $r1 ]
$i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()	[entry: $r2 $r1 ]	[exit: $r2 $i0 ]
$i1 = $i0 - 1...........................	[entry: $r2 $i0 ]	[exit: $i1 $r2 ]
$r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>($i1)	[entry: $i1 $r2 ]	[exit: $r3 ]
$r4 = (java.lang.Integer) $r3...........	[entry: $r3 ]	[exit: $r4 ]
$i2 = virtualinvoke $r4.<java.lang.Integer: int intValue()>()	[entry: $r4 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: DataStructures.Stacks.StackArrayList, Method Name: size, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Stacks.StackArrayList	[entry: ]	[exit: r0 ]
$r1 = r0.<DataStructures.Stacks.StackArrayList: java.util.ArrayList stack>	[entry: r0 ]	[exit: $r1 ]
$i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>()	[entry: $r1 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: r0 ]
i1 := @parameter0: int..................	[entry: r0 ]	[exit: i1 r0 ]
$z0 = virtualinvoke r0.<DataStructures.Heaps.MinPriorityQueue: boolean isFull()>()	[entry: i1 r0 ]	[exit: i1 r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i1 r0 $z0 ]	[exit: i1 r0 ]
return..................................	[entry: ]	[exit: ]
$r1 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i1 r0 ]	[exit: $r1 i1 r0 ]
$i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: $r1 i1 r0 ]	[exit: r0 $r1 i1 $i0 ]
$i2 = $i0 + 1...........................	[entry: r0 $r1 i1 $i0 ]	[exit: r0 $r1 $i2 i1 ]
$r1[$i2] = i1...........................	[entry: r0 $r1 $i2 i1 ]	[exit: r0 ]
$i3 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: r0 ]	[exit: r0 $i3 ]
i13 = $i3 + 1...........................	[entry: r0 $i3 ]	[exit: r0 i13 ]
if i13 <= 1 goto $i4 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: r0 i13 ]	[exit: r0 i13 ]
$r2 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i13 r0 ]	[exit: r0 $r2 i13 ]
$i8 = $r2[i13]..........................	[entry: r0 $r2 i13 ]	[exit: $i8 i13 r0 ]
$r3 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: $i8 i13 r0 ]	[exit: r0 $i8 $r3 i13 ]
$i6 = i13 / 2...........................	[entry: r0 $i8 $r3 i13 ]	[exit: r0 i13 $i8 $r3 $i6 ]
$i7 = $r3[$i6]..........................	[entry: r0 i13 $i8 $r3 $i6 ]	[exit: r0 i13 $i8 $i7 ]
if $i8 >= $i7 goto i13 = i13 / 2........	[entry: r0 i13 $i8 $i7 ]	[exit: r0 i13 ]
$r4 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i13 r0 ]	[exit: r0 $r4 i13 ]
i9 = $r4[i13]...........................	[entry: r0 $r4 i13 ]	[exit: i9 i13 r0 ]
$r6 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i9 i13 r0 ]	[exit: i9 $r6 i13 r0 ]
$r5 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i9 $r6 i13 r0 ]	[exit: i9 r0 $r6 $r5 i13 ]
$i10 = i13 / 2..........................	[entry: i9 r0 $r6 $r5 i13 ]	[exit: i9 r0 $r6 i13 $r5 $i10 ]
$i11 = $r5[$i10]........................	[entry: i9 r0 $r6 i13 $r5 $i10 ]	[exit: i9 r0 $r6 i13 $i11 ]
$r6[i13] = $i11.........................	[entry: i9 r0 $r6 i13 $i11 ]	[exit: i9 i13 r0 ]
$r7 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i9 i13 r0 ]	[exit: r0 $r7 i9 i13 ]
$i12 = i13 / 2..........................	[entry: r0 $r7 i9 i13 ]	[exit: r0 i13 $r7 $i12 i9 ]
$r7[$i12] = i9..........................	[entry: r0 i13 $r7 $i12 i9 ]	[exit: r0 i13 ]
i13 = i13 / 2...........................	[entry: r0 i13 ]	[exit: r0 i13 ]
goto [?= (branch)]......................	[entry: r0 i13 ]	[exit: r0 i13 ]
$i4 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: r0 ]	[exit: r0 $i4 ]
$i5 = $i4 + 1...........................	[entry: r0 $i4 ]	[exit: r0 $i5 ]
r0.<DataStructures.Heaps.MinPriorityQueue: int size> = $i5	[entry: r0 $i5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: isFull, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: r0 ]
$i1 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: r0 ]	[exit: $i1 r0 ]
$i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int capacity>	[entry: $i1 r0 ]	[exit: $i1 $i0 ]
if $i1 != $i0 goto return 0.............	[entry: $i1 $i0 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: print, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: r0 ]
i2 = 1..................................	[entry: r0 ]	[exit: i2 r0 ]
$i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int capacity>	[entry: i2 r0 ]	[exit: r0 i2 $i0 ]
if i2 > $i0 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i2 $i0 ]	[exit: i2 r0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i2 r0 ]	[exit: $r3 i2 r0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 i2 r0 ]	[exit: $r3 i2 r0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 i2 r0 $r2 ]	[exit: $r3 $r2 i2 r0 ]
$r4 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: $r3 $r2 i2 r0 ]	[exit: r0 $r3 $r2 $r4 i2 ]
$i1 = $r4[i2]...........................	[entry: r0 $r3 $r2 $r4 i2 ]	[exit: r0 i2 $r3 $i1 $r2 ]
$r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: r0 i2 $r3 $i1 $r2 ]	[exit: r0 i2 $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r0 i2 $r3 $r5 ]	[exit: r0 i2 $r3 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i2 $r3 $r6 ]	[exit: r0 i2 $r7 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r7)	[entry: r0 i2 $r7 $r3 ]	[exit: r0 i2 ]
i2 = i2 + 1.............................	[entry: r0 i2 ]	[exit: i2 r0 ]
goto [?= $i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int capacity>]	[entry: i2 r0 ]	[exit: i2 r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println()>()	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: heapSort, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: r0 ]
i2 = 1..................................	[entry: r0 ]	[exit: i2 r0 ]
$i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int capacity>	[entry: i2 r0 ]	[exit: r0 i2 $i0 ]
if i2 >= $i0 goto return................	[entry: r0 i2 $i0 ]	[exit: i2 r0 ]
virtualinvoke r0.<DataStructures.Heaps.MinPriorityQueue: int delete()>()	[entry: i2 r0 ]	[exit: r0 i2 ]
i2 = i2 + 1.............................	[entry: r0 i2 ]	[exit: i2 r0 ]
goto [?= $i0 = r0.<DataStructures.Heaps.MinPriorityQueue: int capacity>]	[entry: i2 r0 ]	[exit: i2 r0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: delete, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: r0 ]
$r1 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: r0 ]	[exit: r0 $r1 ]
i0 = $r1[1].............................	[entry: r0 $r1 ]	[exit: i0 r0 ]
$r3 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i0 r0 ]	[exit: i0 $r3 r0 ]
$r2 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i0 $r3 r0 ]	[exit: i0 $r3 $r2 r0 ]
$i1 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: i0 $r3 $r2 r0 ]	[exit: i0 r0 $r3 $r2 $i1 ]
$i2 = $r2[$i1]..........................	[entry: i0 r0 $r3 $r2 $i1 ]	[exit: i0 r0 $r3 $i2 ]
$r3[1] = $i2............................	[entry: i0 r0 $r3 $i2 ]	[exit: i0 r0 ]
$r4 = r0.<DataStructures.Heaps.MinPriorityQueue: int[] heap>	[entry: i0 r0 ]	[exit: $r4 i0 r0 ]
$i3 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: $r4 i0 r0 ]	[exit: r0 $r4 $i3 i0 ]
$r4[$i3] = i0...........................	[entry: r0 $r4 $i3 i0 ]	[exit: i0 r0 ]
$i4 = r0.<DataStructures.Heaps.MinPriorityQueue: int size>	[entry: i0 r0 ]	[exit: i0 r0 $i4 ]
$i5 = $i4 - 1...........................	[entry: i0 r0 $i4 ]	[exit: i0 r0 $i5 ]
r0.<DataStructures.Heaps.MinPriorityQueue: int size> = $i5	[entry: i0 r0 $i5 ]	[exit: i0 r0 ]
specialinvoke r0.<DataStructures.Heaps.MinPriorityQueue: void sink()>()	[entry: i0 r0 ]	[exit: i0 ]
return i0...............................	[entry: i0 ]	[exit: ]
********************
Class Name: DataStructures.Heaps.MinPriorityQueue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Heaps.MinPriorityQueue	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Heaps.MinPriorityQueue: void <init>(int)>(8)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(4)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(7)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(6)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void insert(int)>(8)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void print()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void heapSort()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Heaps.MinPriorityQueue: void print()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.ConnectedComponent, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r46 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.Graph...	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.Graph: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97)	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(98)	[entry: $r2 r1 ]	[exit: $r2 $r3 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r2, $r3)	[entry: $r2 $r3 r1 ]	[exit: r1 ]
$r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97)	[entry: r1 ]	[exit: $r4 r1 ]
$r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(101)	[entry: $r4 r1 ]	[exit: $r4 $r5 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r4, $r5)	[entry: $r4 $r5 r1 ]	[exit: r1 ]
$r6 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(98)	[entry: r1 ]	[exit: $r6 r1 ]
$r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(101)	[entry: $r6 r1 ]	[exit: $r6 $r7 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r6, $r7)	[entry: $r6 $r7 r1 ]	[exit: r1 ]
$r8 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(98)	[entry: r1 ]	[exit: $r8 r1 ]
$r9 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(99)	[entry: $r8 r1 ]	[exit: $r8 $r9 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r8, $r9)	[entry: $r8 $r9 r1 ]	[exit: r1 ]
$r10 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(99)	[entry: r1 ]	[exit: $r10 r1 ]
$r11 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(100)	[entry: $r10 r1 ]	[exit: $r10 $r11 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r10, $r11)	[entry: $r10 $r11 r1 ]	[exit: r1 ]
$r12 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(100)	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(97)	[entry: $r12 r1 ]	[exit: $r12 $r13 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r12, $r13)	[entry: $r12 $r13 r1 ]	[exit: r1 ]
$r14 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(120)	[entry: r1 ]	[exit: $r14 r1 ]
$r15 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(121)	[entry: $r14 r1 ]	[exit: $r14 $r15 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r14, $r15)	[entry: $r14 $r15 r1 ]	[exit: r1 ]
$r16 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(120)	[entry: r1 ]	[exit: $r16 r1 ]
$r17 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(122)	[entry: $r16 r1 ]	[exit: $r16 $r17 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r16, $r17)	[entry: $r16 $r17 r1 ]	[exit: r1 ]
$r18 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(119)	[entry: r1 ]	[exit: $r18 r1 ]
$r19 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(119)	[entry: $r18 r1 ]	[exit: $r18 $r19 r1 ]
virtualinvoke r1.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r18, $r19)	[entry: $r18 $r19 r1 ]	[exit: r1 ]
$r20 = new DataStructures.Graphs.Graph..	[entry: r1 ]	[exit: r1 $r20 ]
specialinvoke $r20.<DataStructures.Graphs.Graph: void <init>()>()	[entry: r1 $r20 ]	[exit: r1 $r20 ]
r21 = $r20..............................	[entry: r1 $r20 ]	[exit: r1 r21 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 r21 ]	[exit: r1 $r22 r21 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 $r22 r21 ]	[exit: r1 $r22 $r23 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r22, $r23)	[entry: r1 $r22 $r23 r21 ]	[exit: r1 r21 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r21 ]	[exit: r1 $r24 r21 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 $r24 r21 ]	[exit: r1 $r24 $r25 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r24, $r25)	[entry: r1 $r24 $r25 r21 ]	[exit: r1 r21 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 r21 ]	[exit: r1 $r26 r21 ]
$r27 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 $r26 r21 ]	[exit: r1 $r26 $r27 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r26, $r27)	[entry: r1 $r26 $r27 r21 ]	[exit: r1 r21 ]
$r28 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 r21 ]	[exit: r1 $r28 r21 ]
$r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: r1 $r28 r21 ]	[exit: r1 $r28 $r29 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r28, $r29)	[entry: r1 $r28 $r29 r21 ]	[exit: r1 r21 ]
$r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(7)	[entry: r1 r21 ]	[exit: r1 $r30 r21 ]
$r31 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 $r30 r21 ]	[exit: r1 $r30 $r31 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r30, $r31)	[entry: r1 $r30 $r31 r21 ]	[exit: r1 r21 ]
$r32 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 r21 ]	[exit: r1 $r32 r21 ]
$r33 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 $r32 r21 ]	[exit: r1 $r32 $r33 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r32, $r33)	[entry: r1 $r32 $r33 r21 ]	[exit: r1 r21 ]
$r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10)	[entry: r1 r21 ]	[exit: r1 $r34 r21 ]
$r35 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8)	[entry: r1 $r34 r21 ]	[exit: r1 $r34 $r35 r21 ]
virtualinvoke r21.<DataStructures.Graphs.Graph: void addEdge(java.lang.Comparable,java.lang.Comparable)>($r34, $r35)	[entry: r1 $r34 $r35 r21 ]	[exit: r21 r1 ]
$r37 = <java.lang.System: java.io.PrintStream out>	[entry: r21 r1 ]	[exit: r21 $r37 r1 ]
$r36 = new java.lang.StringBuilder......	[entry: r21 $r37 r1 ]	[exit: r21 $r37 r1 $r36 ]
specialinvoke $r36.<java.lang.StringBuilder: void <init>()>()	[entry: r21 $r37 r1 $r36 ]	[exit: r21 $r37 r1 $r36 ]
$r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Amount of different char-graphs: ")	[entry: r21 $r37 r1 $r36 ]	[exit: r21 $r37 $r38 r1 ]
$i0 = virtualinvoke r1.<DataStructures.Graphs.Graph: int countGraphs()>()	[entry: r21 $r37 $r38 r1 ]	[exit: r21 $r37 $i0 $r38 ]
$r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r21 $r37 $i0 $r38 ]	[exit: r21 $r37 $r39 ]
$r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r21 $r37 $r39 ]	[exit: r21 $r40 $r37 ]
virtualinvoke $r37.<java.io.PrintStream: void println(java.lang.String)>($r40)	[entry: r21 $r40 $r37 ]	[exit: r21 ]
$r42 = <java.lang.System: java.io.PrintStream out>	[entry: r21 ]	[exit: $r42 r21 ]
$r41 = new java.lang.StringBuilder......	[entry: $r42 r21 ]	[exit: $r42 r21 $r41 ]
specialinvoke $r41.<java.lang.StringBuilder: void <init>()>()	[entry: $r42 r21 $r41 ]	[exit: $r42 r21 $r41 ]
$r43 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Amount of different int-graphs: ")	[entry: $r42 r21 $r41 ]	[exit: $r42 $r43 r21 ]
$i1 = virtualinvoke r21.<DataStructures.Graphs.Graph: int countGraphs()>()	[entry: $r42 $r43 r21 ]	[exit: $r42 $i1 $r43 ]
$r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)	[entry: $r42 $i1 $r43 ]	[exit: $r42 $r44 ]
$r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r42 $r44 ]	[exit: $r45 $r42 ]
virtualinvoke $r42.<java.io.PrintStream: void println(java.lang.String)>($r45)	[entry: $r45 $r42 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: printPath, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: DataStructures.Graphs.BellmanFord	[entry: ]	[exit: r1 ]
r0 := @parameter0: int[]................	[entry: r1 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
$i1 = r0[i0]............................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 $i1 ]
if $i1 != -1 goto $i2 = r0[i0]..........	[entry: r1 r0 i0 $i1 ]	[exit: r1 r0 i0 ]
return..................................	[entry: ]	[exit: ]
$i2 = r0[i0]............................	[entry: r1 r0 i0 ]	[exit: i0 r0 $i2 r1 ]
virtualinvoke r1.<DataStructures.Graphs.BellmanFord: void printPath(int[],int)>(r0, $i2)	[entry: i0 r0 $i2 r1 ]	[exit: i0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r3 i0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 i0 ]	[exit: $r3 i0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 i0 $r2 ]	[exit: $r3 i0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r3 i0 $r2 ]	[exit: $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: $r3 $r4 ]	[exit: $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 $r5 ]	[exit: $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: $r6 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.BellmanFord	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.BellmanFord: void <init>(int,int)>(0, 0)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.BellmanFord: void go()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: go, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @this: DataStructures.Graphs.BellmanFord	[entry: ]	[exit: r11 ]
$r0 = new java.util.Scanner.............	[entry: r11 ]	[exit: r11 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: r11 $r0 ]	[exit: r11 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: r11 $r1 $r0 ]	[exit: r11 $r0 ]
r2 = $r0................................	[entry: r11 $r0 ]	[exit: r11 r2 ]
z0 = 0..................................	[entry: r11 r2 ]	[exit: r11 z0 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r11 z0 r2 ]	[exit: r11 z0 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter no. of vertices and edges please")	[entry: r11 z0 r2 $r3 ]	[exit: r11 z0 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r11 z0 r2 ]	[exit: r11 z0 i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r11 z0 i0 r2 ]	[exit: r2 r11 z0 i0 i1 ]
r4 = newarray (DataStructures.Graphs.BellmanFord$Edge)[i1]	[entry: r2 r11 z0 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i1 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r11 z0 r4 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i1 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Input edges")	[entry: r2 r11 z0 r4 i0 i1 $r5 ]	[exit: r2 r11 z0 r4 i0 i1 ]
i30 = 0.................................	[entry: r2 r11 z0 r4 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
if i30 >= i1 goto r6 = newarray (int)[i0]	[entry: r2 r11 z0 r4 i0 i30 i1 ]	[exit: r2 r11 z0 r4 i1 i0 i30 ]
i27 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 r2 ]	[exit: z0 i0 i1 r4 i30 r11 i27 r2 ]
i28 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 i27 r2 ]	[exit: z0 i0 i1 r4 i30 r11 i27 i28 r2 ]
i29 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 i27 i28 r2 ]	[exit: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 ]
$r33 = new DataStructures.Graphs.BellmanFord$Edge	[entry: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 ]	[exit: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 $r33 ]
specialinvoke $r33.<DataStructures.Graphs.BellmanFord$Edge: void <init>(DataStructures.Graphs.BellmanFord,int,int,int)>(r11, i27, i28, i29)	[entry: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 $r33 ]	[exit: r2 r11 z0 i0 i1 r4 i30 $r33 ]
r4[i30] = $r33..........................	[entry: r2 r11 z0 i0 i1 r4 i30 $r33 ]	[exit: r2 r11 z0 r4 i0 i1 i30 ]
i30 = i30 + 1...........................	[entry: r2 r11 z0 r4 i0 i1 i30 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
goto [?= (branch)]......................	[entry: r2 r11 z0 r4 i0 i30 i1 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
r6 = newarray (int)[i0].................	[entry: r2 r11 z0 r4 i1 i0 ]	[exit: r2 r11 z0 r4 i1 r6 i0 ]
r7 = newarray (int)[i0].................	[entry: r2 r11 z0 r4 i1 r6 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i0 ]
i31 = 0.................................	[entry: r2 r11 z0 r4 i1 r7 r6 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
if i31 >= i0 goto r6[0] = 0.............	[entry: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]	[exit: r2 r11 z0 r4 i1 i0 r7 r6 i31 ]
r6[i31] = 2147483647....................	[entry: r2 r11 z0 r4 i1 r7 i0 r6 i31 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i0 i31 ]
i31 = i31 + 1...........................	[entry: r2 r11 z0 r4 i1 r7 r6 i0 i31 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
goto [?= (branch)]......................	[entry: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
r6[0] = 0...............................	[entry: r2 r11 z0 r4 i1 i0 r7 r6 ]	[exit: r2 r11 r6 z0 r4 i1 i0 r7 ]
r7[0] = -1..............................	[entry: r2 r11 r6 z0 r4 i1 i0 r7 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i0 ]
i32 = 0.................................	[entry: r2 r7 r11 r6 z0 r4 i1 i0 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
$i2 = i0 - 1............................	[entry: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i32 $i2 ]
if i32 >= $i2 goto i34 = 0..............	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i32 $i2 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i32 ]
i33 = 0.................................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
if i33 >= i1 goto i32 = i32 + 1.........	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i0 i32 i33 ]
$r24 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 r6 r4 i33 ]	[exit: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $r24 ]
$i12 = $r24.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $r24 ]	[exit: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $i12 ]
$i13 = r6[$i12].........................	[entry: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $i12 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i13 ]
if $i13 == 2147483647 goto i33 = i33 + 1	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i13 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
$r25 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 r6 r4 i33 ]	[exit: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $r25 ]
$i14 = $r25.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $r25 ]	[exit: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $i14 ]
$i19 = r6[$i14].........................	[entry: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $i14 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r6 r4 i33 ]
$r26 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r6 r4 i33 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $r26 ]
$i15 = $r26.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $r26 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $i15 ]
$i17 = r6[$i15].........................	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $i15 ]	[exit: r2 r7 r11 r6 z0 i0 i32 i1 $i19 $i17 r4 i33 ]
$r27 = r4[i33]..........................	[entry: r2 r7 r11 r6 z0 i0 i32 i1 $i19 $i17 r4 i33 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $r27 ]
$i16 = $r27.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $r27 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $i16 ]
$i18 = $i17 + $i16......................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $i16 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i18 ]
if $i19 <= $i18 goto i33 = i33 + 1......	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i18 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
$r28 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 $r28 ]
$i24 = $r28.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 $r28 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r6 r4 i33 ]
$r29 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r6 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $r29 ]
$i20 = $r29.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $r29 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $i20 ]
$i22 = r6[$i20].........................	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $i20 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r6 $i24 $i22 r4 i33 ]
$r30 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 r6 $i24 $i22 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $r30 ]
$i21 = $r30.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $r30 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $i21 ]
$i23 = $i22 + $i21......................	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $i21 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i23 ]
r6[$i24] = $i23.........................	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i23 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 ]
$r31 = r4[i33]..........................	[entry: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 $r31 ]
$i26 = $r31.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 $r31 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 $i26 r4 i33 ]
$r32 = r4[i33]..........................	[entry: r2 r11 r6 z0 i0 i32 i1 r7 $i26 r4 i33 ]	[exit: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $r32 ]
$i25 = $r32.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $r32 ]	[exit: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $i25 ]
r7[$i26] = $i25.........................	[entry: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $i25 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
i33 = i33 + 1...........................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
i32 = i32 + 1...........................	[entry: r2 r7 r11 r6 z0 r4 i1 i0 i32 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
i34 = 0.................................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
if i34 >= i1 goto (branch)..............	[entry: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]	[exit: r2 r7 r11 r6 i0 z0 i1 r4 i34 ]
$r19 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 i34 r4 r6 $r19 ]
$i4 = $r19.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 i0 z0 i1 i34 r4 r6 $r19 ]	[exit: r2 r7 r11 i0 z0 i1 i34 r4 r6 $i4 ]
$i5 = r6[$i4]...........................	[entry: r2 r7 r11 i0 z0 i1 i34 r4 r6 $i4 ]	[exit: r2 r7 r11 r6 i0 z0 i1 i34 r4 $i5 ]
if $i5 == 2147483647 goto i34 = i34 + 1.	[entry: r2 r7 r11 r6 i0 z0 i1 i34 r4 $i5 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]
$r20 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 r4 i34 r6 $r20 ]
$i6 = $r20.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r7 r11 i0 z0 i1 r4 i34 r6 $r20 ]	[exit: r2 r7 r11 i0 z0 i1 r4 i34 r6 $i6 ]
$i11 = r6[$i6]..........................	[entry: r2 r7 r11 i0 z0 i1 r4 i34 r6 $i6 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r6 r4 i34 ]
$r21 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 $i11 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $r21 ]
$i7 = $r21.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $r21 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $i7 ]
$i9 = r6[$i7]...........................	[entry: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $i7 ]	[exit: r2 r7 r11 r6 i0 z0 i1 $i11 $i9 r4 i34 ]
$r22 = r4[i34]..........................	[entry: r2 r7 r11 r6 i0 z0 i1 $i11 $i9 r4 i34 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $r22 ]
$i8 = $r22.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $r22 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $i8 ]
$i10 = $i9 + $i8........................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $i8 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i10 ]
if $i11 <= $i10 goto i34 = i34 + 1......	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i10 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]
z0 = 1..................................	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i0 z0 ]
$r23 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 z0 $r23 ]
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("Negative cycle")	[entry: r2 r7 r11 r6 i0 z0 $r23 ]	[exit: r2 r7 r11 r6 i0 z0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 z0 ]
i34 = i34 + 1...........................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
if z0 != 0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i0 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Distances are: ")	[entry: r2 r7 r11 r6 i0 $r8 ]	[exit: r2 r7 r11 r6 i0 ]
i35 = 0.................................	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i35 i0 ]
if i35 >= i0 goto $r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i35 i0 ]	[exit: r2 r7 r11 i0 r6 i35 ]
$r14 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 r6 i35 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 ]
$r13 = new java.lang.StringBuilder......	[entry: r2 r7 r11 i0 $r14 r6 i35 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r13 ]
specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()	[entry: r2 r7 r11 i0 $r14 r6 i35 $r13 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r13 ]
$r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35)	[entry: r2 r7 r11 i0 $r14 r6 i35 $r13 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 r7 r11 i0 $r14 r6 i35 $r15 ]	[exit: r2 r7 r11 i0 $r14 $r16 r6 i35 ]
$i3 = r6[i35]...........................	[entry: r2 r7 r11 i0 $r14 $r16 r6 i35 ]	[exit: r2 r7 r11 r6 i0 i35 $r14 $i3 $r16 ]
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r2 r7 r11 r6 i0 i35 $r14 $i3 $r16 ]	[exit: r2 r7 r11 r6 i0 i35 $r14 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 r7 r11 r6 i0 i35 $r14 $r17 ]	[exit: r2 r7 r11 r6 i0 i35 $r18 $r14 ]
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18)	[entry: r2 r7 r11 r6 i0 i35 $r18 $r14 ]	[exit: r2 r7 r11 r6 i0 i35 ]
i35 = i35 + 1...........................	[entry: r2 r7 r11 r6 i0 i35 ]	[exit: r2 r7 r11 r6 i35 i0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i35 i0 ]	[exit: r2 r7 r11 r6 i35 i0 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 ]	[exit: r2 r7 r11 i0 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Path followed:")	[entry: r2 r7 r11 i0 $r9 ]	[exit: r2 r7 r11 i0 ]
i36 = 0.................................	[entry: r2 r7 r11 i0 ]	[exit: r2 r7 r11 i36 i0 ]
if i36 >= i0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r7 r11 i36 i0 ]	[exit: r2 i0 r7 i36 r11 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 r7 i36 r11 ]	[exit: r2 i0 r7 i36 r11 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("0 ")	[entry: r2 i0 r7 i36 r11 $r10 ]	[exit: r2 i0 r7 i36 r11 ]
virtualinvoke r11.<DataStructures.Graphs.BellmanFord: void printPath(int[],int)>(r7, i36)	[entry: r2 i0 r7 i36 r11 ]	[exit: r2 r7 r11 i0 i36 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 i36 ]	[exit: r2 r7 r11 i0 i36 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println()>()	[entry: r2 r7 r11 i0 i36 $r12 ]	[exit: r2 r7 r11 i0 i36 ]
i36 = i36 + 1...........................	[entry: r2 r7 r11 i0 i36 ]	[exit: r2 r7 r11 i36 i0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 i36 i0 ]	[exit: r2 r7 r11 i36 i0 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.Graphs, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r27 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.AdjacencyListGraph	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.AdjacencyListGraph: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$r24 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 ]	[exit: $r24 r1 ]
$r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: $r24 r1 ]	[exit: $r24 $r25 r1 ]
$z15 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r24, $r25)	[entry: $r24 $r25 r1 ]	[exit: r1 $z15 ]
if $z15 != 0 goto $z1 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z15 ]	[exit: r1 ]
$r26 = new java.lang.AssertionError.....	[entry: ]	[exit: $r26 ]
specialinvoke $r26.<java.lang.AssertionError: void <init>()>()	[entry: $r26 ]	[exit: $r26 ]
throw $r26..............................	[entry: $r26 ]	[exit: ]
$z1 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto $z2 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z1 ]	[exit: r1 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 ]	[exit: $r21 r1 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: $r21 r1 ]	[exit: $r21 $r22 r1 ]
$z14 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r21, $r22)	[entry: $r21 $r22 r1 ]	[exit: r1 $z14 ]
if $z14 != 0 goto $z2 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z14 ]	[exit: r1 ]
$r23 = new java.lang.AssertionError.....	[entry: ]	[exit: $r23 ]
specialinvoke $r23.<java.lang.AssertionError: void <init>()>()	[entry: $r23 ]	[exit: $r23 ]
throw $r23..............................	[entry: $r23 ]	[exit: ]
$z2 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto $z3 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z2 ]	[exit: r1 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 ]	[exit: $r18 r1 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(5)	[entry: $r18 r1 ]	[exit: $r18 $r19 r1 ]
$z13 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r18, $r19)	[entry: $r18 $r19 r1 ]	[exit: r1 $z13 ]
if $z13 != 0 goto $z3 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z13 ]	[exit: r1 ]
$r20 = new java.lang.AssertionError.....	[entry: ]	[exit: $r20 ]
specialinvoke $r20.<java.lang.AssertionError: void <init>()>()	[entry: $r20 ]	[exit: $r20 ]
throw $r20..............................	[entry: $r20 ]	[exit: ]
$z3 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto $z4 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z3 ]	[exit: r1 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r1 ]	[exit: $r15 r1 ]
$r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: $r15 r1 ]	[exit: $r15 $r16 r1 ]
$z12 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r15, $r16)	[entry: $r15 $r16 r1 ]	[exit: r1 $z12 ]
if $z12 == 0 goto $z4 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z12 ]	[exit: r1 ]
$r17 = new java.lang.AssertionError.....	[entry: ]	[exit: $r17 ]
specialinvoke $r17.<java.lang.AssertionError: void <init>()>()	[entry: $r17 ]	[exit: $r17 ]
throw $r17..............................	[entry: $r17 ]	[exit: ]
$z4 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto $z5 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z4 ]	[exit: r1 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: $r12 r1 ]	[exit: $r12 $r13 r1 ]
$z11 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r12, $r13)	[entry: $r12 $r13 r1 ]	[exit: r1 $z11 ]
if $z11 != 0 goto $z5 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z11 ]	[exit: r1 ]
$r14 = new java.lang.AssertionError.....	[entry: ]	[exit: $r14 ]
specialinvoke $r14.<java.lang.AssertionError: void <init>()>()	[entry: $r14 ]	[exit: $r14 ]
throw $r14..............................	[entry: $r14 ]	[exit: ]
$z5 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto $z6 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: r1 ]	[exit: $r9 r1 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: $r9 r1 ]	[exit: $r9 $r10 r1 ]
$z10 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r9, $r10)	[entry: $r9 $r10 r1 ]	[exit: r1 $z10 ]
if $z10 != 0 goto $z6 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z10 ]	[exit: r1 ]
$r11 = new java.lang.AssertionError.....	[entry: ]	[exit: $r11 ]
specialinvoke $r11.<java.lang.AssertionError: void <init>()>()	[entry: $r11 ]	[exit: $r11 ]
throw $r11..............................	[entry: $r11 ]	[exit: ]
$z6 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z7 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(4)	[entry: r1 ]	[exit: $r6 r1 ]
$r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: $r6 r1 ]	[exit: $r6 $r7 r1 ]
$z9 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r6, $r7)	[entry: $r6 $r7 r1 ]	[exit: r1 $z9 ]
if $z9 != 0 goto $z7 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z7 = <DataStructures.Graphs.Graphs: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z7 ]	[exit: r1 ]
$r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2)	[entry: r1 ]	[exit: $r3 r1 ]
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(3)	[entry: $r3 r1 ]	[exit: $r3 $r4 r1 ]
$z8 = virtualinvoke r1.<DataStructures.Graphs.AdjacencyListGraph: boolean addEdge(java.lang.Comparable,java.lang.Comparable)>($r3, $r4)	[entry: $r3 $r4 r1 ]	[exit: r1 $z8 ]
if $z8 == 0 goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z8 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: printPath, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: DataStructures.Graphs.BellmanFord	[entry: ]	[exit: r1 ]
r0 := @parameter0: int[]................	[entry: r1 ]	[exit: r1 r0 ]
i0 := @parameter1: int..................	[entry: r1 r0 ]	[exit: r1 r0 i0 ]
$i1 = r0[i0]............................	[entry: r1 r0 i0 ]	[exit: r1 r0 i0 $i1 ]
if $i1 != -1 goto $i2 = r0[i0]..........	[entry: r1 r0 i0 $i1 ]	[exit: r1 r0 i0 ]
return..................................	[entry: ]	[exit: ]
$i2 = r0[i0]............................	[entry: r1 r0 i0 ]	[exit: i0 r0 $i2 r1 ]
virtualinvoke r1.<DataStructures.Graphs.BellmanFord: void printPath(int[],int)>(r0, $i2)	[entry: i0 r0 $i2 r1 ]	[exit: i0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: $r3 i0 ]
$r2 = new java.lang.StringBuilder.......	[entry: $r3 i0 ]	[exit: $r3 i0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: $r3 i0 $r2 ]	[exit: $r3 i0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r3 i0 $r2 ]	[exit: $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: $r3 $r4 ]	[exit: $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 $r5 ]	[exit: $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: $r6 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.BellmanFord	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.BellmanFord: void <init>(int,int)>(0, 0)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.BellmanFord: void go()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.BellmanFord, Method Name: go, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @this: DataStructures.Graphs.BellmanFord	[entry: ]	[exit: r11 ]
$r0 = new java.util.Scanner.............	[entry: r11 ]	[exit: r11 $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: r11 $r0 ]	[exit: r11 $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: r11 $r1 $r0 ]	[exit: r11 $r0 ]
r2 = $r0................................	[entry: r11 $r0 ]	[exit: r11 r2 ]
z0 = 0..................................	[entry: r11 r2 ]	[exit: r11 z0 r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r11 z0 r2 ]	[exit: r11 z0 r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter no. of vertices and edges please")	[entry: r11 z0 r2 $r3 ]	[exit: r11 z0 r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r11 z0 r2 ]	[exit: r11 z0 i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r11 z0 i0 r2 ]	[exit: r2 r11 z0 i0 i1 ]
r4 = newarray (DataStructures.Graphs.BellmanFord$Edge)[i1]	[entry: r2 r11 z0 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i1 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r11 z0 r4 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i1 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Input edges")	[entry: r2 r11 z0 r4 i0 i1 $r5 ]	[exit: r2 r11 z0 r4 i0 i1 ]
i30 = 0.................................	[entry: r2 r11 z0 r4 i0 i1 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
if i30 >= i1 goto r6 = newarray (int)[i0]	[entry: r2 r11 z0 r4 i0 i30 i1 ]	[exit: r2 r11 z0 r4 i1 i0 i30 ]
i27 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 r2 ]	[exit: z0 i0 i1 r4 i30 r11 i27 r2 ]
i28 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 i27 r2 ]	[exit: z0 i0 i1 r4 i30 r11 i27 i28 r2 ]
i29 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: z0 i0 i1 r4 i30 r11 i27 i28 r2 ]	[exit: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 ]
$r33 = new DataStructures.Graphs.BellmanFord$Edge	[entry: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 ]	[exit: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 $r33 ]
specialinvoke $r33.<DataStructures.Graphs.BellmanFord$Edge: void <init>(DataStructures.Graphs.BellmanFord,int,int,int)>(r11, i27, i28, i29)	[entry: r2 z0 i0 i1 r4 i30 r11 i27 i28 i29 $r33 ]	[exit: r2 r11 z0 i0 i1 r4 i30 $r33 ]
r4[i30] = $r33..........................	[entry: r2 r11 z0 i0 i1 r4 i30 $r33 ]	[exit: r2 r11 z0 r4 i0 i1 i30 ]
i30 = i30 + 1...........................	[entry: r2 r11 z0 r4 i0 i1 i30 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
goto [?= (branch)]......................	[entry: r2 r11 z0 r4 i0 i30 i1 ]	[exit: r2 r11 z0 r4 i0 i30 i1 ]
r6 = newarray (int)[i0].................	[entry: r2 r11 z0 r4 i1 i0 ]	[exit: r2 r11 z0 r4 i1 r6 i0 ]
r7 = newarray (int)[i0].................	[entry: r2 r11 z0 r4 i1 r6 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i0 ]
i31 = 0.................................	[entry: r2 r11 z0 r4 i1 r7 r6 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
if i31 >= i0 goto r6[0] = 0.............	[entry: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]	[exit: r2 r11 z0 r4 i1 i0 r7 r6 i31 ]
r6[i31] = 2147483647....................	[entry: r2 r11 z0 r4 i1 r7 i0 r6 i31 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i0 i31 ]
i31 = i31 + 1...........................	[entry: r2 r11 z0 r4 i1 r7 r6 i0 i31 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
goto [?= (branch)]......................	[entry: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]	[exit: r2 r11 z0 r4 i1 r7 r6 i31 i0 ]
r6[0] = 0...............................	[entry: r2 r11 z0 r4 i1 i0 r7 r6 ]	[exit: r2 r11 r6 z0 r4 i1 i0 r7 ]
r7[0] = -1..............................	[entry: r2 r11 r6 z0 r4 i1 i0 r7 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i0 ]
i32 = 0.................................	[entry: r2 r7 r11 r6 z0 r4 i1 i0 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
$i2 = i0 - 1............................	[entry: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i32 $i2 ]
if i32 >= $i2 goto i34 = 0..............	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i32 $i2 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i32 ]
i33 = 0.................................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
if i33 >= i1 goto i32 = i32 + 1.........	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i0 i32 i33 ]
$r24 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 r6 r4 i33 ]	[exit: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $r24 ]
$i12 = $r24.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $r24 ]	[exit: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $i12 ]
$i13 = r6[$i12].........................	[entry: r2 r7 r11 z0 r4 i0 i32 i1 i33 r6 $i12 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i13 ]
if $i13 == 2147483647 goto i33 = i33 + 1	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i13 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
$r25 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 r6 r4 i33 ]	[exit: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $r25 ]
$i14 = $r25.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $r25 ]	[exit: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $i14 ]
$i19 = r6[$i14].........................	[entry: r2 r7 r11 z0 i0 i32 i1 r4 i33 r6 $i14 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r6 r4 i33 ]
$r26 = r4[i33]..........................	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r6 r4 i33 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $r26 ]
$i15 = $r26.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $r26 ]	[exit: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $i15 ]
$i17 = r6[$i15].........................	[entry: r2 r7 r11 z0 i0 i32 i1 $i19 r4 i33 r6 $i15 ]	[exit: r2 r7 r11 r6 z0 i0 i32 i1 $i19 $i17 r4 i33 ]
$r27 = r4[i33]..........................	[entry: r2 r7 r11 r6 z0 i0 i32 i1 $i19 $i17 r4 i33 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $r27 ]
$i16 = $r27.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $r27 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $i16 ]
$i18 = $i17 + $i16......................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i17 $i16 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i18 ]
if $i19 <= $i18 goto i33 = i33 + 1......	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 $i19 $i18 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
$r28 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 $r28 ]
$i24 = $r28.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r11 z0 i0 i32 i1 r7 r6 r4 i33 $r28 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r6 r4 i33 ]
$r29 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r6 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $r29 ]
$i20 = $r29.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $r29 ]	[exit: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $i20 ]
$i22 = r6[$i20].........................	[entry: r2 r11 z0 i0 i32 i1 r7 $i24 r4 i33 r6 $i20 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r6 $i24 $i22 r4 i33 ]
$r30 = r4[i33]..........................	[entry: r2 r11 z0 i0 i32 i1 r7 r6 $i24 $i22 r4 i33 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $r30 ]
$i21 = $r30.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $r30 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $i21 ]
$i23 = $i22 + $i21......................	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i22 $i21 ]	[exit: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i23 ]
r6[$i24] = $i23.........................	[entry: r2 r11 z0 i0 i32 i1 r7 r4 i33 r6 $i24 $i23 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 ]
$r31 = r4[i33]..........................	[entry: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 $r31 ]
$i26 = $r31.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r11 r6 z0 i0 i32 i1 r7 r4 i33 $r31 ]	[exit: r2 r11 r6 z0 i0 i32 i1 r7 $i26 r4 i33 ]
$r32 = r4[i33]..........................	[entry: r2 r11 r6 z0 i0 i32 i1 r7 $i26 r4 i33 ]	[exit: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $r32 ]
$i25 = $r32.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $r32 ]	[exit: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $i25 ]
r7[$i26] = $i25.........................	[entry: r2 r11 r6 z0 r4 i0 i32 i1 i33 r7 $i26 $i25 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]
i33 = i33 + 1...........................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i1 i33 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]	[exit: r2 r7 r11 r6 z0 r4 i0 i32 i33 i1 ]
i32 = i32 + 1...........................	[entry: r2 r7 r11 r6 z0 r4 i1 i0 i32 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
goto [?= $i2 = i0 - 1]..................	[entry: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]	[exit: r2 r7 r11 r6 z0 r4 i1 i32 i0 ]
i34 = 0.................................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
if i34 >= i1 goto (branch)..............	[entry: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]	[exit: r2 r7 r11 r6 i0 z0 i1 r4 i34 ]
$r19 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 i34 r4 r6 $r19 ]
$i4 = $r19.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 i0 z0 i1 i34 r4 r6 $r19 ]	[exit: r2 r7 r11 i0 z0 i1 i34 r4 r6 $i4 ]
$i5 = r6[$i4]...........................	[entry: r2 r7 r11 i0 z0 i1 i34 r4 r6 $i4 ]	[exit: r2 r7 r11 r6 i0 z0 i1 i34 r4 $i5 ]
if $i5 == 2147483647 goto i34 = i34 + 1.	[entry: r2 r7 r11 r6 i0 z0 i1 i34 r4 $i5 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]
$r20 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 r4 i34 r6 $r20 ]
$i6 = $r20.<DataStructures.Graphs.BellmanFord$Edge: int v>	[entry: r2 r7 r11 i0 z0 i1 r4 i34 r6 $r20 ]	[exit: r2 r7 r11 i0 z0 i1 r4 i34 r6 $i6 ]
$i11 = r6[$i6]..........................	[entry: r2 r7 r11 i0 z0 i1 r4 i34 r6 $i6 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r6 r4 i34 ]
$r21 = r4[i34]..........................	[entry: r2 r7 r11 i0 z0 i1 $i11 r6 r4 i34 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $r21 ]
$i7 = $r21.<DataStructures.Graphs.BellmanFord$Edge: int u>	[entry: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $r21 ]	[exit: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $i7 ]
$i9 = r6[$i7]...........................	[entry: r2 r7 r11 i0 z0 i1 $i11 r4 i34 r6 $i7 ]	[exit: r2 r7 r11 r6 i0 z0 i1 $i11 $i9 r4 i34 ]
$r22 = r4[i34]..........................	[entry: r2 r7 r11 r6 i0 z0 i1 $i11 $i9 r4 i34 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $r22 ]
$i8 = $r22.<DataStructures.Graphs.BellmanFord$Edge: int w>	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $r22 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $i8 ]
$i10 = $i9 + $i8........................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i9 $i8 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i10 ]
if $i11 <= $i10 goto i34 = i34 + 1......	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 $i11 $i10 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]
z0 = 1..................................	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i0 z0 ]
$r23 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 z0 $r23 ]
virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>("Negative cycle")	[entry: r2 r7 r11 r6 i0 z0 $r23 ]	[exit: r2 r7 r11 r6 i0 z0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 z0 ]
i34 = i34 + 1...........................	[entry: r2 r7 r11 r6 i0 z0 r4 i1 i34 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]	[exit: r2 r7 r11 r6 i0 z0 r4 i34 i1 ]
if z0 != 0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r7 r11 r6 i0 z0 ]	[exit: r2 r7 r11 r6 i0 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i0 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Distances are: ")	[entry: r2 r7 r11 r6 i0 $r8 ]	[exit: r2 r7 r11 r6 i0 ]
i35 = 0.................................	[entry: r2 r7 r11 r6 i0 ]	[exit: r2 r7 r11 r6 i35 i0 ]
if i35 >= i0 goto $r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 r6 i35 i0 ]	[exit: r2 r7 r11 i0 r6 i35 ]
$r14 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 r6 i35 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 ]
$r13 = new java.lang.StringBuilder......	[entry: r2 r7 r11 i0 $r14 r6 i35 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r13 ]
specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()	[entry: r2 r7 r11 i0 $r14 r6 i35 $r13 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r13 ]
$r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i35)	[entry: r2 r7 r11 i0 $r14 r6 i35 $r13 ]	[exit: r2 r7 r11 i0 $r14 r6 i35 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 r7 r11 i0 $r14 r6 i35 $r15 ]	[exit: r2 r7 r11 i0 $r14 $r16 r6 i35 ]
$i3 = r6[i35]...........................	[entry: r2 r7 r11 i0 $r14 $r16 r6 i35 ]	[exit: r2 r7 r11 r6 i0 i35 $r14 $i3 $r16 ]
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r2 r7 r11 r6 i0 i35 $r14 $i3 $r16 ]	[exit: r2 r7 r11 r6 i0 i35 $r14 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 r7 r11 r6 i0 i35 $r14 $r17 ]	[exit: r2 r7 r11 r6 i0 i35 $r18 $r14 ]
virtualinvoke $r14.<java.io.PrintStream: void println(java.lang.String)>($r18)	[entry: r2 r7 r11 r6 i0 i35 $r18 $r14 ]	[exit: r2 r7 r11 r6 i0 i35 ]
i35 = i35 + 1...........................	[entry: r2 r7 r11 r6 i0 i35 ]	[exit: r2 r7 r11 r6 i35 i0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 r6 i35 i0 ]	[exit: r2 r7 r11 r6 i35 i0 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 ]	[exit: r2 r7 r11 i0 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>("Path followed:")	[entry: r2 r7 r11 i0 $r9 ]	[exit: r2 r7 r11 i0 ]
i36 = 0.................................	[entry: r2 r7 r11 i0 ]	[exit: r2 r7 r11 i36 i0 ]
if i36 >= i0 goto virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 r7 r11 i36 i0 ]	[exit: r2 i0 r7 i36 r11 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 r7 i36 r11 ]	[exit: r2 i0 r7 i36 r11 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void print(java.lang.String)>("0 ")	[entry: r2 i0 r7 i36 r11 $r10 ]	[exit: r2 i0 r7 i36 r11 ]
virtualinvoke r11.<DataStructures.Graphs.BellmanFord: void printPath(int[],int)>(r7, i36)	[entry: r2 i0 r7 i36 r11 ]	[exit: r2 r7 r11 i0 i36 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r7 r11 i0 i36 ]	[exit: r2 r7 r11 i0 i36 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println()>()	[entry: r2 r7 r11 i0 i36 $r12 ]	[exit: r2 r7 r11 i0 i36 ]
i36 = i36 + 1...........................	[entry: r2 r7 r11 i0 i36 ]	[exit: r2 r7 r11 i36 i0 ]
goto [?= (branch)]......................	[entry: r2 r7 r11 i36 i0 ]	[exit: r2 r7 r11 i36 i0 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.FloydWarshall, Method Name: floydwarshall, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Graphs.FloydWarshall	[entry: ]	[exit: r0 ]
r33 := @parameter0: int[][].............	[entry: r0 ]	[exit: r33 r0 ]
i17 = 1.................................	[entry: r33 r0 ]	[exit: r33 i17 r0 ]
$i0 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: r33 i17 r0 ]	[exit: r0 r33 i17 $i0 ]
if i17 > $i0 goto i19 = 1...............	[entry: r0 r33 i17 $i0 ]	[exit: r0 i17 r33 ]
i18 = 1.................................	[entry: i17 r33 r0 ]	[exit: i17 r33 i18 r0 ]
$i15 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i17 r33 i18 r0 ]	[exit: r0 i17 r33 i18 $i15 ]
if i18 > $i15 goto i17 = i17 + 1........	[entry: r0 i17 r33 i18 $i15 ]	[exit: r33 r0 i17 i18 ]
$r32 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i18 r33 i17 r0 ]	[exit: r0 i18 r33 $r32 i17 ]
$r35 = $r32[i17]........................	[entry: r0 i18 r33 $r32 i17 ]	[exit: r0 $r35 i18 r33 i17 ]
$r34 = r33[i17].........................	[entry: r0 $r35 i18 r33 i17 ]	[exit: i17 r33 r0 $r35 $r34 i18 ]
$i16 = $r34[i18]........................	[entry: i17 r33 r0 $r35 $r34 i18 ]	[exit: i17 r33 r0 $r35 i18 $i16 ]
$r35[i18] = $i16........................	[entry: i17 r33 r0 $r35 i18 $i16 ]	[exit: i17 r33 r0 i18 ]
i18 = i18 + 1...........................	[entry: i17 r33 r0 i18 ]	[exit: i17 r33 i18 r0 ]
goto [?= $i15 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i17 r33 i18 r0 ]	[exit: i17 r33 i18 r0 ]
i17 = i17 + 1...........................	[entry: r33 r0 i17 ]	[exit: r33 i17 r0 ]
goto [?= $i0 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: r33 i17 r0 ]	[exit: r33 i17 r0 ]
i19 = 1.................................	[entry: r0 ]	[exit: i19 r0 ]
$i1 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i19 r0 ]	[exit: r0 i19 $i1 ]
if i19 > $i1 goto i22 = 1...............	[entry: r0 i19 $i1 ]	[exit: r0 i19 ]
i20 = 1.................................	[entry: i19 r0 ]	[exit: i19 i20 r0 ]
$i6 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i19 i20 r0 ]	[exit: r0 i19 i20 $i6 ]
if i20 > $i6 goto i19 = i19 + 1.........	[entry: r0 i19 i20 $i6 ]	[exit: r0 i19 i20 ]
i21 = 1.................................	[entry: i19 i20 r0 ]	[exit: i19 i20 i21 r0 ]
$i7 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i19 i20 i21 r0 ]	[exit: i19 r0 i20 i21 $i7 ]
if i21 > $i7 goto i20 = i20 + 1.........	[entry: i19 r0 i20 i21 $i7 ]	[exit: i19 r0 i20 i21 ]
$r20 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i21 i19 i20 r0 ]	[exit: i21 r0 i19 $r20 i20 ]
$r21 = $r20[i20]........................	[entry: i21 r0 i19 $r20 i20 ]	[exit: i20 i21 r0 $r21 i19 ]
$i9 = $r21[i19].........................	[entry: i20 i21 r0 $r21 i19 ]	[exit: i20 $i9 i21 i19 r0 ]
$r22 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i20 $i9 i21 i19 r0 ]	[exit: i20 r0 $i9 i21 $r22 i19 ]
$r23 = $r22[i19]........................	[entry: i20 r0 $i9 i21 $r22 i19 ]	[exit: i19 i20 r0 $i9 $r23 i21 ]
$i8 = $r23[i21].........................	[entry: i19 i20 r0 $i9 $r23 i21 ]	[exit: i19 i21 i20 r0 $i9 $i8 ]
$i11 = $i9 + $i8........................	[entry: i19 i21 i20 r0 $i9 $i8 ]	[exit: i19 $i11 i21 i20 r0 ]
$r24 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i19 $i11 i21 i20 r0 ]	[exit: i19 r0 $i11 i21 $r24 i20 ]
$r25 = $r24[i20]........................	[entry: i19 r0 $i11 i21 $r24 i20 ]	[exit: i19 i20 r0 $i11 $r25 i21 ]
$i10 = $r25[i21]........................	[entry: i19 i20 r0 $i11 $r25 i21 ]	[exit: i19 i20 r0 i21 $i11 $i10 ]
if $i11 >= $i10 goto i21 = i21 + 1......	[entry: i19 i20 r0 i21 $i11 $i10 ]	[exit: i19 i20 r0 i21 ]
$r26 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i21 i19 i20 r0 ]	[exit: i21 i19 r0 $r26 i20 ]
$r31 = $r26[i20]........................	[entry: i21 i19 r0 $r26 i20 ]	[exit: $r31 i21 i19 i20 r0 ]
$r27 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: $r31 i21 i19 i20 r0 ]	[exit: $r31 i21 r0 i19 $r27 i20 ]
$r28 = $r27[i20]........................	[entry: $r31 i21 r0 i19 $r27 i20 ]	[exit: i20 $r31 i21 r0 $r28 i19 ]
$i13 = $r28[i19]........................	[entry: i20 $r31 i21 r0 $r28 i19 ]	[exit: i20 $r31 $i13 i21 i19 r0 ]
$r29 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: i20 $r31 $i13 i21 i19 r0 ]	[exit: i20 r0 $r31 $i13 i21 $r29 i19 ]
$r30 = $r29[i19]........................	[entry: i20 r0 $r31 $i13 i21 $r29 i19 ]	[exit: i19 i20 r0 $r31 $i13 $r30 i21 ]
$i12 = $r30[i21]........................	[entry: i19 i20 r0 $r31 $i13 $r30 i21 ]	[exit: i19 i20 r0 $r31 i21 $i13 $i12 ]
$i14 = $i13 + $i12......................	[entry: i19 i20 r0 $r31 i21 $i13 $i12 ]	[exit: i19 i20 r0 $r31 i21 $i14 ]
$r31[i21] = $i14........................	[entry: i19 i20 r0 $r31 i21 $i14 ]	[exit: i19 i20 r0 i21 ]
i21 = i21 + 1...........................	[entry: i19 i20 r0 i21 ]	[exit: i19 i20 i21 r0 ]
goto [?= $i7 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i19 i20 i21 r0 ]	[exit: i19 i20 i21 r0 ]
i20 = i20 + 1...........................	[entry: i19 r0 i20 ]	[exit: i19 i20 r0 ]
goto [?= $i6 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i19 i20 r0 ]	[exit: i19 i20 r0 ]
i19 = i19 + 1...........................	[entry: r0 i19 ]	[exit: i19 r0 ]
goto [?= $i1 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i19 r0 ]	[exit: i19 r0 ]
i22 = 1.................................	[entry: r0 ]	[exit: i22 r0 ]
$i2 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i22 r0 ]	[exit: r0 i22 $i2 ]
if i22 > $i2 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i22 $i2 ]	[exit: r0 i22 ]
$r16 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i22 ]	[exit: r0 $r16 i22 ]
$r15 = new java.lang.StringBuilder......	[entry: r0 $r16 i22 ]	[exit: r0 $r16 i22 $r15 ]
specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r16 i22 $r15 ]	[exit: r0 $r16 i22 $r15 ]
$r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t")	[entry: r0 $r16 i22 $r15 ]	[exit: r0 $r16 i22 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i22)	[entry: r0 $r16 i22 $r17 ]	[exit: r0 i22 $r16 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i22 $r16 $r18 ]	[exit: r0 i22 $r19 $r16 ]
virtualinvoke $r16.<java.io.PrintStream: void print(java.lang.String)>($r19)	[entry: r0 i22 $r19 $r16 ]	[exit: r0 i22 ]
i22 = i22 + 1...........................	[entry: r0 i22 ]	[exit: i22 r0 ]
goto [?= $i2 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i22 r0 ]	[exit: i22 r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println()>()	[entry: r0 $r1 ]	[exit: r0 ]
i23 = 1.................................	[entry: r0 ]	[exit: i23 r0 ]
$i3 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i23 r0 ]	[exit: r0 i23 $i3 ]
if i23 > $i3 goto return................	[entry: r0 i23 $i3 ]	[exit: r0 i23 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i23 ]	[exit: r0 $r3 i23 ]
$r2 = new java.lang.StringBuilder.......	[entry: r0 $r3 i23 ]	[exit: r0 $r3 i23 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r3 i23 $r2 ]	[exit: r0 $r3 i23 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i23)	[entry: r0 $r3 i23 $r2 ]	[exit: i23 r0 $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t")	[entry: i23 r0 $r3 $r4 ]	[exit: i23 r0 $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i23 r0 $r3 $r5 ]	[exit: i23 r0 $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: i23 r0 $r6 $r3 ]	[exit: i23 r0 ]
i24 = 1.................................	[entry: i23 r0 ]	[exit: i23 i24 r0 ]
$i4 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>	[entry: i23 i24 r0 ]	[exit: r0 i23 i24 $i4 ]
if i24 > $i4 goto $r7 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i23 i24 $i4 ]	[exit: r0 i23 i24 ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: i24 i23 r0 ]	[exit: $r9 i24 i23 r0 ]
$r8 = new java.lang.StringBuilder.......	[entry: $r9 i24 i23 r0 ]	[exit: $r9 i24 i23 r0 $r8 ]
specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()	[entry: $r9 i24 i23 r0 $r8 ]	[exit: $r9 $r8 i24 i23 r0 ]
$r10 = r0.<DataStructures.Graphs.FloydWarshall: int[][] DistanceMatrix>	[entry: $r9 $r8 i24 i23 r0 ]	[exit: r0 $r9 $r8 i24 $r10 i23 ]
$r11 = $r10[i23]........................	[entry: r0 $r9 $r8 i24 $r10 i23 ]	[exit: i23 r0 $r9 $r8 $r11 i24 ]
$i5 = $r11[i24].........................	[entry: i23 r0 $r9 $r8 $r11 i24 ]	[exit: i23 r0 i24 $r9 $i5 $r8 ]
$r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: i23 r0 i24 $r9 $i5 $r8 ]	[exit: i23 r0 i24 $r9 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\t")	[entry: i23 r0 i24 $r9 $r12 ]	[exit: i23 r0 i24 $r9 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i23 r0 i24 $r9 $r13 ]	[exit: i23 r0 i24 $r14 $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void print(java.lang.String)>($r14)	[entry: i23 r0 i24 $r14 $r9 ]	[exit: i23 r0 i24 ]
i24 = i24 + 1...........................	[entry: i23 r0 i24 ]	[exit: i23 i24 r0 ]
goto [?= $i4 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i23 i24 r0 ]	[exit: i23 i24 r0 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r0 i23 ]	[exit: r0 i23 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println()>()	[entry: r0 i23 $r7 ]	[exit: r0 i23 ]
i23 = i23 + 1...........................	[entry: r0 i23 ]	[exit: i23 r0 ]
goto [?= $i3 = r0.<DataStructures.Graphs.FloydWarshall: int numberofvertices>]	[entry: i23 r0 ]	[exit: i23 r0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.FloydWarshall, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r12 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter the number of vertices")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
$i2 = i0 + 1............................	[entry: r2 i0 ]	[exit: r2 $i2 i0 ]
$i1 = i0 + 1............................	[entry: r2 $i2 i0 ]	[exit: r2 i0 $i2 $i1 ]
r4 = newmultiarray (int)[$i2][$i1]......	[entry: r2 i0 $i2 $i1 ]	[exit: r2 r4 i0 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 i0 ]	[exit: r2 r4 i0 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>("Enter the Weighted Matrix for the graph")	[entry: r2 r4 i0 $r5 ]	[exit: r2 r4 i0 ]
i5 = 1..................................	[entry: r2 r4 i0 ]	[exit: r2 r4 i5 i0 ]
if i5 > i0 goto $r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 i5 i0 ]	[exit: r2 r4 i0 i5 ]
i6 = 1..................................	[entry: r2 r4 i5 i0 ]	[exit: r2 r4 i5 i6 i0 ]
if i6 > i0 goto i5 = i5 + 1.............	[entry: r2 r4 i5 i6 i0 ]	[exit: r2 r4 i0 i5 i6 ]
$r8 = r4[i5]............................	[entry: i0 i6 r2 r4 i5 ]	[exit: i0 r4 i5 $r8 i6 r2 ]
$i3 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r4 i5 $r8 i6 r2 ]	[exit: r2 i0 r4 i5 $r8 i6 $i3 ]
$r8[i6] = $i3...........................	[entry: r2 i0 r4 i5 $r8 i6 $i3 ]	[exit: r2 i0 r4 i5 i6 ]
if i5 != i6 goto $r9 = r4[i5]...........	[entry: r2 i0 r4 i5 i6 ]	[exit: r2 i0 i6 r4 i5 ]
$r11 = r4[i5]...........................	[entry: r2 i0 i6 r4 i5 ]	[exit: r2 r4 i5 i0 $r11 i6 ]
$r11[i6] = 0............................	[entry: r2 r4 i5 i0 $r11 i6 ]	[exit: r2 r4 i5 i0 i6 ]
goto [?= i6 = i6 + 1]...................	[entry: r2 r4 i5 i0 i6 ]	[exit: r2 r4 i5 i0 i6 ]
$r9 = r4[i5]............................	[entry: r2 i0 i6 r4 i5 ]	[exit: r2 r4 i5 i0 $r9 i6 ]
$i4 = $r9[i6]...........................	[entry: r2 r4 i5 i0 $r9 i6 ]	[exit: r2 r4 i5 i0 i6 $i4 ]
if $i4 != 0 goto i6 = i6 + 1............	[entry: r2 r4 i5 i0 i6 $i4 ]	[exit: r2 r4 i5 i0 i6 ]
$r10 = r4[i5]...........................	[entry: r2 i0 i6 r4 i5 ]	[exit: r2 r4 i5 i0 $r10 i6 ]
$r10[i6] = 999..........................	[entry: r2 r4 i5 i0 $r10 i6 ]	[exit: r2 r4 i5 i0 i6 ]
i6 = i6 + 1.............................	[entry: r2 r4 i5 i0 i6 ]	[exit: r2 r4 i5 i6 i0 ]
goto [?= (branch)]......................	[entry: r2 r4 i5 i6 i0 ]	[exit: r2 r4 i5 i6 i0 ]
i5 = i5 + 1.............................	[entry: r2 r4 i0 i5 ]	[exit: r2 r4 i5 i0 ]
goto [?= (branch)]......................	[entry: r2 r4 i5 i0 ]	[exit: r2 r4 i5 i0 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 i0 ]	[exit: r2 r4 i0 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("The Transitive Closure of the Graph")	[entry: r2 r4 i0 $r6 ]	[exit: r2 r4 i0 ]
$r7 = new DataStructures.Graphs.FloydWarshall	[entry: r2 r4 i0 ]	[exit: r2 r4 i0 $r7 ]
specialinvoke $r7.<DataStructures.Graphs.FloydWarshall: void <init>(int)>(i0)	[entry: r2 r4 i0 $r7 ]	[exit: r2 r4 $r7 ]
r13 = $r7...............................	[entry: r2 r4 $r7 ]	[exit: r2 r4 r13 ]
virtualinvoke r13.<DataStructures.Graphs.FloydWarshall: void floydwarshall(int[][])>(r4)	[entry: r2 r4 r13 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.MatrixGraphs, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.AdjacencyMatrixGraph	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.AdjacencyMatrixGraph: void <init>(int)>(10)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(1, 2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(1, 5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(2, 5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(1, 2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(2, 3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(3, 4)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(4, 1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.AdjacencyMatrixGraph: boolean addEdge(int,int)>(2, 3)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.PrimMST, Method Name: minKey, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: DataStructures.Graphs.PrimMST	[entry: ]	[exit: ]
r2 := @parameter0: int[]................	[entry: ]	[exit: r2 ]
r0 := @parameter1: java.lang.Boolean[]..	[entry: r2 ]	[exit: r2 r0 ]
i1 = 2147483647.........................	[entry: r2 r0 ]	[exit: i1 r2 r0 ]
i2 = -1.................................	[entry: i1 r2 r0 ]	[exit: i2 i1 r2 r0 ]
i3 = 0..................................	[entry: i2 i1 r2 r0 ]	[exit: i2 i1 r2 r0 i3 ]
if i3 >= 5 goto return i2...............	[entry: i2 i1 r2 r0 i3 ]	[exit: i2 i1 r2 r0 i3 ]
$r1 = r0[i3]............................	[entry: i2 i1 r2 r0 i3 ]	[exit: i2 i1 r2 r0 i3 $r1 ]
$z0 = virtualinvoke $r1.<java.lang.Boolean: boolean booleanValue()>()	[entry: i2 i1 r2 r0 i3 $r1 ]	[exit: i2 i1 r2 r0 i3 $z0 ]
if $z0 != 0 goto i3 = i3 + 1............	[entry: i2 i1 r2 r0 i3 $z0 ]	[exit: i2 i1 r2 r0 i3 ]
$i0 = r2[i3]............................	[entry: i2 r0 i1 r2 i3 ]	[exit: i2 r2 r0 i3 $i0 i1 ]
if $i0 >= i1 goto i3 = i3 + 1...........	[entry: i2 r2 r0 i3 $i0 i1 ]	[exit: i2 i1 r2 r0 i3 ]
i1 = r2[i3].............................	[entry: r0 r2 i3 ]	[exit: i1 r2 r0 i3 ]
i2 = i3.................................	[entry: i1 r2 r0 i3 ]	[exit: i2 i1 r2 r0 i3 ]
i3 = i3 + 1.............................	[entry: i2 i1 r2 r0 i3 ]	[exit: i2 i1 r2 r0 i3 ]
goto [?= (branch)]......................	[entry: i2 i1 r2 r0 i3 ]	[exit: i2 i1 r2 r0 i3 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: DataStructures.Graphs.PrimMST, Method Name: printMST, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r12 := @this: DataStructures.Graphs.PrimMST	[entry: ]	[exit: ]
r3 := @parameter0: int[]................	[entry: ]	[exit: r3 ]
i3 := @parameter1: int..................	[entry: r3 ]	[exit: r3 ]
r8 := @parameter2: int[][]..............	[entry: r3 ]	[exit: r8 r3 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: r8 r3 ]	[exit: r8 r3 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("Edge   Weight")	[entry: r8 r3 $r0 ]	[exit: r8 r3 ]
i4 = 1..................................	[entry: r8 r3 ]	[exit: r8 r3 i4 ]
if i4 >= 5 goto return..................	[entry: r8 r3 i4 ]	[exit: r8 r3 i4 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r8 r3 i4 ]	[exit: $r2 r8 r3 i4 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r2 r8 r3 i4 ]	[exit: $r2 r8 r3 i4 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r2 r8 r3 i4 $r1 ]	[exit: $r2 r8 $r1 r3 i4 ]
$i0 = r3[i4]............................	[entry: $r2 r8 $r1 r3 i4 ]	[exit: $r2 r3 r8 i4 $i0 $r1 ]
$r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r2 r3 r8 i4 $i0 $r1 ]	[exit: $r2 r3 r8 i4 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ")	[entry: $r2 r3 r8 i4 $r4 ]	[exit: $r2 r3 r8 i4 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: $r2 r3 r8 i4 $r5 ]	[exit: $r2 r3 r8 i4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("    ")	[entry: $r2 r3 r8 i4 $r6 ]	[exit: $r2 $r7 r3 r8 i4 ]
$r9 = r8[i4]............................	[entry: $r2 $r7 r3 r8 i4 ]	[exit: r8 $r2 $r7 $r9 r3 i4 ]
$i1 = r3[i4]............................	[entry: r8 $r2 $r7 $r9 r3 i4 ]	[exit: r8 r3 i4 $r2 $r7 $r9 $i1 ]
$i2 = $r9[$i1]..........................	[entry: r8 r3 i4 $r2 $r7 $r9 $i1 ]	[exit: r8 r3 i4 $r2 $i2 $r7 ]
$r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)	[entry: r8 r3 i4 $r2 $i2 $r7 ]	[exit: r8 r3 i4 $r2 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r8 r3 i4 $r2 $r10 ]	[exit: r8 r3 i4 $r11 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>($r11)	[entry: r8 r3 i4 $r11 $r2 ]	[exit: r8 r3 i4 ]
i4 = i4 + 1.............................	[entry: r8 r3 i4 ]	[exit: r8 r3 i4 ]
goto [?= (branch)]......................	[entry: r8 r3 i4 ]	[exit: r8 r3 i4 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.PrimMST, Method Name: primMST, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: DataStructures.Graphs.PrimMST	[entry: ]	[exit: r3 ]
r4 := @parameter0: int[][]..............	[entry: r3 ]	[exit: r4 r3 ]
r0 = newarray (int)[5]..................	[entry: r4 r3 ]	[exit: r4 r3 r0 ]
r1 = newarray (int)[5]..................	[entry: r4 r3 r0 ]	[exit: r4 r3 r0 r1 ]
r2 = newarray (java.lang.Boolean)[5]....	[entry: r4 r3 r0 r1 ]	[exit: r4 r3 r2 r0 r1 ]
i5 = 0..................................	[entry: r4 r3 r2 r0 r1 ]	[exit: r4 r3 r2 r0 r1 i5 ]
if i5 >= 5 goto r1[0] = 0...............	[entry: r4 r3 r2 r0 r1 i5 ]	[exit: r4 r3 r2 r0 r1 i5 ]
r1[i5] = 2147483647.....................	[entry: r4 r3 r0 r2 r1 i5 ]	[exit: r4 r3 r0 r1 r2 i5 ]
$r10 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0)	[entry: r4 r3 r0 r1 r2 i5 ]	[exit: r4 r3 r0 r1 r2 i5 $r10 ]
r2[i5] = $r10...........................	[entry: r4 r3 r0 r1 r2 i5 $r10 ]	[exit: r4 r3 r2 r0 r1 i5 ]
i5 = i5 + 1.............................	[entry: r4 r3 r2 r0 r1 i5 ]	[exit: r4 r3 r2 r0 r1 i5 ]
goto [?= (branch)]......................	[entry: r4 r3 r2 r0 r1 i5 ]	[exit: r4 r3 r2 r0 r1 i5 ]
r1[0] = 0...............................	[entry: r4 r3 r2 r0 r1 ]	[exit: r4 r3 r1 r2 r0 ]
r0[0] = -1..............................	[entry: r4 r3 r1 r2 r0 ]	[exit: r0 r4 r3 r1 r2 ]
i6 = 0..................................	[entry: r0 r4 r3 r1 r2 ]	[exit: r0 r4 r3 r1 r2 i6 ]
if i6 >= 4 goto virtualinvoke r3.<DataStructures.Graphs.PrimMST: void printMST(int[],int,int[][])>(r0, 5, r4)	[entry: r0 r4 r3 r1 r2 i6 ]	[exit: r0 r4 r3 i6 r1 r2 ]
i0 = virtualinvoke r3.<DataStructures.Graphs.PrimMST: int minKey(int[],java.lang.Boolean[])>(r1, r2)	[entry: r0 r4 i6 r1 r2 r3 ]	[exit: r0 r4 r3 i6 r1 r2 i0 ]
$r5 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1)	[entry: r0 r4 r3 i6 r1 r2 i0 ]	[exit: r0 r4 r3 i6 r1 r2 i0 $r5 ]
r2[i0] = $r5............................	[entry: r0 r4 r3 i6 r1 r2 i0 $r5 ]	[exit: r0 r4 r3 i6 r1 r2 i0 ]
i7 = 0..................................	[entry: r0 r4 r3 i6 r1 r2 i0 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
if i7 >= 5 goto i6 = i6 + 1.............	[entry: r0 r4 r3 i6 r1 r2 i0 i7 ]	[exit: r0 r4 r3 r1 r2 i6 i7 i0 ]
$r6 = r4[i0]............................	[entry: r0 r3 i6 r1 r2 i7 r4 i0 ]	[exit: r0 r4 r3 i6 r1 i0 r2 $r6 i7 ]
$i1 = $r6[i7]...........................	[entry: r0 r4 r3 i6 r1 i0 r2 $r6 i7 ]	[exit: r0 r4 r3 i6 i7 r1 i0 r2 $i1 ]
if $i1 == 0 goto i7 = i7 + 1............	[entry: r0 r4 r3 i6 i7 r1 i0 r2 $i1 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
$r7 = r2[i7]............................	[entry: r0 r4 r3 i6 r1 i0 r2 i7 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 $r7 ]
$z0 = virtualinvoke $r7.<java.lang.Boolean: boolean booleanValue()>()	[entry: r0 r4 r3 i6 r1 r2 i0 i7 $r7 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 $z0 ]
if $z0 != 0 goto i7 = i7 + 1............	[entry: r0 r4 r3 i6 r1 r2 i0 i7 $z0 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
$r8 = r4[i0]............................	[entry: r0 r3 i6 r2 r1 i7 r4 i0 ]	[exit: r0 r4 r3 i6 r2 i0 r1 $r8 i7 ]
$i3 = $r8[i7]...........................	[entry: r0 r4 r3 i6 r2 i0 r1 $r8 i7 ]	[exit: r0 r4 r3 i6 r2 i0 $i3 r1 i7 ]
$i2 = r1[i7]............................	[entry: r0 r4 r3 i6 r2 i0 $i3 r1 i7 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 $i3 $i2 ]
if $i3 >= $i2 goto i7 = i7 + 1..........	[entry: r0 r4 r3 i6 r1 r2 i0 i7 $i3 $i2 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
r0[i7] = i0.............................	[entry: r3 i6 r2 r1 r4 r0 i7 i0 ]	[exit: r0 r3 i6 r2 r1 i7 r4 i0 ]
$r9 = r4[i0]............................	[entry: r0 r3 i6 r2 r1 i7 r4 i0 ]	[exit: r0 r4 r3 i6 r2 i0 r1 $r9 i7 ]
$i4 = $r9[i7]...........................	[entry: r0 r4 r3 i6 r2 i0 r1 $r9 i7 ]	[exit: r0 r4 r3 i6 r2 i0 r1 i7 $i4 ]
r1[i7] = $i4............................	[entry: r0 r4 r3 i6 r2 i0 r1 i7 $i4 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
i7 = i7 + 1.............................	[entry: r0 r4 r3 i6 r1 r2 i0 i7 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
goto [?= (branch)]......................	[entry: r0 r4 r3 i6 r1 r2 i0 i7 ]	[exit: r0 r4 r3 i6 r1 r2 i0 i7 ]
i6 = i6 + 1.............................	[entry: r0 r4 r3 r1 r2 i6 ]	[exit: r0 r4 r3 r1 r2 i6 ]
goto [?= (branch)]......................	[entry: r0 r4 r3 r1 r2 i6 ]	[exit: r0 r4 r3 r1 r2 i6 ]
virtualinvoke r3.<DataStructures.Graphs.PrimMST: void printMST(int[],int,int[][])>(r0, 5, r4)	[entry: r0 r4 r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.PrimMST, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.PrimMST.	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.PrimMST: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = newarray (int[])[5]...............	[entry: r1 ]	[exit: r1 $r2 ]
$r3 = newarray (int)[5].................	[entry: r1 $r2 ]	[exit: r1 $r2 $r3 ]
$r3[0] = 0..............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 $r3 ]
$r3[1] = 2..............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 $r3 ]
$r3[2] = 0..............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 $r3 ]
$r3[3] = 6..............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 $r3 ]
$r3[4] = 0..............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 $r3 ]
$r2[0] = $r3............................	[entry: r1 $r2 $r3 ]	[exit: r1 $r2 ]
$r4 = newarray (int)[5].................	[entry: r1 $r2 ]	[exit: r1 $r2 $r4 ]
$r4[0] = 2..............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 $r4 ]
$r4[1] = 0..............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 $r4 ]
$r4[2] = 3..............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 $r4 ]
$r4[3] = 8..............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 $r4 ]
$r4[4] = 5..............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 $r4 ]
$r2[1] = $r4............................	[entry: r1 $r2 $r4 ]	[exit: r1 $r2 ]
$r5 = newarray (int)[5].................	[entry: r1 $r2 ]	[exit: r1 $r2 $r5 ]
$r5[0] = 0..............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 $r5 ]
$r5[1] = 3..............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 $r5 ]
$r5[2] = 0..............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 $r5 ]
$r5[3] = 0..............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 $r5 ]
$r5[4] = 7..............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 $r5 ]
$r2[2] = $r5............................	[entry: r1 $r2 $r5 ]	[exit: r1 $r2 ]
$r6 = newarray (int)[5].................	[entry: r1 $r2 ]	[exit: r1 $r2 $r6 ]
$r6[0] = 6..............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 $r6 ]
$r6[1] = 8..............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 $r6 ]
$r6[2] = 0..............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 $r6 ]
$r6[3] = 0..............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 $r6 ]
$r6[4] = 9..............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 $r6 ]
$r2[3] = $r6............................	[entry: r1 $r2 $r6 ]	[exit: r1 $r2 ]
$r7 = newarray (int)[5].................	[entry: r1 $r2 ]	[exit: r1 $r2 $r7 ]
$r7[0] = 0..............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 $r7 ]
$r7[1] = 5..............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 $r7 ]
$r7[2] = 7..............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 $r7 ]
$r7[3] = 9..............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 $r7 ]
$r7[4] = 0..............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 $r7 ]
$r2[4] = $r7............................	[entry: r1 $r2 $r7 ]	[exit: r1 $r2 ]
r8 = $r2................................	[entry: r1 $r2 ]	[exit: r8 r1 ]
virtualinvoke r1.<DataStructures.Graphs.PrimMST: void primMST(int[][])>(r8)	[entry: r8 r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Graphs.AdjacencyMatrixGraph, Method Name: numberOfVertices, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Graphs.AdjacencyMatrixGraph	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int _numberOfVertices>	[entry: r0 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Graphs.AdjacencyMatrixGraph, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Graphs.AdjacencyMatrixGraph	[entry: ]	[exit: r0 ]
r24 = "    "............................	[entry: r0 ]	[exit: r24 r0 ]
i4 = 0..................................	[entry: r24 r0 ]	[exit: r24 i4 r0 ]
$i0 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()	[entry: r24 i4 r0 ]	[exit: r0 r24 i4 $i0 ]
if i4 >= $i0 goto $r1 = new java.lang.StringBuilder	[entry: r0 r24 i4 $i0 ]	[exit: r0 r24 i4 ]
$r19 = new java.lang.StringBuilder......	[entry: r0 i4 r24 ]	[exit: r0 i4 r24 $r19 ]
specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i4 r24 $r19 ]	[exit: r0 i4 r24 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24)	[entry: r0 i4 r24 $r19 ]	[exit: r0 $r20 i4 ]
$r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i4)	[entry: r0 $r20 i4 ]	[exit: r0 i4 $r21 $r20 ]
$r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21)	[entry: r0 i4 $r21 $r20 ]	[exit: r0 i4 $r22 ]
$r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r0 i4 $r22 ]	[exit: r0 i4 $r23 ]
r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i4 $r23 ]	[exit: r24 r0 i4 ]
i4 = i4 + 1.............................	[entry: r24 r0 i4 ]	[exit: r24 i4 r0 ]
goto [?= $i0 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()]	[entry: r24 i4 r0 ]	[exit: r24 i4 r0 ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 r24 ]	[exit: r0 r24 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 r24 $r1 ]	[exit: r0 r24 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24)	[entry: r0 r24 $r1 ]	[exit: r0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" \n")	[entry: r0 $r2 ]	[exit: r0 $r3 ]
r25 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 $r3 ]	[exit: r25 r0 ]
i5 = 0..................................	[entry: r25 r0 ]	[exit: r25 i5 r0 ]
$i1 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()	[entry: r25 i5 r0 ]	[exit: r25 r0 i5 $i1 ]
if i5 >= $i1 goto return r25............	[entry: r25 r0 i5 $i1 ]	[exit: r25 r0 i5 ]
$r4 = new java.lang.StringBuilder.......	[entry: r0 i5 r25 ]	[exit: r0 i5 r25 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i5 r25 $r4 ]	[exit: r0 i5 r25 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r25)	[entry: r0 i5 r25 $r4 ]	[exit: r0 $r5 i5 ]
$r6 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i5)	[entry: r0 $r5 i5 ]	[exit: i5 r0 $r6 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)	[entry: i5 r0 $r6 $r5 ]	[exit: i5 r0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ")	[entry: i5 r0 $r7 ]	[exit: i5 r0 $r8 ]
r26 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i5 r0 $r8 ]	[exit: i5 r26 r0 ]
i6 = 0..................................	[entry: i5 r26 r0 ]	[exit: i5 r26 i6 r0 ]
$i2 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()	[entry: i5 r26 i6 r0 ]	[exit: r0 i5 r26 i6 $i2 ]
if i6 >= $i2 goto $r9 = new java.lang.StringBuilder	[entry: r0 i5 r26 i6 $i2 ]	[exit: r0 i5 r26 i6 ]
$r12 = new java.lang.StringBuilder......	[entry: i6 i5 r0 r26 ]	[exit: i6 i5 r0 r26 $r12 ]
specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()	[entry: i6 i5 r0 r26 $r12 ]	[exit: i6 i5 r0 r26 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26)	[entry: i6 i5 r0 r26 $r12 ]	[exit: $r13 i6 i5 r0 ]
$r14 = r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int[][] _adjacency>	[entry: $r13 i6 i5 r0 ]	[exit: r0 $r13 i6 $r14 i5 ]
$r15 = $r14[i5].........................	[entry: r0 $r13 i6 $r14 i5 ]	[exit: i5 r0 $r13 $r15 i6 ]
$i3 = $r15[i6]..........................	[entry: i5 r0 $r13 $r15 i6 ]	[exit: i5 r0 i6 $r13 $i3 ]
$r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3)	[entry: i5 r0 i6 $r13 $i3 ]	[exit: i5 r0 i6 $r16 $r13 ]
$r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16)	[entry: i5 r0 i6 $r16 $r13 ]	[exit: i5 r0 i6 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: i5 r0 i6 $r17 ]	[exit: i5 r0 i6 $r18 ]
r26 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i5 r0 i6 $r18 ]	[exit: i5 r26 r0 i6 ]
i6 = i6 + 1.............................	[entry: i5 r26 r0 i6 ]	[exit: i5 r26 i6 r0 ]
goto [?= $i2 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()]	[entry: i5 r26 i6 r0 ]	[exit: i5 r26 i6 r0 ]
$r9 = new java.lang.StringBuilder.......	[entry: r0 i5 r26 ]	[exit: r0 i5 r26 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r0 i5 r26 $r9 ]	[exit: r0 i5 r26 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r26)	[entry: r0 i5 r26 $r9 ]	[exit: r0 i5 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")	[entry: r0 i5 $r10 ]	[exit: r0 i5 $r11 ]
r25 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r0 i5 $r11 ]	[exit: r25 r0 i5 ]
i5 = i5 + 1.............................	[entry: r25 r0 i5 ]	[exit: r25 i5 r0 ]
goto [?= $i1 = virtualinvoke r0.<DataStructures.Graphs.AdjacencyMatrixGraph: int numberOfVertices()>()]	[entry: r25 i5 r0 ]	[exit: r25 i5 r0 ]
return r25..............................	[entry: r25 ]	[exit: ]
********************
Class Name: DataStructures.Graphs.Cycles, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Graphs.Cycle...	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Graphs.Cycle: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.Cycle: void start()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Graphs.Cycle: void printAll()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.Link, Method Name: displayLink, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r2 := @this: DataStructures.Lists.Link..	[entry: ]	[exit: r2 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: $r1 r2 ]
$r0 = new java.lang.StringBuilder.......	[entry: $r1 r2 ]	[exit: $r1 r2 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: $r1 r2 $r0 ]	[exit: $r1 $r0 r2 ]
$i0 = r2.<DataStructures.Lists.Link: int value>	[entry: $r1 $r0 r2 ]	[exit: $r1 $i0 $r0 ]
$r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r1 $i0 $r0 ]	[exit: $r1 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: $r1 $r3 ]	[exit: $r1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r1 $r4 ]	[exit: $r5 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void print(java.lang.String)>($r5)	[entry: $r5 $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.Link, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Lists.DoublyLinkedList	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Lists.DoublyLinkedList: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertHead(int)>(13)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertHead(int)>(7)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertHead(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertTail(int)>(11)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: DataStructures.Lists.Link deleteTail()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void delete(int)>(7)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertOrdered(int)>(23)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertOrdered(int)>(67)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertOrdered(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertElementByIndex(int,int)>(5, 1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void clearList()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void insertHead(int)>(20)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.DoublyLinkedList: void display()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.MergeSortedArrayList, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r23 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.ArrayList...........	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.ArrayList: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.util.ArrayList...........	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<java.util.ArrayList: void <init>()>()	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
$r4 = new java.util.ArrayList...........	[entry: r1 r3 ]	[exit: r1 r3 $r4 ]
specialinvoke $r4.<java.util.ArrayList: void <init>()>()	[entry: r1 r3 $r4 ]	[exit: r1 r3 $r4 ]
r5 = $r4................................	[entry: r1 r3 $r4 ]	[exit: r1 r3 r5 ]
i1 = 1..................................	[entry: r1 r3 r5 ]	[exit: r1 r3 r5 i1 ]
if i1 > 10 goto staticinvoke <DataStructures.Lists.MergeSortedArrayList: void merge(java.util.List,java.util.List,java.util.List)>(r1, r3, r5)	[entry: r1 r3 r5 i1 ]	[exit: r1 r3 r5 i1 ]
$r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1)	[entry: r5 r3 r1 i1 ]	[exit: r5 r3 i1 $r21 r1 ]
interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r21)	[entry: r5 r3 i1 $r21 r1 ]	[exit: r1 r5 r3 i1 ]
$i0 = i1 + 1............................	[entry: r1 r5 r3 i1 ]	[exit: r1 r5 i1 r3 $i0 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)	[entry: r1 r5 i1 r3 $i0 ]	[exit: r1 r5 i1 $r22 r3 ]
interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r22)	[entry: r1 r5 i1 $r22 r3 ]	[exit: r1 r3 r5 i1 ]
i1 = i1 + 2.............................	[entry: r1 r3 r5 i1 ]	[exit: r1 r3 r5 i1 ]
goto [?= (branch)]......................	[entry: r1 r3 r5 i1 ]	[exit: r1 r3 r5 i1 ]
staticinvoke <DataStructures.Lists.MergeSortedArrayList: void merge(java.util.List,java.util.List,java.util.List)>(r1, r3, r5)	[entry: r1 r3 r5 ]	[exit: r5 r3 r1 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r5 r3 r1 ]	[exit: r5 r3 $r7 r1 ]
$r6 = new java.lang.StringBuilder.......	[entry: r5 r3 $r7 r1 ]	[exit: r5 r3 $r7 r1 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r5 r3 $r7 r1 $r6 ]	[exit: r5 r3 $r7 r1 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listA: ")	[entry: r5 r3 $r7 r1 $r6 ]	[exit: r5 r3 $r7 r1 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1)	[entry: r5 r3 $r7 r1 $r8 ]	[exit: r5 r3 $r7 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r5 r3 $r7 $r9 ]	[exit: r5 r3 $r10 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r5 r3 $r10 $r7 ]	[exit: r5 r3 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r5 r3 ]	[exit: r5 $r12 r3 ]
$r11 = new java.lang.StringBuilder......	[entry: r5 $r12 r3 ]	[exit: r5 $r12 r3 $r11 ]
specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()	[entry: r5 $r12 r3 $r11 ]	[exit: r5 $r12 r3 $r11 ]
$r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listB: ")	[entry: r5 $r12 r3 $r11 ]	[exit: r5 $r12 r3 $r13 ]
$r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)	[entry: r5 $r12 r3 $r13 ]	[exit: r5 $r12 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r5 $r12 $r14 ]	[exit: r5 $r15 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: r5 $r15 $r12 ]	[exit: r5 ]
$r17 = <java.lang.System: java.io.PrintStream out>	[entry: r5 ]	[exit: $r17 r5 ]
$r16 = new java.lang.StringBuilder......	[entry: $r17 r5 ]	[exit: $r17 r5 $r16 ]
specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()	[entry: $r17 r5 $r16 ]	[exit: $r17 r5 $r16 ]
$r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("listC: ")	[entry: $r17 r5 $r16 ]	[exit: $r17 r5 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5)	[entry: $r17 r5 $r18 ]	[exit: $r17 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r17 $r19 ]	[exit: $r20 $r17 ]
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20)	[entry: $r20 $r17 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.MergeSortedArrayList, Method Name: merge, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.util.List.......	[entry: ]	[exit: r0 ]
r1 := @parameter1: java.util.List.......	[entry: r0 ]	[exit: r1 r0 ]
r2 := @parameter2: java.util.List.......	[entry: r1 r0 ]	[exit: r2 r1 r0 ]
i8 = 0..................................	[entry: r2 r1 r0 ]	[exit: r2 r1 i8 r0 ]
i9 = 0..................................	[entry: r2 r1 i8 r0 ]	[exit: r2 i9 r1 i8 r0 ]
$i10 = interfaceinvoke r0.<java.util.List: int size()>()	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 i9 r1 r0 i8 $i10 ]
if i8 >= $i10 goto $i11 = interfaceinvoke r0.<java.util.List: int size()>()	[entry: r2 i9 r1 r0 i8 $i10 ]	[exit: r2 i9 r1 i8 r0 ]
$i3 = interfaceinvoke r1.<java.util.List: int size()>()	[entry: r2 i8 r0 i9 r1 ]	[exit: r2 r1 i8 r0 i9 $i3 ]
if i9 >= $i3 goto $i11 = interfaceinvoke r0.<java.util.List: int size()>()	[entry: r2 r1 i8 r0 i9 $i3 ]	[exit: r2 i9 r1 i8 r0 ]
$r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8)	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 r0 i8 i9 r1 $r5 ]
$r6 = (java.lang.Integer) $r5...........	[entry: r2 r0 i8 i9 r1 $r5 ]	[exit: r2 r0 i8 i9 r1 $r6 ]
$i4 = virtualinvoke $r6.<java.lang.Integer: int intValue()>()	[entry: r2 r0 i8 i9 r1 $r6 ]	[exit: r2 r0 i8 $i4 i9 r1 ]
$r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i9)	[entry: r2 r0 i8 $i4 i9 r1 ]	[exit: i9 r1 r2 r0 i8 $i4 $r7 ]
$r8 = (java.lang.Integer) $r7...........	[entry: i9 r1 r2 r0 i8 $i4 $r7 ]	[exit: i9 r1 r2 r0 i8 $i4 $r8 ]
$i5 = virtualinvoke $r8.<java.lang.Integer: int intValue()>()	[entry: i9 r1 r2 r0 i8 $i4 $r8 ]	[exit: i9 r1 r2 r0 i8 $i4 $i5 ]
if $i4 > $i5 goto $i6 = i9..............	[entry: i9 r1 r2 r0 i8 $i4 $i5 ]	[exit: i9 r1 r2 r0 i8 ]
$i7 = i8................................	[entry: i9 r1 r2 r0 i8 ]	[exit: i9 r1 r2 $i7 r0 i8 ]
i8 = i8 + 1.............................	[entry: i9 r1 r2 $i7 r0 i8 ]	[exit: i9 r1 i8 r2 $i7 r0 ]
$r10 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i7)	[entry: i9 r1 i8 r2 $i7 r0 ]	[exit: i9 r1 i8 r0 $r10 r2 ]
interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r10)	[entry: i9 r1 i8 r0 $r10 r2 ]	[exit: r2 i9 r1 i8 r0 ]
goto [?= $i10 = interfaceinvoke r0.<java.util.List: int size()>()]	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 i9 r1 i8 r0 ]
$i6 = i9................................	[entry: i8 r0 r2 r1 i9 ]	[exit: i8 r0 r2 $i6 r1 i9 ]
i9 = i9 + 1.............................	[entry: i8 r0 r2 $i6 r1 i9 ]	[exit: i9 i8 r0 r2 $i6 r1 ]
$r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i6)	[entry: i9 i8 r0 r2 $i6 r1 ]	[exit: i9 r1 i8 r0 $r9 r2 ]
interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r9)	[entry: i9 r1 i8 r0 $r9 r2 ]	[exit: r2 i9 r1 i8 r0 ]
goto [?= $i10 = interfaceinvoke r0.<java.util.List: int size()>()]	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 i9 r1 i8 r0 ]
$i11 = interfaceinvoke r0.<java.util.List: int size()>()	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 i9 r1 r0 i8 $i11 ]
if i8 >= $i11 goto $i0 = interfaceinvoke r1.<java.util.List: int size()>()	[entry: r2 i9 r1 r0 i8 $i11 ]	[exit: r2 i9 r1 r0 i8 ]
$i2 = i8................................	[entry: i9 r1 r2 r0 i8 ]	[exit: i9 r1 r2 $i2 r0 i8 ]
i8 = i8 + 1.............................	[entry: i9 r1 r2 $i2 r0 i8 ]	[exit: i9 r1 i8 r2 $i2 r0 ]
$r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>($i2)	[entry: i9 r1 i8 r2 $i2 r0 ]	[exit: i9 r1 i8 r0 $r4 r2 ]
interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4)	[entry: i9 r1 i8 r0 $r4 r2 ]	[exit: r2 i9 r1 i8 r0 ]
goto [?= $i11 = interfaceinvoke r0.<java.util.List: int size()>()]	[entry: r2 i9 r1 i8 r0 ]	[exit: r2 i9 r1 i8 r0 ]
$i0 = interfaceinvoke r1.<java.util.List: int size()>()	[entry: r2 i9 r1 ]	[exit: r2 r1 i9 $i0 ]
if i9 >= $i0 goto return................	[entry: r2 r1 i9 $i0 ]	[exit: r2 r1 i9 ]
$i1 = i9................................	[entry: r2 r1 i9 ]	[exit: r2 $i1 r1 i9 ]
i9 = i9 + 1.............................	[entry: r2 $i1 r1 i9 ]	[exit: i9 r2 $i1 r1 ]
$r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i1)	[entry: i9 r2 $i1 r1 ]	[exit: i9 r1 $r3 r2 ]
interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3)	[entry: i9 r1 $r3 r2 ]	[exit: r2 i9 r1 ]
goto [?= $i0 = interfaceinvoke r1.<java.util.List: int size()>()]	[entry: r2 i9 r1 ]	[exit: r2 i9 r1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: insertHead, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void insertNth(int,int)>(i0, 0)	[entry: i0 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
$i1 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: i0 r0 ]	[exit: i0 $i1 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void insertNth(int,int)>(i0, $i1)	[entry: i0 $i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: insertNth, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i2 := @parameter0: int..................	[entry: r0 ]	[exit: i2 r0 ]
i0 := @parameter1: int..................	[entry: i2 r0 ]	[exit: i2 i0 r0 ]
$i1 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: i2 i0 r0 ]	[exit: i2 i0 $i1 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void checkBounds(int,int,int)>(i0, 0, $i1)	[entry: i2 i0 $i1 r0 ]	[exit: i0 r0 i2 ]
$r1 = new DataStructures.Lists.Node.....	[entry: i0 r0 i2 ]	[exit: i0 r0 i2 $r1 ]
specialinvoke $r1.<DataStructures.Lists.Node: void <init>(int)>(i2)	[entry: i0 r0 i2 $r1 ]	[exit: i0 r0 $r1 ]
r2 = $r1................................	[entry: i0 r0 $r1 ]	[exit: r2 i0 r0 ]
$r3 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r2 i0 r0 ]	[exit: r0 r2 i0 $r3 ]
if $r3 != null goto (branch)............	[entry: r0 r2 i0 $r3 ]	[exit: r0 r2 i0 ]
r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head> = r2	[entry: r0 r2 ]	[exit: r0 ]
$i8 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i8 ]
$i9 = $i8 + 1...........................	[entry: r0 $i8 ]	[exit: r0 $i9 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = $i9	[entry: r0 $i9 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
if i0 != 0 goto r6 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r2 r0 i0 ]	[exit: r2 r0 i0 ]
$r5 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r2 r0 ]	[exit: r0 r2 $r5 ]
r2.<DataStructures.Lists.Node: DataStructures.Lists.Node next> = $r5	[entry: r0 r2 $r5 ]	[exit: r0 r2 ]
r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head> = r2	[entry: r0 r2 ]	[exit: r0 ]
$i6 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i6 ]
$i7 = $i6 + 1...........................	[entry: r0 $i6 ]	[exit: r0 $i7 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = $i7	[entry: r0 $i7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
r6 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r2 i0 r0 ]	[exit: r0 r2 r6 i0 ]
i10 = 0.................................	[entry: r0 r2 r6 i0 ]	[exit: r0 r2 r6 i10 i0 ]
$i3 = i0 - 1............................	[entry: r0 r2 r6 i10 i0 ]	[exit: r0 r2 r6 i0 i10 $i3 ]
if i10 >= $i3 goto $r4 = r6.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r2 r6 i0 i10 $i3 ]	[exit: r0 r2 r6 i0 i10 ]
r6 = r6.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r2 i0 i10 r6 ]	[exit: r0 r2 r6 i0 i10 ]
i10 = i10 + 1...........................	[entry: r0 r2 r6 i0 i10 ]	[exit: r0 r2 r6 i10 i0 ]
goto [?= $i3 = i0 - 1]..................	[entry: r0 r2 r6 i10 i0 ]	[exit: r0 r2 r6 i10 i0 ]
$r4 = r6.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r2 r6 ]	[exit: r0 r6 r2 $r4 ]
r2.<DataStructures.Lists.Node: DataStructures.Lists.Node next> = $r4	[entry: r0 r6 r2 $r4 ]	[exit: r0 r6 r2 ]
r6.<DataStructures.Lists.Node: DataStructures.Lists.Node next> = r2	[entry: r0 r6 r2 ]	[exit: r0 ]
$i4 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i4 ]
$i5 = $i4 + 1...........................	[entry: r0 $i4 ]	[exit: r0 $i5 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = $i5	[entry: r0 $i5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: deleteHead, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void deleteNth(int)>(0)	[entry: r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: delete, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i0 ]
$i1 = $i0 - 1...........................	[entry: r0 $i0 ]	[exit: $i1 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void deleteNth(int)>($i1)	[entry: $i1 r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: deleteNth, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
$i1 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: i0 r0 ]	[exit: i0 r0 $i1 ]
$i2 = $i1 - 1...........................	[entry: i0 r0 $i1 ]	[exit: i0 $i2 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void checkBounds(int,int,int)>(i0, 0, $i2)	[entry: i0 $i2 r0 ]	[exit: r0 i0 ]
if i0 != 0 goto r5 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r0 i0 ]	[exit: r0 i0 ]
$r3 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r0 ]	[exit: r0 $r3 ]
$r4 = $r3.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 $r3 ]	[exit: r0 $r4 ]
r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head> = $r4	[entry: r0 $r4 ]	[exit: r0 ]
$i6 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i6 ]
$i7 = $i6 - 1...........................	[entry: r0 $i6 ]	[exit: r0 $i7 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = $i7	[entry: r0 $i7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
r5 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: i0 r0 ]	[exit: r0 r5 i0 ]
i8 = 0..................................	[entry: r0 r5 i0 ]	[exit: r0 r5 i8 i0 ]
$i3 = i0 - 1............................	[entry: r0 r5 i8 i0 ]	[exit: r0 r5 i0 i8 $i3 ]
if i8 >= $i3 goto r6 = r5.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r5 i0 i8 $i3 ]	[exit: r0 r5 i0 i8 ]
r5 = r5.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 i0 i8 r5 ]	[exit: r0 r5 i0 i8 ]
i8 = i8 + 1.............................	[entry: r0 r5 i0 i8 ]	[exit: r0 r5 i8 i0 ]
goto [?= $i3 = i0 - 1]..................	[entry: r0 r5 i8 i0 ]	[exit: r0 r5 i8 i0 ]
r6 = r5.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r5 ]	[exit: r0 r5 ]
$r1 = r5.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r5 ]	[exit: r0 r5 $r1 ]
$r2 = $r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r5 $r1 ]	[exit: r0 r5 $r2 ]
r5.<DataStructures.Lists.Node: DataStructures.Lists.Node next> = $r2	[entry: r0 r5 $r2 ]	[exit: r0 ]
$i4 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i4 ]
$i5 = $i4 - 1...........................	[entry: r0 $i4 ]	[exit: r0 $i5 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = $i5	[entry: r0 $i5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: checkBounds, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: ]
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i2 := @parameter1: int..................	[entry: i0 ]	[exit: i2 i0 ]
i1 := @parameter2: int..................	[entry: i2 i0 ]	[exit: i2 i0 i1 ]
if i0 > i1 goto $r0 = new java.lang.IndexOutOfBoundsException	[entry: i2 i0 i1 ]	[exit: i0 i2 ]
if i0 >= i2 goto return.................	[entry: i0 i2 ]	[exit: i0 ]
$r0 = new java.lang.IndexOutOfBoundsException	[entry: i0 ]	[exit: $r0 i0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r0 i0 ]	[exit: $r0 i0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r0 i0 $r1 ]	[exit: $r0 i0 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r0 i0 $r1 ]	[exit: $r0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")	[entry: $r0 $r2 ]	[exit: $r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r0 $r3 ]	[exit: $r4 $r0 ]
specialinvoke $r0.<java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)>($r4)	[entry: $r4 $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: clear, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
r1 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r0 ]	[exit: r0 r1 ]
if r1 == null goto r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head> = null	[entry: r0 r1 ]	[exit: r0 r1 ]
r1 = r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r0 r1 ]	[exit: r0 r1 ]
goto [?= (branch)]......................	[entry: r0 r1 ]	[exit: r0 r1 ]
r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head> = null	[entry: r0 ]	[exit: r0 ]
r0.<DataStructures.Lists.SinglyLinkedList: int size> = 0	[entry: r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: isEmpty, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: $i0 ]
if $i0 != 0 goto $z0 = 0................	[entry: $i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: size, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: count, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 = 0..................................	[entry: r0 ]	[exit: i0 r0 ]
r1 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: i0 r0 ]	[exit: i0 r1 ]
if r1 == null goto return i0............	[entry: i0 r1 ]	[exit: i0 r1 ]
r1 = r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: i0 r1 ]	[exit: r1 i0 ]
i0 = i0 + 1.............................	[entry: r1 i0 ]	[exit: i0 r1 ]
goto [?= (branch)]......................	[entry: i0 r1 ]	[exit: i0 r1 ]
return i0...............................	[entry: i0 ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: search, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
r1 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: i0 r0 ]	[exit: i0 r1 ]
if r1 == null goto return 0.............	[entry: i0 r1 ]	[exit: i0 r1 ]
$i1 = r1.<DataStructures.Lists.Node: int value>	[entry: i0 r1 ]	[exit: r1 $i1 i0 ]
if $i1 != i0 goto r1 = r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r1 $i1 i0 ]	[exit: i0 r1 ]
return 1................................	[entry: ]	[exit: ]
r1 = r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: i0 r1 ]	[exit: i0 r1 ]
goto [?= (branch)]......................	[entry: i0 r1 ]	[exit: i0 r1 ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: getNth, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
i0 := @parameter0: int..................	[entry: r0 ]	[exit: i0 r0 ]
$i1 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: i0 r0 ]	[exit: i0 r0 $i1 ]
$i2 = $i1 - 1...........................	[entry: i0 r0 $i1 ]	[exit: i0 $i2 r0 ]
virtualinvoke r0.<DataStructures.Lists.SinglyLinkedList: void checkBounds(int,int,int)>(i0, 0, $i2)	[entry: i0 $i2 r0 ]	[exit: i0 r0 ]
r1 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: i0 r0 ]	[exit: r1 i0 ]
i4 = 0..................................	[entry: r1 i0 ]	[exit: r1 i4 i0 ]
if i4 >= i0 goto $i3 = r1.<DataStructures.Lists.Node: int value>	[entry: r1 i4 i0 ]	[exit: r1 i0 i4 ]
r1 = r1.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: i0 i4 r1 ]	[exit: r1 i0 i4 ]
i4 = i4 + 1.............................	[entry: r1 i0 i4 ]	[exit: r1 i4 i0 ]
goto [?= (branch)]......................	[entry: r1 i4 i0 ]	[exit: r1 i4 i0 ]
$i3 = r1.<DataStructures.Lists.Node: int value>	[entry: r1 ]	[exit: $i3 ]
return $i3..............................	[entry: $i3 ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 != 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 $i0 ]	[exit: r0 ]
return ""...............................	[entry: ]	[exit: ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
r7 = r0.<DataStructures.Lists.SinglyLinkedList: DataStructures.Lists.Node head>	[entry: r2 r0 ]	[exit: r2 r7 ]
if r7 == null goto $i1 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 r7 ]	[exit: r2 r7 ]
$i4 = r7.<DataStructures.Lists.Node: int value>	[entry: r2 r7 ]	[exit: r7 $i4 r2 ]
$r5 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)	[entry: r7 $i4 r2 ]	[exit: r2 r7 $r5 ]
virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->")	[entry: r2 r7 $r5 ]	[exit: r2 r7 ]
r7 = r7.<DataStructures.Lists.Node: DataStructures.Lists.Node next>	[entry: r2 r7 ]	[exit: r2 r7 ]
goto [?= (branch)]......................	[entry: r2 r7 ]	[exit: r2 r7 ]
$i1 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 ]	[exit: r2 $i1 ]
$i2 = $i1 - 2...........................	[entry: r2 $i1 ]	[exit: $i2 r2 ]
$i3 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: $i2 r2 ]	[exit: $i2 $i3 r2 ]
$r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i2, $i3, "")	[entry: $i2 $i3 r2 ]	[exit: $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r3 ]	[exit: $r4 ]
return $r4..............................	[entry: $r4 ]	[exit: ]
********************
Class Name: DataStructures.Lists.SinglyLinkedList, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r15 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Lists.SinglyLinkedList	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Lists.SinglyLinkedList: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z18 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z18 ]
if $z18 != 0 goto $z1 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z18 ]	[exit: r1 ]
$r12 = new java.lang.AssertionError.....	[entry: ]	[exit: $r12 ]
specialinvoke $r12.<java.lang.AssertionError: void <init>()>()	[entry: $r12 ]	[exit: $r12 ]
throw $r12..............................	[entry: $r12 ]	[exit: ]
$z1 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto $z2 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z1 ]	[exit: r1 ]
$i6 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int size()>()	[entry: r1 ]	[exit: r1 $i6 ]
if $i6 != 0 goto $r11 = new java.lang.AssertionError	[entry: r1 $i6 ]	[exit: r1 ]
$i7 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int count()>()	[entry: r1 ]	[exit: r1 $i7 ]
if $i7 == 0 goto $z2 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $i7 ]	[exit: r1 ]
$r11 = new java.lang.AssertionError.....	[entry: ]	[exit: $r11 ]
specialinvoke $r11.<java.lang.AssertionError: void <init>()>()	[entry: $r11 ]	[exit: $r11 ]
throw $r11..............................	[entry: $r11 ]	[exit: ]
$z2 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertHead(int)>(5)	[entry: r1 $z2 ]	[exit: r1 ]
$r9 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: java.lang.String toString()>()	[entry: r1 ]	[exit: r1 $r9 ]
$z17 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>("")	[entry: r1 $r9 ]	[exit: r1 $z17 ]
if $z17 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertHead(int)>(5)	[entry: r1 $z17 ]	[exit: r1 ]
$r10 = new java.lang.AssertionError.....	[entry: ]	[exit: $r10 ]
specialinvoke $r10.<java.lang.AssertionError: void <init>()>()	[entry: $r10 ]	[exit: $r10 ]
throw $r10..............................	[entry: $r10 ]	[exit: ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertHead(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertHead(int)>(7)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertHead(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insert(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void insertNth(int,int)>(1, 4)	[entry: r1 ]	[exit: r1 ]
$z3 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto $z4 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z3 ]	[exit: r1 ]
$r7 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: java.lang.String toString()>()	[entry: r1 ]	[exit: r1 $r7 ]
$z16 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("10->7->5->3->1")	[entry: r1 $r7 ]	[exit: r1 $z16 ]
if $z16 != 0 goto $z4 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z16 ]	[exit: r1 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z4 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto $z5 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z4 ]	[exit: r1 ]
$z12 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean search(int)>(10)	[entry: r1 ]	[exit: r1 $z12 ]
if $z12 == 0 goto $r16 = new java.lang.AssertionError	[entry: r1 $z12 ]	[exit: r1 ]
$z13 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean search(int)>(5)	[entry: r1 ]	[exit: r1 $z13 ]
if $z13 == 0 goto $r16 = new java.lang.AssertionError	[entry: r1 $z13 ]	[exit: r1 ]
$z14 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean search(int)>(1)	[entry: r1 ]	[exit: r1 $z14 ]
if $z14 == 0 goto $r16 = new java.lang.AssertionError	[entry: r1 $z14 ]	[exit: r1 ]
$z15 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean search(int)>(100)	[entry: r1 ]	[exit: r1 $z15 ]
if $z15 == 0 goto $z5 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z15 ]	[exit: r1 ]
$r16 = new java.lang.AssertionError.....	[entry: ]	[exit: $r16 ]
specialinvoke $r16.<java.lang.AssertionError: void <init>()>()	[entry: $r16 ]	[exit: $r16 ]
throw $r16..............................	[entry: $r16 ]	[exit: ]
$z5 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void deleteHead()>()	[entry: r1 $z5 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int getNth(int)>(0)	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 != 10 goto $r17 = new java.lang.AssertionError	[entry: r1 $i3 ]	[exit: r1 ]
$i4 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int getNth(int)>(2)	[entry: r1 ]	[exit: r1 $i4 ]
if $i4 != 5 goto $r17 = new java.lang.AssertionError	[entry: r1 $i4 ]	[exit: r1 ]
$i5 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int getNth(int)>(4)	[entry: r1 ]	[exit: r1 $i5 ]
if $i5 == 1 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void deleteHead()>()	[entry: r1 $i5 ]	[exit: r1 ]
$r17 = new java.lang.AssertionError.....	[entry: ]	[exit: $r17 ]
specialinvoke $r17.<java.lang.AssertionError: void <init>()>()	[entry: $r17 ]	[exit: $r17 ]
throw $r17..............................	[entry: $r17 ]	[exit: ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void deleteHead()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void deleteNth(int)>(1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void delete()>()	[entry: r1 ]	[exit: r1 ]
$z6 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z7 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$r5 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: java.lang.String toString()>()	[entry: r1 ]	[exit: r1 $r5 ]
$z11 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("7->3")	[entry: r1 $r5 ]	[exit: r1 $z11 ]
if $z11 != 0 goto $z7 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 $z11 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z7 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void clear()>()	[entry: r1 $z7 ]	[exit: r1 ]
$i0 = r1.<DataStructures.Lists.SinglyLinkedList: int size>	[entry: r1 ]	[exit: r1 $i0 ]
if $i0 != 2 goto $r4 = new java.lang.AssertionError	[entry: r1 $i0 ]	[exit: r1 ]
$i1 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int size()>()	[entry: r1 ]	[exit: $i1 r1 ]
$i2 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: int count()>()	[entry: $i1 r1 ]	[exit: r1 $i1 $i2 ]
if $i1 == $i2 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void clear()>()	[entry: r1 $i1 $i2 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void clear()>()	[entry: r1 ]	[exit: r1 ]
$z8 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void delete()>()	[entry: r1 $z8 ]	[exit: r1 ]
$z10 = virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z10 ]
if $z10 != 0 goto virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void delete()>()	[entry: r1 $z10 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<DataStructures.Lists.SinglyLinkedList: void delete()>()	[entry: r1 ]	[exit: ]
$z9 = <DataStructures.Lists.SinglyLinkedList: boolean $assertionsDisabled>	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto (branch)...............	[entry: $z9 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
goto [?= return]........................	[entry: ]	[exit: ]
$r13 := @caughtexception................	[entry: ]	[exit: $r13 ]
r14 = $r13..............................	[entry: $r13 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: readOutChar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
r4 = null...............................	[entry: r0 ]	[exit: r4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: r4 r0 $r1 ]	[exit: r4 r0 $i0 ]
if $i0 <= 0 goto return r4..............	[entry: r4 r0 $i0 ]	[exit: r4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: r0 ]	[exit: $r2 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: $r2 r0 ]	[exit: $r2 $i1 r0 ]
$i2 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i1)	[entry: $r2 $i1 r0 ]	[exit: r0 $r2 $i2 ]
$c3 = $r2[$i2]..........................	[entry: r0 $r2 $i2 ]	[exit: r0 $c3 ]
r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)	[entry: r0 $c3 ]	[exit: r4 r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>()	[entry: r4 r0 $r3 ]	[exit: r4 r0 ]
$i5 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: r4 r0 ]	[exit: r4 r0 $i5 ]
$i6 = $i5 + 1...........................	[entry: r4 r0 $i5 ]	[exit: r4 r0 $i6 ]
r0.<DataStructures.Buffers.CircularBuffer: int _read_index> = $i6	[entry: r4 r0 $i6 ]	[exit: r4 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: writeToCharBuffer, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
c4 := @parameter0: char.................	[entry: r0 ]	[exit: c4 r0 ]
z0 = 0..................................	[entry: c4 r0 ]	[exit: z0 c4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: z0 c4 r0 ]	[exit: z0 c4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: z0 c4 r0 $r1 ]	[exit: z0 c4 $i0 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _buffer_size>	[entry: z0 c4 $i0 r0 ]	[exit: z0 c4 r0 $i0 $i1 ]
if $i0 >= $i1 goto return z0............	[entry: z0 c4 r0 $i0 $i1 ]	[exit: z0 c4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: c4 r0 ]	[exit: $r2 c4 r0 ]
$i2 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: $r2 c4 r0 ]	[exit: $r2 c4 $i2 r0 ]
$i3 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i2)	[entry: $r2 c4 $i2 r0 ]	[exit: r0 $r2 $i3 c4 ]
$r2[$i3] = c4...........................	[entry: r0 $r2 $i3 c4 ]	[exit: r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r0 ]	[exit: r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()	[entry: r0 $r3 ]	[exit: r0 ]
$i6 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: r0 ]	[exit: r0 $i6 ]
$i7 = $i6 + 1...........................	[entry: r0 $i6 ]	[exit: r0 $i7 ]
r0.<DataStructures.Buffers.CircularBuffer: int _write_index> = $i7	[entry: r0 $i7 ]	[exit: ]
z0 = 1..................................	[entry: ]	[exit: z0 ]
return z0...............................	[entry: z0 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
s0 = 1024...............................	[entry: ]	[exit: s0 ]
$r0 = new DataStructures.Buffers.CircularBuffer	[entry: s0 ]	[exit: s0 $r0 ]
specialinvoke $r0.<DataStructures.Buffers.CircularBuffer: void <init>(int)>(s0)	[entry: s0 $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.lang.Thread..............	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = new DataStructures.Buffers.CircularBuffer$TestWriteWorker	[entry: $r2 r1 ]	[exit: $r2 r1 $r3 ]
specialinvoke $r3.<DataStructures.Buffers.CircularBuffer$TestWriteWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: $r2 r1 $r3 ]	[exit: r1 $r3 $r2 ]
specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3)	[entry: r1 $r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r4 r1 ]
$r5 = new java.lang.Thread..............	[entry: r4 r1 ]	[exit: r4 $r5 r1 ]
$r6 = new DataStructures.Buffers.CircularBuffer$TestReadWorker	[entry: r4 $r5 r1 ]	[exit: r4 $r5 r1 $r6 ]
specialinvoke $r6.<DataStructures.Buffers.CircularBuffer$TestReadWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: r4 $r5 r1 $r6 ]	[exit: r4 $r6 $r5 ]
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)	[entry: r4 $r6 $r5 ]	[exit: r4 $r5 ]
r7 = $r5................................	[entry: r4 $r5 ]	[exit: r4 r7 ]
virtualinvoke r7.<java.lang.Thread: void start()>()	[entry: r4 r7 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void start()>()	[entry: r7 r4 ]	[exit: r7 r4 ]
staticinvoke <java.lang.Thread: void sleep(long)>(10000L)	[entry: r7 r4 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void interrupt()>()	[entry: r7 r4 ]	[exit: r7 ]
virtualinvoke r7.<java.lang.Thread: void interrupt()>()	[entry: r7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: readOutChar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
r4 = null...............................	[entry: r0 ]	[exit: r4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: r4 r0 $r1 ]	[exit: r4 r0 $i0 ]
if $i0 <= 0 goto return r4..............	[entry: r4 r0 $i0 ]	[exit: r4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: r0 ]	[exit: $r2 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: $r2 r0 ]	[exit: $r2 $i1 r0 ]
$i2 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i1)	[entry: $r2 $i1 r0 ]	[exit: r0 $r2 $i2 ]
$c3 = $r2[$i2]..........................	[entry: r0 $r2 $i2 ]	[exit: r0 $c3 ]
r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)	[entry: r0 $c3 ]	[exit: r4 r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>()	[entry: r4 r0 $r3 ]	[exit: r4 r0 ]
$i5 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: r4 r0 ]	[exit: r4 r0 $i5 ]
$i6 = $i5 + 1...........................	[entry: r4 r0 $i5 ]	[exit: r4 r0 $i6 ]
r0.<DataStructures.Buffers.CircularBuffer: int _read_index> = $i6	[entry: r4 r0 $i6 ]	[exit: r4 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: writeToCharBuffer, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
c4 := @parameter0: char.................	[entry: r0 ]	[exit: c4 r0 ]
z0 = 0..................................	[entry: c4 r0 ]	[exit: z0 c4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: z0 c4 r0 ]	[exit: z0 c4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: z0 c4 r0 $r1 ]	[exit: z0 c4 $i0 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _buffer_size>	[entry: z0 c4 $i0 r0 ]	[exit: z0 c4 r0 $i0 $i1 ]
if $i0 >= $i1 goto return z0............	[entry: z0 c4 r0 $i0 $i1 ]	[exit: z0 c4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: c4 r0 ]	[exit: $r2 c4 r0 ]
$i2 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: $r2 c4 r0 ]	[exit: $r2 c4 $i2 r0 ]
$i3 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i2)	[entry: $r2 c4 $i2 r0 ]	[exit: r0 $r2 $i3 c4 ]
$r2[$i3] = c4...........................	[entry: r0 $r2 $i3 c4 ]	[exit: r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r0 ]	[exit: r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()	[entry: r0 $r3 ]	[exit: r0 ]
$i6 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: r0 ]	[exit: r0 $i6 ]
$i7 = $i6 + 1...........................	[entry: r0 $i6 ]	[exit: r0 $i7 ]
r0.<DataStructures.Buffers.CircularBuffer: int _write_index> = $i7	[entry: r0 $i7 ]	[exit: ]
z0 = 1..................................	[entry: ]	[exit: z0 ]
return z0...............................	[entry: z0 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
s0 = 1024...............................	[entry: ]	[exit: s0 ]
$r0 = new DataStructures.Buffers.CircularBuffer	[entry: s0 ]	[exit: s0 $r0 ]
specialinvoke $r0.<DataStructures.Buffers.CircularBuffer: void <init>(int)>(s0)	[entry: s0 $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.lang.Thread..............	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = new DataStructures.Buffers.CircularBuffer$TestWriteWorker	[entry: $r2 r1 ]	[exit: $r2 r1 $r3 ]
specialinvoke $r3.<DataStructures.Buffers.CircularBuffer$TestWriteWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: $r2 r1 $r3 ]	[exit: r1 $r3 $r2 ]
specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3)	[entry: r1 $r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r4 r1 ]
$r5 = new java.lang.Thread..............	[entry: r4 r1 ]	[exit: r4 $r5 r1 ]
$r6 = new DataStructures.Buffers.CircularBuffer$TestReadWorker	[entry: r4 $r5 r1 ]	[exit: r4 $r5 r1 $r6 ]
specialinvoke $r6.<DataStructures.Buffers.CircularBuffer$TestReadWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: r4 $r5 r1 $r6 ]	[exit: r4 $r6 $r5 ]
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)	[entry: r4 $r6 $r5 ]	[exit: r4 $r5 ]
r7 = $r5................................	[entry: r4 $r5 ]	[exit: r4 r7 ]
virtualinvoke r7.<java.lang.Thread: void start()>()	[entry: r4 r7 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void start()>()	[entry: r7 r4 ]	[exit: r7 r4 ]
staticinvoke <java.lang.Thread: void sleep(long)>(10000L)	[entry: r7 r4 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void interrupt()>()	[entry: r7 r4 ]	[exit: r7 ]
virtualinvoke r7.<java.lang.Thread: void interrupt()>()	[entry: r7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: readOutChar, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
r4 = null...............................	[entry: r0 ]	[exit: r4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: r4 r0 $r1 ]	[exit: r4 r0 $i0 ]
if $i0 <= 0 goto return r4..............	[entry: r4 r0 $i0 ]	[exit: r4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: r0 ]	[exit: $r2 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: $r2 r0 ]	[exit: $r2 $i1 r0 ]
$i2 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i1)	[entry: $r2 $i1 r0 ]	[exit: r0 $r2 $i2 ]
$c3 = $r2[$i2]..........................	[entry: r0 $r2 $i2 ]	[exit: r0 $c3 ]
r4 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c3)	[entry: r0 $c3 ]	[exit: r4 r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r4 r0 ]	[exit: r4 r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>()	[entry: r4 r0 $r3 ]	[exit: r4 r0 ]
$i5 = r0.<DataStructures.Buffers.CircularBuffer: int _read_index>	[entry: r4 r0 ]	[exit: r4 r0 $i5 ]
$i6 = $i5 + 1...........................	[entry: r4 r0 $i5 ]	[exit: r4 r0 $i6 ]
r0.<DataStructures.Buffers.CircularBuffer: int _read_index> = $i6	[entry: r4 r0 $i6 ]	[exit: r4 ]
return r4...............................	[entry: r4 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: writeToCharBuffer, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Buffers.CircularBuffer	[entry: ]	[exit: r0 ]
c4 := @parameter0: char.................	[entry: r0 ]	[exit: c4 r0 ]
z0 = 0..................................	[entry: c4 r0 ]	[exit: z0 c4 r0 ]
$r1 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: z0 c4 r0 ]	[exit: z0 c4 r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>()	[entry: z0 c4 r0 $r1 ]	[exit: z0 c4 $i0 r0 ]
$i1 = r0.<DataStructures.Buffers.CircularBuffer: int _buffer_size>	[entry: z0 c4 $i0 r0 ]	[exit: z0 c4 r0 $i0 $i1 ]
if $i0 >= $i1 goto return z0............	[entry: z0 c4 r0 $i0 $i1 ]	[exit: z0 c4 r0 ]
$r2 = r0.<DataStructures.Buffers.CircularBuffer: char[] _buffer>	[entry: c4 r0 ]	[exit: $r2 c4 r0 ]
$i2 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: $r2 c4 r0 ]	[exit: $r2 c4 $i2 r0 ]
$i3 = specialinvoke r0.<DataStructures.Buffers.CircularBuffer: int getTrueIndex(int)>($i2)	[entry: $r2 c4 $i2 r0 ]	[exit: r0 $r2 $i3 c4 ]
$r2[$i3] = c4...........................	[entry: r0 $r2 $i3 c4 ]	[exit: r0 ]
$r3 = r0.<DataStructures.Buffers.CircularBuffer: java.util.concurrent.atomic.AtomicInteger _readable_data>	[entry: r0 ]	[exit: r0 $r3 ]
virtualinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()	[entry: r0 $r3 ]	[exit: r0 ]
$i6 = r0.<DataStructures.Buffers.CircularBuffer: int _write_index>	[entry: r0 ]	[exit: r0 $i6 ]
$i7 = $i6 + 1...........................	[entry: r0 $i6 ]	[exit: r0 $i7 ]
r0.<DataStructures.Buffers.CircularBuffer: int _write_index> = $i7	[entry: r0 $i7 ]	[exit: ]
z0 = 1..................................	[entry: ]	[exit: z0 ]
return z0...............................	[entry: z0 ]	[exit: ]
********************
Class Name: DataStructures.Buffers.CircularBuffer, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
s0 = 1024...............................	[entry: ]	[exit: s0 ]
$r0 = new DataStructures.Buffers.CircularBuffer	[entry: s0 ]	[exit: s0 $r0 ]
specialinvoke $r0.<DataStructures.Buffers.CircularBuffer: void <init>(int)>(s0)	[entry: s0 $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.lang.Thread..............	[entry: r1 ]	[exit: $r2 r1 ]
$r3 = new DataStructures.Buffers.CircularBuffer$TestWriteWorker	[entry: $r2 r1 ]	[exit: $r2 r1 $r3 ]
specialinvoke $r3.<DataStructures.Buffers.CircularBuffer$TestWriteWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: $r2 r1 $r3 ]	[exit: r1 $r3 $r2 ]
specialinvoke $r2.<java.lang.Thread: void <init>(java.lang.Runnable)>($r3)	[entry: r1 $r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r4 r1 ]
$r5 = new java.lang.Thread..............	[entry: r4 r1 ]	[exit: r4 $r5 r1 ]
$r6 = new DataStructures.Buffers.CircularBuffer$TestReadWorker	[entry: r4 $r5 r1 ]	[exit: r4 $r5 r1 $r6 ]
specialinvoke $r6.<DataStructures.Buffers.CircularBuffer$TestReadWorker: void <init>(DataStructures.Buffers.CircularBuffer)>(r1)	[entry: r4 $r5 r1 $r6 ]	[exit: r4 $r6 $r5 ]
specialinvoke $r5.<java.lang.Thread: void <init>(java.lang.Runnable)>($r6)	[entry: r4 $r6 $r5 ]	[exit: r4 $r5 ]
r7 = $r5................................	[entry: r4 $r5 ]	[exit: r4 r7 ]
virtualinvoke r7.<java.lang.Thread: void start()>()	[entry: r4 r7 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void start()>()	[entry: r7 r4 ]	[exit: r7 r4 ]
staticinvoke <java.lang.Thread: void sleep(long)>(10000L)	[entry: r7 r4 ]	[exit: r7 r4 ]
virtualinvoke r4.<java.lang.Thread: void interrupt()>()	[entry: r7 r4 ]	[exit: r7 ]
virtualinvoke r7.<java.lang.Thread: void interrupt()>()	[entry: r7 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r5 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r5 r0 r1 ]
i5 = 0..................................	[entry: r5 r0 r1 ]	[exit: r5 r0 i5 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r5 r0 i5 r1 ]	[exit: r5 r0 r1 i5 $i0 ]
if i5 >= $i0 goto r5.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 1	[entry: r5 r0 r1 i5 $i0 ]	[exit: r5 r0 i5 r1 ]
$r2 = r5.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r0 i5 r1 r5 ]	[exit: r5 r0 $r2 i5 r1 ]
$c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5)	[entry: r5 r0 $r2 i5 r1 ]	[exit: r1 i5 r5 r0 $r2 $c1 ]
$i2 = $c1 - 97..........................	[entry: r1 i5 r5 r0 $r2 $c1 ]	[exit: r1 i5 r5 r0 $r2 $i2 ]
r6 = $r2[$i2]...........................	[entry: r1 i5 r5 r0 $r2 $i2 ]	[exit: r1 i5 r5 r0 r6 ]
if r6 != null goto r5 = r6..............	[entry: r1 i5 r5 r0 r6 ]	[exit: r0 r1 i5 r6 r5 ]
$r3 = new DataStructures.Trees.TrieImp$TrieNode	[entry: i5 r1 r5 r0 ]	[exit: i5 r1 r5 r0 $r3 ]
specialinvoke $r3.<DataStructures.Trees.TrieImp$TrieNode: void <init>(DataStructures.Trees.TrieImp)>(r0)	[entry: i5 r1 r5 r0 $r3 ]	[exit: r0 i5 r1 r5 $r3 ]
r6 = $r3................................	[entry: r0 i5 r1 r5 $r3 ]	[exit: r0 r6 i5 r1 r5 ]
$r4 = r5.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r0 r6 i5 r1 r5 ]	[exit: r0 $r4 r6 i5 r1 ]
$c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5)	[entry: r0 $r4 r6 i5 r1 ]	[exit: r0 r1 i5 $r4 r6 $c3 ]
$i4 = $c3 - 97..........................	[entry: r0 r1 i5 $r4 r6 $c3 ]	[exit: r0 r1 i5 $r4 $i4 r6 ]
$r4[$i4] = r6...........................	[entry: r0 r1 i5 $r4 $i4 r6 ]	[exit: r0 r1 i5 r6 ]
r5 = r6.................................	[entry: r0 r1 i5 r6 ]	[exit: r5 r0 r1 i5 ]
i5 = i5 + 1.............................	[entry: r5 r0 r1 i5 ]	[exit: r5 r0 i5 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r5 r0 i5 r1 ]	[exit: r5 r0 i5 r1 ]
r5.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 1	[entry: r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: search, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r4 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r4 r1 ]
i3 = 0..................................	[entry: r4 r1 ]	[exit: r4 i3 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r4 i3 r1 ]	[exit: r4 r1 i3 $i0 ]
if i3 >= $i0 goto $z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 r1 i3 $i0 ]	[exit: r4 i3 r1 ]
c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)	[entry: r4 i3 r1 ]	[exit: r1 i3 c1 r4 ]
$r2 = r4.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r1 i3 c1 r4 ]	[exit: r1 i3 $r2 c1 ]
$i2 = c1 - 97...........................	[entry: r1 i3 $r2 c1 ]	[exit: r1 i3 $r2 $i2 ]
r3 = $r2[$i2]...........................	[entry: r1 i3 $r2 $i2 ]	[exit: r1 i3 r3 ]
if r3 != null goto r4 = r3..............	[entry: r1 i3 r3 ]	[exit: r1 i3 r3 ]
return 0................................	[entry: ]	[exit: ]
r4 = r3.................................	[entry: r1 i3 r3 ]	[exit: r4 r1 i3 ]
i3 = i3 + 1.............................	[entry: r4 r1 i3 ]	[exit: r4 i3 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r4 i3 r1 ]	[exit: r4 i3 r1 ]
$z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: delete, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r4 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r4 r1 ]
i3 = 0..................................	[entry: r4 r1 ]	[exit: r4 i3 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r4 i3 r1 ]	[exit: r4 r1 i3 $i0 ]
if i3 >= $i0 goto $z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 r1 i3 $i0 ]	[exit: r4 i3 r1 ]
c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)	[entry: r4 i3 r1 ]	[exit: r1 i3 c1 r4 ]
$r2 = r4.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r1 i3 c1 r4 ]	[exit: r1 i3 $r2 c1 ]
$i2 = c1 - 97...........................	[entry: r1 i3 $r2 c1 ]	[exit: r1 i3 $r2 $i2 ]
r3 = $r2[$i2]...........................	[entry: r1 i3 $r2 $i2 ]	[exit: r1 i3 r3 ]
if r3 != null goto r4 = r3..............	[entry: r1 i3 r3 ]	[exit: r1 i3 r3 ]
return 0................................	[entry: ]	[exit: ]
r4 = r3.................................	[entry: r1 i3 r3 ]	[exit: r4 r1 i3 ]
i3 = i3 + 1.............................	[entry: r4 r1 i3 ]	[exit: r4 i3 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r4 i3 r1 ]	[exit: r4 i3 r1 ]
$z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 ]	[exit: r4 $z0 ]
if $z0 != 1 goto return 0...............	[entry: r4 $z0 ]	[exit: r4 ]
r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 0	[entry: r4 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: sop, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0)	[entry: r0 $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: isValid, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^[a-z]+$")	[entry: r0 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.TrieImp..	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.TrieImp: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.util.Scanner.............	[entry: r1 ]	[exit: r1 $r2 ]
$r3 = <java.lang.System: java.io.InputStream in>	[entry: r1 $r2 ]	[exit: r1 $r3 $r2 ]
specialinvoke $r2.<java.util.Scanner: void <init>(java.io.InputStream)>($r3)	[entry: r1 $r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("string should contain only a-z character for all operation")	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")	[entry: r1 r4 ]	[exit: r1 r4 ]
i0 = virtualinvoke r4.<java.util.Scanner: int nextInt()>()	[entry: r1 r4 ]	[exit: r1 r4 i0 ]
tableswitch(i0) {     case 1: goto r11 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 2: goto r12 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 3: goto r13 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 4: goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Quit successfully");     default: goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Input int from 1-4"); }	[entry: r1 r4 i0 ]	[exit: r1 r4 ]
r11 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r11 ]
$z2 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r11)	[entry: r4 r1 r11 ]	[exit: r4 r11 r1 $z2 ]
if $z2 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r11 r1 $z2 ]	[exit: r4 r11 r1 ]
virtualinvoke r1.<DataStructures.Trees.TrieImp: void insert(java.lang.String)>(r11)	[entry: r4 r11 r1 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
r12 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r12 ]
z3 = 0..................................	[entry: r4 r1 r12 ]	[exit: r4 r1 z3 r12 ]
$z1 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r12)	[entry: r4 r1 z3 r12 ]	[exit: r4 r12 r1 z3 $z1 ]
if $z1 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r12 r1 z3 $z1 ]	[exit: r4 r12 r1 z3 ]
z3 = virtualinvoke r1.<DataStructures.Trees.TrieImp: boolean search(java.lang.String)>(r12)	[entry: r4 r12 r1 ]	[exit: r1 r4 z3 ]
goto [?= (branch)]......................	[entry: r1 r4 z3 ]	[exit: r1 r4 z3 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 z3 ]	[exit: r1 r4 z3 ]
if z3 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 z3 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
r13 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r13 ]
z4 = 0..................................	[entry: r4 r1 r13 ]	[exit: r4 r1 z4 r13 ]
$z0 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r13)	[entry: r4 r1 z4 r13 ]	[exit: r4 r13 r1 z4 $z0 ]
if $z0 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r13 r1 z4 $z0 ]	[exit: r4 r13 r1 z4 ]
z4 = virtualinvoke r1.<DataStructures.Trees.TrieImp: boolean delete(java.lang.String)>(r13)	[entry: r4 r13 r1 ]	[exit: r1 r4 z4 ]
goto [?= (branch)]......................	[entry: r1 r4 z4 ]	[exit: r1 r4 z4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 z4 ]	[exit: r1 r4 z4 ]
if z4 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 z4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word got deleted successfully")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Quit successfully")	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <java.lang.System: void exit(int)>(1)	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Input int from 1-4")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")]	[entry: r1 r4 ]	[exit: r1 r4 ]
$r5 := @caughtexception.................	[entry: r1 r4 ]	[exit: r1 r4 $r5 ]
r14 = $r5...............................	[entry: r1 r4 $r5 ]	[exit: r1 r4 ]
r15 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r1 r4 r15 ]
$r6 = new java.lang.StringBuilder.......	[entry: r1 r4 r15 ]	[exit: r1 r4 r15 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r1 r4 r15 $r6 ]	[exit: r1 r4 r15 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This is bad input: ")	[entry: r1 r4 r15 $r6 ]	[exit: r1 r4 r15 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15)	[entry: r1 r4 r15 $r7 ]	[exit: r1 r4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r4 $r8 ]	[exit: r1 r4 $r9 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>($r9)	[entry: r1 r4 $r9 ]	[exit: r1 r4 ]
goto [?= staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")]	[entry: r1 r4 ]	[exit: r1 r4 ]
********************
Class Name: DataStructures.Trees.PrintTopViewofTree, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r16 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.TreeNode.	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.TreeNode: void <init>(int)>(1)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new DataStructures.Trees.TreeNode.	[entry: r1 ]	[exit: r1 $r2 ]
specialinvoke $r2.<DataStructures.Trees.TreeNode: void <init>(int)>(2)	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r1.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode left> = $r2	[entry: r1 $r2 ]	[exit: r1 ]
$r3 = new DataStructures.Trees.TreeNode.	[entry: r1 ]	[exit: r1 $r3 ]
specialinvoke $r3.<DataStructures.Trees.TreeNode: void <init>(int)>(3)	[entry: r1 $r3 ]	[exit: r1 $r3 ]
r1.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right> = $r3	[entry: r1 $r3 ]	[exit: r1 ]
$r5 = r1.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode left>	[entry: r1 ]	[exit: r1 $r5 ]
$r4 = new DataStructures.Trees.TreeNode.	[entry: r1 $r5 ]	[exit: r1 $r5 $r4 ]
specialinvoke $r4.<DataStructures.Trees.TreeNode: void <init>(int)>(4)	[entry: r1 $r5 $r4 ]	[exit: r1 $r5 $r4 ]
$r5.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right> = $r4	[entry: r1 $r5 $r4 ]	[exit: r1 ]
$r6 = r1.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode left>	[entry: r1 ]	[exit: r1 $r6 ]
$r8 = $r6.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right>	[entry: r1 $r6 ]	[exit: r1 $r8 ]
$r7 = new DataStructures.Trees.TreeNode.	[entry: r1 $r8 ]	[exit: r1 $r8 $r7 ]
specialinvoke $r7.<DataStructures.Trees.TreeNode: void <init>(int)>(5)	[entry: r1 $r8 $r7 ]	[exit: r1 $r8 $r7 ]
$r8.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right> = $r7	[entry: r1 $r8 $r7 ]	[exit: r1 ]
$r9 = r1.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode left>	[entry: r1 ]	[exit: r1 $r9 ]
$r10 = $r9.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right>	[entry: r1 $r9 ]	[exit: r1 $r10 ]
$r12 = $r10.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right>	[entry: r1 $r10 ]	[exit: r1 $r12 ]
$r11 = new DataStructures.Trees.TreeNode	[entry: r1 $r12 ]	[exit: r1 $r12 $r11 ]
specialinvoke $r11.<DataStructures.Trees.TreeNode: void <init>(int)>(6)	[entry: r1 $r12 $r11 ]	[exit: r1 $r12 $r11 ]
$r12.<DataStructures.Trees.TreeNode: DataStructures.Trees.TreeNode right> = $r11	[entry: r1 $r12 $r11 ]	[exit: r1 ]
$r13 = new DataStructures.Trees.Tree....	[entry: r1 ]	[exit: r1 $r13 ]
specialinvoke $r13.<DataStructures.Trees.Tree: void <init>(DataStructures.Trees.TreeNode)>(r1)	[entry: r1 $r13 ]	[exit: $r13 ]
r14 = $r13..............................	[entry: $r13 ]	[exit: r14 ]
$r15 = <java.lang.System: java.io.PrintStream out>	[entry: r14 ]	[exit: r14 $r15 ]
virtualinvoke $r15.<java.io.PrintStream: void println(java.lang.String)>("Following are nodes in top view of Binary Tree")	[entry: r14 $r15 ]	[exit: r14 ]
virtualinvoke r14.<DataStructures.Trees.Tree: void printTopView()>()	[entry: r14 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TreeTraversal, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.Node.....	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.Node: void <init>(int)>(5)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(3)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(7)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(4)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(6)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void insert(int)>(8)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Pre order traversal:")	[entry: r1 $r2 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void printPreOrder()>()	[entry: r1 ]	[exit: r1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println()>()	[entry: r1 $r3 ]	[exit: r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("In order traversal:")	[entry: r1 $r4 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void printInOrder()>()	[entry: r1 ]	[exit: r1 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println()>()	[entry: r1 $r5 ]	[exit: r1 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>("Post order traversal:")	[entry: r1 $r6 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void printPostOrder()>()	[entry: r1 ]	[exit: r1 ]
$r7 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r7 ]
virtualinvoke $r7.<java.io.PrintStream: void println()>()	[entry: r1 $r7 ]	[exit: r1 ]
$r8 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r8 ]
virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>("Level order traversal:")	[entry: r1 $r8 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.Node: void printLevelOrder()>()	[entry: r1 ]	[exit: ]
$r9 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r9 ]
virtualinvoke $r9.<java.io.PrintStream: void println()>()	[entry: $r9 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r5 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r5 r0 r1 ]
i5 = 0..................................	[entry: r5 r0 r1 ]	[exit: r5 r0 i5 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r5 r0 i5 r1 ]	[exit: r5 r0 r1 i5 $i0 ]
if i5 >= $i0 goto r5.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 1	[entry: r5 r0 r1 i5 $i0 ]	[exit: r5 r0 i5 r1 ]
$r2 = r5.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r0 i5 r1 r5 ]	[exit: r5 r0 $r2 i5 r1 ]
$c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5)	[entry: r5 r0 $r2 i5 r1 ]	[exit: r1 i5 r5 r0 $r2 $c1 ]
$i2 = $c1 - 97..........................	[entry: r1 i5 r5 r0 $r2 $c1 ]	[exit: r1 i5 r5 r0 $r2 $i2 ]
r6 = $r2[$i2]...........................	[entry: r1 i5 r5 r0 $r2 $i2 ]	[exit: r1 i5 r5 r0 r6 ]
if r6 != null goto r5 = r6..............	[entry: r1 i5 r5 r0 r6 ]	[exit: r0 r1 i5 r6 r5 ]
$r3 = new DataStructures.Trees.TrieImp$TrieNode	[entry: i5 r1 r5 r0 ]	[exit: i5 r1 r5 r0 $r3 ]
specialinvoke $r3.<DataStructures.Trees.TrieImp$TrieNode: void <init>(DataStructures.Trees.TrieImp)>(r0)	[entry: i5 r1 r5 r0 $r3 ]	[exit: r0 i5 r1 r5 $r3 ]
r6 = $r3................................	[entry: r0 i5 r1 r5 $r3 ]	[exit: r0 r6 i5 r1 r5 ]
$r4 = r5.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r0 r6 i5 r1 r5 ]	[exit: r0 $r4 r6 i5 r1 ]
$c3 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i5)	[entry: r0 $r4 r6 i5 r1 ]	[exit: r0 r1 i5 $r4 r6 $c3 ]
$i4 = $c3 - 97..........................	[entry: r0 r1 i5 $r4 r6 $c3 ]	[exit: r0 r1 i5 $r4 $i4 r6 ]
$r4[$i4] = r6...........................	[entry: r0 r1 i5 $r4 $i4 r6 ]	[exit: r0 r1 i5 r6 ]
r5 = r6.................................	[entry: r0 r1 i5 r6 ]	[exit: r5 r0 r1 i5 ]
i5 = i5 + 1.............................	[entry: r5 r0 r1 i5 ]	[exit: r5 r0 i5 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r5 r0 i5 r1 ]	[exit: r5 r0 i5 r1 ]
r5.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 1	[entry: r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: search, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r4 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r4 r1 ]
i3 = 0..................................	[entry: r4 r1 ]	[exit: r4 i3 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r4 i3 r1 ]	[exit: r4 r1 i3 $i0 ]
if i3 >= $i0 goto $z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 r1 i3 $i0 ]	[exit: r4 i3 r1 ]
c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)	[entry: r4 i3 r1 ]	[exit: r1 i3 c1 r4 ]
$r2 = r4.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r1 i3 c1 r4 ]	[exit: r1 i3 $r2 c1 ]
$i2 = c1 - 97...........................	[entry: r1 i3 $r2 c1 ]	[exit: r1 i3 $r2 $i2 ]
r3 = $r2[$i2]...........................	[entry: r1 i3 $r2 $i2 ]	[exit: r1 i3 r3 ]
if r3 != null goto r4 = r3..............	[entry: r1 i3 r3 ]	[exit: r1 i3 r3 ]
return 0................................	[entry: ]	[exit: ]
r4 = r3.................................	[entry: r1 i3 r3 ]	[exit: r4 r1 i3 ]
i3 = i3 + 1.............................	[entry: r4 r1 i3 ]	[exit: r4 i3 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r4 i3 r1 ]	[exit: r4 i3 r1 ]
$z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: delete, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.TrieImp	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.String.....	[entry: r0 ]	[exit: r1 r0 ]
r4 = r0.<DataStructures.Trees.TrieImp: DataStructures.Trees.TrieImp$TrieNode root>	[entry: r1 r0 ]	[exit: r4 r1 ]
i3 = 0..................................	[entry: r4 r1 ]	[exit: r4 i3 r1 ]
$i0 = virtualinvoke r1.<java.lang.String: int length()>()	[entry: r4 i3 r1 ]	[exit: r4 r1 i3 $i0 ]
if i3 >= $i0 goto $z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 r1 i3 $i0 ]	[exit: r4 i3 r1 ]
c1 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i3)	[entry: r4 i3 r1 ]	[exit: r1 i3 c1 r4 ]
$r2 = r4.<DataStructures.Trees.TrieImp$TrieNode: DataStructures.Trees.TrieImp$TrieNode[] child>	[entry: r1 i3 c1 r4 ]	[exit: r1 i3 $r2 c1 ]
$i2 = c1 - 97...........................	[entry: r1 i3 $r2 c1 ]	[exit: r1 i3 $r2 $i2 ]
r3 = $r2[$i2]...........................	[entry: r1 i3 $r2 $i2 ]	[exit: r1 i3 r3 ]
if r3 != null goto r4 = r3..............	[entry: r1 i3 r3 ]	[exit: r1 i3 r3 ]
return 0................................	[entry: ]	[exit: ]
r4 = r3.................................	[entry: r1 i3 r3 ]	[exit: r4 r1 i3 ]
i3 = i3 + 1.............................	[entry: r4 r1 i3 ]	[exit: r4 i3 r1 ]
goto [?= $i0 = virtualinvoke r1.<java.lang.String: int length()>()]	[entry: r4 i3 r1 ]	[exit: r4 i3 r1 ]
$z0 = r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end>	[entry: r4 ]	[exit: r4 $z0 ]
if $z0 != 1 goto return 0...............	[entry: r4 $z0 ]	[exit: r4 ]
r4.<DataStructures.Trees.TrieImp$TrieNode: boolean end> = 0	[entry: r4 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
return 0................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: sop, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: r0 ]	[exit: r0 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>(r0)	[entry: r0 $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: isValid, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<java.lang.String: boolean matches(java.lang.String)>("^[a-z]+$")	[entry: r0 ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Trees.TrieImp, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.TrieImp..	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.TrieImp: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = new java.util.Scanner.............	[entry: r1 ]	[exit: r1 $r2 ]
$r3 = <java.lang.System: java.io.InputStream in>	[entry: r1 $r2 ]	[exit: r1 $r3 $r2 ]
specialinvoke $r2.<java.util.Scanner: void <init>(java.io.InputStream)>($r3)	[entry: r1 $r3 $r2 ]	[exit: r1 $r2 ]
r4 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("string should contain only a-z character for all operation")	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")	[entry: r1 r4 ]	[exit: r1 r4 ]
i0 = virtualinvoke r4.<java.util.Scanner: int nextInt()>()	[entry: r1 r4 ]	[exit: r1 r4 i0 ]
tableswitch(i0) {     case 1: goto r11 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 2: goto r12 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 3: goto r13 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>();     case 4: goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Quit successfully");     default: goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Input int from 1-4"); }	[entry: r1 r4 i0 ]	[exit: r1 r4 ]
r11 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r11 ]
$z2 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r11)	[entry: r4 r1 r11 ]	[exit: r4 r11 r1 $z2 ]
if $z2 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r11 r1 $z2 ]	[exit: r4 r11 r1 ]
virtualinvoke r1.<DataStructures.Trees.TrieImp: void insert(java.lang.String)>(r11)	[entry: r4 r11 r1 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
r12 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r12 ]
z3 = 0..................................	[entry: r4 r1 r12 ]	[exit: r4 r1 z3 r12 ]
$z1 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r12)	[entry: r4 r1 z3 r12 ]	[exit: r4 r12 r1 z3 $z1 ]
if $z1 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r12 r1 z3 $z1 ]	[exit: r4 r12 r1 z3 ]
z3 = virtualinvoke r1.<DataStructures.Trees.TrieImp: boolean search(java.lang.String)>(r12)	[entry: r4 r12 r1 ]	[exit: r1 r4 z3 ]
goto [?= (branch)]......................	[entry: r1 r4 z3 ]	[exit: r1 r4 z3 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 z3 ]	[exit: r1 r4 z3 ]
if z3 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 z3 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
r13 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r4 r1 r13 ]
z4 = 0..................................	[entry: r4 r1 r13 ]	[exit: r4 r1 z4 r13 ]
$z0 = staticinvoke <DataStructures.Trees.TrieImp: boolean isValid(java.lang.String)>(r13)	[entry: r4 r1 z4 r13 ]	[exit: r4 r13 r1 z4 $z0 ]
if $z0 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r4 r13 r1 z4 $z0 ]	[exit: r4 r13 r1 z4 ]
z4 = virtualinvoke r1.<DataStructures.Trees.TrieImp: boolean delete(java.lang.String)>(r13)	[entry: r4 r13 r1 ]	[exit: r1 r4 z4 ]
goto [?= (branch)]......................	[entry: r1 r4 z4 ]	[exit: r1 r4 z4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Invalid string: allowed only a-z")	[entry: r1 r4 z4 ]	[exit: r1 r4 z4 ]
if z4 == 0 goto staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 z4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word got deleted successfully")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("word not found")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Quit successfully")	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <java.lang.System: void exit(int)>(1)	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= (branch)]......................	[entry: r1 r4 ]	[exit: r1 r4 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("Input int from 1-4")	[entry: r1 r4 ]	[exit: r1 r4 ]
goto [?= staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")]	[entry: r1 r4 ]	[exit: r1 r4 ]
$r5 := @caughtexception.................	[entry: r1 r4 ]	[exit: r1 r4 $r5 ]
r14 = $r5...............................	[entry: r1 r4 $r5 ]	[exit: r1 r4 ]
r15 = virtualinvoke r4.<java.util.Scanner: java.lang.String next()>()	[entry: r1 r4 ]	[exit: r1 r4 r15 ]
$r6 = new java.lang.StringBuilder.......	[entry: r1 r4 r15 ]	[exit: r1 r4 r15 $r6 ]
specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()	[entry: r1 r4 r15 $r6 ]	[exit: r1 r4 r15 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("This is bad input: ")	[entry: r1 r4 r15 $r6 ]	[exit: r1 r4 r15 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r15)	[entry: r1 r4 r15 $r7 ]	[exit: r1 r4 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r4 $r8 ]	[exit: r1 r4 $r9 ]
staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>($r9)	[entry: r1 r4 $r9 ]	[exit: r1 r4 ]
goto [?= staticinvoke <DataStructures.Trees.TrieImp: void sop(java.lang.String)>("1. Insert\n2. Search\n3. Delete\n4. Quit")]	[entry: r1 r4 ]	[exit: r1 r4 ]
********************
Class Name: DataStructures.Trees.AVLTree, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.AVLTree	[entry: ]	[exit: r0 ]
i1 := @parameter0: int..................	[entry: r0 ]	[exit: i1 r0 ]
$r1 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 ]	[exit: i1 r0 $r1 ]
if $r1 != null goto r8 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 $r1 ]	[exit: i1 r0 ]
$r7 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 ]	[exit: r0 i1 $r7 ]
specialinvoke $r7.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, null)	[entry: r0 i1 $r7 ]	[exit: r0 $r7 ]
r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root> = $r7	[entry: r0 $r7 ]	[exit: ]
goto [?= return 1]......................	[entry: ]	[exit: ]
r8 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 ]	[exit: r0 i1 r8 ]
$i0 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: r0 i1 r8 ]	[exit: r0 r8 $i0 i1 ]
if $i0 != i1 goto r2 = r8...............	[entry: r0 r8 $i0 i1 ]	[exit: r0 i1 r8 ]
return 0................................	[entry: ]	[exit: ]
r2 = r8.................................	[entry: r0 i1 r8 ]	[exit: r0 r2 i1 r8 ]
$i2 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: r0 r2 i1 r8 ]	[exit: r0 r2 r8 $i2 i1 ]
if $i2 <= i1 goto $z1 = 0...............	[entry: r0 r2 r8 $i2 i1 ]	[exit: i1 r0 r2 r8 ]
$z1 = 1.................................	[entry: i1 r0 r2 r8 ]	[exit: i1 r0 r2 r8 $z1 ]
goto [?= z0 = $z1]......................	[entry: i1 r0 r2 r8 $z1 ]	[exit: i1 r0 r2 r8 $z1 ]
$z1 = 0.................................	[entry: i1 r0 r2 r8 ]	[exit: i1 r0 r2 r8 $z1 ]
z0 = $z1................................	[entry: i1 r0 r2 r8 $z1 ]	[exit: i1 r0 r2 r8 z0 ]
if z0 == 0 goto $r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$200(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 r8 z0 ]	[exit: i1 r0 r2 z0 r8 ]
$r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$100(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 z0 r8 ]	[exit: i1 r0 r2 z0 $r9 ]
goto [?= r8 = $r9]......................	[entry: i1 r0 r2 z0 $r9 ]	[exit: i1 r0 r2 z0 $r9 ]
$r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$200(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 z0 r8 ]	[exit: i1 r0 r2 z0 $r9 ]
r8 = $r9................................	[entry: i1 r0 r2 z0 $r9 ]	[exit: i1 r0 r2 z0 r8 ]
if r8 != null goto (branch).............	[entry: i1 r0 r2 z0 r8 ]	[exit: r0 i1 r8 r2 z0 ]
if z0 == 0 goto $r3 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 z0 ]	[exit: r0 i1 r2 ]
$r5 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 ]	[exit: r0 i1 r2 $r5 ]
specialinvoke $r5.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, r2)	[entry: r0 i1 r2 $r5 ]	[exit: r0 r2 $r5 ]
staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$102(DataStructures.Trees.AVLTree$Node,DataStructures.Trees.AVLTree$Node)>(r2, $r5)	[entry: r0 r2 $r5 ]	[exit: r2 r0 ]
goto [?= specialinvoke r0.<DataStructures.Trees.AVLTree: void rebalance(DataStructures.Trees.AVLTree$Node)>(r2)]	[entry: r2 r0 ]	[exit: r2 r0 ]
$r3 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 ]	[exit: r0 i1 r2 $r3 ]
specialinvoke $r3.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, r2)	[entry: r0 i1 r2 $r3 ]	[exit: r0 r2 $r3 ]
staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$202(DataStructures.Trees.AVLTree$Node,DataStructures.Trees.AVLTree$Node)>(r2, $r3)	[entry: r0 r2 $r3 ]	[exit: r2 r0 ]
specialinvoke r0.<DataStructures.Trees.AVLTree: void rebalance(DataStructures.Trees.AVLTree$Node)>(r2)	[entry: r2 r0 ]	[exit: ]
goto [?= return 1]......................	[entry: ]	[exit: ]
goto [?= $i0 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)]	[entry: r0 i1 r8 ]	[exit: r0 i1 r8 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.AVLTree, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.AVLTree..	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.AVLTree: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Inserting values 1 to 10")	[entry: r1 $r2 ]	[exit: r1 ]
i0 = 1..................................	[entry: r1 ]	[exit: r1 i0 ]
if i0 >= 10 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 i0 ]	[exit: r1 i0 ]
virtualinvoke r1.<DataStructures.Trees.AVLTree: boolean insert(int)>(i0)	[entry: i0 r1 ]	[exit: r1 i0 ]
i0 = i0 + 1.............................	[entry: r1 i0 ]	[exit: r1 i0 ]
goto [?= (branch)]......................	[entry: r1 i0 ]	[exit: r1 i0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Printing balance: ")	[entry: r1 $r3 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.AVLTree: void printBalance()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.AVLTree, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Trees.AVLTree	[entry: ]	[exit: r0 ]
i1 := @parameter0: int..................	[entry: r0 ]	[exit: i1 r0 ]
$r1 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 ]	[exit: i1 r0 $r1 ]
if $r1 != null goto r8 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 $r1 ]	[exit: i1 r0 ]
$r7 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 ]	[exit: r0 i1 $r7 ]
specialinvoke $r7.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, null)	[entry: r0 i1 $r7 ]	[exit: r0 $r7 ]
r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root> = $r7	[entry: r0 $r7 ]	[exit: ]
goto [?= return 1]......................	[entry: ]	[exit: ]
r8 = r0.<DataStructures.Trees.AVLTree: DataStructures.Trees.AVLTree$Node root>	[entry: i1 r0 ]	[exit: r0 i1 r8 ]
$i0 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: r0 i1 r8 ]	[exit: r0 r8 $i0 i1 ]
if $i0 != i1 goto r2 = r8...............	[entry: r0 r8 $i0 i1 ]	[exit: r0 i1 r8 ]
return 0................................	[entry: ]	[exit: ]
r2 = r8.................................	[entry: r0 i1 r8 ]	[exit: r0 r2 i1 r8 ]
$i2 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: r0 r2 i1 r8 ]	[exit: r0 r2 r8 $i2 i1 ]
if $i2 <= i1 goto $z1 = 0...............	[entry: r0 r2 r8 $i2 i1 ]	[exit: i1 r0 r2 r8 ]
$z1 = 1.................................	[entry: i1 r0 r2 r8 ]	[exit: i1 r0 r2 r8 $z1 ]
goto [?= z0 = $z1]......................	[entry: i1 r0 r2 r8 $z1 ]	[exit: i1 r0 r2 r8 $z1 ]
$z1 = 0.................................	[entry: i1 r0 r2 r8 ]	[exit: i1 r0 r2 r8 $z1 ]
z0 = $z1................................	[entry: i1 r0 r2 r8 $z1 ]	[exit: i1 r0 r2 r8 z0 ]
if z0 == 0 goto $r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$200(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 r8 z0 ]	[exit: i1 r0 r2 z0 r8 ]
$r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$100(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 z0 r8 ]	[exit: i1 r0 r2 z0 $r9 ]
goto [?= r8 = $r9]......................	[entry: i1 r0 r2 z0 $r9 ]	[exit: i1 r0 r2 z0 $r9 ]
$r9 = staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$200(DataStructures.Trees.AVLTree$Node)>(r8)	[entry: i1 r0 r2 z0 r8 ]	[exit: i1 r0 r2 z0 $r9 ]
r8 = $r9................................	[entry: i1 r0 r2 z0 $r9 ]	[exit: i1 r0 r2 z0 r8 ]
if r8 != null goto (branch).............	[entry: i1 r0 r2 z0 r8 ]	[exit: r0 i1 r8 r2 z0 ]
if z0 == 0 goto $r3 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 z0 ]	[exit: r0 i1 r2 ]
$r5 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 ]	[exit: r0 i1 r2 $r5 ]
specialinvoke $r5.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, r2)	[entry: r0 i1 r2 $r5 ]	[exit: r0 r2 $r5 ]
staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$102(DataStructures.Trees.AVLTree$Node,DataStructures.Trees.AVLTree$Node)>(r2, $r5)	[entry: r0 r2 $r5 ]	[exit: r2 r0 ]
goto [?= specialinvoke r0.<DataStructures.Trees.AVLTree: void rebalance(DataStructures.Trees.AVLTree$Node)>(r2)]	[entry: r2 r0 ]	[exit: r2 r0 ]
$r3 = new DataStructures.Trees.AVLTree$Node	[entry: r0 i1 r2 ]	[exit: r0 i1 r2 $r3 ]
specialinvoke $r3.<DataStructures.Trees.AVLTree$Node: void <init>(DataStructures.Trees.AVLTree,int,DataStructures.Trees.AVLTree$Node)>(r0, i1, r2)	[entry: r0 i1 r2 $r3 ]	[exit: r0 r2 $r3 ]
staticinvoke <DataStructures.Trees.AVLTree$Node: DataStructures.Trees.AVLTree$Node access$202(DataStructures.Trees.AVLTree$Node,DataStructures.Trees.AVLTree$Node)>(r2, $r3)	[entry: r0 r2 $r3 ]	[exit: r2 r0 ]
specialinvoke r0.<DataStructures.Trees.AVLTree: void rebalance(DataStructures.Trees.AVLTree$Node)>(r2)	[entry: r2 r0 ]	[exit: ]
goto [?= return 1]......................	[entry: ]	[exit: ]
goto [?= $i0 = staticinvoke <DataStructures.Trees.AVLTree$Node: int access$000(DataStructures.Trees.AVLTree$Node)>(r8)]	[entry: r0 i1 r8 ]	[exit: r0 i1 r8 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Trees.AVLTree, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Trees.AVLTree..	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Trees.AVLTree: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.String)>("Inserting values 1 to 10")	[entry: r1 $r2 ]	[exit: r1 ]
i0 = 1..................................	[entry: r1 ]	[exit: r1 i0 ]
if i0 >= 10 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 i0 ]	[exit: r1 i0 ]
virtualinvoke r1.<DataStructures.Trees.AVLTree: boolean insert(int)>(i0)	[entry: i0 r1 ]	[exit: r1 i0 ]
i0 = i0 + 1.............................	[entry: r1 i0 ]	[exit: r1 i0 ]
goto [?= (branch)]......................	[entry: r1 i0 ]	[exit: r1 i0 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Printing balance: ")	[entry: r1 $r3 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Trees.AVLTree: void printBalance()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: isEmpty, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: r0 ]	[exit: $i0 ]
if $i0 != 0 goto $z0 = 0................	[entry: $i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: enqueue, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r1 ]
i0 := @parameter0: int..................	[entry: r1 ]	[exit: r1 i0 ]
$r0 = new DataStructures.Queues.LinkedQueue$Node	[entry: r1 i0 ]	[exit: r1 i0 $r0 ]
specialinvoke $r0.<DataStructures.Queues.LinkedQueue$Node: void <init>(DataStructures.Queues.LinkedQueue,int)>(r1, i0)	[entry: r1 i0 $r0 ]	[exit: r1 $r0 ]
r2 = $r0................................	[entry: r1 $r0 ]	[exit: r2 r1 ]
$r3 = r1.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r2 r1 ]	[exit: r1 $r3 r2 ]
$r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next> = r2	[entry: r1 $r3 r2 ]	[exit: r1 r2 ]
r1.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear> = r2	[entry: r1 r2 ]	[exit: r1 ]
$i1 = r1.<DataStructures.Queues.LinkedQueue: int size>	[entry: r1 ]	[exit: r1 $i1 ]
$i2 = $i1 + 1...........................	[entry: r1 $i1 ]	[exit: r1 $i2 ]
r1.<DataStructures.Queues.LinkedQueue: int size> = $i2	[entry: r1 $i2 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: dequeue, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 $z0 ]	[exit: r0 ]
$r7 = new java.util.NoSuchElementException	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 ]	[exit: r0 $r1 ]
r8 = $r1.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r0 $r1 ]	[exit: r0 r8 ]
i0 = r8.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: r0 r8 ]	[exit: i0 r0 ]
$r5 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: i0 r0 ]	[exit: i0 $r5 r0 ]
$r2 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: i0 $r5 r0 ]	[exit: i0 r0 $r5 $r2 ]
$r3 = $r2.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: i0 r0 $r5 $r2 ]	[exit: i0 r0 $r5 $r3 ]
$r4 = $r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: i0 r0 $r5 $r3 ]	[exit: i0 r0 $r5 $r4 ]
$r5.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next> = $r4	[entry: i0 r0 $r5 $r4 ]	[exit: i0 r0 ]
$i1 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: i0 r0 ]	[exit: i0 r0 $i1 ]
$i2 = $i1 - 1...........................	[entry: i0 r0 $i1 ]	[exit: i0 r0 $i2 ]
r0.<DataStructures.Queues.LinkedQueue: int size> = $i2	[entry: i0 r0 $i2 ]	[exit: i0 r0 ]
$z1 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: i0 r0 ]	[exit: i0 r0 $z1 ]
if $z1 == 0 goto return i0..............	[entry: i0 r0 $z1 ]	[exit: i0 r0 ]
$r6 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: i0 r0 ]	[exit: i0 r0 $r6 ]
r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front> = $r6	[entry: i0 r0 $r6 ]	[exit: i0 ]
return i0...............................	[entry: i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: peekFront, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 $z0 ]	[exit: r0 ]
$r3 = new java.util.NoSuchElementException	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 ]	[exit: $r1 ]
$r2 = $r1.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: $r1 ]	[exit: $r2 ]
$i0 = $r2.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: $r2 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: peekRear, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r0 $z0 ]	[exit: r0 ]
$r2 = new java.util.NoSuchElementException	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r0 ]	[exit: $r1 ]
$i0 = $r1.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: $r1 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: size, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: r0 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: clear, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 != 0 goto return.................	[entry: r0 $z0 ]	[exit: r0 ]
virtualinvoke r0.<DataStructures.Queues.LinkedQueue: int dequeue()>()	[entry: r0 ]	[exit: r0 ]
goto [?= $z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()]	[entry: r0 ]	[exit: r0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 $z0 ]	[exit: r0 ]
return "[]".............................	[entry: ]	[exit: ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
$r3 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r2 r0 ]	[exit: r2 $r3 ]
r9 = $r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r2 $r3 ]	[exit: r9 r2 ]
virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[")	[entry: r9 r2 ]	[exit: r2 r9 ]
if r9 == null goto $i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 r9 ]	[exit: r2 r9 ]
$i3 = r9.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: r2 r9 ]	[exit: r9 $i3 r2 ]
$r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r9 $i3 r2 ]	[exit: r2 r9 $r7 ]
virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: r2 r9 $r7 ]	[exit: r2 r9 ]
r9 = r9.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r2 r9 ]	[exit: r2 r9 ]
goto [?= (branch)]......................	[entry: r2 r9 ]	[exit: r2 r9 ]
$i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 ]	[exit: r2 $i0 ]
$i1 = $i0 - 2...........................	[entry: r2 $i0 ]	[exit: $i1 r2 ]
$i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: $i1 r2 ]	[exit: $i1 $i2 r2 ]
virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i1, $i2, "]")	[entry: $i1 $i2 r2 ]	[exit: r2 ]
$r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 ]	[exit: $r6 ]
return $r6..............................	[entry: $r6 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Queues.LinkedQueue	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Queues.LinkedQueue: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 $z0 ]	[exit: r1 ]
$z10 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z10 ]
if $z10 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 $z10 ]	[exit: r1 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(3)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: r1 ]
$z4 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto $z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z4 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int size()>()	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 == 3 goto $z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i3 ]	[exit: r1 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto $z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$i2 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int dequeue()>()	[entry: r1 ]	[exit: r1 $i2 ]
if $i2 == 1 goto $z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i2 ]	[exit: r1 ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$i1 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int peekFront()>()	[entry: r1 ]	[exit: r1 $i1 ]
if $i1 == 2 goto $z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i1 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 $z7 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int peekRear()>()	[entry: r1 ]	[exit: r1 $i0 ]
if $i0 == 3 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 $i0 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 ]	[exit: r1 ]
$z8 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z8 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 != 0 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z9 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.Queue, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @this: DataStructures.Queues.Queue	[entry: ]	[exit: r3 ]
$r0 = new java.lang.StringBuilder.......	[entry: r3 ]	[exit: r3 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r0 ]	[exit: r3 $r0 ]
r1 = $r0................................	[entry: r3 $r0 ]	[exit: r3 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[")	[entry: r3 r1 ]	[exit: r1 r3 ]
i6 = r3.<DataStructures.Queues.Queue: int front>	[entry: r1 r3 ]	[exit: r1 i6 r3 ]
$r4 = r3.<DataStructures.Queues.Queue: int[] queueArray>	[entry: r1 i6 r3 ]	[exit: r3 r1 $r4 i6 ]
$i0 = $r4[i6]...........................	[entry: r3 r1 $r4 i6 ]	[exit: i6 r3 $i0 r1 ]
$r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: i6 r3 $i0 r1 ]	[exit: r1 i6 r3 $r5 ]
virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: r1 i6 r3 $r5 ]	[exit: r1 i6 r3 ]
$i1 = r3.<DataStructures.Queues.Queue: int rear>	[entry: r1 i6 r3 ]	[exit: r1 r3 i6 $i1 ]
if i6 != $i1 goto i7 = i6 + 1...........	[entry: r1 r3 i6 $i1 ]	[exit: r1 r3 i6 ]
goto [?= $i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>()]	[entry: r1 ]	[exit: r1 ]
i7 = i6 + 1.............................	[entry: r1 r3 i6 ]	[exit: r1 i7 r3 ]
$i2 = r3.<DataStructures.Queues.Queue: int maxSize>	[entry: r1 i7 r3 ]	[exit: r1 r3 i7 $i2 ]
i6 = i7 % $i2...........................	[entry: r1 r3 i7 $i2 ]	[exit: r1 i6 r3 ]
goto [?= $r4 = r3.<DataStructures.Queues.Queue: int[] queueArray>]	[entry: r1 i6 r3 ]	[exit: r1 i6 r3 ]
$i3 = virtualinvoke r1.<java.lang.StringBuilder: int length()>()	[entry: r1 ]	[exit: r1 $i3 ]
$i4 = $i3 - 2...........................	[entry: r1 $i3 ]	[exit: $i4 r1 ]
$i5 = virtualinvoke r1.<java.lang.StringBuilder: int length()>()	[entry: $i4 r1 ]	[exit: $i4 $i5 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i4, $i5, "]")	[entry: $i4 $i5 r1 ]	[exit: r1 ]
$r8 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 ]	[exit: $r8 ]
return $r8..............................	[entry: $r8 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: isEmpty, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: r0 ]	[exit: $i0 ]
if $i0 != 0 goto $z0 = 0................	[entry: $i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: enqueue, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r1 ]
i0 := @parameter0: int..................	[entry: r1 ]	[exit: r1 i0 ]
$r0 = new DataStructures.Queues.LinkedQueue$Node	[entry: r1 i0 ]	[exit: r1 i0 $r0 ]
specialinvoke $r0.<DataStructures.Queues.LinkedQueue$Node: void <init>(DataStructures.Queues.LinkedQueue,int)>(r1, i0)	[entry: r1 i0 $r0 ]	[exit: r1 $r0 ]
r2 = $r0................................	[entry: r1 $r0 ]	[exit: r2 r1 ]
$r3 = r1.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r2 r1 ]	[exit: r1 $r3 r2 ]
$r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next> = r2	[entry: r1 $r3 r2 ]	[exit: r1 r2 ]
r1.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear> = r2	[entry: r1 r2 ]	[exit: r1 ]
$i1 = r1.<DataStructures.Queues.LinkedQueue: int size>	[entry: r1 ]	[exit: r1 $i1 ]
$i2 = $i1 + 1...........................	[entry: r1 $i1 ]	[exit: r1 $i2 ]
r1.<DataStructures.Queues.LinkedQueue: int size> = $i2	[entry: r1 $i2 ]	[exit: ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: dequeue, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 $z0 ]	[exit: r0 ]
$r7 = new java.util.NoSuchElementException	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 ]	[exit: r0 $r1 ]
r8 = $r1.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r0 $r1 ]	[exit: r0 r8 ]
i0 = r8.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: r0 r8 ]	[exit: i0 r0 ]
$r5 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: i0 r0 ]	[exit: i0 $r5 r0 ]
$r2 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: i0 $r5 r0 ]	[exit: i0 r0 $r5 $r2 ]
$r3 = $r2.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: i0 r0 $r5 $r2 ]	[exit: i0 r0 $r5 $r3 ]
$r4 = $r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: i0 r0 $r5 $r3 ]	[exit: i0 r0 $r5 $r4 ]
$r5.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next> = $r4	[entry: i0 r0 $r5 $r4 ]	[exit: i0 r0 ]
$i1 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: i0 r0 ]	[exit: i0 r0 $i1 ]
$i2 = $i1 - 1...........................	[entry: i0 r0 $i1 ]	[exit: i0 r0 $i2 ]
r0.<DataStructures.Queues.LinkedQueue: int size> = $i2	[entry: i0 r0 $i2 ]	[exit: i0 r0 ]
$z1 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: i0 r0 ]	[exit: i0 r0 $z1 ]
if $z1 == 0 goto return i0..............	[entry: i0 r0 $z1 ]	[exit: i0 r0 ]
$r6 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: i0 r0 ]	[exit: i0 r0 $r6 ]
r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front> = $r6	[entry: i0 r0 $r6 ]	[exit: i0 ]
return i0...............................	[entry: i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: peekFront, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 $z0 ]	[exit: r0 ]
$r3 = new java.util.NoSuchElementException	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r0 ]	[exit: $r1 ]
$r2 = $r1.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: $r1 ]	[exit: $r2 ]
$i0 = $r2.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: $r2 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: peekRear, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r0 $z0 ]	[exit: r0 ]
$r2 = new java.util.NoSuchElementException	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.util.NoSuchElementException: void <init>(java.lang.String)>("queue is empty")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$r1 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node rear>	[entry: r0 ]	[exit: $r1 ]
$i0 = $r1.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: $r1 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: size, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$i0 = r0.<DataStructures.Queues.LinkedQueue: int size>	[entry: r0 ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: clear, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 != 0 goto return.................	[entry: r0 $z0 ]	[exit: r0 ]
virtualinvoke r0.<DataStructures.Queues.LinkedQueue: int dequeue()>()	[entry: r0 ]	[exit: r0 ]
goto [?= $z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()]	[entry: r0 ]	[exit: r0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: toString, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: DataStructures.Queues.LinkedQueue	[entry: ]	[exit: r0 ]
$z0 = virtualinvoke r0.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r0 ]	[exit: r0 $z0 ]
if $z0 == 0 goto $r1 = new java.lang.StringBuilder	[entry: r0 $z0 ]	[exit: r0 ]
return "[]".............................	[entry: ]	[exit: ]
$r1 = new java.lang.StringBuilder.......	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
$r3 = r0.<DataStructures.Queues.LinkedQueue: DataStructures.Queues.LinkedQueue$Node front>	[entry: r2 r0 ]	[exit: r2 $r3 ]
r9 = $r3.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r2 $r3 ]	[exit: r9 r2 ]
virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[")	[entry: r9 r2 ]	[exit: r2 r9 ]
if r9 == null goto $i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 r9 ]	[exit: r2 r9 ]
$i3 = r9.<DataStructures.Queues.LinkedQueue$Node: int data>	[entry: r2 r9 ]	[exit: r9 $i3 r2 ]
$r7 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3)	[entry: r9 $i3 r2 ]	[exit: r2 r9 $r7 ]
virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")	[entry: r2 r9 $r7 ]	[exit: r2 r9 ]
r9 = r9.<DataStructures.Queues.LinkedQueue$Node: DataStructures.Queues.LinkedQueue$Node next>	[entry: r2 r9 ]	[exit: r2 r9 ]
goto [?= (branch)]......................	[entry: r2 r9 ]	[exit: r2 r9 ]
$i0 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: r2 ]	[exit: r2 $i0 ]
$i1 = $i0 - 2...........................	[entry: r2 $i0 ]	[exit: $i1 r2 ]
$i2 = virtualinvoke r2.<java.lang.StringBuilder: int length()>()	[entry: $i1 r2 ]	[exit: $i1 $i2 r2 ]
virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder replace(int,int,java.lang.String)>($i1, $i2, "]")	[entry: $i1 $i2 r2 ]	[exit: r2 ]
$r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 ]	[exit: $r6 ]
return $r6..............................	[entry: $r6 ]	[exit: ]
********************
Class Name: DataStructures.Queues.LinkedQueue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new DataStructures.Queues.LinkedQueue	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Queues.LinkedQueue: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 $z0 ]	[exit: r1 ]
$z10 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z10 ]
if $z10 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 $z10 ]	[exit: r1 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(1)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean enqueue(int)>(3)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: r1 ]
$z4 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto $z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z4 ]	[exit: r1 ]
$i3 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int size()>()	[entry: r1 ]	[exit: r1 $i3 ]
if $i3 == 3 goto $z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i3 ]	[exit: r1 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z5 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto $z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z5 ]	[exit: r1 ]
$i2 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int dequeue()>()	[entry: r1 ]	[exit: r1 $i2 ]
if $i2 == 1 goto $z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i2 ]	[exit: r1 ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z6 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 != 0 goto $z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $z6 ]	[exit: r1 ]
$i1 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int peekFront()>()	[entry: r1 ]	[exit: r1 $i1 ]
if $i1 == 2 goto $z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 $i1 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z7 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 != 0 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 $z7 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: int peekRear()>()	[entry: r1 ]	[exit: r1 $i0 ]
if $i0 == 3 goto virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 $i0 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<DataStructures.Queues.LinkedQueue: void clear()>()	[entry: r1 ]	[exit: r1 ]
$z8 = <DataStructures.Queues.LinkedQueue: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z8 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<DataStructures.Queues.LinkedQueue: boolean isEmpty()>()	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 != 0 goto $r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 $z9 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.Queues, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Queues.Queue...	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Queues.Queue: void <init>(int)>(4)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: boolean insert(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: boolean insert(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: boolean insert(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: boolean insert(int)>(3)	[entry: r1 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r2 r1 ]
$z4 = virtualinvoke r1.<DataStructures.Queues.Queue: boolean isFull()>()	[entry: $r2 r1 ]	[exit: r1 $z4 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(boolean)>($z4)	[entry: r1 $z4 $r2 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: int remove()>()	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.Queue: boolean insert(int)>(7)	[entry: r1 ]	[exit: r1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r3 r1 ]
$i1 = virtualinvoke r1.<DataStructures.Queues.Queue: int peekFront()>()	[entry: $r3 r1 ]	[exit: r1 $i1 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(int)>($i1)	[entry: r1 $i1 $r3 ]	[exit: r1 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r4 r1 ]
$i2 = virtualinvoke r1.<DataStructures.Queues.Queue: int peekRear()>()	[entry: $r4 r1 ]	[exit: r1 $i2 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void println(int)>($i2)	[entry: r1 $i2 $r4 ]	[exit: r1 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r5 r1 ]
$r6 = virtualinvoke r1.<DataStructures.Queues.Queue: java.lang.String toString()>()	[entry: $r5 r1 ]	[exit: $r6 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r6)	[entry: $r6 $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: DataStructures.Queues.PriorityQueues, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new DataStructures.Queues.PriorityQueue	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<DataStructures.Queues.PriorityQueue: void <init>(int)>(4)	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.PriorityQueue: void insert(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.PriorityQueue: void insert(int)>(2)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.PriorityQueue: void insert(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<DataStructures.Queues.PriorityQueue: void insert(int)>(3)	[entry: r1 ]	[exit: r1 ]
i1 = 3..................................	[entry: r1 ]	[exit: r1 i1 ]
if i1 < 0 goto return...................	[entry: r1 i1 ]	[exit: i1 r1 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: i1 r1 ]	[exit: i1 $r3 r1 ]
$r2 = new java.lang.StringBuilder.......	[entry: i1 $r3 r1 ]	[exit: i1 $r3 r1 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: i1 $r3 r1 $r2 ]	[exit: i1 $r3 $r2 r1 ]
$i0 = virtualinvoke r1.<DataStructures.Queues.PriorityQueue: int remove()>()	[entry: i1 $r3 $r2 r1 ]	[exit: r1 i1 $r3 $i0 $r2 ]
$r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: r1 i1 $r3 $i0 $r2 ]	[exit: r1 i1 $r3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r1 i1 $r3 $r4 ]	[exit: r1 i1 $r3 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 i1 $r3 $r5 ]	[exit: r1 i1 $r6 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>($r6)	[entry: r1 i1 $r6 $r3 ]	[exit: r1 i1 ]
i1 = i1 + -1............................	[entry: r1 i1 ]	[exit: r1 i1 ]
goto [?= (branch)]......................	[entry: r1 i1 ]	[exit: r1 i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Searches.InterpolationSearch, Method Name: find, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @this: Searches.InterpolationSearch	[entry: ]	[exit: ]
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i1 := @parameter1: int..................	[entry: r0 ]	[exit: i1 r0 ]
i15 = 0.................................	[entry: i1 r0 ]	[exit: i1 i15 r0 ]
$i0 = lengthof r0.......................	[entry: i1 i15 r0 ]	[exit: i1 r0 i15 $i0 ]
i16 = $i0 - 1...........................	[entry: i1 r0 i15 $i0 ]	[exit: i1 r0 i15 i16 ]
if i15 > i16 goto return -1.............	[entry: i1 r0 i15 i16 ]	[exit: i16 i1 r0 i15 ]
$i2 = r0[i15]...........................	[entry: i16 i1 r0 i15 ]	[exit: i15 r0 i16 i1 $i2 ]
if i1 < $i2 goto return -1..............	[entry: i15 r0 i16 i1 $i2 ]	[exit: i15 i1 r0 i16 ]
$i3 = r0[i16]...........................	[entry: i15 i1 r0 i16 ]	[exit: r0 i16 i15 i1 $i3 ]
if i1 > $i3 goto return -1..............	[entry: r0 i16 i15 i1 $i3 ]	[exit: i1 r0 i16 i15 ]
$i7 = i16 - i15.........................	[entry: i1 r0 i16 i15 ]	[exit: i1 $i7 i15 r0 i16 ]
$i5 = r0[i16]...........................	[entry: i1 $i7 i15 r0 i16 ]	[exit: i16 i1 $i7 $i5 r0 i15 ]
$i4 = r0[i15]...........................	[entry: i16 i1 $i7 $i5 r0 i15 ]	[exit: i16 i1 r0 i15 $i7 $i5 $i4 ]
$i6 = $i5 - $i4.........................	[entry: i16 i1 r0 i15 $i7 $i5 $i4 ]	[exit: i16 i1 r0 i15 $i7 $i6 ]
$i10 = $i7 / $i6........................	[entry: i16 i1 r0 i15 $i7 $i6 ]	[exit: i16 $i10 i1 r0 i15 ]
$i8 = r0[i15]...........................	[entry: i16 $i10 i1 r0 i15 ]	[exit: i16 r0 i15 $i10 i1 $i8 ]
$i9 = i1 - $i8..........................	[entry: i16 r0 i15 $i10 i1 $i8 ]	[exit: i16 i1 r0 i15 $i10 $i9 ]
$i11 = $i10 * $i9.......................	[entry: i16 i1 r0 i15 $i10 $i9 ]	[exit: i16 i1 r0 i15 $i11 ]
i12 = i15 + $i11........................	[entry: i16 i1 r0 i15 $i11 ]	[exit: i16 i15 i1 r0 i12 ]
$i13 = r0[i12]..........................	[entry: i16 i15 i1 r0 i12 ]	[exit: i12 i16 i15 r0 $i13 i1 ]
if $i13 != i1 goto $i14 = r0[i12].......	[entry: i12 i16 i15 r0 $i13 i1 ]	[exit: i12 i16 i15 i1 r0 ]
return i12..............................	[entry: i12 ]	[exit: ]
$i14 = r0[i12]..........................	[entry: i16 i15 i1 r0 i12 ]	[exit: r0 i16 i12 i15 $i14 i1 ]
if $i14 >= i1 goto i16 = i12 - 1........	[entry: r0 i16 i12 i15 $i14 i1 ]	[exit: i1 r0 i16 i12 i15 ]
i15 = i12 + 1...........................	[entry: i1 r0 i16 i12 ]	[exit: i1 r0 i15 i16 ]
goto [?= (branch)]......................	[entry: i1 r0 i15 i16 ]	[exit: i1 r0 i15 i16 ]
i16 = i12 - 1...........................	[entry: i1 r0 i15 i12 ]	[exit: i1 r0 i15 i16 ]
goto [?= (branch)]......................	[entry: i1 r0 i15 i16 ]	[exit: i1 r0 i15 i16 ]
return -1...............................	[entry: ]	[exit: ]
********************
Class Name: Searches.InterpolationSearch, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r22 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
b0 = 100................................	[entry: r1 ]	[exit: b0 r1 ]
i1 = 100000.............................	[entry: b0 r1 ]	[exit: b0 r1 i1 ]
$r2 = staticinvoke <Searches.InterpolationSearch$lambda_main_0__1: java.util.function.IntSupplier bootstrap$(java.util.Random,int)>(r1, i1)	[entry: b0 r1 i1 ]	[exit: r1 b0 $r2 ]
$r3 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream generate(java.util.function.IntSupplier)>($r2)	[entry: r1 b0 $r2 ]	[exit: r1 $r3 b0 ]
$l2 = (long) b0.........................	[entry: r1 $r3 b0 ]	[exit: r1 b0 $l2 $r3 ]
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.stream.IntStream limit(long)>($l2)	[entry: r1 b0 $l2 $r3 ]	[exit: r1 b0 $r4 ]
$r5 = interfaceinvoke $r4.<java.util.stream.IntStream: java.util.stream.IntStream sorted()>()	[entry: r1 b0 $r4 ]	[exit: r1 b0 $r5 ]
r6 = interfaceinvoke $r5.<java.util.stream.IntStream: int[] toArray()>()	[entry: r1 b0 $r5 ]	[exit: r6 r1 b0 ]
$i3 = b0 - 1............................	[entry: r6 r1 b0 ]	[exit: b0 r6 $i3 r1 ]
$i4 = virtualinvoke r1.<java.util.Random: int nextInt(int)>($i3)	[entry: b0 r6 $i3 r1 ]	[exit: b0 r6 $i4 ]
$i5 = r6[$i4]...........................	[entry: b0 r6 $i4 ]	[exit: b0 r6 $i5 ]
r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5)	[entry: b0 r6 $i5 ]	[exit: b0 r6 r7 ]
$r8 = new Searches.InterpolationSearch..	[entry: b0 r6 r7 ]	[exit: b0 r6 r7 $r8 ]
specialinvoke $r8.<Searches.InterpolationSearch: void <init>()>()	[entry: b0 r6 r7 $r8 ]	[exit: b0 r6 r7 $r8 ]
r9 = $r8................................	[entry: b0 r6 r7 $r8 ]	[exit: b0 r6 r9 r7 ]
$i6 = virtualinvoke r7.<java.lang.Integer: int intValue()>()	[entry: b0 r6 r9 r7 ]	[exit: b0 r7 r6 $i6 r9 ]
i7 = virtualinvoke r9.<Searches.InterpolationSearch: int find(int[],int)>(r6, $i6)	[entry: b0 r7 r6 $i6 r9 ]	[exit: b0 r6 i7 r7 ]
$r11 = <java.lang.System: java.io.PrintStream out>	[entry: b0 r6 i7 r7 ]	[exit: $r11 b0 r6 i7 r7 ]
$r10 = newarray (java.lang.Object)[4]...	[entry: $r11 b0 r6 i7 r7 ]	[exit: $r11 b0 r6 i7 $r10 r7 ]
$r10[0] = r7............................	[entry: $r11 b0 r6 i7 $r10 r7 ]	[exit: r7 $r11 b0 $r10 r6 i7 ]
$i8 = r6[i7]............................	[entry: r7 $r11 b0 $r10 r6 i7 ]	[exit: r6 r7 $r11 b0 i7 $r10 $i8 ]
$r12 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i8)	[entry: r6 r7 $r11 b0 i7 $r10 $i8 ]	[exit: r6 r7 $r11 b0 i7 $r10 $r12 ]
$r10[1] = $r12..........................	[entry: r6 r7 $r11 b0 i7 $r10 $r12 ]	[exit: r6 r7 $r11 b0 $r10 i7 ]
$r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i7)	[entry: r6 r7 $r11 b0 $r10 i7 ]	[exit: i7 r6 r7 $r11 b0 $r10 $r13 ]
$r10[2] = $r13..........................	[entry: i7 r6 r7 $r11 b0 $r10 $r13 ]	[exit: i7 r6 r7 $r11 $r10 b0 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b0)	[entry: i7 r6 r7 $r11 $r10 b0 ]	[exit: i7 r6 r7 $r11 $r10 $r14 ]
$r10[3] = $r14..........................	[entry: i7 r6 r7 $r11 $r10 $r14 ]	[exit: i7 r6 r7 $r11 $r10 ]
$r15 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Should be found: %d. Found %d at index %d. An array length %d", $r10)	[entry: i7 r6 r7 $r11 $r10 ]	[exit: i7 r6 r7 $r15 $r11 ]
virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r15)	[entry: i7 r6 r7 $r15 $r11 ]	[exit: i7 r6 r7 ]
$i9 = virtualinvoke r7.<java.lang.Integer: int intValue()>()	[entry: i7 r6 r7 ]	[exit: i7 r6 $i9 ]
i10 = staticinvoke <java.util.Arrays: int binarySearch(int[],int)>(r6, $i9)	[entry: i7 r6 $i9 ]	[exit: i7 i10 ]
$r17 = <java.lang.System: java.io.PrintStream out>	[entry: i7 i10 ]	[exit: $r17 i7 i10 ]
$r16 = newarray (java.lang.Object)[2]...	[entry: $r17 i7 i10 ]	[exit: $r17 i7 $r16 i10 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10)	[entry: $r17 i7 $r16 i10 ]	[exit: $r17 i10 i7 $r16 $r19 ]
$r16[0] = $r19..........................	[entry: $r17 i10 i7 $r16 $r19 ]	[exit: $r17 $r16 i10 i7 ]
if i10 != i7 goto $z0 = 0...............	[entry: $r17 $r16 i10 i7 ]	[exit: $r17 $r16 ]
$z0 = 1.................................	[entry: $r17 $r16 ]	[exit: $r17 $r16 $z0 ]
goto [?= $r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)]	[entry: $r17 $r16 $z0 ]	[exit: $r17 $r16 $z0 ]
$z0 = 0.................................	[entry: $r17 $r16 ]	[exit: $r17 $r16 $z0 ]
$r20 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0)	[entry: $r17 $r16 $z0 ]	[exit: $r17 $r16 $r20 ]
$r16[1] = $r20..........................	[entry: $r17 $r16 $r20 ]	[exit: $r17 $r16 ]
$r21 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Found by system method at an index: %d. Is equal: %b", $r16)	[entry: $r17 $r16 ]	[exit: $r21 $r17 ]
virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r21)	[entry: $r21 $r17 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Searches.PerfectBinarySearch, Method Name: binarySearch, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i3 := @parameter1: int..................	[entry: r0 ]	[exit: i3 r0 ]
i6 = 0..................................	[entry: i3 r0 ]	[exit: i3 i6 r0 ]
$i0 = lengthof r0.......................	[entry: i3 i6 r0 ]	[exit: i3 r0 i6 $i0 ]
i7 = $i0 - 1............................	[entry: i3 r0 i6 $i0 ]	[exit: i3 r0 i6 i7 ]
if i6 > i7 goto return -1...............	[entry: i3 r0 i6 i7 ]	[exit: i3 r0 i6 i7 ]
$i1 = i6 + i7...........................	[entry: i3 r0 i6 i7 ]	[exit: i6 i7 i3 r0 $i1 ]
i2 = $i1 / 2............................	[entry: i6 i7 i3 r0 $i1 ]	[exit: i6 i7 i3 r0 i2 ]
$i4 = r0[i2]............................	[entry: i6 i7 i3 r0 i2 ]	[exit: i2 i6 i7 r0 $i4 i3 ]
if $i4 != i3 goto $i5 = r0[i2]..........	[entry: i2 i6 i7 r0 $i4 i3 ]	[exit: i2 i6 i7 i3 r0 ]
return i2...............................	[entry: i2 ]	[exit: ]
$i5 = r0[i2]............................	[entry: i6 i7 i3 r0 i2 ]	[exit: r0 i6 i2 i7 $i5 i3 ]
if $i5 <= i3 goto i6 = i2 + 1...........	[entry: r0 i6 i2 i7 $i5 i3 ]	[exit: i3 r0 i6 i2 i7 ]
i7 = i2 - 1.............................	[entry: i3 r0 i6 i2 ]	[exit: i3 r0 i6 i7 ]
goto [?= (branch)]......................	[entry: i3 r0 i6 i7 ]	[exit: i3 r0 i6 i7 ]
i6 = i2 + 1.............................	[entry: i3 r0 i7 i2 ]	[exit: i3 r0 i6 i7 ]
goto [?= (branch)]......................	[entry: i3 r0 i6 i7 ]	[exit: i3 r0 i6 i7 ]
return -1...............................	[entry: ]	[exit: ]
********************
Class Name: Searches.PerfectBinarySearch, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new Searches.PerfectBinarySearch..	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Searches.PerfectBinarySearch: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: ]
$r2 = newarray (int)[11]................	[entry: ]	[exit: $r2 ]
$r2[0] = 0..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = 1..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = 2..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[3] = 3..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[4] = 4..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[5] = 5..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[6] = 6..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[7] = 7..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[8] = 8..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[9] = 9..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[10] = 10............................	[entry: $r2 ]	[exit: $r2 ]
r3 = $r2................................	[entry: $r2 ]	[exit: r3 ]
$z0 = <Searches.PerfectBinarySearch: boolean $assertionsDisabled>	[entry: r3 ]	[exit: r3 $z0 ]
if $z0 != 0 goto $z1 = <Searches.PerfectBinarySearch: boolean $assertionsDisabled>	[entry: r3 $z0 ]	[exit: r3 ]
$i1 = staticinvoke <Searches.PerfectBinarySearch: int binarySearch(int[],int)>(r3, -1)	[entry: r3 ]	[exit: r3 $i1 ]
if $i1 == -1 goto $z1 = <Searches.PerfectBinarySearch: boolean $assertionsDisabled>	[entry: r3 $i1 ]	[exit: r3 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <Searches.PerfectBinarySearch: boolean $assertionsDisabled>	[entry: r3 ]	[exit: r3 $z1 ]
if $z1 != 0 goto return.................	[entry: r3 $z1 ]	[exit: r3 ]
$i0 = staticinvoke <Searches.PerfectBinarySearch: int binarySearch(int[],int)>(r3, 11)	[entry: r3 ]	[exit: $i0 ]
if $i0 == -1 goto return................	[entry: $i0 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Searches.SaddlebackSearch, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r12 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: i0 r2 ]
i1 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: i0 r2 ]	[exit: r2 i0 i1 ]
r3 = newmultiarray (int)[i0][i1]........	[entry: r2 i0 i1 ]	[exit: r3 r2 i1 i0 ]
i7 = 0..................................	[entry: r3 r2 i1 i0 ]	[exit: r3 r2 i1 i7 i0 ]
if i7 >= i0 goto i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 r2 i1 i7 i0 ]	[exit: r3 i0 r2 i7 i1 ]
i8 = 0..................................	[entry: r3 r2 i0 i7 i1 ]	[exit: r3 r2 i0 i7 i8 i1 ]
if i8 >= i1 goto i7 = i7 + 1............	[entry: r3 r2 i0 i7 i8 i1 ]	[exit: r3 r2 i1 i0 i7 i8 ]
$r11 = r3[i7]...........................	[entry: i0 i1 i8 r2 r3 i7 ]	[exit: r3 i0 i7 i1 $r11 i8 r2 ]
$i6 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 i0 i7 i1 $r11 i8 r2 ]	[exit: r3 r2 i0 i7 i1 $r11 i8 $i6 ]
$r11[i8] = $i6..........................	[entry: r3 r2 i0 i7 i1 $r11 i8 $i6 ]	[exit: r3 r2 i0 i7 i1 i8 ]
i8 = i8 + 1.............................	[entry: r3 r2 i0 i7 i1 i8 ]	[exit: r3 r2 i0 i7 i8 i1 ]
goto [?= (branch)]......................	[entry: r3 r2 i0 i7 i8 i1 ]	[exit: r3 r2 i0 i7 i8 i1 ]
i7 = i7 + 1.............................	[entry: r3 r2 i1 i0 i7 ]	[exit: r3 r2 i1 i7 i0 ]
goto [?= (branch)]......................	[entry: r3 r2 i1 i7 i0 ]	[exit: r3 r2 i1 i7 i0 ]
i2 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r3 i0 r2 ]	[exit: r2 r3 i2 i0 ]
$i3 = i0 - 1............................	[entry: r2 r3 i2 i0 ]	[exit: r2 r3 $i3 i2 ]
r4 = staticinvoke <Searches.SaddlebackSearch: int[] find(int[][],int,int,int)>(r3, $i3, 0, i2)	[entry: r2 r3 $i3 i2 ]	[exit: r2 r4 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r2 r4 ]	[exit: r2 $r6 r4 ]
$r5 = new java.lang.StringBuilder.......	[entry: r2 $r6 r4 ]	[exit: r2 $r6 r4 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r6 r4 $r5 ]	[exit: r2 $r6 $r5 r4 ]
$i4 = r4[0].............................	[entry: r2 $r6 $r5 r4 ]	[exit: r2 $r6 r4 $i4 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)	[entry: r2 $r6 r4 $i4 $r5 ]	[exit: r2 $r6 r4 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r2 $r6 r4 $r7 ]	[exit: r2 $r6 $r8 r4 ]
$i5 = r4[1].............................	[entry: r2 $r6 $r8 r4 ]	[exit: r2 $r6 $i5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5)	[entry: r2 $r6 $i5 $r8 ]	[exit: r2 $r6 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r6 $r9 ]	[exit: r2 $r10 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.String)>($r10)	[entry: r2 $r10 $r6 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem02, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int[])[5]...............	[entry: ]	[exit: $r0 ]
$r1 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r1 ]
$r1[0] = 10.............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r1[1] = 10.............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r0[0] = $r1............................	[entry: $r0 $r1 ]	[exit: $r0 ]
$r2 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r2 ]
$r2[0] = 15.............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r2[1] = 10.............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r3 ]
$r3[0] = 2..............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r3[1] = 2..............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r4 ]
$r4[0] = 1..............................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r4[1] = 0..............................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
$r5 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r5 ]
$r5[0] = 89.............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r5[1] = 44.............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r0[4] = $r5............................	[entry: $r0 $r5 ]	[exit: $r0 ]
r6 = $r0................................	[entry: $r0 ]	[exit: r6 ]
r7 = r6.................................	[entry: r6 ]	[exit: r7 ]
i0 = lengthof r7........................	[entry: r7 ]	[exit: r7 i0 ]
i4 = 0..................................	[entry: r7 i0 ]	[exit: r7 i4 i0 ]
if i4 >= i0 goto return.................	[entry: r7 i4 i0 ]	[exit: i0 r7 i4 ]
r8 = r7[i4].............................	[entry: i0 r7 i4 ]	[exit: r7 i0 i4 r8 ]
$z0 = <ProjectEuler.Problem02: boolean $assertionsDisabled>	[entry: r7 i0 i4 r8 ]	[exit: r7 i0 i4 r8 $z0 ]
if $z0 != 0 goto i4 = i4 + 1............	[entry: r7 i0 i4 r8 $z0 ]	[exit: r7 i0 i4 r8 ]
$i1 = r8[0].............................	[entry: r7 i0 i4 r8 ]	[exit: r7 i0 i4 r8 $i1 ]
$i2 = staticinvoke <ProjectEuler.Problem02: int solution1(int)>($i1)	[entry: r7 i0 i4 r8 $i1 ]	[exit: r7 i0 i4 $i2 r8 ]
$i3 = r8[1].............................	[entry: r7 i0 i4 $i2 r8 ]	[exit: r7 i0 i4 $i2 $i3 ]
if $i2 == $i3 goto i4 = i4 + 1..........	[entry: r7 i0 i4 $i2 $i3 ]	[exit: r7 i0 i4 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
i4 = i4 + 1.............................	[entry: r7 i0 i4 ]	[exit: r7 i4 i0 ]
goto [?= (branch)]......................	[entry: r7 i4 i0 ]	[exit: r7 i4 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem09, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <ProjectEuler.Problem09: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto return.................	[entry: $z0 ]	[exit: ]
$i0 = staticinvoke <ProjectEuler.Problem09: int solution1()>()	[entry: ]	[exit: $i0 ]
if $i0 == 31875000 goto return..........	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem07, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r14 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int[])[9]...............	[entry: ]	[exit: $r0 ]
$r1 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r1 ]
$r1[0] = 1..............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r1[1] = 2..............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r0[0] = $r1............................	[entry: $r0 $r1 ]	[exit: $r0 ]
$r2 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r2 ]
$r2[0] = 2..............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r2[1] = 3..............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r3 ]
$r3[0] = 3..............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r3[1] = 5..............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r4 ]
$r4[0] = 4..............................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r4[1] = 7..............................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
$r5 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r5 ]
$r5[0] = 5..............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r5[1] = 11.............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r0[4] = $r5............................	[entry: $r0 $r5 ]	[exit: $r0 ]
$r6 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r6 ]
$r6[0] = 6..............................	[entry: $r0 $r6 ]	[exit: $r0 $r6 ]
$r6[1] = 13.............................	[entry: $r0 $r6 ]	[exit: $r0 $r6 ]
$r0[5] = $r6............................	[entry: $r0 $r6 ]	[exit: $r0 ]
$r7 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r7 ]
$r7[0] = 20.............................	[entry: $r0 $r7 ]	[exit: $r0 $r7 ]
$r7[1] = 71.............................	[entry: $r0 $r7 ]	[exit: $r0 $r7 ]
$r0[6] = $r7............................	[entry: $r0 $r7 ]	[exit: $r0 ]
$r8 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r8 ]
$r8[0] = 50.............................	[entry: $r0 $r8 ]	[exit: $r0 $r8 ]
$r8[1] = 229............................	[entry: $r0 $r8 ]	[exit: $r0 $r8 ]
$r0[7] = $r8............................	[entry: $r0 $r8 ]	[exit: $r0 ]
$r9 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r9 ]
$r9[0] = 100............................	[entry: $r0 $r9 ]	[exit: $r0 $r9 ]
$r9[1] = 541............................	[entry: $r0 $r9 ]	[exit: $r0 $r9 ]
$r0[8] = $r9............................	[entry: $r0 $r9 ]	[exit: $r0 ]
r10 = $r0...............................	[entry: $r0 ]	[exit: r10 ]
r11 = r10...............................	[entry: r10 ]	[exit: r11 ]
i0 = lengthof r11.......................	[entry: r11 ]	[exit: r11 i0 ]
i4 = 0..................................	[entry: r11 i0 ]	[exit: r11 i4 i0 ]
if i4 >= i0 goto return.................	[entry: r11 i4 i0 ]	[exit: i0 r11 i4 ]
r12 = r11[i4]...........................	[entry: i0 r11 i4 ]	[exit: r11 i0 i4 r12 ]
$z0 = <ProjectEuler.Problem07: boolean $assertionsDisabled>	[entry: r11 i0 i4 r12 ]	[exit: r11 i0 i4 r12 $z0 ]
if $z0 != 0 goto i4 = i4 + 1............	[entry: r11 i0 i4 r12 $z0 ]	[exit: r11 i0 i4 r12 ]
$i1 = r12[0]............................	[entry: r11 i0 i4 r12 ]	[exit: r11 i0 i4 r12 $i1 ]
$i2 = staticinvoke <ProjectEuler.Problem07: int solution1(int)>($i1)	[entry: r11 i0 i4 r12 $i1 ]	[exit: r11 i0 i4 $i2 r12 ]
$i3 = r12[1]............................	[entry: r11 i0 i4 $i2 r12 ]	[exit: r11 i0 i4 $i2 $i3 ]
if $i2 == $i3 goto i4 = i4 + 1..........	[entry: r11 i0 i4 $i2 $i3 ]	[exit: r11 i0 i4 ]
$r13 = new java.lang.AssertionError.....	[entry: ]	[exit: $r13 ]
specialinvoke $r13.<java.lang.AssertionError: void <init>()>()	[entry: $r13 ]	[exit: $r13 ]
throw $r13..............................	[entry: $r13 ]	[exit: ]
i4 = i4 + 1.............................	[entry: r11 i0 i4 ]	[exit: r11 i4 i0 ]
goto [?= (branch)]......................	[entry: r11 i4 i0 ]	[exit: r11 i4 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem04, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$z0 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i9 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(10000)	[entry: ]	[exit: $i9 ]
if $i9 == -1 goto $z1 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i9 ]	[exit: ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z1 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i8 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(20000)	[entry: ]	[exit: $i8 ]
if $i8 == 19591 goto $z2 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i8 ]	[exit: ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z2 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$i7 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(30000)	[entry: ]	[exit: $i7 ]
if $i7 == 29992 goto $z3 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i7 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z3 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$i6 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(40000)	[entry: ]	[exit: $i6 ]
if $i6 == 39893 goto $z4 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i6 ]	[exit: ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z4 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$i5 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(50000)	[entry: ]	[exit: $i5 ]
if $i5 == 49894 goto $z5 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i5 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z5 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z6 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$i4 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(60000)	[entry: ]	[exit: $i4 ]
if $i4 == 59995 goto $z6 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i4 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z6 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto $z7 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$i3 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(70000)	[entry: ]	[exit: $i3 ]
if $i3 == 69996 goto $z7 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z7 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z8 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$i2 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(80000)	[entry: ]	[exit: $i2 ]
if $i2 == 79897 goto $z8 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i2 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z8 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto $z9 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$i1 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(90000)	[entry: ]	[exit: $i1 ]
if $i1 == 89798 goto $z9 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: $i1 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z9 = <ProjectEuler.Problem04: boolean $assertionsDisabled>	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto return.................	[entry: $z9 ]	[exit: ]
$i0 = staticinvoke <ProjectEuler.Problem04: int solution1(int)>(100000)	[entry: ]	[exit: $i0 ]
if $i0 == 99999 goto return.............	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem12, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r1 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <ProjectEuler.Problem12: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto return.................	[entry: $z0 ]	[exit: ]
$i0 = staticinvoke <ProjectEuler.Problem12: int solution1(int)>(500)	[entry: ]	[exit: $i0 ]
if $i0 == 76576500 goto return..........	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem12, Method Name: triangleNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 = 0..................................	[entry: i0 ]	[exit: i1 i0 ]
i2 = 0..................................	[entry: i1 i0 ]	[exit: i1 i2 i0 ]
if i2 > i0 goto return i1...............	[entry: i1 i2 i0 ]	[exit: i1 i0 i2 ]
i1 = i1 + i2............................	[entry: i0 i1 i2 ]	[exit: i1 i0 i2 ]
i2 = i2 + 1.............................	[entry: i1 i0 i2 ]	[exit: i1 i2 i0 ]
goto [?= (branch)]......................	[entry: i1 i2 i0 ]	[exit: i1 i2 i0 ]
return i1...............................	[entry: i1 ]	[exit: ]
********************
Class Name: ProjectEuler.Problem12, Method Name: solution1, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i3 = 0..................................	[entry: i0 ]	[exit: i3 i0 ]
i4 = 0..................................	[entry: i3 i0 ]	[exit: i4 i3 i0 ]
i5 = 0..................................	[entry: i4 i3 i0 ]	[exit: i4 i3 i5 i0 ]
if i5 > i0 goto return i4...............	[entry: i4 i3 i5 i0 ]	[exit: i4 i0 i3 ]
i6 = 0..................................	[entry: i0 i3 ]	[exit: i0 i6 i3 ]
i3 = i3 + 1.............................	[entry: i0 i6 i3 ]	[exit: i0 i6 i3 ]
i4 = staticinvoke <ProjectEuler.Problem12: int triangleNumber(int)>(i3)	[entry: i0 i6 i3 ]	[exit: i3 i0 i6 i4 ]
i7 = 1..................................	[entry: i3 i0 i6 i4 ]	[exit: i3 i0 i6 i4 i7 ]
$d1 = (double) i7.......................	[entry: i3 i0 i6 i4 i7 ]	[exit: i3 i0 i6 i7 $d1 i4 ]
$d0 = (double) i4.......................	[entry: i3 i0 i6 i7 $d1 i4 ]	[exit: i4 i3 i0 i6 i7 $d1 $d0 ]
$d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i4 i3 i0 i6 i7 $d1 $d0 ]	[exit: i4 i3 i0 i6 i7 $d1 $d2 ]
$b1 = $d1 cmpg $d2......................	[entry: i4 i3 i0 i6 i7 $d1 $d2 ]	[exit: i4 i3 i0 i6 i7 $b1 ]
if $b1 > 0 goto i5 = i6 * 2.............	[entry: i4 i3 i0 i6 i7 $b1 ]	[exit: i4 i3 i0 i6 i7 ]
$i2 = i4 % i7...........................	[entry: i3 i0 i6 i4 i7 ]	[exit: i3 i0 i6 i4 i7 $i2 ]
if $i2 != 0 goto i7 = i7 + 1............	[entry: i3 i0 i6 i4 i7 $i2 ]	[exit: i3 i0 i6 i4 i7 ]
i6 = i6 + 1.............................	[entry: i3 i0 i4 i7 i6 ]	[exit: i3 i0 i6 i4 i7 ]
i7 = i7 + 1.............................	[entry: i3 i0 i6 i4 i7 ]	[exit: i3 i0 i6 i4 i7 ]
goto [?= $d1 = (double) i7].............	[entry: i3 i0 i6 i4 i7 ]	[exit: i3 i0 i6 i4 i7 ]
i5 = i6 * 2.............................	[entry: i4 i3 i0 i6 ]	[exit: i4 i3 i5 i0 ]
goto [?= (branch)]......................	[entry: i4 i3 i5 i0 ]	[exit: i4 i3 i5 i0 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: ProjectEuler.Problem10, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (long[])[6]..............	[entry: ]	[exit: $r0 ]
$r1 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r1 ]
$r1[0] = 2000000L.......................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r1[1] = 142913828922L..................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r0[0] = $r1............................	[entry: $r0 $r1 ]	[exit: $r0 ]
$r2 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r2 ]
$r2[0] = 10000L.........................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r2[1] = 5736396L.......................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r3 ]
$r3[0] = 5000L..........................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r3[1] = 1548136L.......................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r4 ]
$r4[0] = 1000L..........................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r4[1] = 76127L.........................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
$r5 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r5 ]
$r5[0] = 10L............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r5[1] = 17L............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r0[4] = $r5............................	[entry: $r0 $r5 ]	[exit: $r0 ]
$r6 = newarray (long)[2]................	[entry: $r0 ]	[exit: $r0 $r6 ]
$r6[0] = 7L.............................	[entry: $r0 $r6 ]	[exit: $r0 $r6 ]
$r6[1] = 10L............................	[entry: $r0 $r6 ]	[exit: $r0 $r6 ]
$r0[5] = $r6............................	[entry: $r0 $r6 ]	[exit: $r0 ]
r7 = $r0................................	[entry: $r0 ]	[exit: r7 ]
r8 = r7.................................	[entry: r7 ]	[exit: r8 ]
i0 = lengthof r8........................	[entry: r8 ]	[exit: r8 i0 ]
i5 = 0..................................	[entry: r8 i0 ]	[exit: r8 i5 i0 ]
if i5 >= i0 goto return.................	[entry: r8 i5 i0 ]	[exit: i0 r8 i5 ]
r9 = r8[i5].............................	[entry: i0 r8 i5 ]	[exit: r8 i0 i5 r9 ]
$z0 = <ProjectEuler.Problem10: boolean $assertionsDisabled>	[entry: r8 i0 i5 r9 ]	[exit: r8 i0 i5 r9 $z0 ]
if $z0 != 0 goto i5 = i5 + 1............	[entry: r8 i0 i5 r9 $z0 ]	[exit: r8 i0 i5 r9 ]
$l1 = r9[0].............................	[entry: r8 i0 i5 r9 ]	[exit: r8 i0 i5 r9 $l1 ]
$l2 = staticinvoke <ProjectEuler.Problem10: long solution1(long)>($l1)	[entry: r8 i0 i5 r9 $l1 ]	[exit: r8 i0 i5 $l2 r9 ]
$l3 = r9[1].............................	[entry: r8 i0 i5 $l2 r9 ]	[exit: r8 i0 i5 $l2 $l3 ]
$b4 = $l2 cmp $l3.......................	[entry: r8 i0 i5 $l2 $l3 ]	[exit: r8 i0 i5 $b4 ]
if $b4 == 0 goto i5 = i5 + 1............	[entry: r8 i0 i5 $b4 ]	[exit: r8 i0 i5 ]
$r10 = new java.lang.AssertionError.....	[entry: ]	[exit: $r10 ]
specialinvoke $r10.<java.lang.AssertionError: void <init>()>()	[entry: $r10 ]	[exit: $r10 ]
throw $r10..............................	[entry: $r10 ]	[exit: ]
i5 = i5 + 1.............................	[entry: r8 i0 i5 ]	[exit: r8 i5 i0 ]
goto [?= (branch)]......................	[entry: r8 i5 i0 ]	[exit: r8 i5 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem01, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int[])[5]...............	[entry: ]	[exit: $r0 ]
$r1 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r1 ]
$r1[0] = 3..............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r1[1] = 0..............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r0[0] = $r1............................	[entry: $r0 $r1 ]	[exit: $r0 ]
$r2 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r2 ]
$r2[0] = 4..............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r2[1] = 3..............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r3 ]
$r3[0] = 10.............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r3[1] = 23.............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r4 ]
$r4[0] = 1000...........................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r4[1] = 233168.........................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
$r5 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r5 ]
$r5[0] = -1.............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r5[1] = 0..............................	[entry: $r0 $r5 ]	[exit: $r0 $r5 ]
$r0[4] = $r5............................	[entry: $r0 $r5 ]	[exit: $r0 ]
r6 = $r0................................	[entry: $r0 ]	[exit: r6 ]
r7 = r6.................................	[entry: r6 ]	[exit: r7 ]
i0 = lengthof r7........................	[entry: r7 ]	[exit: r7 i0 ]
i7 = 0..................................	[entry: r7 i0 ]	[exit: r7 i7 i0 ]
if i7 >= i0 goto return.................	[entry: r7 i7 i0 ]	[exit: i0 r7 i7 ]
r8 = r7[i7].............................	[entry: i0 r7 i7 ]	[exit: r7 i0 i7 r8 ]
$z0 = <ProjectEuler.Problem01: boolean $assertionsDisabled>	[entry: r7 i0 i7 r8 ]	[exit: r7 i0 i7 r8 $z0 ]
if $z0 != 0 goto $z1 = <ProjectEuler.Problem01: boolean $assertionsDisabled>	[entry: r7 i0 i7 r8 $z0 ]	[exit: r7 i0 i7 r8 ]
$i4 = r8[0].............................	[entry: r7 i0 i7 r8 ]	[exit: r7 i0 i7 r8 $i4 ]
$i5 = staticinvoke <ProjectEuler.Problem01: int solution1(int)>($i4)	[entry: r7 i0 i7 r8 $i4 ]	[exit: r7 i0 i7 $i5 r8 ]
$i6 = r8[1].............................	[entry: r7 i0 i7 $i5 r8 ]	[exit: r7 i0 i7 r8 $i5 $i6 ]
if $i5 == $i6 goto $z1 = <ProjectEuler.Problem01: boolean $assertionsDisabled>	[entry: r7 i0 i7 r8 $i5 $i6 ]	[exit: r7 i0 i7 r8 ]
$r10 = new java.lang.AssertionError.....	[entry: ]	[exit: $r10 ]
specialinvoke $r10.<java.lang.AssertionError: void <init>()>()	[entry: $r10 ]	[exit: $r10 ]
throw $r10..............................	[entry: $r10 ]	[exit: ]
$z1 = <ProjectEuler.Problem01: boolean $assertionsDisabled>	[entry: r7 i0 i7 r8 ]	[exit: r7 i0 i7 r8 $z1 ]
if $z1 != 0 goto i7 = i7 + 1............	[entry: r7 i0 i7 r8 $z1 ]	[exit: r7 i0 i7 r8 ]
$i1 = r8[0].............................	[entry: r7 i0 i7 r8 ]	[exit: r7 i0 i7 r8 $i1 ]
$i2 = staticinvoke <ProjectEuler.Problem01: int solution2(int)>($i1)	[entry: r7 i0 i7 r8 $i1 ]	[exit: r7 i0 i7 $i2 r8 ]
$i3 = r8[1].............................	[entry: r7 i0 i7 $i2 r8 ]	[exit: r7 i0 i7 $i2 $i3 ]
if $i2 == $i3 goto i7 = i7 + 1..........	[entry: r7 i0 i7 $i2 $i3 ]	[exit: r7 i0 i7 ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
i7 = i7 + 1.............................	[entry: r7 i0 i7 ]	[exit: r7 i7 i0 ]
goto [?= (branch)]......................	[entry: r7 i7 i0 ]	[exit: r7 i7 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: ProjectEuler.Problem06, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int[])[4]...............	[entry: ]	[exit: $r0 ]
$r1 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r1 ]
$r1[0] = 10.............................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r1[1] = 2640...........................	[entry: $r0 $r1 ]	[exit: $r0 $r1 ]
$r0[0] = $r1............................	[entry: $r0 $r1 ]	[exit: $r0 ]
$r2 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r2 ]
$r2[0] = 15.............................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r2[1] = 13160..........................	[entry: $r0 $r2 ]	[exit: $r0 $r2 ]
$r0[1] = $r2............................	[entry: $r0 $r2 ]	[exit: $r0 ]
$r3 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r3 ]
$r3[0] = 20.............................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r3[1] = 41230..........................	[entry: $r0 $r3 ]	[exit: $r0 $r3 ]
$r0[2] = $r3............................	[entry: $r0 $r3 ]	[exit: $r0 ]
$r4 = newarray (int)[2].................	[entry: $r0 ]	[exit: $r0 $r4 ]
$r4[0] = 50.............................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r4[1] = 1582700........................	[entry: $r0 $r4 ]	[exit: $r0 $r4 ]
$r0[3] = $r4............................	[entry: $r0 $r4 ]	[exit: $r0 ]
r5 = $r0................................	[entry: $r0 ]	[exit: r5 ]
r6 = r5.................................	[entry: r5 ]	[exit: r6 ]
i0 = lengthof r6........................	[entry: r6 ]	[exit: r6 i0 ]
i7 = 0..................................	[entry: r6 i0 ]	[exit: r6 i7 i0 ]
if i7 >= i0 goto return.................	[entry: r6 i7 i0 ]	[exit: i0 r6 i7 ]
r7 = r6[i7].............................	[entry: i0 r6 i7 ]	[exit: r7 r6 i0 i7 ]
$z0 = <ProjectEuler.Problem06: boolean $assertionsDisabled>	[entry: r7 r6 i0 i7 ]	[exit: r7 r6 i0 i7 $z0 ]
if $z0 != 0 goto i7 = i7 + 1............	[entry: r7 r6 i0 i7 $z0 ]	[exit: r6 i0 i7 r7 ]
$i1 = r7[0].............................	[entry: r6 i0 i7 r7 ]	[exit: r6 i0 i7 r7 $i1 ]
$i2 = staticinvoke <ProjectEuler.Problem06: int solution1(int)>($i1)	[entry: r6 i0 i7 r7 $i1 ]	[exit: r6 i0 i7 $i2 r7 ]
$i3 = r7[1].............................	[entry: r6 i0 i7 $i2 r7 ]	[exit: r6 i0 i7 r7 $i2 $i3 ]
if $i2 != $i3 goto $r8 = new java.lang.AssertionError	[entry: r6 i0 i7 r7 $i2 $i3 ]	[exit: r6 i0 i7 r7 ]
$i4 = r7[0].............................	[entry: r6 i0 i7 r7 ]	[exit: r6 i0 i7 r7 $i4 ]
$i5 = staticinvoke <ProjectEuler.Problem06: int solutions2(int)>($i4)	[entry: r6 i0 i7 r7 $i4 ]	[exit: r6 i0 i7 $i5 r7 ]
$i6 = r7[1].............................	[entry: r6 i0 i7 $i5 r7 ]	[exit: r6 i0 i7 $i5 $i6 ]
if $i5 == $i6 goto i7 = i7 + 1..........	[entry: r6 i0 i7 $i5 $i6 ]	[exit: r6 i0 i7 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
i7 = i7 + 1.............................	[entry: r6 i0 i7 ]	[exit: r6 i7 i0 ]
goto [?= (branch)]......................	[entry: r6 i7 i0 ]	[exit: r6 i7 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Misc.PalindromePrime, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>("Enter the quantity of First Palindromic Primes you want")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
staticinvoke <Misc.PalindromePrime: void functioning(int)>(i0)	[entry: r2 i0 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Misc.PalindromePrime, Method Name: prime, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i3 = 3..................................	[entry: i0 ]	[exit: i0 i3 ]
$d1 = (double) i3.......................	[entry: i0 i3 ]	[exit: i3 $d1 i0 ]
$d0 = (double) i0.......................	[entry: i3 $d1 i0 ]	[exit: i0 i3 $d1 $d0 ]
$d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i0 i3 $d1 $d0 ]	[exit: i0 i3 $d1 $d2 ]
$b1 = $d1 cmpg $d2......................	[entry: i0 i3 $d1 $d2 ]	[exit: i0 i3 $b1 ]
if $b1 > 0 goto return 1................	[entry: i0 i3 $b1 ]	[exit: i0 i3 ]
$i2 = i0 % i3...........................	[entry: i0 i3 ]	[exit: i0 i3 $i2 ]
if $i2 != 0 goto i3 = i3 + 2............	[entry: i0 i3 $i2 ]	[exit: i0 i3 ]
return 0................................	[entry: ]	[exit: ]
i3 = i3 + 2.............................	[entry: i0 i3 ]	[exit: i0 i3 ]
goto [?= $d1 = (double) i3].............	[entry: i0 i3 ]	[exit: i0 i3 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: Misc.PalindromePrime, Method Name: reverse, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i2 = 0..................................	[entry: i1 ]	[exit: i2 i1 ]
if i1 == 0 goto return i2...............	[entry: i2 i1 ]	[exit: i2 i1 ]
i3 = i2 * 10............................	[entry: i1 i2 ]	[exit: i3 i1 ]
$i0 = i1 % 10...........................	[entry: i3 i1 ]	[exit: i1 i3 $i0 ]
i2 = i3 + $i0...........................	[entry: i1 i3 $i0 ]	[exit: i2 i1 ]
i1 = i1 / 10............................	[entry: i2 i1 ]	[exit: i2 i1 ]
goto [?= (branch)]......................	[entry: i2 i1 ]	[exit: i2 i1 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Misc.PalindromePrime, Method Name: functioning, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 != 0 goto $r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: i0 ]
return..................................	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i0 ]	[exit: i0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void print(java.lang.String)>("2\n")	[entry: i0 $r0 ]	[exit: i0 ]
i2 = 1..................................	[entry: i0 ]	[exit: i2 i0 ]
i3 = 3..................................	[entry: i2 i0 ]	[exit: i3 i2 i0 ]
if i2 >= i0 goto return.................	[entry: i3 i2 i0 ]	[exit: i2 i0 i3 ]
$i1 = staticinvoke <Misc.PalindromePrime: int reverse(int)>(i3)	[entry: i2 i0 i3 ]	[exit: i2 i0 i3 $i1 ]
if i3 != $i1 goto i3 = i3 + 2...........	[entry: i2 i0 i3 $i1 ]	[exit: i2 i0 i3 ]
$z0 = staticinvoke <Misc.PalindromePrime: boolean prime(int)>(i3)	[entry: i2 i0 i3 ]	[exit: i2 i0 i3 $z0 ]
if $z0 == 0 goto i3 = i3 + 2............	[entry: i2 i0 i3 $z0 ]	[exit: i2 i0 i3 ]
i2 = i2 + 1.............................	[entry: i0 i3 i2 ]	[exit: i2 i0 i3 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: i2 i0 i3 ]	[exit: i2 i0 $r2 i3 ]
$r1 = new java.lang.StringBuilder.......	[entry: i2 i0 $r2 i3 ]	[exit: i2 i0 $r2 i3 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: i2 i0 $r2 i3 $r1 ]	[exit: i2 i0 $r2 i3 $r1 ]
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)	[entry: i2 i0 $r2 i3 $r1 ]	[exit: i2 i0 i3 $r2 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n")	[entry: i2 i0 i3 $r2 $r3 ]	[exit: i2 i0 i3 $r2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i2 i0 i3 $r2 $r4 ]	[exit: i2 i0 i3 $r5 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r5)	[entry: i2 i0 i3 $r5 $r2 ]	[exit: i2 i0 i3 ]
i3 = i3 + 2.............................	[entry: i2 i0 i3 ]	[exit: i3 i2 i0 ]
goto [?= (branch)]......................	[entry: i3 i2 i0 ]	[exit: i3 i2 i0 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Misc.MedianOfRunningArray, Method Name: insert, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Misc.MedianOfRunningArray..	[entry: ]	[exit: r0 ]
r1 := @parameter0: java.lang.Integer....	[entry: r0 ]	[exit: r1 r0 ]
$r2 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: r1 r0 ]	[exit: r0 r1 $r2 ]
virtualinvoke $r2.<java.util.PriorityQueue: boolean add(java.lang.Object)>(r1)	[entry: r0 r1 $r2 ]	[exit: r0 ]
$r3 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: r0 ]	[exit: r0 $r3 ]
$i0 = virtualinvoke $r3.<java.util.PriorityQueue: int size()>()	[entry: r0 $r3 ]	[exit: $i0 r0 ]
$r4 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: $i0 r0 ]	[exit: r0 $i0 $r4 ]
$i1 = virtualinvoke $r4.<java.util.PriorityQueue: int size()>()	[entry: r0 $i0 $r4 ]	[exit: r0 $i0 $i1 ]
$i2 = $i0 - $i1.........................	[entry: r0 $i0 $i1 ]	[exit: r0 $i2 ]
if $i2 <= 1 goto return.................	[entry: r0 $i2 ]	[exit: r0 ]
$r6 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 ]	[exit: $r6 r0 ]
$r5 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: $r6 r0 ]	[exit: $r6 $r5 ]
$r7 = virtualinvoke $r5.<java.util.PriorityQueue: java.lang.Object remove()>()	[entry: $r6 $r5 ]	[exit: $r7 $r6 ]
virtualinvoke $r6.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r7)	[entry: $r7 $r6 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Misc.MedianOfRunningArray, Method Name: median, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @this: Misc.MedianOfRunningArray..	[entry: ]	[exit: r0 ]
$r1 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 ]	[exit: r0 $r1 ]
$i0 = virtualinvoke $r1.<java.util.PriorityQueue: int size()>()	[entry: r0 $r1 ]	[exit: $i0 r0 ]
$r2 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: $i0 r0 ]	[exit: r0 $i0 $r2 ]
$i1 = virtualinvoke $r2.<java.util.PriorityQueue: int size()>()	[entry: r0 $i0 $r2 ]	[exit: r0 $i0 $i1 ]
if $i0 != $i1 goto $r3 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 $i0 $i1 ]	[exit: r0 ]
$r9 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 ]	[exit: r0 $r9 ]
$r10 = virtualinvoke $r9.<java.util.PriorityQueue: java.lang.Object peek()>()	[entry: r0 $r9 ]	[exit: r0 $r10 ]
$r11 = (java.lang.Integer) $r10.........	[entry: r0 $r10 ]	[exit: r0 $r11 ]
$i4 = virtualinvoke $r11.<java.lang.Integer: int intValue()>()	[entry: r0 $r11 ]	[exit: $i4 r0 ]
$r12 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: $i4 r0 ]	[exit: $i4 $r12 ]
$r13 = virtualinvoke $r12.<java.util.PriorityQueue: java.lang.Object peek()>()	[entry: $i4 $r12 ]	[exit: $i4 $r13 ]
$r14 = (java.lang.Integer) $r13.........	[entry: $i4 $r13 ]	[exit: $i4 $r14 ]
$i5 = virtualinvoke $r14.<java.lang.Integer: int intValue()>()	[entry: $i4 $r14 ]	[exit: $i4 $i5 ]
$i6 = $i4 + $i5.........................	[entry: $i4 $i5 ]	[exit: $i6 ]
$i7 = $i6 / 2...........................	[entry: $i6 ]	[exit: $i7 ]
$r15 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7)	[entry: $i7 ]	[exit: $r15 ]
return $r15.............................	[entry: $r15 ]	[exit: ]
$r3 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 ]	[exit: r0 $r3 ]
$i2 = virtualinvoke $r3.<java.util.PriorityQueue: int size()>()	[entry: r0 $r3 ]	[exit: $i2 r0 ]
$r4 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: $i2 r0 ]	[exit: r0 $i2 $r4 ]
$i3 = virtualinvoke $r4.<java.util.PriorityQueue: int size()>()	[entry: r0 $i2 $r4 ]	[exit: r0 $i2 $i3 ]
if $i2 <= $i3 goto $r5 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: r0 $i2 $i3 ]	[exit: r0 ]
$r7 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p1>	[entry: r0 ]	[exit: $r7 ]
$r8 = virtualinvoke $r7.<java.util.PriorityQueue: java.lang.Object peek()>()	[entry: $r7 ]	[exit: $r8 ]
$r16 = (java.lang.Integer) $r8..........	[entry: $r8 ]	[exit: $r16 ]
goto [?= return $r16]...................	[entry: $r16 ]	[exit: $r16 ]
$r5 = r0.<Misc.MedianOfRunningArray: java.util.PriorityQueue p2>	[entry: r0 ]	[exit: $r5 ]
$r6 = virtualinvoke $r5.<java.util.PriorityQueue: java.lang.Object peek()>()	[entry: $r5 ]	[exit: $r6 ]
$r16 = (java.lang.Integer) $r6..........	[entry: $r6 ]	[exit: $r16 ]
return $r16.............................	[entry: $r16 ]	[exit: ]
********************
Class Name: Misc.MedianOfRunningArray, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new Misc.MedianOfRunningArray.....	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<Misc.MedianOfRunningArray: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = newarray (int)[9].................	[entry: r1 ]	[exit: r1 $r2 ]
$r2[0] = 10.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[1] = 7..............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[2] = 4..............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[3] = 9..............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[4] = 2..............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[5] = 3..............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[6] = 11.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[7] = 17.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
$r2[8] = 14.............................	[entry: r1 $r2 ]	[exit: r1 $r2 ]
r3 = $r2................................	[entry: r1 $r2 ]	[exit: r1 r3 ]
i1 = 0..................................	[entry: r1 r3 ]	[exit: r1 r3 i1 ]
if i1 >= 9 goto return..................	[entry: r1 r3 i1 ]	[exit: r1 r3 i1 ]
$i0 = r3[i1]............................	[entry: r1 r3 i1 ]	[exit: r3 i1 r1 $i0 ]
$r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)	[entry: r3 i1 r1 $i0 ]	[exit: r3 i1 $r4 r1 ]
virtualinvoke r1.<Misc.MedianOfRunningArray: void insert(java.lang.Integer)>($r4)	[entry: r3 i1 $r4 r1 ]	[exit: r3 i1 r1 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i1 r1 ]	[exit: r3 i1 $r6 r1 ]
$r5 = new java.lang.StringBuilder.......	[entry: r3 i1 $r6 r1 ]	[exit: r3 i1 $r6 r1 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r3 i1 $r6 r1 $r5 ]	[exit: r3 i1 $r6 $r5 r1 ]
$r7 = virtualinvoke r1.<Misc.MedianOfRunningArray: java.lang.Integer median()>()	[entry: r3 i1 $r6 $r5 r1 ]	[exit: r1 r3 i1 $r6 $r7 $r5 ]
$r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7)	[entry: r1 r3 i1 $r6 $r7 $r5 ]	[exit: r1 r3 i1 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: r1 r3 i1 $r6 $r8 ]	[exit: r1 r3 i1 $r6 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r3 i1 $r6 $r9 ]	[exit: r1 r3 i1 $r10 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>($r10)	[entry: r1 r3 i1 $r10 $r6 ]	[exit: r1 r3 i1 ]
i1 = i1 + 1.............................	[entry: r1 r3 i1 ]	[exit: r1 r3 i1 ]
goto [?= (branch)]......................	[entry: r1 r3 i1 ]	[exit: r1 r3 i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.MinValue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i6 = 1..................................	[entry: r1 ]	[exit: r1 i6 ]
if i6 > 100 goto return.................	[entry: r1 i6 ]	[exit: i6 r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: i6 r1 ]	[exit: i6 r1 $i0 ]
i1 = $i0 - 50...........................	[entry: i6 r1 $i0 ]	[exit: i6 i1 r1 ]
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: i6 i1 r1 ]	[exit: r1 i6 i1 $i2 ]
i3 = $i2 - 50...........................	[entry: r1 i6 i1 $i2 ]	[exit: r1 i6 i1 i3 ]
$z0 = <Maths.MinValue: boolean $assertionsDisabled>	[entry: r1 i6 i1 i3 ]	[exit: r1 i6 i1 i3 $z0 ]
if $z0 != 0 goto i6 = i6 + 1............	[entry: r1 i6 i1 i3 $z0 ]	[exit: r1 i6 i1 i3 ]
$i4 = staticinvoke <Maths.MinValue: int min(int,int)>(i1, i3)	[entry: r1 i6 i1 i3 ]	[exit: r1 i6 $i4 i1 i3 ]
$i5 = staticinvoke <java.lang.Math: int min(int,int)>(i1, i3)	[entry: r1 i6 $i4 i1 i3 ]	[exit: r1 i6 $i4 $i5 ]
if $i4 == $i5 goto i6 = i6 + 1..........	[entry: r1 i6 $i4 $i5 ]	[exit: r1 i6 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i6 = i6 + 1.............................	[entry: r1 i6 ]	[exit: r1 i6 ]
goto [?= (branch)]......................	[entry: r1 i6 ]	[exit: r1 i6 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.MinValue, Method Name: min, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i0 i1 ]
if i0 > i1 goto $i2 = i1................	[entry: i0 i1 ]	[exit: i0 i1 ]
$i2 = i0................................	[entry: i0 ]	[exit: $i2 ]
goto [?= return $i2]....................	[entry: $i2 ]	[exit: $i2 ]
$i2 = i1................................	[entry: i1 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: Maths.Average, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Average: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Average: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r7 = newarray (double)[7]..............	[entry: ]	[exit: $r7 ]
$r7[0] = 3.0............................	[entry: $r7 ]	[exit: $r7 ]
$r7[1] = 6.0............................	[entry: $r7 ]	[exit: $r7 ]
$r7[2] = 9.0............................	[entry: $r7 ]	[exit: $r7 ]
$r7[3] = 12.0...........................	[entry: $r7 ]	[exit: $r7 ]
$r7[4] = 15.0...........................	[entry: $r7 ]	[exit: $r7 ]
$r7[5] = 18.0...........................	[entry: $r7 ]	[exit: $r7 ]
$r7[6] = 21.0...........................	[entry: $r7 ]	[exit: $r7 ]
$d6 = staticinvoke <Maths.Average: double average(double[])>($r7)	[entry: $r7 ]	[exit: $d6 ]
$d7 = $d6 - 12.0........................	[entry: $d6 ]	[exit: $d7 ]
$d8 = staticinvoke <java.lang.Math: double abs(double)>($d7)	[entry: $d7 ]	[exit: $d8 ]
$b3 = $d8 cmpg 9.999999747378752E-6.....	[entry: $d8 ]	[exit: $b3 ]
if $b3 < 0 goto $z1 = <Maths.Average: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z1 = <Maths.Average: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Average: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$r5 = newarray (double)[7]..............	[entry: ]	[exit: $r5 ]
$r5[0] = 5.0............................	[entry: $r5 ]	[exit: $r5 ]
$r5[1] = 10.0...........................	[entry: $r5 ]	[exit: $r5 ]
$r5[2] = 15.0...........................	[entry: $r5 ]	[exit: $r5 ]
$r5[3] = 20.0...........................	[entry: $r5 ]	[exit: $r5 ]
$r5[4] = 25.0...........................	[entry: $r5 ]	[exit: $r5 ]
$r5[5] = 30.0...........................	[entry: $r5 ]	[exit: $r5 ]
$r5[6] = 35.0...........................	[entry: $r5 ]	[exit: $r5 ]
$d3 = staticinvoke <Maths.Average: double average(double[])>($r5)	[entry: $r5 ]	[exit: $d3 ]
$d4 = $d3 - 20.0........................	[entry: $d3 ]	[exit: $d4 ]
$d5 = staticinvoke <java.lang.Math: double abs(double)>($d4)	[entry: $d4 ]	[exit: $d5 ]
$b2 = $d5 cmpg 9.999999747378752E-6.....	[entry: $d5 ]	[exit: $b2 ]
if $b2 < 0 goto $z2 = <Maths.Average: boolean $assertionsDisabled>	[entry: $b2 ]	[exit: ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z2 = <Maths.Average: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $r0 = newarray (int)[3]	[entry: $z2 ]	[exit: ]
$r3 = newarray (double)[8]..............	[entry: ]	[exit: $r3 ]
$r3[0] = 1.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[1] = 2.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[2] = 3.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[3] = 4.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[4] = 5.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[5] = 6.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[6] = 7.0............................	[entry: $r3 ]	[exit: $r3 ]
$r3[7] = 8.0............................	[entry: $r3 ]	[exit: $r3 ]
$d0 = staticinvoke <Maths.Average: double average(double[])>($r3)	[entry: $r3 ]	[exit: $d0 ]
$d1 = $d0 - 4.5.........................	[entry: $d0 ]	[exit: $d1 ]
$d2 = staticinvoke <java.lang.Math: double abs(double)>($d1)	[entry: $d1 ]	[exit: $d2 ]
$b1 = $d2 cmpg 9.999999747378752E-6.....	[entry: $d2 ]	[exit: $b1 ]
if $b1 < 0 goto $r0 = newarray (int)[3].	[entry: $b1 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$r0 = newarray (int)[3].................	[entry: ]	[exit: $r0 ]
$r0[0] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 10.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z3 = <Maths.Average: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto return.................	[entry: r1 $z3 ]	[exit: r1 ]
$i0 = staticinvoke <Maths.Average: int average(int[])>(r1)	[entry: r1 ]	[exit: $i0 ]
if $i0 == 5 goto return.................	[entry: $i0 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PerfectNumber, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z5 = staticinvoke <Maths.PerfectNumber: boolean isPerfectNumber(int)>(6)	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z1 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z1 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z4 = staticinvoke <Maths.PerfectNumber: boolean isPerfectNumber(int)>(8)	[entry: ]	[exit: $z4 ]
if $z4 == 0 goto $z2 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z2 = <Maths.PerfectNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$z3 = staticinvoke <Maths.PerfectNumber: boolean isPerfectNumber(int)>(28)	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PerfectNumber, Method Name: isPerfectNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i2 = 0..................................	[entry: i0 ]	[exit: i2 i0 ]
i3 = 1..................................	[entry: i2 i0 ]	[exit: i2 i3 i0 ]
if i3 >= i0 goto (branch)...............	[entry: i2 i3 i0 ]	[exit: i2 i0 i3 ]
$i1 = i0 % i3...........................	[entry: i2 i0 i3 ]	[exit: i2 i0 i3 $i1 ]
if $i1 != 0 goto i3 = i3 + 1............	[entry: i2 i0 i3 $i1 ]	[exit: i2 i0 i3 ]
i2 = i2 + i3............................	[entry: i0 i2 i3 ]	[exit: i2 i0 i3 ]
i3 = i3 + 1.............................	[entry: i2 i0 i3 ]	[exit: i2 i3 i0 ]
goto [?= (branch)]......................	[entry: i2 i3 i0 ]	[exit: i2 i3 i0 ]
if i2 != i0 goto $z0 = 0................	[entry: i2 i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.Armstrong, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z11 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(0)	[entry: ]	[exit: $z11 ]
if $z11 != 0 goto $z1 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z11 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z10 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(1)	[entry: ]	[exit: $z10 ]
if $z10 != 0 goto $z2 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z10 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z9 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(153)	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto $z3 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z3 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z8 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(1634)	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto $z4 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z4 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$z7 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(371)	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z5 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z5 = <Maths.Armstrong: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$z6 = staticinvoke <Maths.Armstrong: boolean isArmStrong(int)>(200)	[entry: ]	[exit: $z6 ]
if $z6 == 0 goto return.................	[entry: $z6 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PrimeCheck, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r14 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = new java.util.Scanner.............	[entry: ]	[exit: $r0 ]
$r1 = <java.lang.System: java.io.InputStream in>	[entry: $r0 ]	[exit: $r1 $r0 ]
specialinvoke $r0.<java.util.Scanner: void <init>(java.io.InputStream)>($r1)	[entry: $r1 $r0 ]	[exit: $r0 ]
r2 = $r0................................	[entry: $r0 ]	[exit: r2 ]
$r3 = <java.lang.System: java.io.PrintStream out>	[entry: r2 ]	[exit: r2 $r3 ]
virtualinvoke $r3.<java.io.PrintStream: void print(java.lang.String)>("Enter a number: ")	[entry: r2 $r3 ]	[exit: r2 ]
i0 = virtualinvoke r2.<java.util.Scanner: int nextInt()>()	[entry: r2 ]	[exit: r2 i0 ]
$z0 = staticinvoke <Maths.PrimeCheck: boolean isPrime(int)>(i0)	[entry: r2 i0 ]	[exit: r2 i0 $z0 ]
if $z0 == 0 goto $r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 $z0 ]	[exit: r2 i0 ]
$r10 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r10 i0 ]
$r9 = new java.lang.StringBuilder.......	[entry: r2 $r10 i0 ]	[exit: r2 $r10 i0 $r9 ]
specialinvoke $r9.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r10 i0 $r9 ]	[exit: r2 $r10 i0 $r9 ]
$r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r10 i0 $r9 ]	[exit: r2 $r10 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a prime number")	[entry: r2 $r10 $r11 ]	[exit: r2 $r10 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r10 $r12 ]	[exit: r2 $r13 $r10 ]
virtualinvoke $r10.<java.io.PrintStream: void println(java.lang.String)>($r13)	[entry: r2 $r13 $r10 ]	[exit: r2 ]
goto [?= virtualinvoke r2.<java.util.Scanner: void close()>()]	[entry: r2 ]	[exit: r2 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r2 i0 ]	[exit: r2 $r5 i0 ]
$r4 = new java.lang.StringBuilder.......	[entry: r2 $r5 i0 ]	[exit: r2 $r5 i0 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 i0 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r2 $r5 i0 $r4 ]	[exit: r2 $r5 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a prime number")	[entry: r2 $r5 $r6 ]	[exit: r2 $r5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r2 $r5 $r7 ]	[exit: r2 $r8 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r8)	[entry: r2 $r8 $r5 ]	[exit: r2 ]
virtualinvoke r2.<java.util.Scanner: void close()>()	[entry: r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PrimeCheck, Method Name: isPrime, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 != 2 goto (branch)................	[entry: i0 ]	[exit: i0 ]
return 1................................	[entry: ]	[exit: ]
if i0 < 2 goto return 0.................	[entry: i0 ]	[exit: i0 ]
$i1 = i0 % 2............................	[entry: i0 ]	[exit: i0 $i1 ]
if $i1 != 0 goto i4 = 3.................	[entry: i0 $i1 ]	[exit: i0 ]
return 0................................	[entry: ]	[exit: ]
i4 = 3..................................	[entry: i0 ]	[exit: i4 i0 ]
$d0 = (double) i0.......................	[entry: i4 i0 ]	[exit: i0 i4 $d0 ]
$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i0 i4 $d0 ]	[exit: i0 i4 $d1 ]
i2 = (int) $d1..........................	[entry: i0 i4 $d1 ]	[exit: i0 i4 i2 ]
if i4 > i2 goto return 1................	[entry: i0 i4 i2 ]	[exit: i2 i0 i4 ]
$i3 = i0 % i4...........................	[entry: i2 i0 i4 ]	[exit: i0 i2 i4 $i3 ]
if $i3 != 0 goto i4 = i4 + 2............	[entry: i0 i2 i4 $i3 ]	[exit: i0 i2 i4 ]
return 0................................	[entry: ]	[exit: ]
i4 = i4 + 2.............................	[entry: i0 i2 i4 ]	[exit: i0 i4 i2 ]
goto [?= (branch)]......................	[entry: i0 i4 i2 ]	[exit: i0 i4 i2 ]
return 1................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PalindromeNumber, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z5 = staticinvoke <Maths.PalindromeNumber: boolean isPalindrome(int)>(12321)	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z1 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z1 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z4 = staticinvoke <Maths.PalindromeNumber: boolean isPalindrome(int)>(1234)	[entry: ]	[exit: $z4 ]
if $z4 == 0 goto $z2 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z2 = <Maths.PalindromeNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$z3 = staticinvoke <Maths.PalindromeNumber: boolean isPalindrome(int)>(1)	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PalindromeNumber, Method Name: isPalindrome, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 >= 0 goto i3 = i0.................	[entry: i0 ]	[exit: i0 ]
$r0 = new java.lang.IllegalArgumentException	[entry: i0 ]	[exit: $r0 i0 ]
$r1 = new java.lang.StringBuilder.......	[entry: $r0 i0 ]	[exit: $r0 i0 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: $r0 i0 $r1 ]	[exit: $r0 i0 $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r0 i0 $r1 ]	[exit: $r0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")	[entry: $r0 $r2 ]	[exit: $r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r0 $r3 ]	[exit: $r4 $r0 ]
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4)	[entry: $r4 $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
i3 = i0.................................	[entry: i0 ]	[exit: i0 i3 ]
i4 = 0..................................	[entry: i0 i3 ]	[exit: i0 i4 i3 ]
if i3 == 0 goto (branch)................	[entry: i0 i4 i3 ]	[exit: i0 i4 i3 ]
i1 = i3 % 10............................	[entry: i0 i4 i3 ]	[exit: i0 i3 i1 i4 ]
$i2 = i4 * 10...........................	[entry: i0 i3 i1 i4 ]	[exit: i0 i3 $i2 i1 ]
i4 = $i2 + i1...........................	[entry: i0 i3 $i2 i1 ]	[exit: i0 i4 i3 ]
i3 = i3 / 10............................	[entry: i0 i4 i3 ]	[exit: i0 i4 i3 ]
goto [?= (branch)]......................	[entry: i0 i4 i3 ]	[exit: i0 i4 i3 ]
if i0 != i4 goto $z0 = 0................	[entry: i0 i4 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.FindMaxRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: r1 ]	[exit: r1 $i0 ]
i1 = $i0 + 1............................	[entry: r1 $i0 ]	[exit: r1 i1 ]
r2 = newarray (int)[i1].................	[entry: r1 i1 ]	[exit: r2 r1 i1 ]
i11 = 0.................................	[entry: r2 r1 i1 ]	[exit: r2 r1 i11 i1 ]
if i11 >= i1 goto $z0 = <Maths.FindMaxRecursion: boolean $assertionsDisabled>	[entry: r2 r1 i11 i1 ]	[exit: r2 i1 i11 r1 ]
$i9 = virtualinvoke r1.<java.util.Random: int nextInt()>()	[entry: i1 r2 i11 r1 ]	[exit: r1 i1 r2 i11 $i9 ]
$i10 = $i9 % 100........................	[entry: r1 i1 r2 i11 $i9 ]	[exit: r1 i1 r2 i11 $i10 ]
r2[i11] = $i10..........................	[entry: r1 i1 r2 i11 $i10 ]	[exit: r2 r1 i1 i11 ]
i11 = i11 + 1...........................	[entry: r2 r1 i1 i11 ]	[exit: r2 r1 i11 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 i11 i1 ]	[exit: r2 r1 i11 i1 ]
$z0 = <Maths.FindMaxRecursion: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z0 ]
if $z0 != 0 goto $z1 = <Maths.FindMaxRecursion: boolean $assertionsDisabled>	[entry: r2 $z0 ]	[exit: r2 ]
$i6 = lengthof r2.......................	[entry: r2 ]	[exit: r2 $i6 ]
$i7 = staticinvoke <Maths.FindMaxRecursion: int max(int[],int)>(r2, $i6)	[entry: r2 $i6 ]	[exit: $i7 r2 ]
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: $i7 r2 ]	[exit: r2 $i7 $r6 ]
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt max()>()	[entry: r2 $i7 $r6 ]	[exit: r2 $i7 $r7 ]
$i8 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>()	[entry: r2 $i7 $r7 ]	[exit: r2 $i7 $i8 ]
if $i7 == $i8 goto $z1 = <Maths.FindMaxRecursion: boolean $assertionsDisabled>	[entry: r2 $i7 $i8 ]	[exit: r2 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z1 = <Maths.FindMaxRecursion: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z1 ]
if $z1 != 0 goto return.................	[entry: r2 $z1 ]	[exit: r2 ]
$i2 = lengthof r2.......................	[entry: r2 ]	[exit: r2 $i2 ]
$i3 = $i2 - 1...........................	[entry: r2 $i2 ]	[exit: r2 $i3 ]
$i4 = staticinvoke <Maths.FindMaxRecursion: int max(int[],int,int)>(r2, 0, $i3)	[entry: r2 $i3 ]	[exit: $i4 r2 ]
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: $i4 r2 ]	[exit: $i4 $r3 ]
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt max()>()	[entry: $i4 $r3 ]	[exit: $i4 $r4 ]
$i5 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()	[entry: $i4 $r4 ]	[exit: $i4 $i5 ]
if $i4 == $i5 goto return...............	[entry: $i4 $i5 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PerfectCube, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z11 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(-1)	[entry: ]	[exit: $z11 ]
if $z11 == 0 goto $z1 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z11 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z10 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(0)	[entry: ]	[exit: $z10 ]
if $z10 != 0 goto $z2 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z10 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z9 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(1)	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto $z3 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z3 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z8 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(4)	[entry: ]	[exit: $z8 ]
if $z8 == 0 goto $z4 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z4 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$z7 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(8)	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z5 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z5 = <Maths.PerfectCube: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$z6 = staticinvoke <Maths.PerfectCube: boolean isPerfectCube(int)>(27)	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto return.................	[entry: $z6 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PerfectCube, Method Name: isPerfectCube, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
$d0 = (double) i0.......................	[entry: i0 ]	[exit: i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>($d0, 0.3333333333333333)	[entry: i0 $d0 ]	[exit: i0 $d1 ]
i1 = (int) $d1..........................	[entry: i0 $d1 ]	[exit: i0 i1 ]
$i2 = i1 * i1...........................	[entry: i0 i1 ]	[exit: i0 $i2 i1 ]
$i3 = $i2 * i1..........................	[entry: i0 $i2 i1 ]	[exit: $i3 i0 ]
if $i3 != i0 goto $z0 = 0...............	[entry: $i3 i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.Floor, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i1 = 1..................................	[entry: r1 ]	[exit: r1 i1 ]
if i1 > 1000 goto return................	[entry: r1 i1 ]	[exit: i1 r1 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>()	[entry: i1 r1 ]	[exit: r1 i1 d0 ]
$z0 = <Maths.Floor: boolean $assertionsDisabled>	[entry: r1 i1 d0 ]	[exit: r1 i1 d0 $z0 ]
if $z0 != 0 goto i1 = i1 + 1............	[entry: r1 i1 d0 $z0 ]	[exit: r1 i1 d0 ]
$d1 = staticinvoke <Maths.Floor: double floor(double)>(d0)	[entry: r1 i1 d0 ]	[exit: r1 i1 $d1 d0 ]
$d2 = staticinvoke <java.lang.Math: double floor(double)>(d0)	[entry: r1 i1 $d1 d0 ]	[exit: r1 i1 $d1 $d2 ]
$b0 = $d1 cmpl $d2......................	[entry: r1 i1 $d1 $d2 ]	[exit: r1 i1 $b0 ]
if $b0 == 0 goto i1 = i1 + 1............	[entry: r1 i1 $b0 ]	[exit: r1 i1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i1 = i1 + 1.............................	[entry: r1 i1 ]	[exit: r1 i1 ]
goto [?= (branch)]......................	[entry: r1 i1 ]	[exit: r1 i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Floor, Method Name: floor, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
$i0 = (int) d0..........................	[entry: d0 ]	[exit: d0 $i0 ]
$d1 = (double) $i0......................	[entry: d0 $i0 ]	[exit: d0 $d1 ]
$d2 = d0 - $d1..........................	[entry: d0 $d1 ]	[exit: d0 $d2 ]
$b1 = $d2 cmpl 0.0......................	[entry: d0 $d2 ]	[exit: d0 $b1 ]
if $b1 != 0 goto $i2 = (int) d0.........	[entry: d0 $b1 ]	[exit: d0 ]
return d0...............................	[entry: d0 ]	[exit: ]
$i2 = (int) d0..........................	[entry: d0 ]	[exit: d0 $i2 ]
$d3 = (double) $i2......................	[entry: d0 $i2 ]	[exit: d0 $d3 ]
$d4 = d0 - $d3..........................	[entry: d0 $d3 ]	[exit: d0 $d4 ]
$b3 = $d4 cmpl 0.0......................	[entry: d0 $d4 ]	[exit: d0 $b3 ]
if $b3 <= 0 goto $i4 = (int) d0.........	[entry: d0 $b3 ]	[exit: d0 ]
$i6 = (int) d0..........................	[entry: d0 ]	[exit: $i6 ]
$d6 = (double) $i6......................	[entry: $i6 ]	[exit: $d6 ]
return $d6..............................	[entry: $d6 ]	[exit: ]
$i4 = (int) d0..........................	[entry: d0 ]	[exit: $i4 ]
$i5 = $i4 - 1...........................	[entry: $i4 ]	[exit: $i5 ]
$d5 = (double) $i5......................	[entry: $i5 ]	[exit: $d5 ]
return $d5..............................	[entry: $d5 ]	[exit: ]
********************
Class Name: Maths.FindMax, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: r1 ]	[exit: r1 $i0 ]
i1 = $i0 + 1............................	[entry: r1 $i0 ]	[exit: r1 i1 ]
r2 = newarray (int)[i1].................	[entry: r1 i1 ]	[exit: r2 r1 i1 ]
i6 = 0..................................	[entry: r2 r1 i1 ]	[exit: r2 r1 i6 i1 ]
if i6 >= i1 goto $z0 = <Maths.FindMax: boolean $assertionsDisabled>	[entry: r2 r1 i6 i1 ]	[exit: r2 i1 i6 r1 ]
$i4 = virtualinvoke r1.<java.util.Random: int nextInt()>()	[entry: i1 r2 i6 r1 ]	[exit: r1 i1 r2 i6 $i4 ]
$i5 = $i4 % 100.........................	[entry: r1 i1 r2 i6 $i4 ]	[exit: r1 i1 r2 i6 $i5 ]
r2[i6] = $i5............................	[entry: r1 i1 r2 i6 $i5 ]	[exit: r2 r1 i1 i6 ]
i6 = i6 + 1.............................	[entry: r2 r1 i1 i6 ]	[exit: r2 r1 i6 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 i6 i1 ]	[exit: r2 r1 i6 i1 ]
$z0 = <Maths.FindMax: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z0 ]
if $z0 != 0 goto return.................	[entry: r2 $z0 ]	[exit: r2 ]
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: r2 ]	[exit: r2 $r3 ]
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt max()>()	[entry: r2 $r3 ]	[exit: r2 $r4 ]
$i2 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()	[entry: r2 $r4 ]	[exit: $i2 r2 ]
$i3 = staticinvoke <Maths.FindMax: int findMax(int[])>(r2)	[entry: $i2 r2 ]	[exit: $i2 $i3 ]
if $i2 == $i3 goto return...............	[entry: $i2 $i3 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.FindMax, Method Name: findMax, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i2 = r0[0]..............................	[entry: r0 ]	[exit: i2 r0 ]
i3 = 1..................................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
$i0 = lengthof r0.......................	[entry: i2 i3 r0 ]	[exit: i2 r0 i3 $i0 ]
if i3 >= $i0 goto return i2.............	[entry: i2 r0 i3 $i0 ]	[exit: i2 r0 i3 ]
$i1 = r0[i3]............................	[entry: i2 r0 i3 ]	[exit: r0 i3 $i1 i2 ]
if $i1 <= i2 goto i3 = i3 + 1...........	[entry: r0 i3 $i1 i2 ]	[exit: i2 r0 i3 ]
i2 = r0[i3].............................	[entry: r0 i3 ]	[exit: i2 r0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r0 i3 ]	[exit: i2 i3 r0 ]
goto [?= $i0 = lengthof r0].............	[entry: i2 i3 r0 ]	[exit: i2 i3 r0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Maths.SumOfDigits, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i6 = staticinvoke <Maths.SumOfDigits: int sumOfDigits(int)>(-123)	[entry: ]	[exit: $i6 ]
if $i6 != 6 goto $r1 = new java.lang.AssertionError	[entry: $i6 ]	[exit: ]
$i7 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsRecursion(int)>(-123)	[entry: ]	[exit: $i7 ]
if $i7 != 6 goto $r1 = new java.lang.AssertionError	[entry: $i7 ]	[exit: ]
$i8 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsFast(int)>(-123)	[entry: ]	[exit: $i8 ]
if $i8 == 6 goto $z1 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: $i8 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z1 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i3 = staticinvoke <Maths.SumOfDigits: int sumOfDigits(int)>(0)	[entry: ]	[exit: $i3 ]
if $i3 != 0 goto $r2 = new java.lang.AssertionError	[entry: $i3 ]	[exit: ]
$i4 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsRecursion(int)>(0)	[entry: ]	[exit: $i4 ]
if $i4 != 0 goto $r2 = new java.lang.AssertionError	[entry: $i4 ]	[exit: ]
$i5 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsFast(int)>(0)	[entry: ]	[exit: $i5 ]
if $i5 == 0 goto $z2 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: $i5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.SumOfDigits: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto return.................	[entry: $z2 ]	[exit: ]
$i0 = staticinvoke <Maths.SumOfDigits: int sumOfDigits(int)>(12345)	[entry: ]	[exit: $i0 ]
if $i0 != 15 goto $r3 = new java.lang.AssertionError	[entry: $i0 ]	[exit: ]
$i1 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsRecursion(int)>(12345)	[entry: ]	[exit: $i1 ]
if $i1 != 15 goto $r3 = new java.lang.AssertionError	[entry: $i1 ]	[exit: ]
$i2 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsFast(int)>(12345)	[entry: ]	[exit: $i2 ]
if $i2 == 15 goto return................	[entry: $i2 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.SumOfDigits, Method Name: sumOfDigits, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
if i1 >= 0 goto $i2 = i1................	[entry: i1 ]	[exit: i1 ]
$i2 = neg i1............................	[entry: i1 ]	[exit: $i2 ]
goto [?= i3 = $i2]......................	[entry: $i2 ]	[exit: $i2 ]
$i2 = i1................................	[entry: i1 ]	[exit: $i2 ]
i3 = $i2................................	[entry: $i2 ]	[exit: i3 ]
i4 = 0..................................	[entry: i3 ]	[exit: i4 i3 ]
if i3 == 0 goto return i4...............	[entry: i4 i3 ]	[exit: i4 i3 ]
$i0 = i3 % 10...........................	[entry: i4 i3 ]	[exit: i3 i4 $i0 ]
i4 = i4 + $i0...........................	[entry: i3 i4 $i0 ]	[exit: i4 i3 ]
i3 = i3 / 10............................	[entry: i4 i3 ]	[exit: i4 i3 ]
goto [?= (branch)]......................	[entry: i4 i3 ]	[exit: i4 i3 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: Maths.SumOfDigits, Method Name: sumOfDigitsRecursion, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i3 := @parameter0: int..................	[entry: ]	[exit: i3 ]
if i3 >= 0 goto $i4 = i3................	[entry: i3 ]	[exit: i3 ]
$i4 = neg i3............................	[entry: i3 ]	[exit: $i4 ]
goto [?= i5 = $i4]......................	[entry: $i4 ]	[exit: $i4 ]
$i4 = i3................................	[entry: i3 ]	[exit: $i4 ]
i5 = $i4................................	[entry: $i4 ]	[exit: i5 ]
if i5 >= 10 goto $i1 = i5 % 10..........	[entry: i5 ]	[exit: i5 ]
$i6 = i5................................	[entry: i5 ]	[exit: $i6 ]
goto [?= return $i6]....................	[entry: $i6 ]	[exit: $i6 ]
$i1 = i5 % 10...........................	[entry: i5 ]	[exit: $i1 i5 ]
$i0 = i5 / 10...........................	[entry: $i1 i5 ]	[exit: $i1 $i0 ]
$i2 = staticinvoke <Maths.SumOfDigits: int sumOfDigitsRecursion(int)>($i0)	[entry: $i1 $i0 ]	[exit: $i1 $i2 ]
$i6 = $i1 + $i2.........................	[entry: $i1 $i2 ]	[exit: $i6 ]
return $i6..............................	[entry: $i6 ]	[exit: ]
********************
Class Name: Maths.SumOfDigits, Method Name: sumOfDigitsFast, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i2 := @parameter0: int..................	[entry: ]	[exit: i2 ]
if i2 >= 0 goto $i3 = i2................	[entry: i2 ]	[exit: i2 ]
$i3 = neg i2............................	[entry: i2 ]	[exit: $i3 ]
goto [?= i4 = $i3]......................	[entry: $i3 ]	[exit: $i3 ]
$i3 = i2................................	[entry: i2 ]	[exit: $i3 ]
i4 = $i3................................	[entry: $i3 ]	[exit: i4 ]
$r0 = new java.lang.StringBuilder.......	[entry: i4 ]	[exit: i4 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i4 $r0 ]	[exit: i4 $r0 ]
$r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: i4 $r0 ]	[exit: $r1 ]
$r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")	[entry: $r1 ]	[exit: $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 ]	[exit: $r3 ]
r4 = virtualinvoke $r3.<java.lang.String: char[] toCharArray()>()	[entry: $r3 ]	[exit: r4 ]
i5 = 0..................................	[entry: r4 ]	[exit: i5 r4 ]
i6 = 0..................................	[entry: i5 r4 ]	[exit: i5 i6 r4 ]
$i7 = lengthof r4.......................	[entry: i5 i6 r4 ]	[exit: i5 r4 i6 $i7 ]
if i6 >= $i7 goto return i5.............	[entry: i5 r4 i6 $i7 ]	[exit: i5 r4 i6 ]
$c0 = r4[i6]............................	[entry: i5 r4 i6 ]	[exit: r4 i6 i5 $c0 ]
$i1 = $c0 - 48..........................	[entry: r4 i6 i5 $c0 ]	[exit: r4 i6 i5 $i1 ]
i5 = i5 + $i1...........................	[entry: r4 i6 i5 $i1 ]	[exit: i5 r4 i6 ]
i6 = i6 + 1.............................	[entry: i5 r4 i6 ]	[exit: i5 i6 r4 ]
goto [?= $i7 = lengthof r4].............	[entry: i5 i6 r4 ]	[exit: i5 i6 r4 ]
return i5...............................	[entry: i5 ]	[exit: ]
********************
Class Name: Maths.ParseInteger, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i6 = staticinvoke <Maths.ParseInteger: int parseInt(java.lang.String)>("123")	[entry: ]	[exit: $i6 ]
$i7 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("123")	[entry: $i6 ]	[exit: $i6 $i7 ]
if $i6 == $i7 goto $z1 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $i6 $i7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i4 = staticinvoke <Maths.ParseInteger: int parseInt(java.lang.String)>("-123")	[entry: ]	[exit: $i4 ]
$i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("-123")	[entry: $i4 ]	[exit: $i4 $i5 ]
if $i4 == $i5 goto $z2 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $i4 $i5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$i2 = staticinvoke <Maths.ParseInteger: int parseInt(java.lang.String)>("0123")	[entry: ]	[exit: $i2 ]
$i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("0123")	[entry: $i2 ]	[exit: $i2 $i3 ]
if $i2 == $i3 goto $z3 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: $i2 $i3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.ParseInteger: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$i0 = staticinvoke <Maths.ParseInteger: int parseInt(java.lang.String)>("+123")	[entry: ]	[exit: $i0 ]
$i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>("+123")	[entry: $i0 ]	[exit: $i0 $i1 ]
if $i0 == $i1 goto return...............	[entry: $i0 $i1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.ParseInteger, Method Name: parseInt, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String.....	[entry: ]	[exit: r0 ]
if r0 == null goto $r1 = new java.lang.NumberFormatException	[entry: r0 ]	[exit: r0 ]
$i0 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 != 0 goto $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: r0 $i0 ]	[exit: r0 ]
$r1 = new java.lang.NumberFormatException	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.NumberFormatException: void <init>(java.lang.String)>("null")	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: r0 ]	[exit: r0 $c1 ]
if $c1 != 45 goto $z3 = 0...............	[entry: r0 $c1 ]	[exit: r0 ]
$z3 = 1.................................	[entry: r0 ]	[exit: r0 $z3 ]
goto [?= z0 = $z3]......................	[entry: r0 $z3 ]	[exit: r0 $z3 ]
$z3 = 0.................................	[entry: r0 ]	[exit: r0 $z3 ]
z0 = $z3................................	[entry: r0 $z3 ]	[exit: z0 r0 ]
$c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)	[entry: z0 r0 ]	[exit: r0 z0 $c2 ]
if $c2 != 43 goto $z4 = 0...............	[entry: r0 z0 $c2 ]	[exit: r0 z0 ]
$z4 = 1.................................	[entry: r0 z0 ]	[exit: r0 z0 $z4 ]
goto [?= z1 = $z4]......................	[entry: r0 z0 $z4 ]	[exit: r0 z0 $z4 ]
$z4 = 0.................................	[entry: r0 z0 ]	[exit: r0 z0 $z4 ]
z1 = $z4................................	[entry: r0 z0 $z4 ]	[exit: r0 z1 z0 ]
i8 = 0..................................	[entry: r0 z1 z0 ]	[exit: i8 r0 z1 z0 ]
if z0 == 0 goto (branch)................	[entry: i8 r0 z1 z0 ]	[exit: i8 z0 r0 z1 ]
$b9 = 1.................................	[entry: i8 z0 r0 ]	[exit: i8 z0 r0 $b9 ]
goto [?= i10 = $b9].....................	[entry: i8 z0 r0 $b9 ]	[exit: i8 z0 r0 $b9 ]
if z1 == 0 goto $b9 = 0.................	[entry: i8 z0 r0 z1 ]	[exit: i8 z0 r0 ]
$b9 = 1.................................	[entry: i8 z0 r0 ]	[exit: i8 z0 r0 $b9 ]
goto [?= i10 = $b9].....................	[entry: i8 z0 r0 $b9 ]	[exit: i8 z0 r0 $b9 ]
$b9 = 0.................................	[entry: i8 z0 r0 ]	[exit: i8 z0 r0 $b9 ]
i10 = $b9...............................	[entry: i8 z0 r0 $b9 ]	[exit: i8 z0 i10 r0 ]
i3 = virtualinvoke r0.<java.lang.String: int length()>()	[entry: i8 z0 i10 r0 ]	[exit: r0 i8 z0 i10 i3 ]
if i10 >= i3 goto (branch)..............	[entry: r0 i8 z0 i10 i3 ]	[exit: z0 i3 i8 i10 r0 ]
$c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10)	[entry: z0 i3 i8 i10 r0 ]	[exit: r0 z0 i3 i10 i8 $c4 ]
$z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c4)	[entry: r0 z0 i3 i10 i8 $c4 ]	[exit: r0 z0 i3 i10 i8 $z2 ]
if $z2 != 0 goto $i5 = i8 * 10..........	[entry: r0 z0 i3 i10 i8 $z2 ]	[exit: r0 z0 i3 i10 i8 ]
$r2 = new java.lang.NumberFormatException	[entry: r0 ]	[exit: $r2 r0 ]
$r3 = new java.lang.StringBuilder.......	[entry: $r2 r0 ]	[exit: $r2 r0 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: $r2 r0 $r3 ]	[exit: $r2 r0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s=")	[entry: $r2 r0 $r3 ]	[exit: $r2 r0 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)	[entry: $r2 r0 $r4 ]	[exit: $r2 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r2 $r5 ]	[exit: $r6 $r2 ]
specialinvoke $r2.<java.lang.NumberFormatException: void <init>(java.lang.String)>($r6)	[entry: $r6 $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$i5 = i8 * 10...........................	[entry: z0 i3 i10 r0 i8 ]	[exit: z0 i3 $i5 i10 r0 ]
$c6 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i10)	[entry: z0 i3 $i5 i10 r0 ]	[exit: r0 z0 i3 i10 $i5 $c6 ]
$i7 = $i5 + $c6.........................	[entry: r0 z0 i3 i10 $i5 $c6 ]	[exit: r0 z0 i3 i10 $i7 ]
i8 = $i7 - 48...........................	[entry: r0 z0 i3 i10 $i7 ]	[exit: r0 i8 z0 i3 i10 ]
i10 = i10 + 1...........................	[entry: r0 i8 z0 i3 i10 ]	[exit: r0 i8 z0 i10 i3 ]
goto [?= (branch)]......................	[entry: r0 i8 z0 i10 i3 ]	[exit: r0 i8 z0 i10 i3 ]
if z0 == 0 goto $i11 = i8...............	[entry: i8 z0 ]	[exit: i8 ]
$i11 = neg i8...........................	[entry: i8 ]	[exit: $i11 ]
goto [?= return $i11]...................	[entry: $i11 ]	[exit: $i11 ]
$i11 = i8...............................	[entry: i8 ]	[exit: $i11 ]
return $i11.............................	[entry: $i11 ]	[exit: ]
********************
Class Name: Maths.PrimeFactorization, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r11 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("## all prime factors ##")	[entry: $r0 ]	[exit: ]
$r1 = new java.util.Scanner.............	[entry: ]	[exit: $r1 ]
$r2 = <java.lang.System: java.io.InputStream in>	[entry: $r1 ]	[exit: $r2 $r1 ]
specialinvoke $r1.<java.util.Scanner: void <init>(java.io.InputStream)>($r2)	[entry: $r2 $r1 ]	[exit: $r1 ]
r3 = $r1................................	[entry: $r1 ]	[exit: r3 ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: r3 ]	[exit: r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: void print(java.lang.String)>("Enter a number: ")	[entry: r3 $r4 ]	[exit: r3 ]
i0 = virtualinvoke r3.<java.util.Scanner: int nextInt()>()	[entry: r3 ]	[exit: r3 i0 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: r3 i0 ]	[exit: r3 $r6 i0 ]
$r5 = new java.lang.StringBuilder.......	[entry: r3 $r6 i0 ]	[exit: r3 $r6 i0 $r5 ]
specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()	[entry: r3 $r6 i0 $r5 ]	[exit: r3 $r6 i0 $r5 ]
$r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("printing factors of ")	[entry: r3 $r6 i0 $r5 ]	[exit: r3 $r6 i0 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r3 $r6 i0 $r7 ]	[exit: r3 i0 $r6 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : ")	[entry: r3 i0 $r6 $r8 ]	[exit: r3 i0 $r6 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r3 i0 $r6 $r9 ]	[exit: r3 i0 $r10 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>($r10)	[entry: r3 i0 $r10 $r6 ]	[exit: r3 i0 ]
staticinvoke <Maths.PrimeFactorization: void pfactors(int)>(i0)	[entry: r3 i0 ]	[exit: r3 ]
virtualinvoke r3.<java.util.Scanner: void close()>()	[entry: r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PrimeFactorization, Method Name: pfactors, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i3 := @parameter0: int..................	[entry: ]	[exit: i3 ]
$i0 = i3 % 2............................	[entry: i3 ]	[exit: i3 $i0 ]
if $i0 != 0 goto i4 = 3.................	[entry: i3 $i0 ]	[exit: i3 ]
$r6 = <java.lang.System: java.io.PrintStream out>	[entry: i3 ]	[exit: i3 $r6 ]
virtualinvoke $r6.<java.io.PrintStream: void print(java.lang.String)>("2 ")	[entry: i3 $r6 ]	[exit: i3 ]
i3 = i3 / 2.............................	[entry: i3 ]	[exit: i3 ]
goto [?= $i0 = i3 % 2]..................	[entry: i3 ]	[exit: i3 ]
i4 = 3..................................	[entry: i3 ]	[exit: i3 i4 ]
$d1 = (double) i4.......................	[entry: i3 i4 ]	[exit: i4 $d1 i3 ]
$d0 = (double) i3.......................	[entry: i4 $d1 i3 ]	[exit: i3 i4 $d1 $d0 ]
$d2 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i3 i4 $d1 $d0 ]	[exit: i3 i4 $d1 $d2 ]
$b1 = $d1 cmpg $d2......................	[entry: i3 i4 $d1 $d2 ]	[exit: i3 i4 $b1 ]
if $b1 > 0 goto (branch)................	[entry: i3 i4 $b1 ]	[exit: i3 i4 ]
$i2 = i3 % i4...........................	[entry: i3 i4 ]	[exit: i3 i4 $i2 ]
if $i2 != 0 goto i4 = i4 + 2............	[entry: i3 i4 $i2 ]	[exit: i3 i4 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: i3 i4 ]	[exit: i3 $r2 i4 ]
$r1 = new java.lang.StringBuilder.......	[entry: i3 $r2 i4 ]	[exit: i3 $r2 i4 $r1 ]
specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()	[entry: i3 $r2 i4 $r1 ]	[exit: i3 $r2 i4 $r1 ]
$r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: i3 $r2 i4 $r1 ]	[exit: i3 i4 $r2 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")	[entry: i3 i4 $r2 $r3 ]	[exit: i3 i4 $r2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i3 i4 $r2 $r4 ]	[exit: i3 i4 $r5 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void print(java.lang.String)>($r5)	[entry: i3 i4 $r5 $r2 ]	[exit: i3 i4 ]
i3 = i3 / i4............................	[entry: i3 i4 ]	[exit: i3 i4 ]
goto [?= $i2 = i3 % i4].................	[entry: i3 i4 ]	[exit: i3 i4 ]
i4 = i4 + 2.............................	[entry: i3 i4 ]	[exit: i3 i4 ]
goto [?= $d1 = (double) i4].............	[entry: i3 i4 ]	[exit: i3 i4 ]
if i3 <= 2 goto return..................	[entry: i3 ]	[exit: i3 ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: i3 ]	[exit: i3 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void print(int)>(i3)	[entry: i3 $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PowRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$l6 = staticinvoke <Maths.PowRecursion: long pow(int,int)>(2, 0)	[entry: ]	[exit: $l6 ]
$d6 = (double) $l6......................	[entry: $l6 ]	[exit: $d6 ]
$d7 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 0.0)	[entry: $d6 ]	[exit: $d6 $d7 ]
$i7 = staticinvoke <java.lang.Double: int compare(double,double)>($d6, $d7)	[entry: $d6 $d7 ]	[exit: $i7 ]
if $i7 == 0 goto $z1 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $i7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$l4 = staticinvoke <Maths.PowRecursion: long pow(int,int)>(0, 2)	[entry: ]	[exit: $l4 ]
$d4 = (double) $l4......................	[entry: $l4 ]	[exit: $d4 ]
$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(0.0, 2.0)	[entry: $d4 ]	[exit: $d4 $d5 ]
$i5 = staticinvoke <java.lang.Double: int compare(double,double)>($d4, $d5)	[entry: $d4 $d5 ]	[exit: $i5 ]
if $i5 == 0 goto $z2 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $i5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$l2 = staticinvoke <Maths.PowRecursion: long pow(int,int)>(2, 10)	[entry: ]	[exit: $l2 ]
$d2 = (double) $l2......................	[entry: $l2 ]	[exit: $d2 ]
$d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 10.0)	[entry: $d2 ]	[exit: $d2 $d3 ]
$i3 = staticinvoke <java.lang.Double: int compare(double,double)>($d2, $d3)	[entry: $d2 $d3 ]	[exit: $i3 ]
if $i3 == 0 goto $z3 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.PowRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$l0 = staticinvoke <Maths.PowRecursion: long pow(int,int)>(10, 2)	[entry: ]	[exit: $l0 ]
$d0 = (double) $l0......................	[entry: $l0 ]	[exit: $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, 2.0)	[entry: $d0 ]	[exit: $d0 $d1 ]
$i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, $d1)	[entry: $d0 $d1 ]	[exit: $i1 ]
if $i1 == 0 goto return.................	[entry: $i1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PowRecursion, Method Name: pow, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i0 := @parameter1: int..................	[entry: i1 ]	[exit: i1 i0 ]
if i0 != 0 goto $l3 = (long) i1.........	[entry: i1 i0 ]	[exit: i0 i1 ]
$l5 = 1L................................	[entry: ]	[exit: $l5 ]
goto [?= return $l5]....................	[entry: $l5 ]	[exit: $l5 ]
$l3 = (long) i1.........................	[entry: i0 i1 ]	[exit: $l3 i1 i0 ]
$i2 = i0 - 1............................	[entry: $l3 i1 i0 ]	[exit: $l3 i1 $i2 ]
$l4 = staticinvoke <Maths.PowRecursion: long pow(int,int)>(i1, $i2)	[entry: $l3 i1 $i2 ]	[exit: $l3 $l4 ]
$l5 = $l3 * $l4.........................	[entry: $l3 $l4 ]	[exit: $l5 ]
return $l5..............................	[entry: $l5 ]	[exit: ]
********************
Class Name: Maths.GCDRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
$i0 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>(20, 15)	[entry: $r0 ]	[exit: $i0 $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(int)>($i0)	[entry: $i0 $r0 ]	[exit: ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
$i1 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>(10, 8)	[entry: $r1 ]	[exit: $i1 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(int)>($i1)	[entry: $i1 $r1 ]	[exit: ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r2 ]
$i2 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>(10, 5)	[entry: $r2 ]	[exit: $r2 $i2 ]
$i3 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>(5, 10)	[entry: $r2 $i2 ]	[exit: $r2 $i2 $i3 ]
$i4 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>($i2, $i3)	[entry: $r2 $i2 $i3 ]	[exit: $i4 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(int)>($i4)	[entry: $i4 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.GCDRecursion, Method Name: gcd, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
if i0 < 0 goto $r0 = new java.lang.ArithmeticException	[entry: i1 i0 ]	[exit: i0 i1 ]
if i1 >= 0 goto (branch)................	[entry: i0 i1 ]	[exit: i1 i0 ]
$r0 = new java.lang.ArithmeticException.	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.ArithmeticException: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
if i0 == 0 goto $i2 = i0 - i1...........	[entry: i1 i0 ]	[exit: i0 i1 ]
if i1 != 0 goto $i4 = i0 % i1...........	[entry: i0 i1 ]	[exit: i0 i1 ]
$i2 = i0 - i1...........................	[entry: i0 i1 ]	[exit: $i2 ]
$i3 = staticinvoke <java.lang.Math: int abs(int)>($i2)	[entry: $i2 ]	[exit: $i3 ]
return $i3..............................	[entry: $i3 ]	[exit: ]
$i4 = i0 % i1...........................	[entry: i0 i1 ]	[exit: i1 i0 $i4 ]
if $i4 != 0 goto $i5 = i0 % i1..........	[entry: i1 i0 $i4 ]	[exit: i1 i0 ]
return i1...............................	[entry: i1 ]	[exit: ]
$i5 = i0 % i1...........................	[entry: i0 i1 ]	[exit: i1 $i5 ]
$i6 = staticinvoke <Maths.GCDRecursion: int gcd(int,int)>(i1, $i5)	[entry: i1 $i5 ]	[exit: $i6 ]
return $i6..............................	[entry: $i6 ]	[exit: ]
********************
Class Name: Maths.VampireNumber, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Maths.VampireNumber: void test(int,int)>(10, 1000)	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.VampireNumber, Method Name: test, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
i3 = 1..................................	[entry: i1 i0 ]	[exit: i3 i1 i0 ]
$r0 = new java.lang.StringBuilder.......	[entry: i3 i1 i0 ]	[exit: i3 i1 i0 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i3 i1 i0 $r0 ]	[exit: i3 i1 i0 $r0 ]
r1 = $r0................................	[entry: i3 i1 i0 $r0 ]	[exit: r1 i3 i1 i0 ]
i4 = i0.................................	[entry: r1 i3 i1 i0 ]	[exit: r1 i3 i4 i1 ]
if i4 > i1 goto $r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 i3 i4 i1 ]	[exit: r1 i3 i1 i4 ]
i5 = i4.................................	[entry: r1 i3 i1 i4 ]	[exit: r1 i4 i3 i5 i1 ]
if i5 > i1 goto i4 = i4 + 1.............	[entry: r1 i4 i3 i5 i1 ]	[exit: r1 i3 i1 i4 i5 ]
$z0 = staticinvoke <Maths.VampireNumber: boolean isVampireNumber(int,int,boolean)>(i4, i5, 1)	[entry: r1 i1 i3 i4 i5 ]	[exit: r1 i4 i1 i5 i3 $z0 ]
if $z0 == 0 goto i5 = i5 + 1............	[entry: r1 i4 i1 i5 i3 $z0 ]	[exit: r1 i4 i3 i1 i5 ]
i3 = i3 + 1.............................	[entry: i1 r1 i5 i4 i3 ]	[exit: i1 r1 i5 i4 i3 ]
$r3 = new java.lang.StringBuilder.......	[entry: i1 r1 i5 i4 i3 ]	[exit: i1 r1 i5 i4 i3 $r3 ]
specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()	[entry: i1 r1 i5 i4 i3 $r3 ]	[exit: i1 r1 i5 i4 i3 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")	[entry: i1 r1 i5 i4 i3 $r3 ]	[exit: i1 r1 i5 i4 i3 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)	[entry: i1 r1 i5 i4 i3 $r4 ]	[exit: i3 i1 r1 i5 i4 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": = ( ")	[entry: i3 i1 r1 i5 i4 $r5 ]	[exit: i3 i1 r1 i5 i4 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: i3 i1 r1 i5 i4 $r6 ]	[exit: i3 i1 r1 i4 i5 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")	[entry: i3 i1 r1 i4 i5 $r7 ]	[exit: i3 i1 r1 i4 i5 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i5)	[entry: i3 i1 r1 i4 i5 $r8 ]	[exit: i3 i1 r1 i4 i5 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" = ")	[entry: i3 i1 r1 i4 i5 $r9 ]	[exit: i3 i1 r1 $r10 i4 i5 ]
$i2 = i4 * i5...........................	[entry: i3 i1 r1 $r10 i4 i5 ]	[exit: i4 i3 i1 i5 r1 $i2 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)	[entry: i4 i3 i1 i5 r1 $i2 $r10 ]	[exit: i4 i3 i1 i5 r1 $r11 ]
$r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\n")	[entry: i4 i3 i1 i5 r1 $r11 ]	[exit: i4 i3 i1 i5 r1 $r12 ]
$r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i4 i3 i1 i5 r1 $r12 ]	[exit: i4 i3 i1 i5 $r13 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13)	[entry: i4 i3 i1 i5 $r13 r1 ]	[exit: r1 i4 i3 i1 i5 ]
i5 = i5 + 1.............................	[entry: r1 i4 i3 i1 i5 ]	[exit: r1 i4 i3 i5 i1 ]
goto [?= (branch)]......................	[entry: r1 i4 i3 i5 i1 ]	[exit: r1 i4 i3 i5 i1 ]
i4 = i4 + 1.............................	[entry: r1 i3 i1 i4 ]	[exit: r1 i3 i4 i1 ]
goto [?= (branch)]......................	[entry: r1 i3 i4 i1 ]	[exit: r1 i3 i4 i1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: r1 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(java.lang.Object)>(r1)	[entry: r1 $r2 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.VampireNumber, Method Name: isVampireNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
z0 := @parameter2: boolean..............	[entry: i1 i0 ]	[exit: i1 i0 z0 ]
if z0 == 0 goto $i2 = i0 * i1...........	[entry: i1 i0 z0 ]	[exit: i1 i0 ]
$i3 = i0 * 10...........................	[entry: i1 i0 ]	[exit: i0 $i3 i1 ]
if $i3 <= i1 goto return 0..............	[entry: i0 $i3 i1 ]	[exit: i0 i1 ]
$i4 = i1 * 10...........................	[entry: i0 i1 ]	[exit: i1 $i4 i0 ]
if $i4 > i0 goto $i2 = i0 * i1..........	[entry: i1 $i4 i0 ]	[exit: i0 i1 ]
return 0................................	[entry: ]	[exit: ]
$i2 = i0 * i1...........................	[entry: i0 i1 ]	[exit: i0 i1 $i2 ]
r0 = staticinvoke <Maths.VampireNumber: java.lang.String splitIntoDigits(int,int)>($i2, 0)	[entry: i0 i1 $i2 ]	[exit: r0 i0 i1 ]
r1 = staticinvoke <Maths.VampireNumber: java.lang.String splitIntoDigits(int,int)>(i0, i1)	[entry: r0 i0 i1 ]	[exit: r1 r0 ]
$z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1)	[entry: r1 r0 ]	[exit: $z1 ]
return $z1..............................	[entry: $z1 ]	[exit: ]
********************
Class Name: Maths.VampireNumber, Method Name: splitIntoDigits, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i3 := @parameter0: int..................	[entry: ]	[exit: i3 ]
i4 := @parameter1: int..................	[entry: i3 ]	[exit: i4 i3 ]
$r0 = new java.lang.StringBuilder.......	[entry: i4 i3 ]	[exit: i4 i3 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i4 i3 $r0 ]	[exit: i4 i3 $r0 ]
r1 = $r0................................	[entry: i4 i3 $r0 ]	[exit: r1 i4 i3 ]
$r2 = new java.util.ArrayList...........	[entry: r1 i4 i3 ]	[exit: r1 i4 i3 $r2 ]
specialinvoke $r2.<java.util.ArrayList: void <init>()>()	[entry: r1 i4 i3 $r2 ]	[exit: r1 i4 i3 $r2 ]
r3 = $r2................................	[entry: r1 i4 i3 $r2 ]	[exit: r1 r3 i4 i3 ]
if i3 <= 0 goto (branch)................	[entry: r1 r3 i4 i3 ]	[exit: r1 r3 i4 i3 ]
$i2 = i3 % 10...........................	[entry: r1 i4 r3 i3 ]	[exit: r1 i4 i3 r3 $i2 ]
$r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)	[entry: r1 i4 i3 r3 $i2 ]	[exit: r1 i4 i3 $r10 r3 ]
virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r10)	[entry: r1 i4 i3 $r10 r3 ]	[exit: r1 r3 i4 i3 ]
i3 = i3 / 10............................	[entry: r1 r3 i4 i3 ]	[exit: r1 r3 i4 i3 ]
goto [?= (branch)]......................	[entry: r1 r3 i4 i3 ]	[exit: r1 r3 i4 i3 ]
if i4 <= 0 goto staticinvoke <java.util.Collections: void sort(java.util.List)>(r3)	[entry: r1 r3 i4 ]	[exit: r1 r3 i4 ]
$i1 = i4 % 10...........................	[entry: r1 r3 i4 ]	[exit: r1 i4 r3 $i1 ]
$r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)	[entry: r1 i4 r3 $i1 ]	[exit: r1 i4 $r9 r3 ]
virtualinvoke r3.<java.util.ArrayList: boolean add(java.lang.Object)>($r9)	[entry: r1 i4 $r9 r3 ]	[exit: r1 r3 i4 ]
i4 = i4 / 10............................	[entry: r1 r3 i4 ]	[exit: r1 r3 i4 ]
goto [?= (branch)]......................	[entry: r1 r3 i4 ]	[exit: r1 r3 i4 ]
staticinvoke <java.util.Collections: void sort(java.util.List)>(r3)	[entry: r1 r3 ]	[exit: r1 r3 ]
r4 = virtualinvoke r3.<java.util.ArrayList: java.util.Iterator iterator()>()	[entry: r1 r3 ]	[exit: r1 r4 ]
$z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()	[entry: r1 r4 ]	[exit: r1 r4 $z0 ]
if $z0 == 0 goto $r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 r4 $z0 ]	[exit: r1 r4 ]
$r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()	[entry: r1 r4 ]	[exit: r4 r1 $r6 ]
$r7 = (java.lang.Integer) $r6...........	[entry: r4 r1 $r6 ]	[exit: r4 r1 $r7 ]
i0 = virtualinvoke $r7.<java.lang.Integer: int intValue()>()	[entry: r4 r1 $r7 ]	[exit: r4 i0 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r4 i0 r1 ]	[exit: r1 r4 ]
goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]	[entry: r1 r4 ]	[exit: r1 r4 ]
$r5 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 ]	[exit: $r5 ]
return $r5..............................	[entry: $r5 ]	[exit: ]
********************
Class Name: Maths.Mode, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r19 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$z0 = <Maths.Mode: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r16 = newarray (int)[0]................	[entry: ]	[exit: $r16 ]
$r17 = staticinvoke <Maths.Mode: int[] mode(int[])>($r16)	[entry: $r16 ]	[exit: $r17 ]
if $r17 == null goto $z1 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $r17 ]	[exit: ]
$r18 = new java.lang.AssertionError.....	[entry: ]	[exit: $r18 ]
specialinvoke $r18.<java.lang.AssertionError: void <init>()>()	[entry: $r18 ]	[exit: $r18 ]
throw $r18..............................	[entry: $r18 ]	[exit: ]
$z1 = <Maths.Mode: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$r12 = newarray (int)[1]................	[entry: ]	[exit: $r12 ]
$r12[0] = 5.............................	[entry: $r12 ]	[exit: $r12 ]
$r13 = staticinvoke <Maths.Mode: int[] mode(int[])>($r12)	[entry: $r12 ]	[exit: $r13 ]
$r14 = newarray (int)[1]................	[entry: $r13 ]	[exit: $r13 $r14 ]
$r14[0] = 5.............................	[entry: $r13 $r14 ]	[exit: $r13 $r14 ]
$z8 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r13, $r14)	[entry: $r13 $r14 ]	[exit: $z8 ]
if $z8 != 0 goto $z2 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r15 = new java.lang.AssertionError.....	[entry: ]	[exit: $r15 ]
specialinvoke $r15.<java.lang.AssertionError: void <init>()>()	[entry: $r15 ]	[exit: $r15 ]
throw $r15..............................	[entry: $r15 ]	[exit: ]
$z2 = <Maths.Mode: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$r8 = newarray (int)[5].................	[entry: ]	[exit: $r8 ]
$r8[0] = 1..............................	[entry: $r8 ]	[exit: $r8 ]
$r8[1] = 2..............................	[entry: $r8 ]	[exit: $r8 ]
$r8[2] = 3..............................	[entry: $r8 ]	[exit: $r8 ]
$r8[3] = 4..............................	[entry: $r8 ]	[exit: $r8 ]
$r8[4] = 5..............................	[entry: $r8 ]	[exit: $r8 ]
$r9 = staticinvoke <Maths.Mode: int[] mode(int[])>($r8)	[entry: $r8 ]	[exit: $r9 ]
$r10 = newarray (int)[5]................	[entry: $r9 ]	[exit: $r9 $r10 ]
$r10[0] = 1.............................	[entry: $r9 $r10 ]	[exit: $r9 $r10 ]
$r10[1] = 2.............................	[entry: $r9 $r10 ]	[exit: $r9 $r10 ]
$r10[2] = 3.............................	[entry: $r9 $r10 ]	[exit: $r9 $r10 ]
$r10[3] = 4.............................	[entry: $r9 $r10 ]	[exit: $r9 $r10 ]
$r10[4] = 5.............................	[entry: $r9 $r10 ]	[exit: $r9 $r10 ]
$z7 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r9, $r10)	[entry: $r9 $r10 ]	[exit: $z7 ]
if $z7 != 0 goto $z3 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r11 = new java.lang.AssertionError.....	[entry: ]	[exit: $r11 ]
specialinvoke $r11.<java.lang.AssertionError: void <init>()>()	[entry: $r11 ]	[exit: $r11 ]
throw $r11..............................	[entry: $r11 ]	[exit: ]
$z3 = <Maths.Mode: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r4 = newarray (int)[9].................	[entry: ]	[exit: $r4 ]
$r4[0] = 7..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[1] = 9..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[2] = 9..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[3] = 4..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[4] = 5..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[5] = 6..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[6] = 7..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[7] = 7..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[8] = 8..............................	[entry: $r4 ]	[exit: $r4 ]
$r5 = staticinvoke <Maths.Mode: int[] mode(int[])>($r4)	[entry: $r4 ]	[exit: $r5 ]
$r6 = newarray (int)[1].................	[entry: $r5 ]	[exit: $r5 $r6 ]
$r6[0] = 7..............................	[entry: $r5 $r6 ]	[exit: $r5 $r6 ]
$z6 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r5, $r6)	[entry: $r5 $r6 ]	[exit: $z6 ]
if $z6 != 0 goto $z4 = <Maths.Mode: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z4 = <Maths.Mode: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$r0 = newarray (int)[9].................	[entry: ]	[exit: $r0 ]
$r0[0] = 7..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 9..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 9..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 5..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 6..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 7..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 7..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 9..............................	[entry: $r0 ]	[exit: $r0 ]
$r1 = staticinvoke <Maths.Mode: int[] mode(int[])>($r0)	[entry: $r0 ]	[exit: $r1 ]
$r2 = newarray (int)[2].................	[entry: $r1 ]	[exit: $r1 $r2 ]
$r2[0] = 7..............................	[entry: $r1 $r2 ]	[exit: $r1 $r2 ]
$r2[1] = 9..............................	[entry: $r1 $r2 ]	[exit: $r1 $r2 ]
$z5 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>($r1, $r2)	[entry: $r1 $r2 ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Mode, Method Name: mode, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
$i0 = lengthof r0.......................	[entry: r0 ]	[exit: r0 $i0 ]
if $i0 != 0 goto $r1 = new java.util.HashMap	[entry: r0 $i0 ]	[exit: r0 ]
return null.............................	[entry: ]	[exit: ]
$r1 = new java.util.HashMap.............	[entry: r0 ]	[exit: r0 $r1 ]
specialinvoke $r1.<java.util.HashMap: void <init>()>()	[entry: r0 $r1 ]	[exit: r0 $r1 ]
r2 = $r1................................	[entry: r0 $r1 ]	[exit: r2 r0 ]
r28 = r0................................	[entry: r2 r0 ]	[exit: r2 r28 ]
i4 = lengthof r28.......................	[entry: r2 r28 ]	[exit: r2 r28 i4 ]
i5 = 0..................................	[entry: r2 r28 i4 ]	[exit: r2 r28 i5 i4 ]
if i5 >= i4 goto $r3 = virtualinvoke r2.<java.util.HashMap: java.util.Collection values()>()	[entry: r2 r28 i5 i4 ]	[exit: r2 i4 r28 i5 ]
i6 = r28[i5]............................	[entry: i4 r2 r28 i5 ]	[exit: r28 i4 i5 r2 i6 ]
$r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r28 i4 i5 r2 i6 ]	[exit: r28 i4 i5 i6 $r18 r2 ]
$z2 = virtualinvoke r2.<java.util.HashMap: boolean containsKey(java.lang.Object)>($r18)	[entry: r28 i4 i5 i6 $r18 r2 ]	[exit: r28 i4 i5 r2 i6 $z2 ]
if $z2 == 0 goto $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r28 i4 i5 r2 i6 $z2 ]	[exit: r28 i4 i5 r2 i6 ]
$r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r28 i4 i5 r2 i6 ]	[exit: r28 i4 i5 $r22 r2 i6 ]
$r23 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r28 i4 i5 $r22 r2 i6 ]	[exit: r28 i4 i5 $r22 $r23 r2 ]
$r24 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r23)	[entry: r28 i4 i5 $r22 $r23 r2 ]	[exit: r28 i4 i5 $r22 r2 $r24 ]
$r25 = (java.lang.Integer) $r24.........	[entry: r28 i4 i5 $r22 r2 $r24 ]	[exit: r28 i4 i5 $r22 r2 $r25 ]
$i2 = virtualinvoke $r25.<java.lang.Integer: int intValue()>()	[entry: r28 i4 i5 $r22 r2 $r25 ]	[exit: r28 i4 i5 $r22 r2 $i2 ]
$i3 = $i2 + 1...........................	[entry: r28 i4 i5 $r22 r2 $i2 ]	[exit: r28 i4 i5 $r22 r2 $i3 ]
$r26 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)	[entry: r28 i4 i5 $r22 r2 $i3 ]	[exit: r28 i4 i5 $r22 $r26 r2 ]
virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r22, $r26)	[entry: r28 i4 i5 $r22 $r26 r2 ]	[exit: r2 r28 i4 i5 ]
goto [?= i5 = i5 + 1]...................	[entry: r2 r28 i4 i5 ]	[exit: r2 r28 i4 i5 ]
$r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i6)	[entry: r28 i4 i5 r2 i6 ]	[exit: r28 i4 i5 $r19 r2 ]
$r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1)	[entry: r28 i4 i5 $r19 r2 ]	[exit: r28 i4 i5 $r19 $r20 r2 ]
virtualinvoke r2.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20)	[entry: r28 i4 i5 $r19 $r20 r2 ]	[exit: r2 r28 i4 i5 ]
i5 = i5 + 1.............................	[entry: r2 r28 i4 i5 ]	[exit: r2 r28 i5 i4 ]
goto [?= (branch)]......................	[entry: r2 r28 i5 i4 ]	[exit: r2 r28 i5 i4 ]
$r3 = virtualinvoke r2.<java.util.HashMap: java.util.Collection values()>()	[entry: r2 ]	[exit: r2 $r3 ]
$r4 = staticinvoke <java.util.Collections: java.lang.Object max(java.util.Collection)>($r3)	[entry: r2 $r3 ]	[exit: r2 $r4 ]
$r5 = (java.lang.Integer) $r4...........	[entry: r2 $r4 ]	[exit: r2 $r5 ]
i7 = virtualinvoke $r5.<java.lang.Integer: int intValue()>()	[entry: r2 $r5 ]	[exit: i7 r2 ]
$r6 = new java.util.ArrayList...........	[entry: i7 r2 ]	[exit: i7 r2 $r6 ]
specialinvoke $r6.<java.util.ArrayList: void <init>()>()	[entry: i7 r2 $r6 ]	[exit: i7 r2 $r6 ]
r29 = $r6...............................	[entry: i7 r2 $r6 ]	[exit: r29 i7 r2 ]
$r7 = virtualinvoke r2.<java.util.HashMap: java.util.Set keySet()>()	[entry: r29 i7 r2 ]	[exit: r29 i7 r2 $r7 ]
r30 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()	[entry: r29 i7 r2 $r7 ]	[exit: r29 i7 r2 r30 ]
$z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()	[entry: r29 i7 r2 r30 ]	[exit: r29 i7 r2 r30 $z0 ]
if $z0 == 0 goto $r8 = virtualinvoke r29.<java.util.ArrayList: java.util.stream.Stream stream()>()	[entry: r29 i7 r2 r30 $z0 ]	[exit: r29 i7 r2 r30 ]
$r12 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>()	[entry: r29 i7 r2 r30 ]	[exit: r29 r30 i7 r2 $r12 ]
$r13 = (java.lang.Integer) $r12.........	[entry: r29 r30 i7 r2 $r12 ]	[exit: r29 r30 i7 r2 $r13 ]
i8 = virtualinvoke $r13.<java.lang.Integer: int intValue()>()	[entry: r29 r30 i7 r2 $r13 ]	[exit: r29 r30 i7 r2 i8 ]
$r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)	[entry: r29 r30 i7 r2 i8 ]	[exit: r29 r30 i8 i7 $r14 r2 ]
$r15 = virtualinvoke r2.<java.util.HashMap: java.lang.Object get(java.lang.Object)>($r14)	[entry: r29 r30 i8 i7 $r14 r2 ]	[exit: r29 r2 r30 i8 i7 $r15 ]
$r16 = (java.lang.Integer) $r15.........	[entry: r29 r2 r30 i8 i7 $r15 ]	[exit: r29 r2 r30 i8 i7 $r16 ]
$i1 = virtualinvoke $r16.<java.lang.Integer: int intValue()>()	[entry: r29 r2 r30 i8 i7 $r16 ]	[exit: r29 r2 r30 i8 $i1 i7 ]
if $i1 != i7 goto (branch)..............	[entry: r29 r2 r30 i8 $i1 i7 ]	[exit: r29 i7 r2 r30 i8 ]
$r17 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i8)	[entry: i7 r2 r30 r29 i8 ]	[exit: i7 r2 r30 $r17 r29 ]
virtualinvoke r29.<java.util.ArrayList: boolean add(java.lang.Object)>($r17)	[entry: i7 r2 r30 $r17 r29 ]	[exit: r29 i7 r2 r30 ]
goto [?= $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>()]	[entry: r29 i7 r2 r30 ]	[exit: r29 i7 r2 r30 ]
$r8 = virtualinvoke r29.<java.util.ArrayList: java.util.stream.Stream stream()>()	[entry: r29 ]	[exit: $r8 ]
$r9 = staticinvoke <Maths.Mode$lambda_mode_0__1: java.util.function.ToIntFunction bootstrap$()>()	[entry: $r8 ]	[exit: $r9 $r8 ]
$r10 = interfaceinvoke $r8.<java.util.stream.Stream: java.util.stream.IntStream mapToInt(java.util.function.ToIntFunction)>($r9)	[entry: $r9 $r8 ]	[exit: $r10 ]
$r11 = interfaceinvoke $r10.<java.util.stream.IntStream: int[] toArray()>()	[entry: $r10 ]	[exit: $r11 ]
return $r11.............................	[entry: $r11 ]	[exit: ]
********************
Class Name: Maths.MaxValue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i6 = 1..................................	[entry: r1 ]	[exit: r1 i6 ]
if i6 > 100 goto return.................	[entry: r1 i6 ]	[exit: i6 r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: i6 r1 ]	[exit: i6 r1 $i0 ]
i1 = $i0 - 50...........................	[entry: i6 r1 $i0 ]	[exit: i6 i1 r1 ]
$i2 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: i6 i1 r1 ]	[exit: r1 i6 i1 $i2 ]
i3 = $i2 - 50...........................	[entry: r1 i6 i1 $i2 ]	[exit: r1 i6 i1 i3 ]
$z0 = <Maths.MaxValue: boolean $assertionsDisabled>	[entry: r1 i6 i1 i3 ]	[exit: r1 i6 i1 i3 $z0 ]
if $z0 != 0 goto i6 = i6 + 1............	[entry: r1 i6 i1 i3 $z0 ]	[exit: r1 i6 i1 i3 ]
$i4 = staticinvoke <Maths.MaxValue: int max(int,int)>(i1, i3)	[entry: r1 i6 i1 i3 ]	[exit: r1 i6 $i4 i1 i3 ]
$i5 = staticinvoke <java.lang.Math: int max(int,int)>(i1, i3)	[entry: r1 i6 $i4 i1 i3 ]	[exit: r1 i6 $i4 $i5 ]
if $i4 == $i5 goto i6 = i6 + 1..........	[entry: r1 i6 $i4 $i5 ]	[exit: r1 i6 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i6 = i6 + 1.............................	[entry: r1 i6 ]	[exit: r1 i6 ]
goto [?= (branch)]......................	[entry: r1 i6 ]	[exit: r1 i6 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.MaxValue, Method Name: max, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i0 i1 ]
if i0 < i1 goto $i2 = i1................	[entry: i0 i1 ]	[exit: i0 i1 ]
$i2 = i0................................	[entry: i0 ]	[exit: $i2 ]
goto [?= return $i2]....................	[entry: $i2 ]	[exit: $i2 ]
$i2 = i1................................	[entry: i1 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: Maths.Factorial, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$l6 = staticinvoke <Maths.Factorial: long factorial(int)>(0)	[entry: ]	[exit: $l6 ]
$b7 = $l6 cmp 1L........................	[entry: $l6 ]	[exit: $b7 ]
if $b7 == 0 goto $z1 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $b7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$l4 = staticinvoke <Maths.Factorial: long factorial(int)>(1)	[entry: ]	[exit: $l4 ]
$b5 = $l4 cmp 1L........................	[entry: $l4 ]	[exit: $b5 ]
if $b5 == 0 goto $z2 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $b5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$l2 = staticinvoke <Maths.Factorial: long factorial(int)>(5)	[entry: ]	[exit: $l2 ]
$b3 = $l2 cmp 120L......................	[entry: $l2 ]	[exit: $b3 ]
if $b3 == 0 goto $z3 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.Factorial: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$l0 = staticinvoke <Maths.Factorial: long factorial(int)>(10)	[entry: ]	[exit: $l0 ]
$b1 = $l0 cmp 3628800L..................	[entry: $l0 ]	[exit: $b1 ]
if $b1 == 0 goto return.................	[entry: $b1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Factorial, Method Name: factorial, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 >= 0 goto l2 = 1L.................	[entry: i0 ]	[exit: i0 ]
$r0 = new java.lang.IllegalArgumentException	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("number is negative")	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
l2 = 1L.................................	[entry: i0 ]	[exit: l2 i0 ]
i3 = 1..................................	[entry: l2 i0 ]	[exit: l2 i3 i0 ]
if i3 > i0 goto return l2...............	[entry: l2 i3 i0 ]	[exit: l2 i0 i3 ]
$l1 = (long) i3.........................	[entry: i0 l2 i3 ]	[exit: i0 i3 l2 $l1 ]
l2 = l2 * $l1...........................	[entry: i0 i3 l2 $l1 ]	[exit: l2 i0 i3 ]
i3 = i3 + 1.............................	[entry: l2 i0 i3 ]	[exit: l2 i3 i0 ]
goto [?= (branch)]......................	[entry: l2 i3 i0 ]	[exit: l2 i3 i0 ]
return l2...............................	[entry: l2 ]	[exit: ]
********************
Class Name: Maths.AbsoluteMax, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r13 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[3].................	[entry: ]	[exit: $r0 ]
$r0[0] = -2.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 16.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <Maths.AbsoluteMax: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $r2 = newarray (int)[3]	[entry: r1 $z0 ]	[exit: r1 ]
$i1 = staticinvoke <Maths.AbsoluteMax: int absMax(int[])>(r1)	[entry: r1 ]	[exit: $i1 ]
if $i1 == 16 goto $r2 = newarray (int)[3]	[entry: $i1 ]	[exit: ]
$r12 = new java.lang.AssertionError.....	[entry: ]	[exit: $r12 ]
specialinvoke $r12.<java.lang.AssertionError: void <init>()>()	[entry: $r12 ]	[exit: $r12 ]
throw $r12..............................	[entry: $r12 ]	[exit: ]
$r2 = newarray (int)[3].................	[entry: ]	[exit: $r2 ]
$r2[0] = 3..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = -10............................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = -2.............................	[entry: $r2 ]	[exit: $r2 ]
r3 = $r2................................	[entry: $r2 ]	[exit: r3 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 ]	[exit: $r5 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: $r5 r3 ]	[exit: $r5 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: $r5 r3 $r4 ]	[exit: $r5 r3 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absMax(")	[entry: $r5 r3 $r4 ]	[exit: $r5 $r6 r3 ]
$r7 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r3)	[entry: $r5 $r6 r3 ]	[exit: $r5 r3 $r7 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)	[entry: $r5 r3 $r7 $r6 ]	[exit: $r5 r3 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") = ")	[entry: $r5 r3 $r8 ]	[exit: $r5 $r9 r3 ]
$i0 = staticinvoke <Maths.AbsoluteMax: int absMax(int[])>(r3)	[entry: $r5 $r9 r3 ]	[exit: $r5 $i0 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r5 $i0 $r9 ]	[exit: $r5 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r5 $r10 ]	[exit: $r11 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11)	[entry: $r11 $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AbsoluteMax, Method Name: absMax, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i4 = r0[0]..............................	[entry: r0 ]	[exit: i4 r0 ]
i5 = 1..................................	[entry: i4 r0 ]	[exit: i4 i5 r0 ]
i0 = lengthof r0........................	[entry: i4 i5 r0 ]	[exit: i4 r0 i5 i0 ]
if i5 >= i0 goto return i4..............	[entry: i4 r0 i5 i0 ]	[exit: i4 i0 r0 i5 ]
$i1 = r0[i5]............................	[entry: i0 i4 r0 i5 ]	[exit: i0 i5 r0 i4 $i1 ]
$i2 = staticinvoke <java.lang.Math: int abs(int)>($i1)	[entry: i0 i5 r0 i4 $i1 ]	[exit: i0 i5 r0 $i2 i4 ]
$i3 = staticinvoke <java.lang.Math: int abs(int)>(i4)	[entry: i0 i5 r0 $i2 i4 ]	[exit: i4 i0 i5 r0 $i2 $i3 ]
if $i2 <= $i3 goto i5 = i5 + 1..........	[entry: i4 i0 i5 r0 $i2 $i3 ]	[exit: i4 r0 i0 i5 ]
i4 = r0[i5].............................	[entry: i0 r0 i5 ]	[exit: i4 r0 i0 i5 ]
i5 = i5 + 1.............................	[entry: i4 r0 i0 i5 ]	[exit: i4 r0 i5 i0 ]
goto [?= (branch)]......................	[entry: i4 r0 i5 i0 ]	[exit: i4 r0 i5 i0 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: Maths.Pow, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Pow: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$l6 = staticinvoke <Maths.Pow: long pow(int,int)>(2, 0)	[entry: ]	[exit: $l6 ]
$d6 = (double) $l6......................	[entry: $l6 ]	[exit: $d6 ]
$d7 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 0.0)	[entry: $d6 ]	[exit: $d6 $d7 ]
$b7 = $d6 cmpl $d7......................	[entry: $d6 $d7 ]	[exit: $b7 ]
if $b7 == 0 goto $z1 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $b7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.Pow: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$l4 = staticinvoke <Maths.Pow: long pow(int,int)>(0, 2)	[entry: ]	[exit: $l4 ]
$d4 = (double) $l4......................	[entry: $l4 ]	[exit: $d4 ]
$d5 = staticinvoke <java.lang.Math: double pow(double,double)>(0.0, 2.0)	[entry: $d4 ]	[exit: $d4 $d5 ]
$b5 = $d4 cmpl $d5......................	[entry: $d4 $d5 ]	[exit: $b5 ]
if $b5 == 0 goto $z2 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $b5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.Pow: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$l2 = staticinvoke <Maths.Pow: long pow(int,int)>(2, 10)	[entry: ]	[exit: $l2 ]
$d2 = (double) $l2......................	[entry: $l2 ]	[exit: $d2 ]
$d3 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, 10.0)	[entry: $d2 ]	[exit: $d2 $d3 ]
$b3 = $d2 cmpl $d3......................	[entry: $d2 $d3 ]	[exit: $b3 ]
if $b3 == 0 goto $z3 = <Maths.Pow: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.Pow: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$l0 = staticinvoke <Maths.Pow: long pow(int,int)>(10, 2)	[entry: ]	[exit: $l0 ]
$d0 = (double) $l0......................	[entry: $l0 ]	[exit: $d0 ]
$d1 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, 2.0)	[entry: $d0 ]	[exit: $d0 $d1 ]
$b1 = $d0 cmpl $d1......................	[entry: $d0 $d1 ]	[exit: $b1 ]
if $b1 == 0 goto return.................	[entry: $b1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Pow, Method Name: pow, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i0 := @parameter1: int..................	[entry: i1 ]	[exit: i1 i0 ]
l3 = 1L.................................	[entry: i1 i0 ]	[exit: l3 i1 i0 ]
i4 = 1..................................	[entry: l3 i1 i0 ]	[exit: l3 i1 i4 i0 ]
if i4 > i0 goto return l3...............	[entry: l3 i1 i4 i0 ]	[exit: l3 i0 i4 i1 ]
$l2 = (long) i1.........................	[entry: i0 i4 l3 i1 ]	[exit: i1 i0 i4 l3 $l2 ]
l3 = l3 * $l2...........................	[entry: i1 i0 i4 l3 $l2 ]	[exit: l3 i1 i0 i4 ]
i4 = i4 + 1.............................	[entry: l3 i1 i0 i4 ]	[exit: l3 i1 i4 i0 ]
goto [?= (branch)]......................	[entry: l3 i1 i4 i0 ]	[exit: l3 i1 i4 i0 ]
return l3...............................	[entry: l3 ]	[exit: ]
********************
Class Name: Maths.FindMin, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: r1 ]	[exit: r1 $i0 ]
i1 = $i0 + 1............................	[entry: r1 $i0 ]	[exit: r1 i1 ]
r2 = newarray (int)[i1].................	[entry: r1 i1 ]	[exit: r2 r1 i1 ]
i6 = 0..................................	[entry: r2 r1 i1 ]	[exit: r2 r1 i6 i1 ]
if i6 >= i1 goto $z0 = <Maths.FindMin: boolean $assertionsDisabled>	[entry: r2 r1 i6 i1 ]	[exit: r2 i1 i6 r1 ]
$i4 = virtualinvoke r1.<java.util.Random: int nextInt()>()	[entry: i1 r2 i6 r1 ]	[exit: r1 i1 r2 i6 $i4 ]
$i5 = $i4 % 100.........................	[entry: r1 i1 r2 i6 $i4 ]	[exit: r1 i1 r2 i6 $i5 ]
r2[i6] = $i5............................	[entry: r1 i1 r2 i6 $i5 ]	[exit: r2 r1 i1 i6 ]
i6 = i6 + 1.............................	[entry: r2 r1 i1 i6 ]	[exit: r2 r1 i6 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 i6 i1 ]	[exit: r2 r1 i6 i1 ]
$z0 = <Maths.FindMin: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z0 ]
if $z0 != 0 goto return.................	[entry: r2 $z0 ]	[exit: r2 ]
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: r2 ]	[exit: r2 $r3 ]
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>()	[entry: r2 $r3 ]	[exit: r2 $r4 ]
$i2 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()	[entry: r2 $r4 ]	[exit: $i2 r2 ]
$i3 = staticinvoke <Maths.FindMin: int findMin(int[])>(r2)	[entry: $i2 r2 ]	[exit: $i2 $i3 ]
if $i2 == $i3 goto return...............	[entry: $i2 $i3 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.FindMin, Method Name: findMin, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i2 = r0[0]..............................	[entry: r0 ]	[exit: i2 r0 ]
i3 = 1..................................	[entry: i2 r0 ]	[exit: i2 i3 r0 ]
$i0 = lengthof r0.......................	[entry: i2 i3 r0 ]	[exit: i2 r0 i3 $i0 ]
if i3 >= $i0 goto return i2.............	[entry: i2 r0 i3 $i0 ]	[exit: i2 r0 i3 ]
$i1 = r0[i3]............................	[entry: i2 r0 i3 ]	[exit: r0 i3 $i1 i2 ]
if $i1 >= i2 goto i3 = i3 + 1...........	[entry: r0 i3 $i1 i2 ]	[exit: i2 r0 i3 ]
i2 = r0[i3].............................	[entry: r0 i3 ]	[exit: i2 r0 i3 ]
i3 = i3 + 1.............................	[entry: i2 r0 i3 ]	[exit: i2 i3 r0 ]
goto [?= $i0 = lengthof r0].............	[entry: i2 i3 r0 ]	[exit: i2 i3 r0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Maths.AmicableNumber, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Maths.AmicableNumber: void findAllInRange(int,int)>(1, 3000)	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AmicableNumber, Method Name: findAllInRange, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
$r0 = new java.lang.StringBuilder.......	[entry: i1 i0 ]	[exit: i1 i0 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: i1 i0 $r0 ]	[exit: i1 i0 $r0 ]
r1 = $r0................................	[entry: i1 i0 $r0 ]	[exit: r1 i1 i0 ]
i2 = 0..................................	[entry: r1 i1 i0 ]	[exit: r1 i2 i1 i0 ]
i3 = i0.................................	[entry: r1 i2 i1 i0 ]	[exit: r1 i2 i0 i3 i1 ]
if i3 >= i1 goto $r2 = new java.lang.StringBuilder	[entry: r1 i2 i0 i3 i1 ]	[exit: r1 i2 i1 i0 i3 ]
i4 = i3 + 1.............................	[entry: r1 i2 i0 i1 i3 ]	[exit: r1 i2 i0 i3 i4 i1 ]
if i4 > i1 goto i3 = i3 + 1.............	[entry: r1 i2 i0 i3 i4 i1 ]	[exit: r1 i2 i0 i1 i3 i4 ]
$z0 = staticinvoke <Maths.AmicableNumber: boolean isAmicableNumber(int,int)>(i3, i4)	[entry: r1 i2 i0 i1 i3 i4 ]	[exit: r1 i2 i0 i3 i1 i4 $z0 ]
if $z0 == 0 goto i4 = i4 + 1............	[entry: r1 i2 i0 i3 i1 i4 $z0 ]	[exit: r1 i2 i0 i3 i1 i4 ]
i2 = i2 + 1.............................	[entry: i0 i1 r1 i4 i3 i2 ]	[exit: i0 i1 r1 i4 i3 i2 ]
$r14 = new java.lang.StringBuilder......	[entry: i0 i1 r1 i4 i3 i2 ]	[exit: i0 i1 r1 i4 i3 i2 $r14 ]
specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()	[entry: i0 i1 r1 i4 i3 i2 $r14 ]	[exit: i0 i1 r1 i4 i3 i2 $r14 ]
$r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")	[entry: i0 i1 r1 i4 i3 i2 $r14 ]	[exit: i0 i1 r1 i4 i3 i2 $r15 ]
$r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)	[entry: i0 i1 r1 i4 i3 i2 $r15 ]	[exit: i2 i0 i1 r1 i4 i3 $r16 ]
$r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": = ( ")	[entry: i2 i0 i1 r1 i4 i3 $r16 ]	[exit: i2 i0 i1 r1 i4 i3 $r17 ]
$r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i3)	[entry: i2 i0 i1 r1 i4 i3 $r17 ]	[exit: i2 i0 i3 i1 r1 i4 $r18 ]
$r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",")	[entry: i2 i0 i3 i1 r1 i4 $r18 ]	[exit: i2 i0 i3 i1 r1 i4 $r19 ]
$r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i4)	[entry: i2 i0 i3 i1 r1 i4 $r19 ]	[exit: i2 i0 i3 i1 i4 r1 $r20 ]
$r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")\t")	[entry: i2 i0 i3 i1 i4 r1 $r20 ]	[exit: i2 i0 i3 i1 i4 r1 $r21 ]
$r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: i2 i0 i3 i1 i4 r1 $r21 ]	[exit: i2 i0 i3 i1 i4 $r22 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22)	[entry: i2 i0 i3 i1 i4 $r22 r1 ]	[exit: r1 i2 i0 i3 i1 i4 ]
i4 = i4 + 1.............................	[entry: r1 i2 i0 i3 i1 i4 ]	[exit: r1 i2 i0 i3 i4 i1 ]
goto [?= (branch)]......................	[entry: r1 i2 i0 i3 i4 i1 ]	[exit: r1 i2 i0 i3 i4 i1 ]
i3 = i3 + 1.............................	[entry: r1 i2 i0 i1 i3 ]	[exit: r1 i2 i0 i3 i1 ]
goto [?= (branch)]......................	[entry: r1 i2 i0 i3 i1 ]	[exit: r1 i2 i0 i3 i1 ]
$r2 = new java.lang.StringBuilder.......	[entry: r1 i2 i1 i0 ]	[exit: r1 i2 i1 i0 $r2 ]
specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()	[entry: r1 i2 i1 i0 $r2 ]	[exit: r1 i2 i1 i0 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Int Range of ")	[entry: r1 i2 i1 i0 $r2 ]	[exit: r1 i2 i1 i0 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: r1 i2 i1 i0 $r3 ]	[exit: r1 i2 i1 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" till ")	[entry: r1 i2 i1 $r4 ]	[exit: r1 i2 i1 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: r1 i2 i1 $r5 ]	[exit: r1 i2 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" there are ")	[entry: r1 i2 $r6 ]	[exit: r1 i2 $r7 ]
$r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)	[entry: r1 i2 $r7 ]	[exit: r1 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" Amicable_numbers.These are \n ")	[entry: r1 $r8 ]	[exit: r1 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: r1 $r9 ]	[exit: $r10 r1 ]
virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder insert(int,java.lang.String)>(0, $r10)	[entry: $r10 r1 ]	[exit: r1 ]
$r12 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r12 r1 ]
$r13 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r12 r1 ]	[exit: $r13 $r12 ]
virtualinvoke $r12.<java.io.PrintStream: void println(java.lang.String)>($r13)	[entry: $r13 $r12 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AmicableNumber, Method Name: isAmicableNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i2 := @parameter1: int..................	[entry: i0 ]	[exit: i2 i0 ]
$i1 = staticinvoke <Maths.AmicableNumber: int recursiveCalcOfDividerSum(int,int)>(i0, i0)	[entry: i2 i0 ]	[exit: i0 $i1 i2 ]
if $i1 != i2 goto $z0 = 0...............	[entry: i0 $i1 i2 ]	[exit: i0 i2 ]
$i3 = staticinvoke <Maths.AmicableNumber: int recursiveCalcOfDividerSum(int,int)>(i2, i2)	[entry: i0 i2 ]	[exit: i0 $i3 ]
if i0 != $i3 goto $z0 = 0...............	[entry: i0 $i3 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.AmicableNumber, Method Name: recursiveCalcOfDividerSum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i5 := @parameter1: int..................	[entry: i0 ]	[exit: i0 i5 ]
if i5 != 1 goto i6 = i5 + -1............	[entry: i0 i5 ]	[exit: i0 i5 ]
return 0................................	[entry: ]	[exit: ]
i6 = i5 + -1............................	[entry: i0 i5 ]	[exit: i0 i6 ]
$i1 = i0 % i6...........................	[entry: i0 i6 ]	[exit: i0 i6 $i1 ]
if $i1 != 0 goto $i2 = staticinvoke <Maths.AmicableNumber: int recursiveCalcOfDividerSum(int,int)>(i0, i6)	[entry: i0 i6 $i1 ]	[exit: i0 i6 ]
$i3 = staticinvoke <Maths.AmicableNumber: int recursiveCalcOfDividerSum(int,int)>(i0, i6)	[entry: i0 i6 ]	[exit: $i3 i6 ]
$i4 = $i3 + i6..........................	[entry: $i3 i6 ]	[exit: $i4 ]
return $i4..............................	[entry: $i4 ]	[exit: ]
$i2 = staticinvoke <Maths.AmicableNumber: int recursiveCalcOfDividerSum(int,int)>(i0, i6)	[entry: i0 i6 ]	[exit: $i2 ]
return $i2..............................	[entry: $i2 ]	[exit: ]
********************
Class Name: Maths.FindMinRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$i0 = virtualinvoke r1.<java.util.Random: int nextInt(int)>(100)	[entry: r1 ]	[exit: r1 $i0 ]
i1 = $i0 + 1............................	[entry: r1 $i0 ]	[exit: r1 i1 ]
r2 = newarray (int)[i1].................	[entry: r1 i1 ]	[exit: r2 r1 i1 ]
i11 = 0.................................	[entry: r2 r1 i1 ]	[exit: r2 r1 i11 i1 ]
if i11 >= i1 goto $z0 = <Maths.FindMinRecursion: boolean $assertionsDisabled>	[entry: r2 r1 i11 i1 ]	[exit: r2 i1 i11 r1 ]
$i9 = virtualinvoke r1.<java.util.Random: int nextInt()>()	[entry: i1 r2 i11 r1 ]	[exit: r1 i1 r2 i11 $i9 ]
$i10 = $i9 % 100........................	[entry: r1 i1 r2 i11 $i9 ]	[exit: r1 i1 r2 i11 $i10 ]
r2[i11] = $i10..........................	[entry: r1 i1 r2 i11 $i10 ]	[exit: r2 r1 i1 i11 ]
i11 = i11 + 1...........................	[entry: r2 r1 i1 i11 ]	[exit: r2 r1 i11 i1 ]
goto [?= (branch)]......................	[entry: r2 r1 i11 i1 ]	[exit: r2 r1 i11 i1 ]
$z0 = <Maths.FindMinRecursion: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z0 ]
if $z0 != 0 goto $z1 = <Maths.FindMinRecursion: boolean $assertionsDisabled>	[entry: r2 $z0 ]	[exit: r2 ]
$i5 = lengthof r2.......................	[entry: r2 ]	[exit: r2 $i5 ]
$i6 = $i5 - 1...........................	[entry: r2 $i5 ]	[exit: r2 $i6 ]
$i7 = staticinvoke <Maths.FindMinRecursion: int min(int[],int,int)>(r2, 0, $i6)	[entry: r2 $i6 ]	[exit: $i7 r2 ]
$r6 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: $i7 r2 ]	[exit: r2 $i7 $r6 ]
$r7 = interfaceinvoke $r6.<java.util.stream.IntStream: java.util.OptionalInt min()>()	[entry: r2 $i7 $r6 ]	[exit: r2 $i7 $r7 ]
$i8 = virtualinvoke $r7.<java.util.OptionalInt: int getAsInt()>()	[entry: r2 $i7 $r7 ]	[exit: r2 $i7 $i8 ]
if $i7 == $i8 goto $z1 = <Maths.FindMinRecursion: boolean $assertionsDisabled>	[entry: r2 $i7 $i8 ]	[exit: r2 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z1 = <Maths.FindMinRecursion: boolean $assertionsDisabled>	[entry: r2 ]	[exit: r2 $z1 ]
if $z1 != 0 goto return.................	[entry: r2 $z1 ]	[exit: r2 ]
$i2 = lengthof r2.......................	[entry: r2 ]	[exit: r2 $i2 ]
$i3 = staticinvoke <Maths.FindMinRecursion: int min(int[],int)>(r2, $i2)	[entry: r2 $i2 ]	[exit: $i3 r2 ]
$r3 = staticinvoke <java.util.Arrays: java.util.stream.IntStream stream(int[])>(r2)	[entry: $i3 r2 ]	[exit: $i3 $r3 ]
$r4 = interfaceinvoke $r3.<java.util.stream.IntStream: java.util.OptionalInt min()>()	[entry: $i3 $r3 ]	[exit: $i3 $r4 ]
$i4 = virtualinvoke $r4.<java.util.OptionalInt: int getAsInt()>()	[entry: $i3 $r4 ]	[exit: $i3 $i4 ]
if $i3 == $i4 goto return...............	[entry: $i3 $i4 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.SumOfArithmeticSeries, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$d4 = staticinvoke <Maths.SumOfArithmeticSeries: double sumOfSeries(double,double,int)>(1.0, 1.0, 10)	[entry: ]	[exit: $d4 ]
$i4 = staticinvoke <java.lang.Double: int compare(double,double)>(55.0, $d4)	[entry: $d4 ]	[exit: $i4 ]
if $i4 == 0 goto $z1 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $i4 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$d3 = staticinvoke <Maths.SumOfArithmeticSeries: double sumOfSeries(double,double,int)>(1.0, 2.0, 10)	[entry: ]	[exit: $d3 ]
$i3 = staticinvoke <java.lang.Double: int compare(double,double)>(100.0, $d3)	[entry: $d3 ]	[exit: $i3 ]
if $i3 == 0 goto $z2 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$d2 = staticinvoke <Maths.SumOfArithmeticSeries: double sumOfSeries(double,double,int)>(1.0, 10.0, 10)	[entry: ]	[exit: $d2 ]
$i2 = staticinvoke <java.lang.Double: int compare(double,double)>(460.0, $d2)	[entry: $d2 ]	[exit: $i2 ]
if $i2 == 0 goto $z3 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $i2 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$d1 = staticinvoke <Maths.SumOfArithmeticSeries: double sumOfSeries(double,double,int)>(0.1, 0.1, 10)	[entry: ]	[exit: $d1 ]
$i1 = staticinvoke <java.lang.Double: int compare(double,double)>(5.5, $d1)	[entry: $d1 ]	[exit: $i1 ]
if $i1 == 0 goto $z4 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: $i1 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <Maths.SumOfArithmeticSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$d0 = staticinvoke <Maths.SumOfArithmeticSeries: double sumOfSeries(double,double,int)>(1.0, 10.0, 100)	[entry: ]	[exit: $d0 ]
$i0 = staticinvoke <java.lang.Double: int compare(double,double)>(49600.0, $d0)	[entry: $d0 ]	[exit: $i0 ]
if $i0 == 0 goto return.................	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Median, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r10 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$z0 = <Maths.Median: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Median: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$r8 = newarray (int)[1].................	[entry: ]	[exit: $r8 ]
$r8[0] = 0..............................	[entry: $r8 ]	[exit: $r8 ]
$d4 = staticinvoke <Maths.Median: double median(int[])>($r8)	[entry: $r8 ]	[exit: $d4 ]
$b4 = $d4 cmpl 0.0......................	[entry: $d4 ]	[exit: $b4 ]
if $b4 == 0 goto $z1 = <Maths.Median: boolean $assertionsDisabled>	[entry: $b4 ]	[exit: ]
$r9 = new java.lang.AssertionError......	[entry: ]	[exit: $r9 ]
specialinvoke $r9.<java.lang.AssertionError: void <init>()>()	[entry: $r9 ]	[exit: $r9 ]
throw $r9...............................	[entry: $r9 ]	[exit: ]
$z1 = <Maths.Median: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Median: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$r6 = newarray (int)[2].................	[entry: ]	[exit: $r6 ]
$r6[0] = 1..............................	[entry: $r6 ]	[exit: $r6 ]
$r6[1] = 2..............................	[entry: $r6 ]	[exit: $r6 ]
$d3 = staticinvoke <Maths.Median: double median(int[])>($r6)	[entry: $r6 ]	[exit: $d3 ]
$b3 = $d3 cmpl 1.5......................	[entry: $d3 ]	[exit: $b3 ]
if $b3 == 0 goto $z2 = <Maths.Median: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z2 = <Maths.Median: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Median: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$r4 = newarray (int)[4].................	[entry: ]	[exit: $r4 ]
$r4[0] = 4..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[1] = 1..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[2] = 3..............................	[entry: $r4 ]	[exit: $r4 ]
$r4[3] = 2..............................	[entry: $r4 ]	[exit: $r4 ]
$d2 = staticinvoke <Maths.Median: double median(int[])>($r4)	[entry: $r4 ]	[exit: $d2 ]
$b2 = $d2 cmpl 2.5......................	[entry: $d2 ]	[exit: $b2 ]
if $b2 == 0 goto $z3 = <Maths.Median: boolean $assertionsDisabled>	[entry: $b2 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z3 = <Maths.Median: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.Median: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$r2 = newarray (int)[7].................	[entry: ]	[exit: $r2 ]
$r2[0] = 1..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = 3..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = 3..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[3] = 6..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[4] = 7..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[5] = 8..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[6] = 9..............................	[entry: $r2 ]	[exit: $r2 ]
$d1 = staticinvoke <Maths.Median: double median(int[])>($r2)	[entry: $r2 ]	[exit: $d1 ]
$b1 = $d1 cmpl 6.0......................	[entry: $d1 ]	[exit: $b1 ]
if $b1 == 0 goto $z4 = <Maths.Median: boolean $assertionsDisabled>	[entry: $b1 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z4 = <Maths.Median: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$r0 = newarray (int)[8].................	[entry: ]	[exit: $r0 ]
$r0[0] = 1..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 2..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 3..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = 5..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 6..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 8..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 9..............................	[entry: $r0 ]	[exit: $r0 ]
$d0 = staticinvoke <Maths.Median: double median(int[])>($r0)	[entry: $r0 ]	[exit: $d0 ]
$b0 = $d0 cmpl 4.5......................	[entry: $d0 ]	[exit: $b0 ]
if $b0 == 0 goto return.................	[entry: $b0 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Median, Method Name: median, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
staticinvoke <java.util.Arrays: void sort(int[])>(r0)	[entry: r0 ]	[exit: r0 ]
i0 = lengthof r0........................	[entry: r0 ]	[exit: r0 i0 ]
$i1 = i0 % 2............................	[entry: r0 i0 ]	[exit: r0 i0 $i1 ]
if $i1 != 0 goto $i2 = i0 / 2...........	[entry: r0 i0 $i1 ]	[exit: r0 i0 ]
$i4 = i0 / 2............................	[entry: r0 i0 ]	[exit: i0 r0 $i4 ]
$i8 = r0[$i4]...........................	[entry: i0 r0 $i4 ]	[exit: $i8 r0 i0 ]
$i5 = i0 / 2............................	[entry: $i8 r0 i0 ]	[exit: $i8 r0 $i5 ]
$i6 = $i5 - 1...........................	[entry: $i8 r0 $i5 ]	[exit: $i8 r0 $i6 ]
$i7 = r0[$i6]...........................	[entry: $i8 r0 $i6 ]	[exit: $i8 $i7 ]
$i9 = $i8 + $i7.........................	[entry: $i8 $i7 ]	[exit: $i9 ]
$d0 = (double) $i9......................	[entry: $i9 ]	[exit: $d0 ]
$d1 = $d0 / 2.0.........................	[entry: $d0 ]	[exit: $d1 ]
goto [?= return $d1]....................	[entry: $d1 ]	[exit: $d1 ]
$i2 = i0 / 2............................	[entry: r0 i0 ]	[exit: r0 $i2 ]
$i3 = r0[$i2]...........................	[entry: r0 $i2 ]	[exit: $i3 ]
$d1 = (double) $i3......................	[entry: $i3 ]	[exit: $d1 ]
return $d1..............................	[entry: $d1 ]	[exit: ]
********************
Class Name: Maths.BinaryPow, Method Name: binPow, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i1 := @parameter0: int..................	[entry: ]	[exit: i1 ]
i2 := @parameter1: int..................	[entry: i1 ]	[exit: i1 i2 ]
i3 = 1..................................	[entry: i1 i2 ]	[exit: i3 i1 i2 ]
if i2 <= 0 goto return i3...............	[entry: i3 i1 i2 ]	[exit: i3 i1 i2 ]
$i0 = i2 & 1............................	[entry: i3 i1 i2 ]	[exit: i3 i2 i1 $i0 ]
if $i0 != 1 goto i1 = i1 * i1...........	[entry: i3 i2 i1 $i0 ]	[exit: i3 i2 i1 ]
i3 = i3 * i1............................	[entry: i2 i3 i1 ]	[exit: i3 i2 i1 ]
i1 = i1 * i1............................	[entry: i3 i2 i1 ]	[exit: i3 i1 i2 ]
i2 = i2 >>> 1...........................	[entry: i3 i1 i2 ]	[exit: i3 i1 i2 ]
goto [?= (branch)]......................	[entry: i3 i1 i2 ]	[exit: i3 i1 i2 ]
return i3...............................	[entry: i3 ]	[exit: ]
********************
Class Name: Maths.BinaryPow, Method Name: test, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i0 i1 ]
i2 = staticinvoke <Maths.BinaryPow: int binPow(int,int)>(i0, i1)	[entry: i0 i1 ]	[exit: i2 i1 i0 ]
$z0 = <Maths.BinaryPow: boolean $assertionsDisabled>	[entry: i2 i1 i0 ]	[exit: i2 i1 i0 $z0 ]
if $z0 != 0 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: i2 i1 i0 $z0 ]	[exit: i2 i1 i0 ]
$d1 = (double) i0.......................	[entry: i2 i1 i0 ]	[exit: i0 i2 $d1 i1 ]
$d0 = (double) i1.......................	[entry: i0 i2 $d1 i1 ]	[exit: i1 i0 i2 $d1 $d0 ]
$d2 = staticinvoke <java.lang.Math: double pow(double,double)>($d1, $d0)	[entry: i1 i0 i2 $d1 $d0 ]	[exit: i1 i0 i2 $d2 ]
$i3 = (int) $d2.........................	[entry: i1 i0 i2 $d2 ]	[exit: i1 i0 i2 $i3 ]
if i2 == $i3 goto $r1 = <java.lang.System: java.io.PrintStream out>	[entry: i1 i0 i2 $i3 ]	[exit: i2 i1 i0 ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>(java.lang.Object)>("Incorrect Implementation")	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: i2 i1 i0 ]	[exit: $r1 i2 i1 i0 ]
$r0 = new java.lang.StringBuilder.......	[entry: $r1 i2 i1 i0 ]	[exit: $r1 i2 i1 i0 $r0 ]
specialinvoke $r0.<java.lang.StringBuilder: void <init>()>()	[entry: $r1 i2 i1 i0 $r0 ]	[exit: $r1 i2 i1 i0 $r0 ]
$r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)	[entry: $r1 i2 i1 i0 $r0 ]	[exit: $r1 i2 i1 $r2 ]
$r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^")	[entry: $r1 i2 i1 $r2 ]	[exit: $r1 i2 i1 $r3 ]
$r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)	[entry: $r1 i2 i1 $r3 ]	[exit: $r1 i2 $r4 ]
$r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ")	[entry: $r1 i2 $r4 ]	[exit: $r1 i2 $r5 ]
$r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2)	[entry: $r1 i2 $r5 ]	[exit: $r1 $r6 ]
$r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r1 $r6 ]	[exit: $r7 $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7)	[entry: $r7 $r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.BinaryPow, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Maths.BinaryPow: void test(int,int)>(2, 15)	[entry: ]	[exit: ]
staticinvoke <Maths.BinaryPow: void test(int,int)>(3, 9)	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.FactorialRecursion, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$l8 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>(0)	[entry: ]	[exit: $l8 ]
$b9 = $l8 cmp 1L........................	[entry: $l8 ]	[exit: $b9 ]
if $b9 == 0 goto $z1 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $b9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$l6 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>(1)	[entry: ]	[exit: $l6 ]
$b7 = $l6 cmp 1L........................	[entry: $l6 ]	[exit: $b7 ]
if $b7 == 0 goto $z2 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $b7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$l4 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>(2)	[entry: ]	[exit: $l4 ]
$b5 = $l4 cmp 2L........................	[entry: $l4 ]	[exit: $b5 ]
if $b5 == 0 goto $z3 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $b5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$l2 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>(3)	[entry: ]	[exit: $l2 ]
$b3 = $l2 cmp 6L........................	[entry: $l2 ]	[exit: $b3 ]
if $b3 == 0 goto $z4 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <Maths.FactorialRecursion: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$l0 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>(5)	[entry: ]	[exit: $l0 ]
$b1 = $l0 cmp 120L......................	[entry: $l0 ]	[exit: $b1 ]
if $b1 == 0 goto return.................	[entry: $b1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.FactorialRecursion, Method Name: factorial, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 >= 0 goto (branch)................	[entry: i0 ]	[exit: i0 ]
$r0 = new java.lang.IllegalArgumentException	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("number is negative")	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
if i0 == 0 goto $l4 = 1L................	[entry: i0 ]	[exit: i0 ]
if i0 != 1 goto $l2 = (long) i0.........	[entry: i0 ]	[exit: i0 ]
$l4 = 1L................................	[entry: ]	[exit: $l4 ]
goto [?= return $l4]....................	[entry: $l4 ]	[exit: $l4 ]
$l2 = (long) i0.........................	[entry: i0 ]	[exit: $l2 i0 ]
$i1 = i0 - 1............................	[entry: $l2 i0 ]	[exit: $l2 $i1 ]
$l3 = staticinvoke <Maths.FactorialRecursion: long factorial(int)>($i1)	[entry: $l2 $i1 ]	[exit: $l2 $l3 ]
$l4 = $l2 * $l3.........................	[entry: $l2 $l3 ]	[exit: $l4 ]
return $l4..............................	[entry: $l4 ]	[exit: ]
********************
Class Name: Maths.Combinations, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$l6 = staticinvoke <Maths.Combinations: long combinations(int,int)>(1, 1)	[entry: ]	[exit: $l6 ]
$b7 = $l6 cmp 1L........................	[entry: $l6 ]	[exit: $b7 ]
if $b7 == 0 goto $z1 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $b7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$l4 = staticinvoke <Maths.Combinations: long combinations(int,int)>(10, 5)	[entry: ]	[exit: $l4 ]
$b5 = $l4 cmp 252L......................	[entry: $l4 ]	[exit: $b5 ]
if $b5 == 0 goto $z2 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $b5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$l2 = staticinvoke <Maths.Combinations: long combinations(int,int)>(6, 3)	[entry: ]	[exit: $l2 ]
$b3 = $l2 cmp 20L.......................	[entry: $l2 ]	[exit: $b3 ]
if $b3 == 0 goto $z3 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: $b3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.Combinations: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$l0 = staticinvoke <Maths.Combinations: long combinations(int,int)>(20, 5)	[entry: ]	[exit: $l0 ]
$b1 = $l0 cmp 15504L....................	[entry: $l0 ]	[exit: $b1 ]
if $b1 == 0 goto return.................	[entry: $b1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Combinations, Method Name: factorial, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 >= 0 goto (branch)................	[entry: i0 ]	[exit: i0 ]
$r0 = new java.lang.IllegalArgumentException	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("number is negative")	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
if i0 == 0 goto $l4 = 1L................	[entry: i0 ]	[exit: i0 ]
if i0 != 1 goto $l2 = (long) i0.........	[entry: i0 ]	[exit: i0 ]
$l4 = 1L................................	[entry: ]	[exit: $l4 ]
goto [?= return $l4]....................	[entry: $l4 ]	[exit: $l4 ]
$l2 = (long) i0.........................	[entry: i0 ]	[exit: $l2 i0 ]
$i1 = i0 - 1............................	[entry: $l2 i0 ]	[exit: $l2 $i1 ]
$l3 = staticinvoke <Maths.Combinations: long factorial(int)>($i1)	[entry: $l2 $i1 ]	[exit: $l2 $l3 ]
$l4 = $l2 * $l3.........................	[entry: $l2 $l3 ]	[exit: $l4 ]
return $l4..............................	[entry: $l4 ]	[exit: ]
********************
Class Name: Maths.Combinations, Method Name: combinations, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i2 := @parameter1: int..................	[entry: i0 ]	[exit: i2 i0 ]
$l1 = staticinvoke <Maths.Combinations: long factorial(int)>(i0)	[entry: i2 i0 ]	[exit: $l1 i0 i2 ]
$l3 = staticinvoke <Maths.Combinations: long factorial(int)>(i2)	[entry: $l1 i0 i2 ]	[exit: $l1 $l3 i0 i2 ]
$i4 = i0 - i2...........................	[entry: $l1 $l3 i0 i2 ]	[exit: $l1 $l3 $i4 ]
$l5 = staticinvoke <Maths.Combinations: long factorial(int)>($i4)	[entry: $l1 $l3 $i4 ]	[exit: $l1 $l3 $l5 ]
$l6 = $l3 * $l5.........................	[entry: $l1 $l3 $l5 ]	[exit: $l1 $l6 ]
$l7 = $l1 / $l6.........................	[entry: $l1 $l6 ]	[exit: $l7 ]
return $l7..............................	[entry: $l7 ]	[exit: ]
********************
Class Name: Maths.FibonacciNumber, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z9 = staticinvoke <Maths.FibonacciNumber: boolean isFibonacciNumber(int)>(1)	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto $z1 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z8 = staticinvoke <Maths.FibonacciNumber: boolean isFibonacciNumber(int)>(2)	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto $z2 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z7 = staticinvoke <Maths.FibonacciNumber: boolean isFibonacciNumber(int)>(21)	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z3 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z6 = staticinvoke <Maths.FibonacciNumber: boolean isFibonacciNumber(int)>(9)	[entry: ]	[exit: $z6 ]
if $z6 == 0 goto $z4 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <Maths.FibonacciNumber: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$z5 = staticinvoke <Maths.FibonacciNumber: boolean isFibonacciNumber(int)>(10)	[entry: ]	[exit: $z5 ]
if $z5 == 0 goto return.................	[entry: $z5 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.FibonacciNumber, Method Name: isPerfectSquare, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
$d0 = (double) i0.......................	[entry: i0 ]	[exit: i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i0 $d0 ]	[exit: i0 $d1 ]
i1 = (int) $d1..........................	[entry: i0 $d1 ]	[exit: i0 i1 ]
$i2 = i1 * i1...........................	[entry: i0 i1 ]	[exit: $i2 i0 ]
if $i2 != i0 goto $z0 = 0...............	[entry: $i2 i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.FibonacciNumber, Method Name: isFibonacciNumber, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
$i1 = 5 * i0............................	[entry: i0 ]	[exit: $i1 i0 ]
$i2 = $i1 * i0..........................	[entry: $i1 i0 ]	[exit: i0 $i2 ]
$i3 = $i2 + 4...........................	[entry: i0 $i2 ]	[exit: i0 $i3 ]
$z0 = staticinvoke <Maths.FibonacciNumber: boolean isPerfectSquare(int)>($i3)	[entry: i0 $i3 ]	[exit: i0 $z0 ]
if $z0 != 0 goto $z2 = 1................	[entry: i0 $z0 ]	[exit: i0 ]
$i4 = 5 * i0............................	[entry: i0 ]	[exit: $i4 i0 ]
$i5 = $i4 * i0..........................	[entry: $i4 i0 ]	[exit: $i5 ]
$i6 = $i5 - 4...........................	[entry: $i5 ]	[exit: $i6 ]
$z1 = staticinvoke <Maths.FibonacciNumber: boolean isPerfectSquare(int)>($i6)	[entry: $i6 ]	[exit: $z1 ]
if $z1 == 0 goto $z2 = 0................	[entry: $z1 ]	[exit: ]
$z2 = 1.................................	[entry: ]	[exit: $z2 ]
goto [?= return $z2]....................	[entry: $z2 ]	[exit: $z2 ]
$z2 = 0.................................	[entry: ]	[exit: $z2 ]
return $z2..............................	[entry: $z2 ]	[exit: ]
********************
Class Name: Maths.LucasSeries, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i12 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(1)	[entry: ]	[exit: $i12 ]
if $i12 != 2 goto $r6 = new java.lang.AssertionError	[entry: $i12 ]	[exit: ]
$i13 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(1)	[entry: ]	[exit: $i13 ]
if $i13 == 2 goto $z1 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i13 ]	[exit: ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z1 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i10 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(2)	[entry: ]	[exit: $i10 ]
if $i10 != 1 goto $r5 = new java.lang.AssertionError	[entry: $i10 ]	[exit: ]
$i11 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(2)	[entry: ]	[exit: $i11 ]
if $i11 == 1 goto $z2 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i11 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z2 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$i8 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(3)	[entry: ]	[exit: $i8 ]
if $i8 != 3 goto $r4 = new java.lang.AssertionError	[entry: $i8 ]	[exit: ]
$i9 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(3)	[entry: ]	[exit: $i9 ]
if $i9 == 3 goto $z3 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z3 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$i6 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(4)	[entry: ]	[exit: $i6 ]
if $i6 != 4 goto $r3 = new java.lang.AssertionError	[entry: $i6 ]	[exit: ]
$i7 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(4)	[entry: ]	[exit: $i7 ]
if $i7 == 4 goto $z4 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i7 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z4 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$i4 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(5)	[entry: ]	[exit: $i4 ]
if $i4 != 7 goto $r2 = new java.lang.AssertionError	[entry: $i4 ]	[exit: ]
$i5 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(5)	[entry: ]	[exit: $i5 ]
if $i5 == 7 goto $z5 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i5 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z5 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z6 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$i2 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(6)	[entry: ]	[exit: $i2 ]
if $i2 != 11 goto $r1 = new java.lang.AssertionError	[entry: $i2 ]	[exit: ]
$i3 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(6)	[entry: ]	[exit: $i3 ]
if $i3 == 11 goto $z6 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z6 = <Maths.LucasSeries: boolean $assertionsDisabled>	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto return.................	[entry: $z6 ]	[exit: ]
$i0 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>(11)	[entry: ]	[exit: $i0 ]
if $i0 != 123 goto $r0 = new java.lang.AssertionError	[entry: $i0 ]	[exit: ]
$i1 = staticinvoke <Maths.LucasSeries: int lucasSeriesIteration(int)>(11)	[entry: ]	[exit: $i1 ]
if $i1 == 123 goto return...............	[entry: $i1 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.LucasSeries, Method Name: lucasSeries, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 != 1 goto (branch)................	[entry: i0 ]	[exit: i0 ]
$i5 = 2.................................	[entry: ]	[exit: $i5 ]
goto [?= return $i5]....................	[entry: $i5 ]	[exit: $i5 ]
if i0 != 2 goto $i1 = i0 - 1............	[entry: i0 ]	[exit: i0 ]
$i5 = 1.................................	[entry: ]	[exit: $i5 ]
goto [?= return $i5]....................	[entry: $i5 ]	[exit: $i5 ]
$i1 = i0 - 1............................	[entry: i0 ]	[exit: i0 $i1 ]
$i2 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>($i1)	[entry: i0 $i1 ]	[exit: $i2 i0 ]
$i3 = i0 - 2............................	[entry: $i2 i0 ]	[exit: $i2 $i3 ]
$i4 = staticinvoke <Maths.LucasSeries: int lucasSeries(int)>($i3)	[entry: $i2 $i3 ]	[exit: $i2 $i4 ]
$i5 = $i2 + $i4.........................	[entry: $i2 $i4 ]	[exit: $i5 ]
return $i5..............................	[entry: $i5 ]	[exit: ]
********************
Class Name: Maths.LucasSeries, Method Name: lucasSeriesIteration, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i2 = 2..................................	[entry: i0 ]	[exit: i2 i0 ]
i3 = 1..................................	[entry: i2 i0 ]	[exit: i2 i3 i0 ]
i4 = 1..................................	[entry: i2 i3 i0 ]	[exit: i2 i3 i4 i0 ]
if i4 >= i0 goto return i2..............	[entry: i2 i3 i4 i0 ]	[exit: i2 i0 i4 i3 ]
i1 = i2 + i3............................	[entry: i0 i4 i2 i3 ]	[exit: i0 i4 i1 i3 ]
i2 = i3.................................	[entry: i0 i4 i1 i3 ]	[exit: i2 i0 i4 i1 ]
i3 = i1.................................	[entry: i2 i0 i4 i1 ]	[exit: i2 i3 i0 i4 ]
i4 = i4 + 1.............................	[entry: i2 i3 i0 i4 ]	[exit: i2 i3 i4 i0 ]
goto [?= (branch)]......................	[entry: i2 i3 i4 i0 ]	[exit: i2 i3 i4 i0 ]
return i2...............................	[entry: i2 ]	[exit: ]
********************
Class Name: Maths.PowerOfTwoOrNot, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z9 = staticinvoke <Maths.PowerOfTwoOrNot: boolean checkIfPowerOfTwoOrNot(int)>(0)	[entry: ]	[exit: $z9 ]
if $z9 == 0 goto $z1 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z8 = staticinvoke <Maths.PowerOfTwoOrNot: boolean checkIfPowerOfTwoOrNot(int)>(1)	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto $z2 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z7 = staticinvoke <Maths.PowerOfTwoOrNot: boolean checkIfPowerOfTwoOrNot(int)>(8)	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z3 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z6 = staticinvoke <Maths.PowerOfTwoOrNot: boolean checkIfPowerOfTwoOrNot(int)>(16)	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto $z4 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <Maths.PowerOfTwoOrNot: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$z5 = staticinvoke <Maths.PowerOfTwoOrNot: boolean checkIfPowerOfTwoOrNot(int)>(1024)	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PowerOfTwoOrNot, Method Name: checkIfPowerOfTwoOrNot, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 == 0 goto $z0 = 0.................	[entry: i0 ]	[exit: i0 ]
$i1 = i0 - 1............................	[entry: i0 ]	[exit: i0 $i1 ]
$i2 = i0 & $i1..........................	[entry: i0 $i1 ]	[exit: $i2 ]
if $i2 != 0 goto $z0 = 0................	[entry: $i2 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.GCD, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[3].................	[entry: ]	[exit: $r0 ]
$r0[0] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 16.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 32.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$r2 = <java.lang.System: java.io.PrintStream out>	[entry: r1 ]	[exit: $r2 r1 ]
$i0 = staticinvoke <Maths.GCD: int gcd(int[])>(r1)	[entry: $r2 r1 ]	[exit: $i0 $r2 ]
virtualinvoke $r2.<java.io.PrintStream: void println(int)>($i0)	[entry: $i0 $r2 ]	[exit: ]
$r4 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r4 ]
$r3 = newarray (java.lang.Object)[2]....	[entry: $r4 ]	[exit: $r4 $r3 ]
$i1 = staticinvoke <Maths.GCD: int gcd(int,int)>(40, 24)	[entry: $r4 $r3 ]	[exit: $r4 $r3 $i1 ]
$r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)	[entry: $r4 $r3 $i1 ]	[exit: $r4 $r3 $r5 ]
$r3[0] = $r5............................	[entry: $r4 $r3 $r5 ]	[exit: $r4 $r3 ]
$i2 = staticinvoke <Maths.GCD: int gcd(int,int)>(24, 40)	[entry: $r4 $r3 ]	[exit: $r4 $r3 $i2 ]
$r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2)	[entry: $r4 $r3 $i2 ]	[exit: $r4 $r3 $r6 ]
$r3[1] = $r6............................	[entry: $r4 $r3 $r6 ]	[exit: $r3 $r4 ]
virtualinvoke $r4.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>("gcd(40,24)=%d gcd(24,40)=%d%n", $r3)	[entry: $r3 $r4 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AbsoluteValue, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i3 = 1..................................	[entry: r1 ]	[exit: r1 i3 ]
if i3 > 1000 goto return................	[entry: r1 i3 ]	[exit: i3 r1 ]
i0 = virtualinvoke r1.<java.util.Random: int nextInt()>()	[entry: i3 r1 ]	[exit: r1 i3 i0 ]
$z0 = <Maths.AbsoluteValue: boolean $assertionsDisabled>	[entry: r1 i3 i0 ]	[exit: r1 i3 i0 $z0 ]
if $z0 != 0 goto i3 = i3 + 1............	[entry: r1 i3 i0 $z0 ]	[exit: r1 i3 i0 ]
$i1 = staticinvoke <Maths.AbsoluteValue: int absVal(int)>(i0)	[entry: r1 i3 i0 ]	[exit: r1 i3 $i1 i0 ]
$i2 = staticinvoke <java.lang.Math: int abs(int)>(i0)	[entry: r1 i3 $i1 i0 ]	[exit: r1 i3 $i1 $i2 ]
if $i1 == $i2 goto i3 = i3 + 1..........	[entry: r1 i3 $i1 $i2 ]	[exit: r1 i3 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i3 = i3 + 1.............................	[entry: r1 i3 ]	[exit: r1 i3 ]
goto [?= (branch)]......................	[entry: r1 i3 ]	[exit: r1 i3 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AbsoluteValue, Method Name: absVal, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
if i0 >= 0 goto $i1 = i0................	[entry: i0 ]	[exit: i0 ]
$i1 = neg i0............................	[entry: i0 ]	[exit: $i1 ]
goto [?= return $i1]....................	[entry: $i1 ]	[exit: $i1 ]
$i1 = i0................................	[entry: i0 ]	[exit: $i1 ]
return $i1..............................	[entry: $i1 ]	[exit: ]
********************
Class Name: Maths.Area, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r9 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$d8 = staticinvoke <Maths.Area: double surfaceAreaCube(double)>(1.0)	[entry: ]	[exit: $d8 ]
$i8 = staticinvoke <java.lang.Double: int compare(double,double)>($d8, 6.0)	[entry: $d8 ]	[exit: $i8 ]
if $i8 == 0 goto $z1 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i8 ]	[exit: ]
$r8 = new java.lang.AssertionError......	[entry: ]	[exit: $r8 ]
specialinvoke $r8.<java.lang.AssertionError: void <init>()>()	[entry: $r8 ]	[exit: $r8 ]
throw $r8...............................	[entry: $r8 ]	[exit: ]
$z1 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$d7 = staticinvoke <Maths.Area: double surfaceAreaSphere(double)>(5.0)	[entry: ]	[exit: $d7 ]
$i7 = staticinvoke <java.lang.Double: int compare(double,double)>($d7, 314.1592653589793)	[entry: $d7 ]	[exit: $i7 ]
if $i7 == 0 goto $z2 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i7 ]	[exit: ]
$r7 = new java.lang.AssertionError......	[entry: ]	[exit: $r7 ]
specialinvoke $r7.<java.lang.AssertionError: void <init>()>()	[entry: $r7 ]	[exit: $r7 ]
throw $r7...............................	[entry: $r7 ]	[exit: ]
$z2 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$d6 = staticinvoke <Maths.Area: double surfaceAreaSphere(double)>(1.0)	[entry: ]	[exit: $d6 ]
$i6 = staticinvoke <java.lang.Double: int compare(double,double)>($d6, 12.566370614359172)	[entry: $d6 ]	[exit: $i6 ]
if $i6 == 0 goto $z3 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i6 ]	[exit: ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>()>()	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z3 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$d5 = staticinvoke <Maths.Area: double surfaceAreaRectangle(double,double)>(10.0, 20.0)	[entry: ]	[exit: $d5 ]
$i5 = staticinvoke <java.lang.Double: int compare(double,double)>($d5, 200.0)	[entry: $d5 ]	[exit: $i5 ]
if $i5 == 0 goto $z4 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i5 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z4 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$d4 = staticinvoke <Maths.Area: double surfaceAreaSquare(double)>(10.0)	[entry: ]	[exit: $d4 ]
$i4 = staticinvoke <java.lang.Double: int compare(double,double)>($d4, 100.0)	[entry: $d4 ]	[exit: $i4 ]
if $i4 == 0 goto $z5 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i4 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z5 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto $z6 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z5 ]	[exit: ]
$d3 = staticinvoke <Maths.Area: double surfaceAreaTriangle(double,double)>(10.0, 10.0)	[entry: ]	[exit: $d3 ]
$i3 = staticinvoke <java.lang.Double: int compare(double,double)>($d3, 50.0)	[entry: $d3 ]	[exit: $i3 ]
if $i3 == 0 goto $z6 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z6 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto $z7 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$d2 = staticinvoke <Maths.Area: double surfaceAreaParallelogram(double,double)>(10.0, 20.0)	[entry: ]	[exit: $d2 ]
$i2 = staticinvoke <java.lang.Double: int compare(double,double)>($d2, 200.0)	[entry: $d2 ]	[exit: $i2 ]
if $i2 == 0 goto $z7 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i2 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z7 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z7 ]
if $z7 != 0 goto $z8 = <Maths.Area: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$d1 = staticinvoke <Maths.Area: double surfaceAreaTrapezium(double,double,double)>(10.0, 20.0, 30.0)	[entry: ]	[exit: $d1 ]
$i1 = staticinvoke <java.lang.Double: int compare(double,double)>($d1, 450.0)	[entry: $d1 ]	[exit: $i1 ]
if $i1 == 0 goto $z8 = <Maths.Area: boolean $assertionsDisabled>	[entry: $i1 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z8 = <Maths.Area: boolean $assertionsDisabled>	[entry: ]	[exit: $z8 ]
if $z8 != 0 goto return.................	[entry: $z8 ]	[exit: ]
$d0 = staticinvoke <Maths.Area: double surfaceAreaCircle(double)>(20.0)	[entry: ]	[exit: $d0 ]
$i0 = staticinvoke <java.lang.Double: int compare(double,double)>($d0, 1256.6370614359173)	[entry: $d0 ]	[exit: $i0 ]
if $i0 == 0 goto return.................	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Ceil, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r3 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new java.util.Random..............	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.util.Random: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i1 = 1..................................	[entry: r1 ]	[exit: r1 i1 ]
if i1 > 1000 goto return................	[entry: r1 i1 ]	[exit: i1 r1 ]
d0 = virtualinvoke r1.<java.util.Random: double nextDouble()>()	[entry: i1 r1 ]	[exit: r1 i1 d0 ]
$z0 = <Maths.Ceil: boolean $assertionsDisabled>	[entry: r1 i1 d0 ]	[exit: r1 i1 d0 $z0 ]
if $z0 != 0 goto i1 = i1 + 1............	[entry: r1 i1 d0 $z0 ]	[exit: r1 i1 d0 ]
$d1 = staticinvoke <Maths.Ceil: double ceil(double)>(d0)	[entry: r1 i1 d0 ]	[exit: r1 i1 $d1 d0 ]
$d2 = staticinvoke <java.lang.Math: double ceil(double)>(d0)	[entry: r1 i1 $d1 d0 ]	[exit: r1 i1 $d1 $d2 ]
$b0 = $d1 cmpl $d2......................	[entry: r1 i1 $d1 $d2 ]	[exit: r1 i1 $b0 ]
if $b0 == 0 goto i1 = i1 + 1............	[entry: r1 i1 $b0 ]	[exit: r1 i1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i1 = i1 + 1.............................	[entry: r1 i1 ]	[exit: r1 i1 ]
goto [?= (branch)]......................	[entry: r1 i1 ]	[exit: r1 i1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.Ceil, Method Name: ceil, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
d0 := @parameter0: double...............	[entry: ]	[exit: d0 ]
$i0 = (int) d0..........................	[entry: d0 ]	[exit: d0 $i0 ]
$d1 = (double) $i0......................	[entry: d0 $i0 ]	[exit: d0 $d1 ]
$d2 = d0 - $d1..........................	[entry: d0 $d1 ]	[exit: d0 $d2 ]
$b1 = $d2 cmpl 0.0......................	[entry: d0 $d2 ]	[exit: d0 $b1 ]
if $b1 != 0 goto $i2 = (int) d0.........	[entry: d0 $b1 ]	[exit: d0 ]
return d0...............................	[entry: d0 ]	[exit: ]
$i2 = (int) d0..........................	[entry: d0 ]	[exit: d0 $i2 ]
$d3 = (double) $i2......................	[entry: d0 $i2 ]	[exit: d0 $d3 ]
$d4 = d0 - $d3..........................	[entry: d0 $d3 ]	[exit: d0 $d4 ]
$b3 = $d4 cmpl 0.0......................	[entry: d0 $d4 ]	[exit: d0 $b3 ]
if $b3 <= 0 goto $i4 = (int) d0.........	[entry: d0 $b3 ]	[exit: d0 ]
$d6 = d0 + 1.0..........................	[entry: d0 ]	[exit: $d6 ]
$i5 = (int) $d6.........................	[entry: $d6 ]	[exit: $i5 ]
$d7 = (double) $i5......................	[entry: $i5 ]	[exit: $d7 ]
return $d7..............................	[entry: $d7 ]	[exit: ]
$i4 = (int) d0..........................	[entry: d0 ]	[exit: $i4 ]
$d5 = (double) $i4......................	[entry: $i4 ]	[exit: $d5 ]
return $d5..............................	[entry: $d5 ]	[exit: ]
********************
Class Name: Maths.NumberOfDigits, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = newarray (int)[9].................	[entry: ]	[exit: $r0 ]
$r0[0] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 12.............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 123............................	[entry: $r0 ]	[exit: $r0 ]
$r0[3] = 1234...........................	[entry: $r0 ]	[exit: $r0 ]
$r0[4] = -12345.........................	[entry: $r0 ]	[exit: $r0 ]
$r0[5] = 123456.........................	[entry: $r0 ]	[exit: $r0 ]
$r0[6] = 1234567........................	[entry: $r0 ]	[exit: $r0 ]
$r0[7] = 12345678.......................	[entry: $r0 ]	[exit: $r0 ]
$r0[8] = 123456789......................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
i13 = 0.................................	[entry: r1 ]	[exit: i13 r1 ]
$i0 = lengthof r1.......................	[entry: i13 r1 ]	[exit: r1 i13 $i0 ]
if i13 >= $i0 goto return...............	[entry: r1 i13 $i0 ]	[exit: r1 i13 ]
$z0 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 ]	[exit: r1 i13 $z0 ]
if $z0 != 0 goto $z1 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $z0 ]	[exit: r1 i13 ]
$i10 = r1[i13]..........................	[entry: r1 i13 ]	[exit: r1 i13 $i10 ]
$i11 = staticinvoke <Maths.NumberOfDigits: int numberOfDigits(int)>($i10)	[entry: r1 i13 $i10 ]	[exit: r1 $i11 i13 ]
$i12 = i13 + 1..........................	[entry: r1 $i11 i13 ]	[exit: r1 i13 $i11 $i12 ]
if $i11 == $i12 goto $z1 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $i11 $i12 ]	[exit: r1 i13 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 ]	[exit: r1 i13 $z1 ]
if $z1 != 0 goto $z2 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $z1 ]	[exit: r1 i13 ]
$i7 = r1[i13]...........................	[entry: r1 i13 ]	[exit: r1 i13 $i7 ]
$i8 = staticinvoke <Maths.NumberOfDigits: int numberOfDigitsFast(int)>($i7)	[entry: r1 i13 $i7 ]	[exit: r1 $i8 i13 ]
$i9 = i13 + 1...........................	[entry: r1 $i8 i13 ]	[exit: r1 i13 $i8 $i9 ]
if $i8 == $i9 goto $z2 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $i8 $i9 ]	[exit: r1 i13 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 ]	[exit: r1 i13 $z2 ]
if $z2 != 0 goto $z3 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $z2 ]	[exit: r1 i13 ]
$i4 = r1[i13]...........................	[entry: r1 i13 ]	[exit: r1 i13 $i4 ]
$i5 = staticinvoke <Maths.NumberOfDigits: int numberOfDigitsFaster(int)>($i4)	[entry: r1 i13 $i4 ]	[exit: r1 $i5 i13 ]
$i6 = i13 + 1...........................	[entry: r1 $i5 i13 ]	[exit: r1 i13 $i5 $i6 ]
if $i5 == $i6 goto $z3 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 $i5 $i6 ]	[exit: r1 i13 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z3 = <Maths.NumberOfDigits: boolean $assertionsDisabled>	[entry: r1 i13 ]	[exit: r1 i13 $z3 ]
if $z3 != 0 goto i13 = i13 + 1..........	[entry: r1 i13 $z3 ]	[exit: r1 i13 ]
$i1 = r1[i13]...........................	[entry: r1 i13 ]	[exit: r1 i13 $i1 ]
$i2 = staticinvoke <Maths.NumberOfDigits: int numberOfDigitsRecursion(int)>($i1)	[entry: r1 i13 $i1 ]	[exit: r1 $i2 i13 ]
$i3 = i13 + 1...........................	[entry: r1 $i2 i13 ]	[exit: r1 i13 $i2 $i3 ]
if $i2 == $i3 goto i13 = i13 + 1........	[entry: r1 i13 $i2 $i3 ]	[exit: r1 i13 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
i13 = i13 + 1...........................	[entry: r1 i13 ]	[exit: i13 r1 ]
goto [?= $i0 = lengthof r1].............	[entry: i13 r1 ]	[exit: i13 r1 ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AliquotSum, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r4 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$i3 = staticinvoke <Maths.AliquotSum: int aliquotSum(int)>(1)	[entry: ]	[exit: $i3 ]
if $i3 == 0 goto $z1 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $i3 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z1 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$i2 = staticinvoke <Maths.AliquotSum: int aliquotSum(int)>(6)	[entry: ]	[exit: $i2 ]
if $i2 == 6 goto $z2 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $i2 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z2 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$i1 = staticinvoke <Maths.AliquotSum: int aliquotSum(int)>(15)	[entry: ]	[exit: $i1 ]
if $i1 == 9 goto $z3 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: $i1 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z3 = <Maths.AliquotSum: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto return.................	[entry: $z3 ]	[exit: ]
$i0 = staticinvoke <Maths.AliquotSum: int aliquotSum(int)>(19)	[entry: ]	[exit: $i0 ]
if $i0 == 1 goto return.................	[entry: $i0 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AliquotSum, Method Name: aliquotSum, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i3 = 0..................................	[entry: i0 ]	[exit: i3 i0 ]
i4 = 1..................................	[entry: i3 i0 ]	[exit: i3 i4 i0 ]
i1 = i0 / 2.............................	[entry: i3 i4 i0 ]	[exit: i3 i0 i4 i1 ]
if i4 > i1 goto return i3...............	[entry: i3 i0 i4 i1 ]	[exit: i3 i1 i0 i4 ]
$i2 = i0 % i4...........................	[entry: i3 i1 i0 i4 ]	[exit: i3 i0 i1 i4 $i2 ]
if $i2 != 0 goto i4 = i4 + 1............	[entry: i3 i0 i1 i4 $i2 ]	[exit: i3 i0 i1 i4 ]
i3 = i3 + i4............................	[entry: i0 i1 i3 i4 ]	[exit: i3 i0 i1 i4 ]
i4 = i4 + 1.............................	[entry: i3 i0 i1 i4 ]	[exit: i3 i0 i4 i1 ]
goto [?= (branch)]......................	[entry: i3 i0 i4 i1 ]	[exit: i3 i0 i4 i1 ]
return i3...............................	[entry: i3 ]	[exit: ]
********************
Class Name: Maths.PythagoreanTriple, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r6 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z11 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(3, 4, 5)	[entry: ]	[exit: $z11 ]
if $z11 != 0 goto $z1 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z11 ]	[exit: ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>()>()	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
$z1 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z10 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(5, 12, 13)	[entry: ]	[exit: $z10 ]
if $z10 != 0 goto $z2 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z10 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z2 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z9 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(6, 8, 10)	[entry: ]	[exit: $z9 ]
if $z9 != 0 goto $z3 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z3 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z8 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(10, 20, 30)	[entry: ]	[exit: $z8 ]
if $z8 == 0 goto $z4 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z4 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto $z5 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z4 ]	[exit: ]
$z7 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(6, 8, 100)	[entry: ]	[exit: $z7 ]
if $z7 == 0 goto $z5 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z5 = <Maths.PythagoreanTriple: boolean $assertionsDisabled>	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$z6 = staticinvoke <Maths.PythagoreanTriple: boolean isPythagTriple(int,int,int)>(-1, -1, 1)	[entry: ]	[exit: $z6 ]
if $z6 == 0 goto return.................	[entry: $z6 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PythagoreanTriple, Method Name: isPythagTriple, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
i1 := @parameter1: int..................	[entry: i0 ]	[exit: i1 i0 ]
i2 := @parameter2: int..................	[entry: i1 i0 ]	[exit: i2 i1 i0 ]
if i0 <= 0 goto return 0................	[entry: i2 i1 i0 ]	[exit: i0 i2 i1 ]
if i1 <= 0 goto return 0................	[entry: i0 i2 i1 ]	[exit: i1 i0 i2 ]
if i2 > 0 goto $i4 = i0 * i0............	[entry: i1 i0 i2 ]	[exit: i2 i1 i0 ]
return 0................................	[entry: ]	[exit: ]
$i4 = i0 * i0...........................	[entry: i2 i1 i0 ]	[exit: i2 $i4 i1 ]
$i3 = i1 * i1...........................	[entry: i2 $i4 i1 ]	[exit: i2 $i4 $i3 ]
$i6 = $i4 + $i3.........................	[entry: i2 $i4 $i3 ]	[exit: $i6 i2 ]
$i5 = i2 * i2...........................	[entry: $i6 i2 ]	[exit: $i6 $i5 ]
if $i6 != $i5 goto $z0 = 0..............	[entry: $i6 $i5 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.PerfectSquare, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r5 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$z0 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: ]	[exit: $z0 ]
if $z0 != 0 goto $z1 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z0 ]	[exit: ]
$z9 = staticinvoke <Maths.PerfectSquare: boolean isPerfectSquare(int)>(-1)	[entry: ]	[exit: $z9 ]
if $z9 == 0 goto $z1 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z9 ]	[exit: ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>()>()	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
$z1 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: ]	[exit: $z1 ]
if $z1 != 0 goto $z2 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z1 ]	[exit: ]
$z8 = staticinvoke <Maths.PerfectSquare: boolean isPerfectSquare(int)>(3)	[entry: ]	[exit: $z8 ]
if $z8 == 0 goto $z2 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z8 ]	[exit: ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>()>()	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
$z2 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: ]	[exit: $z2 ]
if $z2 != 0 goto $z3 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z2 ]	[exit: ]
$z7 = staticinvoke <Maths.PerfectSquare: boolean isPerfectSquare(int)>(5)	[entry: ]	[exit: $z7 ]
if $z7 == 0 goto $z3 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z7 ]	[exit: ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>()>()	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
$z3 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: ]	[exit: $z3 ]
if $z3 != 0 goto $z4 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z3 ]	[exit: ]
$z6 = staticinvoke <Maths.PerfectSquare: boolean isPerfectSquare(int)>(9)	[entry: ]	[exit: $z6 ]
if $z6 != 0 goto $z4 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: $z6 ]	[exit: ]
$r1 = new java.lang.AssertionError......	[entry: ]	[exit: $r1 ]
specialinvoke $r1.<java.lang.AssertionError: void <init>()>()	[entry: $r1 ]	[exit: $r1 ]
throw $r1...............................	[entry: $r1 ]	[exit: ]
$z4 = <Maths.PerfectSquare: boolean $assertionsDisabled>	[entry: ]	[exit: $z4 ]
if $z4 != 0 goto return.................	[entry: $z4 ]	[exit: ]
$z5 = staticinvoke <Maths.PerfectSquare: boolean isPerfectSquare(int)>(100)	[entry: ]	[exit: $z5 ]
if $z5 != 0 goto return.................	[entry: $z5 ]	[exit: ]
$r0 = new java.lang.AssertionError......	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<java.lang.AssertionError: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
throw $r0...............................	[entry: $r0 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.PerfectSquare, Method Name: isPerfectSquare, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
i0 := @parameter0: int..................	[entry: ]	[exit: i0 ]
$d0 = (double) i0.......................	[entry: i0 ]	[exit: i0 $d0 ]
$d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)	[entry: i0 $d0 ]	[exit: i0 $d1 ]
i1 = (int) $d1..........................	[entry: i0 $d1 ]	[exit: i0 i1 ]
$i2 = i1 * i1...........................	[entry: i0 i1 ]	[exit: $i2 i0 ]
if $i2 != i0 goto $z0 = 0...............	[entry: $i2 i0 ]	[exit: ]
$z0 = 1.................................	[entry: ]	[exit: $z0 ]
goto [?= return $z0]....................	[entry: $z0 ]	[exit: $z0 ]
$z0 = 0.................................	[entry: ]	[exit: $z0 ]
return $z0..............................	[entry: $z0 ]	[exit: ]
********************
Class Name: Maths.AbsoluteMin, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r13 := @parameter0: java.lang.String[]..	[entry: ]	[exit: ]
$r0 = newarray (int)[3].................	[entry: ]	[exit: $r0 ]
$r0[0] = 4..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[1] = 0..............................	[entry: $r0 ]	[exit: $r0 ]
$r0[2] = 16.............................	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
$z0 = <Maths.AbsoluteMin: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $r2 = newarray (int)[3]	[entry: r1 $z0 ]	[exit: r1 ]
$i1 = staticinvoke <Maths.AbsoluteMin: int absMin(int[])>(r1)	[entry: r1 ]	[exit: $i1 ]
if $i1 == 0 goto $r2 = newarray (int)[3]	[entry: $i1 ]	[exit: ]
$r12 = new java.lang.AssertionError.....	[entry: ]	[exit: $r12 ]
specialinvoke $r12.<java.lang.AssertionError: void <init>()>()	[entry: $r12 ]	[exit: $r12 ]
throw $r12..............................	[entry: $r12 ]	[exit: ]
$r2 = newarray (int)[3].................	[entry: ]	[exit: $r2 ]
$r2[0] = 3..............................	[entry: $r2 ]	[exit: $r2 ]
$r2[1] = -10............................	[entry: $r2 ]	[exit: $r2 ]
$r2[2] = -2.............................	[entry: $r2 ]	[exit: $r2 ]
r3 = $r2................................	[entry: $r2 ]	[exit: r3 ]
$r5 = <java.lang.System: java.io.PrintStream out>	[entry: r3 ]	[exit: $r5 r3 ]
$r4 = new java.lang.StringBuilder.......	[entry: $r5 r3 ]	[exit: $r5 r3 $r4 ]
specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()	[entry: $r5 r3 $r4 ]	[exit: $r5 r3 $r4 ]
$r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("absMin(")	[entry: $r5 r3 $r4 ]	[exit: $r5 $r6 r3 ]
$r7 = staticinvoke <java.util.Arrays: java.lang.String toString(int[])>(r3)	[entry: $r5 $r6 r3 ]	[exit: $r5 r3 $r7 $r6 ]
$r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)	[entry: $r5 r3 $r7 $r6 ]	[exit: $r5 r3 $r8 ]
$r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") = ")	[entry: $r5 r3 $r8 ]	[exit: $r5 $r9 r3 ]
$i0 = staticinvoke <Maths.AbsoluteMin: int absMin(int[])>(r3)	[entry: $r5 $r9 r3 ]	[exit: $r5 $i0 $r9 ]
$r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)	[entry: $r5 $i0 $r9 ]	[exit: $r5 $r10 ]
$r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()	[entry: $r5 $r10 ]	[exit: $r11 $r5 ]
virtualinvoke $r5.<java.io.PrintStream: void println(java.lang.String)>($r11)	[entry: $r11 $r5 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: Maths.AbsoluteMin, Method Name: absMin, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r0 := @parameter0: int[]................	[entry: ]	[exit: r0 ]
i4 = r0[0]..............................	[entry: r0 ]	[exit: i4 r0 ]
i5 = 1..................................	[entry: i4 r0 ]	[exit: i4 i5 r0 ]
i0 = lengthof r0........................	[entry: i4 i5 r0 ]	[exit: i4 r0 i5 i0 ]
if i5 >= i0 goto return i4..............	[entry: i4 r0 i5 i0 ]	[exit: i4 i0 r0 i5 ]
$i1 = r0[i5]............................	[entry: i0 i4 r0 i5 ]	[exit: i0 i5 r0 i4 $i1 ]
$i2 = staticinvoke <java.lang.Math: int abs(int)>($i1)	[entry: i0 i5 r0 i4 $i1 ]	[exit: i0 i5 r0 $i2 i4 ]
$i3 = staticinvoke <java.lang.Math: int abs(int)>(i4)	[entry: i0 i5 r0 $i2 i4 ]	[exit: i4 i0 i5 r0 $i2 $i3 ]
if $i2 >= $i3 goto i5 = i5 + 1..........	[entry: i4 i0 i5 r0 $i2 $i3 ]	[exit: i4 r0 i0 i5 ]
i4 = r0[i5].............................	[entry: i0 r0 i5 ]	[exit: i4 r0 i0 i5 ]
i5 = i5 + 1.............................	[entry: i4 r0 i0 i5 ]	[exit: i4 r0 i5 i0 ]
goto [?= (branch)]......................	[entry: i4 r0 i5 i0 ]	[exit: i4 r0 i5 i0 ]
return i4...............................	[entry: i4 ]	[exit: ]
********************
Class Name: BSTRecursive, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new BSTIterative..................	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<BSTIterative: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z0 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<BSTIterative: boolean find(int)>(4)	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 == 0 goto $z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("4 is not yet present in BST")	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 $z1 ]	[exit: r1 ]
$z8 = virtualinvoke r1.<BSTIterative: boolean find(int)>(10)	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 $z8 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("10 should be present in BST")	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z2 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z2 ]	[exit: r1 ]
$z7 = virtualinvoke r1.<BSTIterative: boolean find(int)>(9)	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 == 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z7 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("9 was just deleted from BST")	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 ]	[exit: r1 ]
$z3 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 $z3 ]	[exit: r1 ]
$z6 = virtualinvoke r1.<BSTIterative: boolean find(int)>(1)	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 == 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 $z6 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Since 1 was not present so find deleting would do no change")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(70)	[entry: r1 ]	[exit: r1 ]
$z4 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z4 ]	[exit: r1 ]
$z5 = virtualinvoke r1.<BSTIterative: boolean find(int)>(70)	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z5 ]	[exit: r1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("70 was inserted but not found")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: BSTRecursive, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/classes/
r7 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
$r0 = new BSTIterative..................	[entry: ]	[exit: $r0 ]
specialinvoke $r0.<BSTIterative: void <init>()>()	[entry: $r0 ]	[exit: $r0 ]
r1 = $r0................................	[entry: $r0 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(5)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(10)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z0 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z0 ]
if $z0 != 0 goto $z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 $z0 ]	[exit: r1 ]
$z9 = virtualinvoke r1.<BSTIterative: boolean find(int)>(4)	[entry: r1 ]	[exit: r1 $z9 ]
if $z9 == 0 goto $z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 $z9 ]	[exit: r1 ]
$r6 = new java.lang.AssertionError......	[entry: ]	[exit: $r6 ]
specialinvoke $r6.<java.lang.AssertionError: void <init>(java.lang.Object)>("4 is not yet present in BST")	[entry: $r6 ]	[exit: $r6 ]
throw $r6...............................	[entry: $r6 ]	[exit: ]
$z1 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z1 ]
if $z1 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 $z1 ]	[exit: r1 ]
$z8 = virtualinvoke r1.<BSTIterative: boolean find(int)>(10)	[entry: r1 ]	[exit: r1 $z8 ]
if $z8 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 $z8 ]	[exit: r1 ]
$r5 = new java.lang.AssertionError......	[entry: ]	[exit: $r5 ]
specialinvoke $r5.<java.lang.AssertionError: void <init>(java.lang.Object)>("10 should be present in BST")	[entry: $r5 ]	[exit: $r5 ]
throw $r5...............................	[entry: $r5 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(9)	[entry: r1 ]	[exit: r1 ]
$z2 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z2 ]
if $z2 != 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z2 ]	[exit: r1 ]
$z7 = virtualinvoke r1.<BSTIterative: boolean find(int)>(9)	[entry: r1 ]	[exit: r1 $z7 ]
if $z7 == 0 goto virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 $z7 ]	[exit: r1 ]
$r4 = new java.lang.AssertionError......	[entry: ]	[exit: $r4 ]
specialinvoke $r4.<java.lang.AssertionError: void <init>(java.lang.Object)>("9 was just deleted from BST")	[entry: $r4 ]	[exit: $r4 ]
throw $r4...............................	[entry: $r4 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void remove(int)>(1)	[entry: r1 ]	[exit: r1 ]
$z3 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z3 ]
if $z3 != 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 $z3 ]	[exit: r1 ]
$z6 = virtualinvoke r1.<BSTIterative: boolean find(int)>(1)	[entry: r1 ]	[exit: r1 $z6 ]
if $z6 == 0 goto virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 $z6 ]	[exit: r1 ]
$r3 = new java.lang.AssertionError......	[entry: ]	[exit: $r3 ]
specialinvoke $r3.<java.lang.AssertionError: void <init>(java.lang.Object)>("Since 1 was not present so find deleting would do no change")	[entry: $r3 ]	[exit: $r3 ]
throw $r3...............................	[entry: $r3 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void add(int)>(20)	[entry: r1 ]	[exit: r1 ]
virtualinvoke r1.<BSTIterative: void add(int)>(70)	[entry: r1 ]	[exit: r1 ]
$z4 = <BSTRecursive: boolean $assertionsDisabled>	[entry: r1 ]	[exit: r1 $z4 ]
if $z4 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z4 ]	[exit: r1 ]
$z5 = virtualinvoke r1.<BSTIterative: boolean find(int)>(70)	[entry: r1 ]	[exit: r1 $z5 ]
if $z5 != 0 goto virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 $z5 ]	[exit: r1 ]
$r2 = new java.lang.AssertionError......	[entry: ]	[exit: $r2 ]
specialinvoke $r2.<java.lang.AssertionError: void <init>(java.lang.Object)>("70 was inserted but not found")	[entry: $r2 ]	[exit: $r2 ]
throw $r2...............................	[entry: $r2 ]	[exit: ]
virtualinvoke r1.<BSTIterative: void inorder()>()	[entry: r1 ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: bankingproject.Main, Method Name: main, sourceDirectory: /home/jiaqi/Downloads/JavaProject/BankingSystem/
r8 := @parameter0: java.lang.String[]...	[entry: ]	[exit: ]
staticinvoke <Printers.ScreenCleaner: void CLS()>()	[entry: ]	[exit: ]
$r0 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r0 ]
virtualinvoke $r0.<java.io.PrintStream: void println(java.lang.String)>("  ____              _    _               ____            _                   _ _ __________ \n | __ )  __ _ _ __ | | _(_)_ __   __ _  / ___| _   _ ___| |_ ___ _ __ ___   / / |___ /___  |\n |  _ \\ / _` | \'_ \\| |/ / | \'_ \\ / _` | \\___ \\| | | / __| __/ _ \\ \'_ ` _ \\  | | | |_ \\  / / \n | |_) | (_| | | | |   <| | | | | (_| |  ___) | |_| \\__ \\ ||  __/ | | | | | | | |___) |/ /  \n |____/ \\__,_|_| |_|_|\\_\\_|_| |_|\\__, | |____/ \\__, |___/\\__\\___|_| |_| |_| |_|_|____//_/   \n                                 |___/         |___/                                        \n")	[entry: $r0 ]	[exit: ]
staticinvoke <Printers.BoxPrinter: void BoxPrinter(java.lang.String)>("WELCOME TO BANKING SYSTEM 1137")	[entry: ]	[exit: ]
$r1 = <java.lang.System: java.io.PrintStream out>	[entry: ]	[exit: $r1 ]
virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>("\nPRESS ENTER TO PROCEED...")	[entry: $r1 ]	[exit: ]
$r2 = new java.util.Scanner.............	[entry: ]	[exit: $r2 ]
$r3 = <java.lang.System: java.io.InputStream in>	[entry: $r2 ]	[exit: $r3 $r2 ]
specialinvoke $r2.<java.util.Scanner: void <init>(java.io.InputStream)>($r3)	[entry: $r3 $r2 ]	[exit: $r2 ]
r4 = $r2................................	[entry: $r2 ]	[exit: r4 ]
virtualinvoke r4.<java.util.Scanner: java.lang.String nextLine()>()	[entry: r4 ]	[exit: ]
staticinvoke <Printers.BoxPrinter: void BoxPrinter(java.lang.String)>("SYSTEM LOGIN")	[entry: ]	[exit: ]
$i0 = staticinvoke <bankingproject.LoginScreen: int loginCheck()>()	[entry: ]	[exit: $i0 ]
<bankingproject.Main: int UserID> = $i0.	[entry: $i0 ]	[exit: ]
$i1 = <bankingproject.Main: int UserID>.	[entry: ]	[exit: $i1 ]
if $i1 == -1 goto return................	[entry: $i1 ]	[exit: ]
$r6 = "admin"...........................	[entry: ]	[exit: $r6 ]
$i2 = <bankingproject.Main: int UserID>.	[entry: $r6 ]	[exit: $r6 $i2 ]
$r7 = staticinvoke <bankingproject.DatabaseAccess: java.lang.String IdToUsername(int)>($i2)	[entry: $r6 $i2 ]	[exit: $r7 $r6 ]
$z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7)	[entry: $r7 $r6 ]	[exit: $z0 ]
if $z0 == 0 goto staticinvoke <bankingproject.AppMenus: void SimpleAcc()>()	[entry: $z0 ]	[exit: ]
staticinvoke <bankingproject.AppMenus: void SuperAcc()>()	[entry: ]	[exit: ]
staticinvoke <bankingproject.AppMenus: void SimpleAcc()>()	[entry: ]	[exit: ]
return..................................	[entry: ]	[exit: ]
********************
Class Name: bankingproject.Main, Method Name: getIDuser, sourceDirectory: /home/jiaqi/Downloads/JavaProject/BankingSystem/
$i0 = <bankingproject.Main: int UserID>.	[entry: ]	[exit: $i0 ]
return $i0..............................	[entry: $i0 ]	[exit: ]
